<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>码客Mark</title>
  <subtitle>预测未来最好的方法是在现在创造未来</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://code.idea4j.com/"/>
  <updated>2020-08-04T05:00:30.629Z</updated>
  <id>http://code.idea4j.com/</id>
  
  <author>
    <name>markee</name>
    <email>wangjinguang66@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用maxwell</title>
    <link href="http://code.idea4j.com/2020/07/27/quickstart/"/>
    <id>http://code.idea4j.com/2020/07/27/quickstart/</id>
    <published>2020-07-27T03:02:09.000Z</published>
    <updated>2020-08-04T05:00:30.629Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><hr>
<ul>
<li>Download binary distro: <a href="https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz" target="_blank" rel="external">https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz</a></li>
<li>Sources and bug tracking is available on github: <a href="https://github.com/zendesk/maxwell" target="_blank" rel="external">https://github.com/zendesk/maxwell</a></li>
<li>Obligatory copy/paste to terminal:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl -sLo - https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz \</div><div class="line">       | tar zxvf -</div><div class="line">cd maxwell-1.26.3</div></pre></td></tr></table></figure>
<p>or get the docker image:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull zendesk/maxwell</div></pre></td></tr></table></figure>
<p>or on Mac OS X with homebrew installed:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install maxwell</div></pre></td></tr></table></figure>
<h3 id="Configure-Mysql"><a href="#Configure-Mysql" class="headerlink" title="Configure Mysql"></a>Configure Mysql</h3><hr>
<p><em>Server Config:</em> Ensure your server_id is configured, and that row-based replication is turned on.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vi my.cnf</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">server_id=1</div><div class="line">log-bin=master</div><div class="line">binlog_format=row</div></pre></td></tr></table></figure>
<p>Or on a running server:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; set global binlog_format=ROW;</div><div class="line">mysql&gt; set global binlog_row_image=FULL;</div></pre></td></tr></table></figure>
<p>note: <code>binlog_format</code> is a session-based property.  You will need to shutdown all active connections to fully convert<br>to row-based replication.</p>
<p><em>Permissions:</em> Maxwell needs permissions to store state in the database specified by the <code>schema_database</code> option (default <code>maxwell</code>).<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE USER &apos;maxwell&apos;@&apos;%&apos; IDENTIFIED BY &apos;XXXXXX&apos;;</div><div class="line">mysql&gt; GRANT ALL ON maxwell.* TO &apos;maxwell&apos;@&apos;%&apos;;</div><div class="line">mysql&gt; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &apos;maxwell&apos;@&apos;%&apos;;</div><div class="line"></div><div class="line"># or for running maxwell locally:</div><div class="line"></div><div class="line">mysql&gt; CREATE USER &apos;maxwell&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;XXXXXX&apos;;</div><div class="line">mysql&gt; GRANT ALL ON maxwell.* TO &apos;maxwell&apos;@&apos;localhost&apos;;</div><div class="line">mysql&gt; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &apos;maxwell&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure></p>
<h3 id="Run-Maxwell"><a href="#Run-Maxwell" class="headerlink" title="Run Maxwell"></a>Run Maxwell</h3><hr>
<h4 id="Command-line"><a href="#Command-line" class="headerlink" title="Command line"></a>Command line</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; --producer=stdout</div></pre></td></tr></table></figure>
<h4 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \</div><div class="line">    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=stdout</div></pre></td></tr></table></figure>
<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>Boot kafka as described here:  <a href="http://kafka.apache.org/documentation.html#quickstart" target="_blank" rel="external">http://kafka.apache.org/documentation.html#quickstart</a>, then:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \</div><div class="line">   --producer=kafka --kafka.bootstrap.servers=localhost:9092 --kafka_topic=maxwell</div></pre></td></tr></table></figure>
<p>(or docker):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \</div><div class="line">    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kafka \</div><div class="line">    --kafka.bootstrap.servers=$KAFKA_HOST:$KAFKA_PORT --kafka_topic=maxwell</div></pre></td></tr></table></figure>
<h4 id="Kinesis"><a href="#Kinesis" class="headerlink" title="Kinesis"></a>Kinesis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --rm --name maxwell -v `cd &amp;&amp; pwd`/.aws:/root/.aws zendesk/maxwell sh -c &apos;cp /app/kinesis-producer-library.properties.example /app/kinesis-producer-library.properties &amp;&amp; echo &quot;Region=$AWS_DEFAULT_REGION&quot; &gt;&gt; /app/kinesis-producer-library.properties &amp;&amp; bin/maxwell --user=$MYSQL_USERNAME --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kinesis --kinesis_stream=$KINESIS_STREAM&apos;</div></pre></td></tr></table></figure>
<h4 id="Google-Cloud-Pub-Sub"><a href="#Google-Cloud-Pub-Sub" class="headerlink" title="Google Cloud Pub/Sub"></a>Google Cloud Pub/Sub</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \</div><div class="line">  --producer=pubsub --pubsub_project_id=&apos;$PUBSUB_PROJECT_ID&apos; \</div><div class="line">  --pubsub_topic=&apos;maxwell&apos;</div></pre></td></tr></table></figure>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \</div><div class="line">    --producer=rabbitmq --rabbitmq_host=&apos;rabbitmq.hostname&apos;</div></pre></td></tr></table></figure>
<h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \</div><div class="line">    --producer=redis --redis_host=redis.hostname</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Download&quot;&gt;&lt;a href=&quot;#Download&quot; class=&quot;headerlink&quot; title=&quot;Download&quot;&gt;&lt;/a&gt;Download&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Download binary distro: &lt;a href=&quot;ht
    
    </summary>
    
      <category term="maxwell" scheme="http://code.idea4j.com/categories/maxwell/"/>
    
    
      <category term="mysql" scheme="http://code.idea4j.com/tags/mysql/"/>
    
      <category term="maxwell" scheme="http://code.idea4j.com/tags/maxwell/"/>
    
  </entry>
  
  <entry>
    <title>使用maxwell实时同步mysql数据到消息队列(rabbitMQ)</title>
    <link href="http://code.idea4j.com/2020/07/27/%E4%BD%BF%E7%94%A8maxwell%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5mysql%E6%95%B0%E6%8D%AE%E5%88%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97(rabbitMQ)/"/>
    <id>http://code.idea4j.com/2020/07/27/使用maxwell实时同步mysql数据到消息队列(rabbitMQ)/</id>
    <published>2020-07-27T03:02:09.000Z</published>
    <updated>2020-08-04T05:11:06.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用maxwell实时同步mysql数据到消息队列-rabbitMQ"><a href="#使用maxwell实时同步mysql数据到消息队列-rabbitMQ" class="headerlink" title="使用maxwell实时同步mysql数据到消息队列(rabbitMQ)"></a>使用maxwell实时同步mysql数据到消息队列(rabbitMQ)</h2><p>maxwell（麦克斯韦）官网：<a href="http://maxwells-daemon.io/" target="_blank" rel="external">http://maxwells-daemon.io/</a><br><a id="more"></a></p>
<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><p>需要mysql开启binlog，而binlog默认是关闭的，需要开启，并且为了保证<em>同步数据的一致性</em>，使用的日志格式为<em>row-based replication(RBR)</em>，新建或修改<code>my.conf</code>开启binlog。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">log-bin=mysql-bin #添加这一行就ok</div><div class="line">binlog-format=ROW #选择row模式</div><div class="line">server_id=1 #随机指定一个不能和其他集群中机器重名的字符串，如果只有一台机器，那就可以随便指定了</div></pre></td></tr></table></figure>
<p>重启mysql, 查询是否已开启bin</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'%log_bin%'</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Variable_name</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>log_bin</td>
<td>on</td>
</tr>
<tr>
<td>sql_log_bin</td>
<td>on</td>
</tr>
</tbody>
</table>
<h3 id="配置jdk环境（略）"><a href="#配置jdk环境（略）" class="headerlink" title="配置jdk环境（略）"></a>配置jdk环境（略）</h3><h3 id="安装Maxwell"><a href="#安装Maxwell" class="headerlink" title="安装Maxwell"></a>安装Maxwell</h3><p>在<a href="https://github.com/zendesk/maxwell/releases这里下载对应版本。" target="_blank" rel="external">https://github.com/zendesk/maxwell/releases这里下载对应版本。</a></p>
<p>解压，修改config.properties.example为config.properties，然后根据自己的实际情况修改配置</p>
<h3 id="配置rabbitMQ环境"><a href="#配置rabbitMQ环境" class="headerlink" title="配置rabbitMQ环境"></a>配置rabbitMQ环境</h3><h3 id="配置maxwell发送消息到rabbitMQ"><a href="#配置maxwell发送消息到rabbitMQ" class="headerlink" title="配置maxwell发送消息到rabbitMQ"></a>配置maxwell发送消息到rabbitMQ</h3><p>修改maxwell的config.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"># tl;dr config 生产环境配置为info级别</div><div class="line">log_level=DEBUG</div><div class="line"> </div><div class="line">producer=rabbitmq</div><div class="line"> </div><div class="line"># mysql login info, mysql用户必须拥有读取binlog权限和新建库表的权限</div><div class="line">host=127.0.0.1</div><div class="line">user=user</div><div class="line">password=pwd</div><div class="line"> </div><div class="line">output_nulls=true</div><div class="line"># options to pass into the jdbc connection, given as opt=val&amp;opt2=val2</div><div class="line">#jdbc_options=opt1=100&amp;opt2=hello</div><div class="line">jdbc_options=autoReconnet=true</div><div class="line"> </div><div class="line">#需要同步的数据库，表，及不包含的字段</div><div class="line">#filter=exclude: *.*, include: foo.*, include: bar.baz</div><div class="line">filter=exclude: *.*,include: minifanka.*</div><div class="line"> </div><div class="line">#replica_server_id 和 client_id 唯一标示，用于集群部署</div><div class="line">replica_server_id=64</div><div class="line">client_id=maxwell_dev</div><div class="line"> </div><div class="line">metrics_type=http</div><div class="line">metrics_slf4j_interval=60</div><div class="line">http_port=8111</div><div class="line">http_diagnostic=true # default false</div><div class="line"> </div><div class="line">#rabbitmq</div><div class="line">rabbitmq_host=10.255.200.161</div><div class="line">rabbitmq_port=5672</div><div class="line">rabbitmq_user=admin</div><div class="line">rabbitmq_pass=admin123</div><div class="line">rabbitmq_virtual_host=/</div><div class="line">rabbitmq_exchange=maxwell</div><div class="line">rabbitmq_exchange_type=topic</div><div class="line">rabbitmq_exchange_durable=false</div><div class="line">rabbitmq_exchange_autodelete=false</div><div class="line">rabbitmq_routing_key_template=%db%.%table%</div><div class="line">rabbitmq_message_persistent=false</div><div class="line">rabbitmq_declare_exchange=true</div></pre></td></tr></table></figure>
<p>启动maxwell</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./bin/maxwell</div></pre></td></tr></table></figure>
<p>启动成功后，会自动生成maxwell库，该库记录了maxwell同步的状态，最后一次同步的id等等信息，在主库失败或同步异常后，只要maxwell库存在，下次同步会根据最后一次同步的id。</p>
<p>rabbitMQ控制台中会自动创建名称为maxwell的exchange（该exchange为config.properties中配置的）</p>
<p>新建Queue并绑定exchange，并设置routingkey为%db%.%table%（该routingkey为config.properties中配置）</p>
<p>可以使用rabbitmqctl 创建队列，交换机</p>
<ul>
<li>创建交换机</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl <span class="built_in">eval</span> <span class="string">'rabbit_exchange:declare(&#123;resource, &lt;&lt;"test"&gt;&gt;, exchange, &lt;&lt;"ac.exchange.alarm"&gt;&gt;&#125;, direct, true, false, false, []).'</span></div></pre></td></tr></table></figure>
<ul>
<li>创建队列</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl <span class="built_in">eval</span> <span class="string">'rabbit_amqqueue:declare(&#123;resource, &lt;&lt;"test"&gt;&gt;, queue, &lt;&lt;"ac.queue.alarm"&gt;&gt;&#125;, true, false, [], none).'</span></div></pre></td></tr></table></figure>
<ul>
<li>绑定队列和交换机</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl <span class="built_in">eval</span> <span class="string">'rabbit_binding:add(&#123;binding, &#123;resource, &lt;&lt;"test"&gt;&gt;, exchange, &lt;&lt;"ac.exchange.alarm"&gt;&gt;&#125;, &lt;&lt;"ac.routing.key.alarm"&gt;&gt;, &#123;resource, &lt;&lt;"test"&gt;&gt;, queue, &lt;&lt;"ac.queue.alarm"&gt;&gt;&#125;, []&#125;).'</span></div></pre></td></tr></table></figure>
<p>这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.</p>
<h3 id="MQ消费端"><a href="#MQ消费端" class="headerlink" title="MQ消费端"></a>MQ消费端</h3><p>新建一个MaxwellData,接收数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxwellData</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String type;</div><div class="line">    <span class="keyword">private</span> String database;</div><div class="line">    <span class="keyword">private</span> String table;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; old;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxwellData</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.database;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDatabase</span><span class="params">(String database)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.database = database;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.table;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTable</span><span class="params">(String table)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.table = table;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getOld</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.old;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOld</span><span class="params">(Map&lt;String, Object&gt; old)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.old = old;</div><div class="line">    &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>消费者代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RabbitHandler</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"新建的队列名"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">    String s = <span class="keyword">new</span> String(data);</div><div class="line">    MaxwellData maxwellData = decodeMsg(s);</div><div class="line">    logger.info(<span class="string">"maxwellData:"</span> + maxwellData);</div><div class="line">    <span class="comment">//to do</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> MaxwellData <span class="title">decodeMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> JSON.parseObject(msg, MaxwellData.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="全量同步"><a href="#全量同步" class="headerlink" title="全量同步"></a>全量同步</h3><p>使用maxwell-bootstrap命令</p>
<p>./bin/maxwell-bootstrap –database 库名 –table 表名 –host 127.0.0.1 –user 用户 –password 密码 –client_id  config.properties配置的client_id</p>
<p>同步db.table表的所有数据，并指定client_id示maxwell_dev的maxwell执行同步</p>
<p>上一个命令先开着，然后再启动client_id=maxwell_dev的maxwell</p>
<p>./bin/maxwell –client_id maxwell_dev</p>
<p>等待执行完成即可</p>
<h3 id="maxwell异常重启"><a href="#maxwell异常重启" class="headerlink" title="maxwell异常重启"></a>maxwell异常重启</h3><p>如果maxwell挂掉，查询Maxwell数据库中的positions表 </p>
<p> <img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200727094000939.png" alt="image-20200727094000939"></p>
<p>执行nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 &gt;&gt;server.log 2&gt;&amp;1 &amp;</p>
<p>其中<br>–init_position=<strong>mysql-bin.000004:4:0</strong><br><strong>init_position参数mysql-bin.000004:4:0分别为：binlog文件名、position、mawell hearbeat</strong></p>
<p>nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 &gt;&gt;server.log 2&gt;&amp;1 &amp;</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用maxwell实时同步mysql数据到消息队列-rabbitMQ&quot;&gt;&lt;a href=&quot;#使用maxwell实时同步mysql数据到消息队列-rabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;使用maxwell实时同步mysql数据到消息队列(rabbitMQ)&quot;&gt;&lt;/a&gt;使用maxwell实时同步mysql数据到消息队列(rabbitMQ)&lt;/h2&gt;&lt;p&gt;maxwell（麦克斯韦）官网：&lt;a href=&quot;http://maxwells-daemon.io/&quot;&gt;http://maxwells-daemon.io/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="maxwell" scheme="http://code.idea4j.com/categories/maxwell/"/>
    
    
      <category term="mysql" scheme="http://code.idea4j.com/tags/mysql/"/>
    
      <category term="maxwell" scheme="http://code.idea4j.com/tags/maxwell/"/>
    
  </entry>
  
  <entry>
    <title>前后端联调过程</title>
    <link href="http://code.idea4j.com/2020/07/27/%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83%E8%BF%87%E7%A8%8B/"/>
    <id>http://code.idea4j.com/2020/07/27/前后端联调过程/</id>
    <published>2020-07-27T03:02:09.000Z</published>
    <updated>2020-08-04T05:10:16.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前后端联调过程"><a href="#前后端联调过程" class="headerlink" title="前后端联调过程"></a>前后端联调过程</h2><p>鉴于目前前后端联调存在的一些问题，经讨论我们拟已下流程规范前后端联调<br><a id="more"></a></p>
<p><strong>1、需求评审后：</strong> 在需求评审后，前后端相关开发人员小范围进行需求评审，前后端各自捋清楚自己的业务量。</p>
<p><strong>2、准备阶段：</strong> 前后端一起商量需求中需要联调的部分，进行接口的口头协议交流</p>
<p><strong>3、接口定义阶段：</strong> 前后端中的一方根据之前的口头协议拟定出一份详细的接口，并输出<strong>API文档</strong>，对于功能量比较多的项目，可以分阶段，分模块输出相应文档，文档输出有以下要求：</p>
<ul>
<li>相关老接口，比如返回类型为map，不能用swagger明确参数的接口，需要用书面文档输出，明确参数类型及名称等必要属性</li>
<li>新接口，使用swagger定义明确即可</li>
</ul>
<p><strong>完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题，注意：第一份确认并书写好API的接口原则上要求不能大改。</strong></p>
<p><strong>前三步总体时间无特殊情况不能超过一天，若有特殊情况，需要向研发组长说明</strong></p>
<p><strong>4、需求开发阶段：</strong> 双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段（甚至接口），重复步骤3。</p>
<p><strong>注意：后端接口需要充分自测，</strong> 要求自己用swaggerUI传入相关参数测试返回正确结果才行。</p>
<p><strong>5、联调阶段：</strong> 双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前后端联调过程&quot;&gt;&lt;a href=&quot;#前后端联调过程&quot; class=&quot;headerlink&quot; title=&quot;前后端联调过程&quot;&gt;&lt;/a&gt;前后端联调过程&lt;/h2&gt;&lt;p&gt;鉴于目前前后端联调存在的一些问题，经讨论我们拟已下流程规范前后端联调&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="http://code.idea4j.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="工作" scheme="http://code.idea4j.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>如何有效的学习</title>
    <link href="http://code.idea4j.com/2020/07/20/%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://code.idea4j.com/2020/07/20/如何有效的学习/</id>
    <published>2020-07-20T03:02:09.000Z</published>
    <updated>2020-09-28T10:39:46.849Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何有效的学习"><a href="#如何有效的学习" class="headerlink" title="如何有效的学习"></a>如何有效的学习</h2><a id="more"></a>
<pre class="mermaid">graph LR

如何有效的学习 --> 要有学习的意愿
如何有效的学习 --> 要有明确的目标
如何有效的学习 --> 要付诸行动
如何有效的学习 --> 要有产出</pre>



<h3 id="1-要有学习的意愿。"><a href="#1-要有学习的意愿。" class="headerlink" title="1.要有学习的意愿。"></a>1.要有学习的意愿。</h3><p>“授人以鱼不如授人以渔，授人以渔不如授人以欲”，欲望是基础。</p>
<h3 id="2-要明确学习的目标。"><a href="#2-要明确学习的目标。" class="headerlink" title="2.要明确学习的目标。"></a>2.要明确学习的目标。</h3><p>得知道自己也要学什么，明确的提出一个目标，而不是笼统的“好好学习”。</p>
<h3 id="3-付诸实践。"><a href="#3-付诸实践。" class="headerlink" title="3.付诸实践。"></a>3.付诸实践。</h3><p>“千里之行，始于足下”，没有行动，想法再好也没有用。在实践阶段，拆解目标是非常重要的，要把大目标拆成一个个小目标来完成。</p>
<h3 id="4-学习要有产出。"><a href="#4-学习要有产出。" class="headerlink" title="4.学习要有产出。"></a>4.学习要有产出。</h3><p>人其实有生产者和消费者两种角色。如果没有产出的话，只学习本身是一种消费。你每天忙着读书、看专栏，看起来付出了很多，超级努力超级辛苦，但如果没有产出，工作和生活也没有什么改变，那这样的学习和玩一会儿手机、看一会儿电影在本质上并没有太大的区别，只是一种另类的娱乐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何有效的学习&quot;&gt;&lt;a href=&quot;#如何有效的学习&quot; class=&quot;headerlink&quot; title=&quot;如何有效的学习&quot;&gt;&lt;/a&gt;如何有效的学习&lt;/h2&gt;
    
    </summary>
    
      <category term="学习" scheme="http://code.idea4j.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://code.idea4j.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>如何替换 JDK 的类</title>
    <link href="http://code.idea4j.com/2020/07/15/%E5%A6%82%E4%BD%95%E6%9B%BF%E6%8D%A2%20JDK%20%E7%9A%84%E7%B1%BB/"/>
    <id>http://code.idea4j.com/2020/07/15/如何替换 JDK 的类/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T11:14:14.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何替换-JDK-的类"><a href="#如何替换-JDK-的类" class="headerlink" title="如何替换 JDK 的类"></a>如何替换 JDK 的类</h2><h3 id="如何替换jdk中的类呢？Java提供了endorsed技术。"><a href="#如何替换jdk中的类呢？Java提供了endorsed技术。" class="headerlink" title="如何替换jdk中的类呢？Java提供了endorsed技术。"></a>如何替换jdk中的类呢？Java提供了endorsed技术。</h3><p>关于 endorsed ：可以的简单理解为 -Djava.endorsed.dirs 指定的目录面放置的jar文件，将有覆盖系统API的功能。但是能够覆盖的类是有限制的，其中不包括java.lang包中的类(出于安全的考虑)。</p>
<h3 id="为什么必须使用-endorsed-进行替换-jdk-中的类呢？"><a href="#为什么必须使用-endorsed-进行替换-jdk-中的类呢？" class="headerlink" title="为什么必须使用 endorsed 进行替换 jdk 中的类呢？"></a>为什么必须使用 endorsed 进行替换 jdk 中的类呢？</h3><p>因为java是采用双亲委派机制进行加载class类的。而jdk提供的类只能由类加载器Bootstrap进行加载。如果你想要在应用程序中替换掉jdk中的某个类是无法做到的，所以java提供了endorsed来达到你想要替换到系统中的类。</p>
<h3 id="使用endorsed的两种方式："><a href="#使用endorsed的两种方式：" class="headerlink" title="使用endorsed的两种方式："></a>使用endorsed的两种方式：</h3><ul>
<li>运行的时候加上 -Djava.endorsed.dirs=D:\endorsed（jar包存放目录） 参数</li>
<li>将修改后的jar包放在：$JAVA_HOME/jre/lib/endorsed 、$JAVA_HOME/lib/endorsed 下面</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>本实例通过修改ArrayList来试验:</p>
<ol>
<li><p>新建maven工程，在工程中新建java.util.ArrayList</p>
</li>
<li><p>复制jdk中ArrayList源码到自己创建的ArrayList，并修改构造方法如下：</p>
</li>
</ol>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114253815.png" alt=""></p>
<ol>
<li>将工程打包成jar，复制到endorsed文件夹中</li>
<li>新建测试类</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.idea4j.endorsed.test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * -Djava.endorsed.dirs=D:\idea4j-endorsed\endorsed</div><div class="line"> * -XX:+TraceClassLoading</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List list = <span class="keyword">new</span> ArrayList();</div><div class="line">        System.out.println(<span class="number">1</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>修改运行参数，如图</li>
</ol>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114058420.png" alt="image-20200911114058420"></p>
<ol>
<li>运行Test，结果如下：</li>
</ol>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114454953.png" alt="image-20200911114454953"></p>
<p>看到Test类调用了我们修改的ArrayList，说明我们成功覆盖了jdk的类</p>
<p>但我们只调用一次new ArrayList(),为什么日志输出了这么多次呢？</p>
<p>我们在运行参数中在加入-XX:+TraceClassLoading看类加载过程可知，虚拟机启动时，有一些类调用了ArrayList默认构造器</p>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911123505455.png" alt="image-20200911123505455"></p>
<p>上面我们使用了修改运行参数的方法，下面我们再试验第二种方法，把jar包copy到$JAVA_HOME/jre/lib/endorsed下，结果和上面一样。</p>
<p>但是copy到$JAVA_HOME/lib/endorsed下，结果是没有覆盖成功。这是为什么呢？如图，java-home应该为实际运行环境的目录。</p>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911130242199.png" alt="image-20200911130242199"></p>
<p>经查看项目jdk配置</p>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911125011220.png" alt="image-20200911125011220"></p>
<p>classpath指定的是jre，所以，把jar包copy到$JAVA_HOME/jre/lib/endorsed下才能成功也就说的通了。</p>
<p>#### </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何替换-JDK-的类&quot;&gt;&lt;a href=&quot;#如何替换-JDK-的类&quot; class=&quot;headerlink&quot; title=&quot;如何替换 JDK 的类&quot;&gt;&lt;/a&gt;如何替换 JDK 的类&lt;/h2&gt;&lt;h3 id=&quot;如何替换jdk中的类呢？Java提供了endorsed技术
    
    </summary>
    
      <category term="如何替换 JDK 的类" scheme="http://code.idea4j.com/categories/%E5%A6%82%E4%BD%95%E6%9B%BF%E6%8D%A2-JDK-%E7%9A%84%E7%B1%BB/"/>
    
    
      <category term="如何替换 JDK 的类" scheme="http://code.idea4j.com/tags/%E5%A6%82%E4%BD%95%E6%9B%BF%E6%8D%A2-JDK-%E7%9A%84%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>消息队列</title>
    <link href="http://code.idea4j.com/2020/07/15/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://code.idea4j.com/2020/07/15/消息队列/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-08-04T05:11:43.745Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p><pre class="mermaid">graph LR<br>消息队列 –&gt; B[队列] –&gt; B1(使用场景)<br>B1 –&gt; 应用解耦<br>B1 –&gt; 服务通信<br>B1 –&gt; 削峰填谷<br>B1 –&gt; 消息广播<br>B –&gt; B2(消息协议)<br>B2 –&gt; JMS<br>B2 –&gt; AMQP<br>B –&gt; B3(常用队列)<br>B3 –&gt; RabbitMQ<br>B3 –&gt; ActiveMQ<br>B3 –&gt; RocketMQ<br>B3 –&gt; Kafka</pre><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;消息队列&quot;&gt;&lt;a href=&quot;#消息队列&quot; class=&quot;headerlink&quot; title=&quot;消息队列&quot;&gt;&lt;/a&gt;消息队列&lt;/h3&gt;&lt;p&gt;&lt;pre class=&quot;mermaid&quot;&gt;graph LR&lt;br&gt;消息队列 –&amp;gt; B[队列] –&amp;gt; B1(使用场景)&lt;br&gt;B1 –&amp;gt; 应用解耦&lt;br&gt;B1 –&amp;gt; 服务通信&lt;br&gt;B1 –&amp;gt; 削峰填谷&lt;br&gt;B1 –&amp;gt; 消息广播&lt;br&gt;B –&amp;gt; B2(消息协议)&lt;br&gt;B2 –&amp;gt; JMS&lt;br&gt;B2 –&amp;gt; AMQP&lt;br&gt;B –&amp;gt; B3(常用队列)&lt;br&gt;B3 –&amp;gt; RabbitMQ&lt;br&gt;B3 –&amp;gt; ActiveMQ&lt;br&gt;B3 –&amp;gt; RocketMQ&lt;br&gt;B3 –&amp;gt; Kafka&lt;/pre&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="消息队列" scheme="http://code.idea4j.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="消息队列" scheme="http://code.idea4j.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://code.idea4j.com/2020/07/15/Redis%20%E6%95%99%E7%A8%8B/"/>
    <id>http://code.idea4j.com/2020/07/15/Redis 教程/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T11:01:49.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis-教程"><a href="#Redis-教程" class="headerlink" title="Redis 教程"></a>Redis 教程</h1><p>redis（remote dictionary server）</p>
<h3 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h3><p>redis支持5种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）</p>
<h2 id="Redis原理、协议及应用"><a href="#Redis原理、协议及应用" class="headerlink" title="Redis原理、协议及应用"></a>Redis原理、协议及应用</h2><h3 id="Redis是如何运行的？"><a href="#Redis是如何运行的？" class="headerlink" title="Redis是如何运行的？"></a>Redis是如何运行的？</h3><h4 id="Redis基本原理"><a href="#Redis基本原理" class="headerlink" title="Redis基本原理"></a>Redis基本原理</h4><h5 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h5><p>Redis 是一款基于 ANSI C 语言编写的，BSD 许可的，日志型 key-value 存储组件，它的所有数据结构都存在内存中，可以用作缓存、数据库和消息中间件。</p>
<p>Redis 是 Remote dictionary server 即远程字典服务的缩写，一个 Redis 实例可以有多个存储数据的字典，客户端可以通过 select 来选择字典即 DB 进行数据存储。</p>
<h3 id="如何理解、选择并使用Redis的核心数据类型？"><a href="#如何理解、选择并使用Redis的核心数据类型？" class="headerlink" title="如何理解、选择并使用Redis的核心数据类型？"></a>如何理解、选择并使用Redis的核心数据类型？</h3><h3 id="Redis协议的请求和响应有哪些“套路”可循？"><a href="#Redis协议的请求和响应有哪些“套路”可循？" class="headerlink" title="Redis协议的请求和响应有哪些“套路”可循？"></a>Redis协议的请求和响应有哪些“套路”可循？</h3><h2 id="Redis进阶"><a href="#Redis进阶" class="headerlink" title="Redis进阶"></a>Redis进阶</h2><h3 id="Redis系统架构中各个处理模块是干什么的？"><a href="#Redis系统架构中各个处理模块是干什么的？" class="headerlink" title="Redis系统架构中各个处理模块是干什么的？"></a>Redis系统架构中各个处理模块是干什么的？</h3><h3 id="Redis如何处理文件事件和时间事件？"><a href="#Redis如何处理文件事件和时间事件？" class="headerlink" title="Redis如何处理文件事件和时间事件？"></a>Redis如何处理文件事件和时间事件？</h3><h3 id="Redis读取请求数据后，如何进行协议解析和处理？"><a href="#Redis读取请求数据后，如何进行协议解析和处理？" class="headerlink" title="Redis读取请求数据后，如何进行协议解析和处理？"></a>Redis读取请求数据后，如何进行协议解析和处理？</h3><h3 id="怎么认识和应用Redis内部数据结构？"><a href="#怎么认识和应用Redis内部数据结构？" class="headerlink" title="怎么认识和应用Redis内部数据结构？"></a>怎么认识和应用Redis内部数据结构？</h3><h3 id="Redis是如何淘汰key的？"><a href="#Redis是如何淘汰key的？" class="headerlink" title="Redis是如何淘汰key的？"></a>Redis是如何淘汰key的？</h3><h3 id="Redis崩溃后，是如何进行数据恢复的？"><a href="#Redis崩溃后，是如何进行数据恢复的？" class="headerlink" title="Redis崩溃后，是如何进行数据恢复的？"></a>Redis崩溃后，是如何进行数据恢复的？</h3><h3 id="Redis是如何处理容易超时的系统调用的？"><a href="#Redis是如何处理容易超时的系统调用的？" class="headerlink" title="Redis是如何处理容易超时的系统调用的？"></a>Redis是如何处理容易超时的系统调用的？</h3><h3 id="如何大幅成倍提升Redis处理性能？"><a href="#如何大幅成倍提升Redis处理性能？" class="headerlink" title="如何大幅成倍提升Redis处理性能？"></a>如何大幅成倍提升Redis处理性能？</h3><h2 id="分布式Redis实战"><a href="#分布式Redis实战" class="headerlink" title="分布式Redis实战"></a>分布式Redis实战</h2><h3 id="Redis是如何进行主从复制的？"><a href="#Redis是如何进行主从复制的？" class="headerlink" title="Redis是如何进行主从复制的？"></a>Redis是如何进行主从复制的？</h3><h3 id="如何构建一个高性能、易扩展的Redis集群？"><a href="#如何构建一个高性能、易扩展的Redis集群？" class="headerlink" title="如何构建一个高性能、易扩展的Redis集群？"></a>如何构建一个高性能、易扩展的Redis集群？</h3><h3 id="从容应对亿级QPS访问，Redis还缺少什么？"><a href="#从容应对亿级QPS访问，Redis还缺少什么？" class="headerlink" title="从容应对亿级QPS访问，Redis还缺少什么？"></a>从容应对亿级QPS访问，Redis还缺少什么？</h3><h2 id="深入分布式缓存"><a href="#深入分布式缓存" class="headerlink" title="深入分布式缓存"></a>深入分布式缓存</h2><h3 id="面对海量数据，为什么无法设计出完美的分布式缓存体系？"><a href="#面对海量数据，为什么无法设计出完美的分布式缓存体系？" class="headerlink" title="面对海量数据，为什么无法设计出完美的分布式缓存体系？"></a>面对海量数据，为什么无法设计出完美的分布式缓存体系？</h3><h3 id="如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？"><a href="#如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？" class="headerlink" title="如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？"></a>如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？</h3><h3 id="一个典型的分布式缓存系统是什么样的？"><a href="#一个典型的分布式缓存系统是什么样的？" class="headerlink" title="一个典型的分布式缓存系统是什么样的？"></a>一个典型的分布式缓存系统是什么样的？</h3><h2 id="应用场景案例解析"><a href="#应用场景案例解析" class="headerlink" title="应用场景案例解析"></a>应用场景案例解析</h2><h3 id="如何为秒杀系统设计缓存体系？"><a href="#如何为秒杀系统设计缓存体系？" class="headerlink" title="如何为秒杀系统设计缓存体系？"></a>如何为秒杀系统设计缓存体系？</h3><h3 id="如何为海量计数场景设计缓存体系？"><a href="#如何为海量计数场景设计缓存体系？" class="headerlink" title="如何为海量计数场景设计缓存体系？"></a>如何为海量计数场景设计缓存体系？</h3><h3 id="如何为设计feed场景设计缓存体系？"><a href="#如何为设计feed场景设计缓存体系？" class="headerlink" title="如何为设计feed场景设计缓存体系？"></a>如何为设计feed场景设计缓存体系？</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis-教程&quot;&gt;&lt;a href=&quot;#Redis-教程&quot; class=&quot;headerlink&quot; title=&quot;Redis 教程&quot;&gt;&lt;/a&gt;Redis 教程&lt;/h1&gt;&lt;p&gt;redis（remote dictionary server）&lt;/p&gt;
&lt;h3 id=&quot;re
    
    </summary>
    
      <category term="Redis" scheme="http://code.idea4j.com/categories/Redis/"/>
    
    
      <category term="Redis" scheme="http://code.idea4j.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Springboot</title>
    <link href="http://code.idea4j.com/2020/07/15/Spring%20Boot/"/>
    <id>http://code.idea4j.com/2020/07/15/Spring Boot/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T11:01:19.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h1><h1 id="Spring-Boot配置"><a href="#Spring-Boot配置" class="headerlink" title="Spring Boot配置"></a>Spring Boot配置</h1><h1 id="Spring-Boot与日志"><a href="#Spring-Boot与日志" class="headerlink" title="Spring Boot与日志"></a>Spring Boot与日志</h1><h1 id="Spring-Boot与Web开发"><a href="#Spring-Boot与Web开发" class="headerlink" title="Spring Boot与Web开发"></a>Spring Boot与Web开发</h1><h1 id="Spring-Boot与Docker"><a href="#Spring-Boot与Docker" class="headerlink" title="Spring Boot与Docker"></a>Spring Boot与Docker</h1><h1 id="Spring-Boot与数据访问"><a href="#Spring-Boot与数据访问" class="headerlink" title="Spring Boot与数据访问"></a>Spring Boot与数据访问</h1><h1 id="Spring-Boot启动配置原理"><a href="#Spring-Boot启动配置原理" class="headerlink" title="Spring Boot启动配置原理"></a>Spring Boot启动配置原理</h1><p>启动流程</p>
<p>创建SpringApplication对象</p>
<p>运行run方法</p>
<h1 id="Spring-Boot自定义starters"><a href="#Spring-Boot自定义starters" class="headerlink" title="Spring Boot自定义starters"></a>Spring Boot自定义starters</h1><h1 id="Spring-Boot与缓存"><a href="#Spring-Boot与缓存" class="headerlink" title="Spring Boot与缓存"></a>Spring Boot与缓存</h1><h1 id="Spring-Boot与消息"><a href="#Spring-Boot与消息" class="headerlink" title="Spring Boot与消息"></a>Spring Boot与消息</h1><h1 id="Spring-Boot与检索"><a href="#Spring-Boot与检索" class="headerlink" title="Spring Boot与检索"></a>Spring Boot与检索</h1><h1 id="Spring-Boot与任务"><a href="#Spring-Boot与任务" class="headerlink" title="Spring Boot与任务"></a>Spring Boot与任务</h1><h1 id="Spring-Boot与安全"><a href="#Spring-Boot与安全" class="headerlink" title="Spring Boot与安全"></a>Spring Boot与安全</h1><h1 id="Spring-Boot与分布式"><a href="#Spring-Boot与分布式" class="headerlink" title="Spring Boot与分布式"></a>Spring Boot与分布式</h1><h1 id="Spring-Boot与开发热部署"><a href="#Spring-Boot与开发热部署" class="headerlink" title="Spring Boot与开发热部署"></a>Spring Boot与开发热部署</h1><h1 id="Spring-Boot与监控管理"><a href="#Spring-Boot与监控管理" class="headerlink" title="Spring Boot与监控管理"></a>Spring Boot与监控管理</h1><p># </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring-Boot入门&quot;&gt;&lt;a href=&quot;#Spring-Boot入门&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot入门&quot;&gt;&lt;/a&gt;Spring Boot入门&lt;/h1&gt;&lt;h1 id=&quot;Spring-Boot配置&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="Spring" scheme="http://code.idea4j.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://code.idea4j.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>网关</title>
    <link href="http://code.idea4j.com/2020/07/15/Zuul%E4%B8%8EGateWay%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>http://code.idea4j.com/2020/07/15/Zuul与GateWay有什么区别/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T10:42:52.169Z</updated>
    
    <content type="html"><![CDATA[<p>作用：可以实现</p>
<h3 id="Zuul与GateWay有什么区别"><a href="#Zuul与GateWay有什么区别" class="headerlink" title="Zuul与GateWay有什么区别"></a>Zuul与GateWay有什么区别</h3><p>Zuul网关属于Nettfix公司开源框架，需要第一代微服务网关</p>
<p>GateWay属于SpringCloud自己研发的网关框架，属于第二代网关</p>
<p>相比来说GateWay比Zuul网关性能好</p>
<p>Zuul网关底层基于Servlet实现的，阻塞式api，不支持长连接</p>
<p>SpringCloudGateWay基于Spring5构建，能够实现响应式非阻塞式api，支持长连接，更好的支持Spring系列产品，依赖Springboot-webflux。</p>
<h3 id="网关与Nginx的区别"><a href="#网关与Nginx的区别" class="headerlink" title="网关与Nginx的区别"></a>网关与Nginx的区别</h3><p>相同点：都可以实现api拦截，负载均衡，反向代理，请求过滤等</p>
<p>不同点：Nginx采用c语言</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作用：可以实现&lt;/p&gt;
&lt;h3 id=&quot;Zuul与GateWay有什么区别&quot;&gt;&lt;a href=&quot;#Zuul与GateWay有什么区别&quot; class=&quot;headerlink&quot; title=&quot;Zuul与GateWay有什么区别&quot;&gt;&lt;/a&gt;Zuul与GateWay有什么区别&lt;/h
    
    </summary>
    
      <category term="网关" scheme="http://code.idea4j.com/categories/%E7%BD%91%E5%85%B3/"/>
    
    
      <category term="网关" scheme="http://code.idea4j.com/tags/%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>Spring事务隔离级别</title>
    <link href="http://code.idea4j.com/2020/07/15/Spring%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://code.idea4j.com/2020/07/15/Spring事务隔离级别/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T11:00:43.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring事务隔离级别"><a href="#Spring事务隔离级别" class="headerlink" title="Spring事务隔离级别"></a>Spring事务隔离级别</h2><p>一、Propagation （事务的传播属性）</p>
<p>Propagation ：　　key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。有以下选项可供使用：PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。<br>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。<br>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。<br>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。<br>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。<br>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。</p>
<p>1： PROPAGATION_REQUIRED<br>加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务<br>比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED, 那么由于执行ServiceA.methodA的时候，<br>ServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA<br>的事务内部，就不再起新的事务。而假如ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。<br>这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被<br>提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚</p>
<p>2： PROPAGATION_SUPPORTS<br>如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行</p>
<p>3： PROPAGATION_MANDATORY<br>必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常</p>
<p>4： PROPAGATION_REQUIRES_NEW<br>这个就比较绕口了。 比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，<br>那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，<br>他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在<br>两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，<br>如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。</p>
<p>5： PROPAGATION_NOT_SUPPORTED<br>当前不支持事务。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED ，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED ，<br>那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。</p>
<p>6： PROPAGATION_NEVER<br>不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，<br>那么ServiceB.methodB就要抛出异常了。</p>
<p>7： PROPAGATION_NESTED<br>理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，<br>而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。<br>而Nested事务的好处是他有一个savepoint。</p>
<hr>
<p>ServiceA {</p>
<p>/<em>*<br>\</em> 事务属性配置为 PROPAGATION_REQUIRED<br>*/<br>void methodA() {<br>try {<br>//savepoint<br>ServiceB.methodB(); //PROPAGATION_NESTED 级别<br>} catch (SomeException) {<br>// 执行其他业务, 如 ServiceC.methodC();<br>}<br>}</p>
<p>}</p>
<hr>
<p>也就是说ServiceB.methodB失败回滚，那么ServiceA.methodA也会回滚到savepoint点上，ServiceA.methodA可以选择另外一个分支，比如<br>ServiceC.methodC，继续执行，来尝试完成自己的事务。<br>但是这个事务并没有在EJB标准中定义。</p>
<p>Spring事务的隔离级别<br> \1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.<br>   另外四个与JDBC的隔离级别相对应<br> \2. ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。<br>   这种隔离级别会产生脏读，不可重复读和幻像读。<br> \3. ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据<br> \4. ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。<br>   它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。<br> \5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。<br>   除了防止脏读，不可重复读外，还避免了幻像读。</p>
<p>什么是脏数据，脏读，不可重复读，幻觉读？<br> 脏读: 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，<br>   另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一<br>   个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p>
<p> 不可重复读: 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。<br>       那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据<br>       可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</p>
<p> 幻觉读: 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及<br>     到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，<br>     以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring事务隔离级别&quot;&gt;&lt;a href=&quot;#Spring事务隔离级别&quot; class=&quot;headerlink&quot; title=&quot;Spring事务隔离级别&quot;&gt;&lt;/a&gt;Spring事务隔离级别&lt;/h2&gt;&lt;p&gt;一、Propagation （事务的传播属性）&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Spring" scheme="http://code.idea4j.com/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://code.idea4j.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper选举规则</title>
    <link href="http://code.idea4j.com/2020/07/15/zookeeper%E9%80%89%E4%B8%BE%E8%A7%84%E5%88%99/"/>
    <id>http://code.idea4j.com/2020/07/15/zookeeper选举规则/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T10:42:52.147Z</updated>
    
    <content type="html"><![CDATA[<h3 id="zookeeper选举规则"><a href="#zookeeper选举规则" class="headerlink" title="zookeeper选举规则"></a>zookeeper选举规则</h3><p>角色：</p>
<p>1.LOOKING：竞选</p>
<p>​      2.OBSERVING：观察</p>
<p>​      3.FOLLOWING：跟随者</p>
<p>​      4.LEADER：领导者</p>
<p>投票信息：</p>
<p>​      1.logicalclock（electionEpoch）：本地选举周期，每次投票都会自增</p>
<p>​      2.epoch（peerEpoch）：选举周期，每次选举最终确定完leader结束选举流程时会自增(真正zxid的前32位)</p>
<p>​      3.zxid：数据ID，每次数据变动都会自增（真正zxid的后32位，zxid一共64位）</p>
<p>​      4.sid：该投票信息所属的serverId</p>
<p>​      5.leader：提议的leader（被提议的server的serverId，即sid）</p>
<p>没有leader时</p>
<p>投票比较规则：</p>
<p>​     1.epoch大的胜出，否则进行步骤2</p>
<p>​     2.zxid大的胜出，否则进行步骤3</p>
<p>​     3.sid大的胜出</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;zookeeper选举规则&quot;&gt;&lt;a href=&quot;#zookeeper选举规则&quot; class=&quot;headerlink&quot; title=&quot;zookeeper选举规则&quot;&gt;&lt;/a&gt;zookeeper选举规则&lt;/h3&gt;&lt;p&gt;角色：&lt;/p&gt;
&lt;p&gt;1.LOOKING：竞选&lt;/p
    
    </summary>
    
      <category term="zookeeper" scheme="http://code.idea4j.com/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="http://code.idea4j.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper相关</title>
    <link href="http://code.idea4j.com/2020/07/15/zookeeper%E7%9B%B8%E5%85%B3/"/>
    <id>http://code.idea4j.com/2020/07/15/zookeeper相关/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T10:43:34.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper相关"><a href="#zookeeper相关" class="headerlink" title="zookeeper相关"></a>zookeeper相关</h1><h2 id="ZooKeeper-是什么？"><a href="#ZooKeeper-是什么？" class="headerlink" title="ZooKeeper 是什么？"></a>ZooKeeper 是什么？</h2><p>​    ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</p>
<p>​    ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>
<p>Zookeeper 保证了如下分布式一致性特性：</p>
<ol>
<li>顺序一致性</li>
<li>原子性</li>
<li>单一视图</li>
<li>可靠性</li>
<li>实时性（最终一致性）</li>
</ol>
<p>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</p>
<p>有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。</p>
<h2 id="ZooKeeper-提供了什么？"><a href="#ZooKeeper-提供了什么？" class="headerlink" title="ZooKeeper 提供了什么？"></a>ZooKeeper 提供了什么？</h2><ul>
<li>文件系统</li>
<li>通知机制</li>
</ul>
<h2 id="Zookeeper-文件系统"><a href="#Zookeeper-文件系统" class="headerlink" title="Zookeeper 文件系统"></a>Zookeeper 文件系统</h2><p>Zookeeper 提供一个多层级的节点命名空间（节点称为 znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。</p>
<p>Zookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M。</p>
<h2 id="Zookeeper-怎么保证主从节点的状态同步？"><a href="#Zookeeper-怎么保证主从节点的状态同步？" class="headerlink" title="Zookeeper 怎么保证主从节点的状态同步？"></a>Zookeeper 怎么保证主从节点的状态同步？</h2><p>Zookeeper 的核心是原子广播机制，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 Zab 协议。Zab 协议有两种模式，它们分别是恢复模式和广播模式。</p>
<p>恢复模式当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。</p>
<p>广播模式一旦 leader 已经和多数的 follower 进行了状态同步后，它就可以开始广播消息了，即进入广播状态。这时候当一个 server 加入 ZooKeeper 服务中，它会在恢复模式下启动，发现 leader，并和 leader 进行状态同步。待到同步结束，它也参与消息广播。ZooKeeper 服务一直维持在 Broadcast 状态，直到 leader 崩溃了或者 leader 失去了大部分的 followers 支持。</p>
<h2 id="四种类型的数据节点-Znode"><a href="#四种类型的数据节点-Znode" class="headerlink" title="四种类型的数据节点 Znode"></a>四种类型的数据节点 Znode</h2><p>（1）PERSISTENT-持久节点</p>
<p>除非手动删除，否则节点一直存在于 Zookeeper 上</p>
<p>（2）EPHEMERAL-临时节点</p>
<p>临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。</p>
<p>（3）PERSISTENT_SEQUENTIAL-持久顺序节点</p>
<p>基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p>
<p>（4）EPHEMERAL_SEQUENTIAL-临时顺序节点</p>
<p>基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p>
<h2 id="Zookeeper-Watcher-机制-–-数据变更通知"><a href="#Zookeeper-Watcher-机制-–-数据变更通知" class="headerlink" title="Zookeeper Watcher 机制 – 数据变更通知"></a>Zookeeper Watcher 机制 – 数据变更通知</h2><p>Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。</p>
<p>工作机制：</p>
<p>（1）客户端注册 watcher</p>
<p>（2）服务端处理 watcher</p>
<p>（3）客户端回调 watcher</p>
<p>Watcher 特性总结：</p>
<p>（1）一次性</p>
<p>无论是服务端还是客户端，一旦一个 Watcher 被 触 发 ，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。</p>
<p>（2）客户端串行执行</p>
<p>客户端 Watcher 回调的过程是一个串行同步的过程。</p>
<p>（3）轻量</p>
<p>3.1、Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。</p>
<p>3.2、客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。</p>
<p>（4）watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了 ordering guarantee，即客户端监听事件后，才会感知它所监视 znode发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。</p>
<p>（5）注册 watcher getData、exists、getChildren</p>
<p>（6）触发 watcher create、delete、setData</p>
<p>（7）当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。</p>
<h2 id="客户端注册-Watcher-实现"><a href="#客户端注册-Watcher-实现" class="headerlink" title="客户端注册 Watcher 实现"></a>客户端注册 Watcher 实现</h2><p>（1）调用 getData()/getChildren()/exist()三个 API，传入 Watcher 对象</p>
<p>（2）标记请求 request，封装 Watcher 到 WatchRegistration</p>
<p>（3）封装成 Packet 对象，发服务端发送 request</p>
<p>（4）收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理</p>
<p>（5）请求返回，完成注册。</p>
<h2 id="服务端处理-Watcher-实现"><a href="#服务端处理-Watcher-实现" class="headerlink" title="服务端处理 Watcher 实现"></a>服务端处理 Watcher 实现</h2><h2 id="客户端回调-Watcher"><a href="#客户端回调-Watcher" class="headerlink" title="客户端回调 Watcher"></a>客户端回调 Watcher</h2><h2 id="ACL-权限控制机制"><a href="#ACL-权限控制机制" class="headerlink" title="ACL 权限控制机制"></a>ACL 权限控制机制</h2><h2 id="Chroot-特性"><a href="#Chroot-特性" class="headerlink" title="Chroot 特性"></a>Chroot 特性</h2><h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h2 id="服务器角色"><a href="#服务器角色" class="headerlink" title="服务器角色"></a>服务器角色</h2><h2 id="Zookeeper-下-Server-工作状态"><a href="#Zookeeper-下-Server-工作状态" class="headerlink" title="Zookeeper 下 Server 工作状态"></a>Zookeeper 下 Server 工作状态</h2><p>服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。</p>
<p>（1）LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。</p>
<p>（2）FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。</p>
<p>（3）LEADING：领导者状态。表明当前服务器角色是 Leader。</p>
<p>（4）OBSERVING：观察者状态。表明当前服务器角色是 Observer。</p>
<h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><h2 id="zookeeper-是如何保证事务的顺序一致性的？"><a href="#zookeeper-是如何保证事务的顺序一致性的？" class="headerlink" title="zookeeper 是如何保证事务的顺序一致性的？"></a>zookeeper 是如何保证事务的顺序一致性的？</h2><p>zookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。</p>
<h2 id="分布式集群中为什么会有-Master主节点？"><a href="#分布式集群中为什么会有-Master主节点？" class="headerlink" title="分布式集群中为什么会有 Master主节点？"></a>分布式集群中为什么会有 Master主节点？</h2><p>在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。</p>
<h2 id="zk-节点宕机如何处理？"><a href="#zk-节点宕机如何处理？" class="headerlink" title="zk 节点宕机如何处理？"></a>zk 节点宕机如何处理？</h2><p>Zookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。</p>
<p>如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；</p>
<p>如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。</p>
<p>ZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。</p>
<p>所以</p>
<p>3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票&gt;1.5)</p>
<p>2 个节点的 cluster 就不能挂掉任何 1 个节点了(leader 可以得到 1 票&lt;=1)</p>
<h2 id="zookeeper-负载均衡和-nginx-负载均衡区别"><a href="#zookeeper-负载均衡和-nginx-负载均衡区别" class="headerlink" title="zookeeper 负载均衡和 nginx 负载均衡区别"></a>zookeeper 负载均衡和 nginx 负载均衡区别</h2><p>zk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比 zk 大很多，应该说按业务选择用哪种方式。</p>
<h2 id="Zookeeper-有哪几种几种部署模式？"><a href="#Zookeeper-有哪几种几种部署模式？" class="headerlink" title="Zookeeper 有哪几种几种部署模式？"></a>Zookeeper 有哪几种几种部署模式？</h2><h2 id="集群最少要几台机器，集群规则是怎样的？集群中有-3-台服务器，其中一个节点宕机，这个时候-Zookeeper-还可以使用吗？"><a href="#集群最少要几台机器，集群规则是怎样的？集群中有-3-台服务器，其中一个节点宕机，这个时候-Zookeeper-还可以使用吗？" class="headerlink" title="集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？"></a>集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？</h2><h2 id="集群支持动态添加机器吗？"><a href="#集群支持动态添加机器吗？" class="headerlink" title="集群支持动态添加机器吗？"></a>集群支持动态添加机器吗？</h2><h2 id="Zookeeper-对节点的-watch-监听通知是永久的吗？为什么不是永久的"><a href="#Zookeeper-对节点的-watch-监听通知是永久的吗？为什么不是永久的" class="headerlink" title="Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?"></a>Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?</h2><h2 id="Zookeeper-的-java-客户端都有哪些？"><a href="#Zookeeper-的-java-客户端都有哪些？" class="headerlink" title="Zookeeper 的 java 客户端都有哪些？"></a>Zookeeper 的 java 客户端都有哪些？</h2><p>java 客户端：zk 自带的 zkclient 及 Apache 开源的 Curator。</p>
<h2 id="chubby-是什么，和-zookeeper-比你怎么看？"><a href="#chubby-是什么，和-zookeeper-比你怎么看？" class="headerlink" title="chubby 是什么，和 zookeeper 比你怎么看？"></a>chubby 是什么，和 zookeeper 比你怎么看？</h2><h2 id="说几个-zookeeper-常用的命令。"><a href="#说几个-zookeeper-常用的命令。" class="headerlink" title="说几个 zookeeper 常用的命令。"></a>说几个 zookeeper 常用的命令。</h2><p>常用命令：ls get set create delete 等。</p>
<h2 id="ZAB-和-Paxos-算法的联系与区别？"><a href="#ZAB-和-Paxos-算法的联系与区别？" class="headerlink" title="ZAB 和 Paxos 算法的联系与区别？"></a>ZAB 和 Paxos 算法的联系与区别？</h2><p>相同点：</p>
<p>（1）两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行</p>
<p>（2）Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交</p>
<p>（3）ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot</p>
<p>不同点：</p>
<p>ZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统</p>
<h2 id="Zookeeper-的典型应用场景"><a href="#Zookeeper-的典型应用场景" class="headerlink" title="Zookeeper 的典型应用场景"></a>Zookeeper 的典型应用场景</h2><h2 id="Zookeeper-都有哪些功能？"><a href="#Zookeeper-都有哪些功能？" class="headerlink" title="Zookeeper 都有哪些功能？"></a>Zookeeper 都有哪些功能？</h2><h2 id="说一下-Zookeeper-的通知机制？"><a href="#说一下-Zookeeper-的通知机制？" class="headerlink" title="说一下 Zookeeper 的通知机制？"></a>说一下 Zookeeper 的通知机制？</h2><h2 id="Zookeeper-和-Dubbo-的关系？"><a href="#Zookeeper-和-Dubbo-的关系？" class="headerlink" title="Zookeeper 和 Dubbo 的关系？"></a>Zookeeper 和 Dubbo 的关系？</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;zookeeper相关&quot;&gt;&lt;a href=&quot;#zookeeper相关&quot; class=&quot;headerlink&quot; title=&quot;zookeeper相关&quot;&gt;&lt;/a&gt;zookeeper相关&lt;/h1&gt;&lt;h2 id=&quot;ZooKeeper-是什么？&quot;&gt;&lt;a href=&quot;#Zoo
    
    </summary>
    
      <category term="zookeeper" scheme="http://code.idea4j.com/categories/zookeeper/"/>
    
    
      <category term="zookeeper" scheme="http://code.idea4j.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>jps</title>
    <link href="http://code.idea4j.com/2020/07/15/%E4%BD%BF%E7%94%A8jvm%E5%B7%A5%E5%85%B7%E6%8E%92%E6%9F%A5%E6%95%85%E9%9A%9C/"/>
    <id>http://code.idea4j.com/2020/07/15/使用jvm工具排查故障/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T10:40:56.549Z</updated>
    
    <content type="html"><![CDATA[<p>jps</p>
<p>jmap -histo [pid] &gt; pp.txt //快照</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jps&lt;/p&gt;
&lt;p&gt;jmap -histo [pid] &amp;gt; pp.txt //快照&lt;/p&gt;

    
    </summary>
    
      <category term="jps" scheme="http://code.idea4j.com/categories/jps/"/>
    
    
      <category term="jps" scheme="http://code.idea4j.com/tags/jps/"/>
    
  </entry>
  
  <entry>
    <title>小程序</title>
    <link href="http://code.idea4j.com/2020/07/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://code.idea4j.com/2020/07/15/小程序/</id>
    <published>2020-07-15T03:11:07.000Z</published>
    <updated>2020-09-28T10:39:17.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><p>项目里边生成了不同类型的文件:</p>
<ol>
<li><code>.json</code> 后缀的 <code>JSON</code> 配置文件</li>
<li><code>.wxml</code> 后缀的 <code>WXML</code> 模板文件</li>
<li><code>.wxss</code> 后缀的 <code>WXSS</code> 样式文件</li>
<li><code>.js</code> 后缀的 <code>JS</code> 脚本逻辑文件</li>
</ol>
<p>小程序目录结构</p>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130658471.png" alt="image-20200927130658471"></p>
<h2 id="JSON配置"><a href="#JSON配置" class="headerlink" title="JSON配置"></a>JSON配置</h2><p>小程序中各个json文件的用途：</p>
<h3 id="小程序配置app-json"><a href="#小程序配置app-json" class="headerlink" title="小程序配置app.json"></a>小程序配置app.json</h3><p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130854683.png" alt="image-20200927130854683"></p>
<p>当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p>
<p>我们简单说一下这个配置各个项的含义:</p>
<ol>
<li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li>
<li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li>
</ol>
<h3 id="工具配置-project-config-json"><a href="#工具配置-project-config-json" class="headerlink" title="工具配置 project.config.json"></a>工具配置 project.config.json</h3><h3 id="页面配置-page-json"><a href="#页面配置-page-json" class="headerlink" title="页面配置 page.json"></a>页面配置 page.json</h3><h2 id="WXML-模板"><a href="#WXML-模板" class="headerlink" title="WXML 模板"></a>WXML 模板</h2><p>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 <code>HTML</code> 是用来描述当前这个页面的结构，<code>CSS</code> 用来描述页面的样子，<code>JS</code> 通常是用来处理这个页面和用户的交互。</p>
<h2 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h2><p><code>WXSS</code> 具有 <code>CSS</code> 大部分的特性，小程序在 <code>WXSS</code> 也做了一些扩充和修改。</p>
<ol>
<li>新增了尺寸单位。在写 <code>CSS</code> 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。<code>WXSS</code> 在底层支持新的尺寸单位 <code>rpx</code> ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。</li>
<li>提供了全局的样式和局部样式。和前边 <code>app.json</code>, <code>page.json</code> 的概念相同，你可以写一个 <code>app.wxss</code> 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 <code>page.wxss</code> 仅对当前页面生效。</li>
<li>此外 <code>WXSS</code> 仅支持部分 <code>CSS</code> 选择器</li>
</ol>
<p>更详细的文档可以参考 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html" target="_blank" rel="external">WXSS</a> </p>
<h2 id="JS-逻辑交互"><a href="#JS-逻辑交互" class="headerlink" title="JS 逻辑交互"></a>JS 逻辑交互</h2><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p>
<p>一个小程序主体部分由三个文件组成，必须放在项目的根目录：<strong>app.js,app.json</strong>,app.wxss。</p>
<p>一个小程序页面由四个文件组成，分别是<strong>js,wxml</strong>,json,wxss。</p>
<p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小程序&quot;&gt;&lt;a href=&quot;#小程序&quot; class=&quot;headerlink&quot; title=&quot;小程序&quot;&gt;&lt;/a&gt;小程序&lt;/h1&gt;&lt;p&gt;项目里边生成了不同类型的文件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.json&lt;/code&gt; 后缀的 &lt;code&gt;JSON&lt;/co
    
    </summary>
    
      <category term="小程序" scheme="http://code.idea4j.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://code.idea4j.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>日拱一卒</title>
    <link href="http://code.idea4j.com/2020/07/03/%E6%97%A5%E6%8B%B1%E4%B8%80%E5%8D%92/"/>
    <id>http://code.idea4j.com/2020/07/03/日拱一卒/</id>
    <published>2020-07-03T05:47:07.000Z</published>
    <updated>2020-08-04T05:11:43.942Z</updated>
    
    <content type="html"><![CDATA[<h3 id="日拱一卒"><a href="#日拱一卒" class="headerlink" title="日拱一卒"></a>日拱一卒</h3><p>mysql查询表的字段数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DESC `goods`</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>结果如图：</p>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113601749.png" alt="image-20200730113601749"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SELECT COUNT(*) FROM information_schema.COLUMNS WHERE table_schema = &apos;testdb&apos; AND table_name=&apos;testtb&apos;</div></pre></td></tr></table></figure>
<p>结果如图：</p>
<p><img src="https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113652530.png" alt="image-20200730113652530"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;日拱一卒&quot;&gt;&lt;a href=&quot;#日拱一卒&quot; class=&quot;headerlink&quot; title=&quot;日拱一卒&quot;&gt;&lt;/a&gt;日拱一卒&lt;/h3&gt;&lt;p&gt;mysql查询表的字段数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DESC `goods`&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://code.idea4j.com/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="知识" scheme="http://code.idea4j.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>手写RPC框架</title>
    <link href="http://code.idea4j.com/2020/06/30/%E6%89%8B%E5%86%99RPC%E6%A1%86%E6%9E%B6/"/>
    <id>http://code.idea4j.com/2020/06/30/手写RPC框架/</id>
    <published>2020-06-30T08:04:07.000Z</published>
    <updated>2020-08-04T05:11:43.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="手写RPC框架"><a href="#手写RPC框架" class="headerlink" title="手写RPC框架"></a>手写RPC框架</h2><h3 id="RPC是什么？"><a href="#RPC是什么？" class="headerlink" title="RPC是什么？"></a>RPC是什么？</h3><p>RPC(Remote Procedure Call Protocol)，远程过程调用</p>
<a id="more"></a>
<p>PRC调用过程：</p>
<ol>
<li>客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到<a href="https://zh.wikipedia.org/wiki/栈" target="_blank" rel="external">栈</a>（stack）中。</li>
<li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 <a href="https://zh.wikipedia.org/wiki/Marshalling_(计算机科学" target="_blank" rel="external">marshalling</a>)。（常见方式：<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="external">XML</a>、<a href="https://zh.wikipedia.org/wiki/JSON" target="_blank" rel="external">JSON</a>、二进制编码）</li>
<li>客户端本地操作系统发送信息至服务器。（可通过自定义<a href="https://zh.wikipedia.org/wiki/传输控制协议" target="_blank" rel="external">TCP协议</a>或<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="external">HTTP</a>传输）</li>
<li>服务器系统将信息传送至服务端stub（server stub）。</li>
<li>服务端stub（server stub）解析信息。该过程叫 <a href="https://zh.wikipedia.org/wiki/Unmarshalling_(计算机科学" target="_blank" rel="external">unmarshalling</a>)。</li>
<li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;手写RPC框架&quot;&gt;&lt;a href=&quot;#手写RPC框架&quot; class=&quot;headerlink&quot; title=&quot;手写RPC框架&quot;&gt;&lt;/a&gt;手写RPC框架&lt;/h2&gt;&lt;h3 id=&quot;RPC是什么？&quot;&gt;&lt;a href=&quot;#RPC是什么？&quot; class=&quot;headerlink&quot; title=&quot;RPC是什么？&quot;&gt;&lt;/a&gt;RPC是什么？&lt;/h3&gt;&lt;p&gt;RPC(Remote Procedure Call Protocol)，远程过程调用&lt;/p&gt;
    
    </summary>
    
      <category term="RPC" scheme="http://code.idea4j.com/categories/RPC/"/>
    
    
      <category term="RPC" scheme="http://code.idea4j.com/tags/RPC/"/>
    
  </entry>
  
  <entry>
    <title>springboot启动器</title>
    <link href="http://code.idea4j.com/2020/06/28/%E7%BC%96%E5%86%99springboot%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    <id>http://code.idea4j.com/2020/06/28/编写springboot启动器/</id>
    <published>2020-06-28T03:09:07.000Z</published>
    <updated>2020-08-04T04:57:28.896Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="编写springboot启动器（starter）"><a href="#编写springboot启动器（starter）" class="headerlink" title="编写springboot启动器（starter）"></a>编写springboot启动器（starter）</h2><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul>
<li>官方 spring-boot-starter-模块名</li>
<li>非官方（如我们自己编写的） 模块名-spring-boot-starter</li>
</ul>
<h3 id="模块结构"><a href="#模块结构" class="headerlink" title="模块结构"></a>模块结构</h3><ul>
<li><p>Xxx-spring-boot-starter</p>
<p>引如自动装配模块，一般是个空工程</p>
</li>
<li><p>Xxx-spring-boot-autoconfigure</p>
<p>核心代码中的类文件：<br>1、XxxAutoConfiguration 自动配置类<br>2、XxxProperties 属性文件加载类，通过@EnableConfigurationProperties({XxxProperties.class})注入到spring容器中，使得在XxxAutoConfiguration中可以直接注入使用配置属性</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@Configuration：定义配置类</div><div class="line"></div><div class="line">@EnableConfigurationProperties：属性类</div><div class="line"></div><div class="line">@AutoConfigureAfter: 自动配置应在XXX的自动配置类之后应用。</div><div class="line"></div><div class="line">@AutoConfigureBefore: 自动配置应在XXX的自动配置类之前应用</div><div class="line"></div><div class="line">@AutoConfigureOrder：定义配置类执行的顺序</div><div class="line"></div><div class="line">@ConditionalOnBean：当容器里有指定的Bean 时才生成</div><div class="line"></div><div class="line">@ConditionalOnMissingBean：当容器里没有指定Bean 时才生成</div><div class="line"></div><div class="line">@ConditionalOnClass：当类路径下有指定的类时才生成</div><div class="line"></div><div class="line">@ConditionalOnMissingClass：当类路径下没有指定的类时才生成</div><div class="line"></div><div class="line">@ConditionalOnExpression：基于SpEL 表达式作为判断条件。</div><div class="line"></div><div class="line">@ConditionalOnJava：基于JVM 版本作为判断条件。</div><div class="line"></div><div class="line">@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。</div><div class="line"></div><div class="line">@ConditionalOnProperty：指定的属性是否有指定的值。</div><div class="line"></div><div class="line">@ConditionalOnResource：类路径是否有指定的值。</div><div class="line"></div><div class="line">@ConditionalOnSingleCandidate：当指定Bean 在容器中只有一个，或者虽然有多个但是指定首选的Bean。</div><div class="line"></div><div class="line">@ConditionalOnWebApplication：当前项目是Web 项目的条件下。</div><div class="line"></div><div class="line">@ConditionalOnNotWebApplication：当前项目不是Web 项目的条件下。</div></pre></td></tr></table></figure>
<h3 id="spring-factories配置"><a href="#spring-factories配置" class="headerlink" title="spring.factories配置"></a>spring.factories配置</h3><p>在Xxx-spring-boot-autoconfigure模块下src/main/resources新建文件夹META-INF，然后新建一个spring.factories文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</div><div class="line">com.xxx.xxx.XxxAutoConfiguration</div></pre></td></tr></table></figure>
<h3 id="为ConfigurationProperties类生成元信息"><a href="#为ConfigurationProperties类生成元信息" class="headerlink" title="为ConfigurationProperties类生成元信息."></a>为ConfigurationProperties类生成元信息.</h3><p>在我们的autoconfiguration的模块中添加如下jar包依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;编写springboot启动器（starter）&quot;&gt;&lt;a href=&quot;#编写springboot启动器（starter）&quot; class=&quot;headerlink&quot; title=&quot;编写springboot启动器（starter）&quot;&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://code.idea4j.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://code.idea4j.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>问题大全</title>
    <link href="http://code.idea4j.com/2020/06/28/%E9%97%AE%E9%A2%98%E5%A4%A7%E5%85%A8/"/>
    <id>http://code.idea4j.com/2020/06/28/问题大全/</id>
    <published>2020-06-28T03:09:07.000Z</published>
    <updated>2020-08-04T04:57:28.654Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>Mycat，看过源码吗？聚合这块儿它怎么处理的</p>
<p>限流怎么搞</p>
<p>知道大概怎么个流程么，写个rpc框架</p>
<p>jvm内存了解么，新生代出问题了的话，你知道是为什么吗？怎么判断</p>
<p>生产jvm调优有过经验么</p>
<p>分布式事务怎么处理</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Mycat，看过源码吗？聚合这块儿它怎么处理的&lt;/p&gt;
&lt;p&gt;限流怎么搞&lt;/p&gt;
&lt;p&gt;知道大概怎么个流程么，写个rpc框架&lt;/p&gt;
&lt;p&gt;jvm内存了解么，新生代出问题了的话，你知道是为什么吗？怎么判断&lt;/p&gt;
&lt;p&gt;生产jvm调优有过
    
    </summary>
    
      <category term="问题" scheme="http://code.idea4j.com/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="问题" scheme="http://code.idea4j.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Pinpoint安装使用</title>
    <link href="http://code.idea4j.com/2020/06/09/Pinpoint/"/>
    <id>http://code.idea4j.com/2020/06/09/Pinpoint/</id>
    <published>2020-06-09T03:02:09.000Z</published>
    <updated>2020-08-04T04:57:28.672Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="Pinpoint安装使用"><a href="#Pinpoint安装使用" class="headerlink" title="Pinpoint安装使用"></a>Pinpoint安装使用</h1><p><strong>Pinpoint</strong>是用于用Java / PHP编写的大规模分布式系统的APM（应用程序性能管理）工具。受<a href="http://research.google.com/pubs/pub36356.html" target="_blank" rel="external">Dapper的</a>启发，Pinpoint提供了一种解决方案，可通过跟踪跨分布式应用程序的事务来帮助分析系统的整体结构以及其中的组件如何互连。</p>
<p>你一定要检查<strong>精确定位</strong>，如果你想</p>
<ul>
<li>一目了然地了解您的<a href="http://naver.github.io/pinpoint/overview.html" target="_blank" rel="external">应用程序拓扑</a></li>
<li>监控应用程序<em>的实时</em></li>
<li>获得每笔交易的代码级可见性</li>
<li>安装APM代理而无需更改任何代码</li>
<li>对性能的影响最小（资源使用量增加约3％）</li>
</ul>
<h2 id="一、下载pinpoint包"><a href="#一、下载pinpoint包" class="headerlink" title="一、下载pinpoint包"></a>一、下载pinpoint包</h2><p>从<a href="https://github.com/naver/pinpoint/releases" target="_blank" rel="external">https://github.com/naver/pinpoint/releases</a> 下载</p>
<ol>
<li>pinpoint-agent.tar.gz</li>
<li>pinpoint-collector.war</li>
<li>pinpoint-web.war</li>
</ol>
<h2 id="二、安装-HBase"><a href="#二、安装-HBase" class="headerlink" title="二、安装 HBase"></a>二、安装 HBase</h2><p>修改 hbase-site.xml 为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class="line">    &lt;value&gt;file:///home/testuser/hbase&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</div><div class="line">    &lt;value&gt;/home/testuser/zookeeper&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</div><div class="line">    &lt;value&gt;false&lt;/value&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>执行 <code>bin/start-hbase.sh</code>启动 hbase</p>
<p>执行 ./hbase shell hbase-create.hbase 文件创建表等</p>
<h2 id="三、启动-pinpoint-web"><a href="#三、启动-pinpoint-web" class="headerlink" title="三、启动 pinpoint-web"></a>三、启动 pinpoint-web</h2><p>修改 pinpoint-web.war 包配置文件（默认）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">修改 WEB-INF\classes\hbase.properties 文件</div><div class="line">hbase.client.host 设置为 hbase 所用的 zk 地址</div><div class="line"></div><div class="line">修改 WEB-INF\classes\pinpoint-web.properties 文件</div><div class="line">cluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址</div></pre></td></tr></table></figure>
<p>将 war 包放到 tomcat 中启动</p>
<h2 id="四、启动-pinpoint-collector"><a href="#四、启动-pinpoint-collector" class="headerlink" title="四、启动 pinpoint-collector"></a>四、启动 pinpoint-collector</h2><p>修改 pinpoint-collector.war 包配置文件（默认）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">修改 WEB-INF\classes\hbase.properties 文件</div><div class="line">hbase.client.host 设置为 hbase 所用的 zk 地址</div><div class="line"></div><div class="line">修改 WEB-INF\classes\pinpoint-collector.properties 文件</div><div class="line">cluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址</div></pre></td></tr></table></figure>
<p>可以将 pinpoint-web 和 pinpoint-collector 放到一个 tomcat 中启动</p>
<h2 id="五、配置-Agent"><a href="#五、配置-Agent" class="headerlink" title="五、配置 Agent"></a>五、配置 Agent</h2><p>解压 pinpoint-agent.tar.gz，修改 pinpoint.config 中的 profiler.collector.ip 改为部署 collector 的机器ip</p>
<h2 id="六、启动应用服务"><a href="#六、启动应用服务" class="headerlink" title="六、启动应用服务"></a>六、启动应用服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-provider-id -Dpinpoint.applicationName=dubbo-provider -jar dubbo-provider-0.0.1-SNAPSHOT.jar</div><div class="line"></div><div class="line">java -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-consumer-id -Dpinpoint.applicationName=dubbo-consumer -jar dubbo-consumer-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>如果是通过 tomcat 启动，则需要修改 bin/catalina.sh 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar&quot;</div><div class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.agentId=AGENT_ID&quot;</div><div class="line">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.applicationName=APPLICATION_TEST&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Pinpoint安装使用&quot;&gt;&lt;a href=&quot;#Pinpoint安装使用&quot; class=&quot;headerlink&quot; title=&quot;Pinpoint安装使用&quot;&gt;&lt;/a&gt;Pinpoint安装使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Pinp
    
    </summary>
    
      <category term="Pinpoint" scheme="http://code.idea4j.com/categories/Pinpoint/"/>
    
    
      <category term="Pinpoint" scheme="http://code.idea4j.com/tags/Pinpoint/"/>
    
      <category term="链路追踪" scheme="http://code.idea4j.com/tags/%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ命令行</title>
    <link href="http://code.idea4j.com/2020/06/04/RabbitMQ%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://code.idea4j.com/2020/06/04/RabbitMQ命令行/</id>
    <published>2020-06-04T06:13:09.000Z</published>
    <updated>2020-08-04T04:57:28.585Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h2 id="RabbitMQ命令行"><a href="#RabbitMQ命令行" class="headerlink" title="RabbitMQ命令行"></a>RabbitMQ命令行</h2><p>RabbitMQ附带多个命令行工具：</p>
<ul>
<li>用于服务管理和一般操作员任务的<a href="https://www.rabbitmq.com/rabbitmqctl.8.html" target="_blank" rel="external"> rabbitmqctl</a></li>
<li>用于诊断和<a href="https://www.rabbitmq.com/monitoring.html" target="_blank" rel="external">健康检查的</a><a href="https://www.rabbitmq.com/rabbitmq-diagnostics.8.html" target="_blank" rel="external">rabbitmq-diagnostics</a></li>
<li>用于<a href="https://www.rabbitmq.com/plugins.html" target="_blank" rel="external">插件管理的</a><a href="https://www.rabbitmq.com/rabbitmq-plugins.8.html" target="_blank" rel="external">rabbitmq-plugins</a></li>
<li>用于<a href="https://www.rabbitmq.com/queues.html" target="_blank" rel="external">队列</a>（尤其是<a href="https://www.rabbitmq.com/quorum-queues.html" target="_blank" rel="external">仲裁队列）</a>维护任务的<a href="https://www.rabbitmq.com/rabbitmq-queues.8.html" target="_blank" rel="external"> rabbitmq</a><a href="https://www.rabbitmq.com/quorum-queues.html" target="_blank" rel="external">队列</a></li>
<li><a href="https://www.rabbitmq.com/rabbitmq-upgrade.8.html" target="_blank" rel="external">rabbitmq-upgrade</a>用于与<a href="https://www.rabbitmq.com/upgrade.html" target="_blank" rel="external">升级</a>相关的维护任务</li>
</ul>
<p>它们可以在安装根目录的sbin目录下找到。</p>
<ul>
<li>创建交换机</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl <span class="built_in">eval</span> <span class="string">'rabbit_exchange:declare(&#123;resource, &lt;&lt;"test"&gt;&gt;, exchange, &lt;&lt;"ac.exchange.alarm"&gt;&gt;&#125;, direct, true, false, false, []).'</span></div></pre></td></tr></table></figure>
<ul>
<li>创建队列</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl <span class="built_in">eval</span> <span class="string">'rabbit_amqqueue:declare(&#123;resource, &lt;&lt;"test"&gt;&gt;, queue, &lt;&lt;"ac.queue.alarm"&gt;&gt;&#125;, true, false, [], none).'</span></div></pre></td></tr></table></figure>
<ul>
<li>绑定队列和交换机</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl <span class="built_in">eval</span> <span class="string">'rabbit_binding:add(&#123;binding, &#123;resource, &lt;&lt;"test"&gt;&gt;, exchange, &lt;&lt;"ac.exchange.alarm"&gt;&gt;&#125;, &lt;&lt;"ac.routing.key.alarm"&gt;&gt;, &#123;resource, &lt;&lt;"test"&gt;&gt;, queue, &lt;&lt;"ac.queue.alarm"&gt;&gt;&#125;, []&#125;).'</span></div></pre></td></tr></table></figure>
<p>这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.</p>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;RabbitMQ命令行&quot;&gt;&lt;a href=&quot;#RabbitMQ命令行&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ命令行&quot;&gt;&lt;/a&gt;RabbitMQ命令行&lt;/h2&gt;&lt;p&gt;RabbitMQ附带多个命令行工
    
    </summary>
    
      <category term="RabbitMQ" scheme="http://code.idea4j.com/categories/RabbitMQ/"/>
    
    
      <category term="RabbitMQ" scheme="http://code.idea4j.com/tags/RabbitMQ/"/>
    
      <category term="消息队列" scheme="http://code.idea4j.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
