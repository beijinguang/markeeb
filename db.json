{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/MP_verify_qP57Rj1DxXdguhhR.txt","path":"MP_verify_qP57Rj1DxXdguhhR.txt","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/404.jpg","path":"404.jpg","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/head.jpg","path":"img/head.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/header.jpg","path":"img/header.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"5408e27812b0751751dccca9c358bc78aef2c4f3","modified":1474445592997},{"_id":"source/MP_verify_qP57Rj1DxXdguhhR.txt","hash":"1b8ff1e6bd3573db096d76d81c32d6885ce91696","modified":1478748348202},{"_id":"source/google7ca39094aba4a60e.html","hash":"f4f3ef9008af77ee05ca4b0a6febc53585d005d2","modified":1478772825676},{"_id":"source/favicon.ico","hash":"dcfdc7b05cb629f3b91a7267c7f304306f461724","modified":1467769460000},{"_id":"source/robots.txt","hash":"84a0453358e4b6b61c2161704f29149e52328a45","modified":1474882784965},{"_id":"source/webscan_360_cn.html","hash":"2afb2ea5c8274bd8abaf51e71d668a8ccc0b7dc6","modified":1478772834240},{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1474447632632},{"_id":"themes/yelee/_config.yml","hash":"004b58dbc8f69a1b8608a221d80340fbb429891e","modified":1596518136396},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1474447632637},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1474447633285},{"_id":"source/404.jpg","hash":"ef349b958f15c83b7c39964f25af8042b88312bb","modified":1474944849306},{"_id":"source/404/index.md","hash":"e9e138d332c1d33513607cf4b81648e7134ea8b6","modified":1474946387117},{"_id":"source/_posts/Class文件格式.md","hash":"d82b449dc1b6306ba27e80725b712aa5dce30a8f","modified":1601290235461},{"_id":"source/_posts/Context初始化流程.md","hash":"93dbf3af91e0f3df8f7fe2c7d9c84f5f328003fc","modified":1601290184891},{"_id":"source/_posts/Dockerfile指令.md","hash":"b9e3a3158669f6b31335dc0fe4c8f2ce2270a706","modified":1596516450964},{"_id":"source/_posts/Docker搭建zookeeper集群.md","hash":"55042a381f635b144dd3e8c6ba249e8999304b2f","modified":1596516489773},{"_id":"source/_posts/DesignPatterns.md","hash":"fa264a3d02c46327212a1a7c5ac16a5b14e7827c","modified":1474965073705},{"_id":"source/_posts/Dubbo请求数据的发送过程.md","hash":"4795da8882d988a27c56d4b1ec81fd350e5ca289","modified":1601290958791},{"_id":"source/_posts/Java字节码指令收集大全.md","hash":"808cc52e11c8a612870719a3e3828c2940772cec","modified":1601290009219},{"_id":"source/_posts/GC日志配置.md","hash":"ecba168b0467e124b3230e42e7368e0b51cac5f7","modified":1601290056949},{"_id":"source/_posts/Java实现链表.md","hash":"4232be3a7e26efa03dd4adb0fae6823502cced31","modified":1601289974829},{"_id":"source/_posts/Java性能调优工具.md","hash":"ff9179818760f4cfe439bb54ac7693c857e74e19","modified":1601289960030},{"_id":"source/_posts/MAT工具应用之深堆和浅堆.md","hash":"02f3e9087e24dbbdd0e372a926e247f5fcb1d031","modified":1601290509294},{"_id":"source/_posts/MyBatis使用了哪些设计模式，在源码上是如何体现的？.md","hash":"24cb89ef94f845ba75301e41e7501994628e520e","modified":1596517048970},{"_id":"source/_posts/Markdown操作.md","hash":"a0e7210ab74029ccf5a4288016b90345903066ac","modified":1601290509277},{"_id":"source/_posts/MySQLSP.md","hash":"d26cad34c4f099bb132467560fe89fc360bfdaeb","modified":1474857651952},{"_id":"source/_posts/MySQL权限分配.md","hash":"bc0d59bcfd20e8da4b1661d5111328d1109acf18","modified":1596517048318},{"_id":"source/_posts/Netty.md","hash":"cd6a0f81dd23f295d9b6cadbd1178b3c2e3f4039","modified":1596517048664},{"_id":"source/_posts/Netty权威指南.md","hash":"6630657f0be636561be7b0e412c092dd256122ca","modified":1596516075046},{"_id":"source/_posts/RabbitMQ命令行.md","hash":"85f917a42831703c1597042c13d62a41f1cc191b","modified":1596517048585},{"_id":"source/_posts/Pinpoint.md","hash":"2cc24fa47e51963fe528c816d4bb04069ee02abf","modified":1596517048672},{"_id":"source/_posts/Zuul与GateWay有什么区别.md","hash":"d0dfb08fee76da19cc2dc2fd2d996655f19428b4","modified":1601289772169},{"_id":"source/_posts/Redis 教程.md","hash":"ab14df2aee470a9af3a59e5da9bf9a65429e184d","modified":1601290909530},{"_id":"source/_posts/Spring Boot.md","hash":"19d0dbb6c3db9d9d51febaac84169f941eaa4897","modified":1601290879775},{"_id":"source/_posts/Spring事务隔离级别.md","hash":"ef8ac9e75456d2635fe613ff3e9c14914ae3a8de","modified":1601290843542},{"_id":"source/_posts/angularjs2d1.md","hash":"316e781f653aad3a39cca453a0d56ad75b5ca637","modified":1476177172555},{"_id":"source/_posts/bat.md","hash":"94fe9ce8acdefa10fdef2c1b6b320c0c521f5e7c","modified":1534475608236},{"_id":"source/_posts/btyeclass.md","hash":"ca05de751fe505b28d225fa936068b9be2e94a04","modified":1477560856248},{"_id":"source/_posts/builderpattern.md","hash":"b644faac2075aeba8f74e5839e0a66ba23917ae0","modified":1474882624602},{"_id":"source/_posts/byyl.md","hash":"a193976722440ad5ddee10b3aca14e47c0b81c15","modified":1481263957104},{"_id":"source/_posts/docker 命令.md","hash":"a396ab2517e4f5e5418a1ee8d766377620a91b4f","modified":1596516439934},{"_id":"source/_posts/docker.md","hash":"ac641337cd40f4b4c9f9ce4ec4c247eb9810665e","modified":1482719442915},{"_id":"source/_posts/docker 容器数据卷.md","hash":"a73324ef065d3699395405f7a7b1af9cc89ca59d","modified":1596516440000},{"_id":"source/_posts/dubbo文档摘抄.md","hash":"74993b33d71246534ac11d10e6e9bc139ad1d962","modified":1601290147189},{"_id":"source/_posts/dubbo架构设计.md","hash":"ab60f705bf302763f8911ecf58d43705c69ceaa6","modified":1601290100338},{"_id":"source/_posts/dubbo的原理.md","hash":"33246f16e956ea214b6514fb1cd1ffe548026fee","modified":1601290082242},{"_id":"source/_posts/essay.md","hash":"7a03d74cf783c55ae77283e61e981a91b57d1cf9","modified":1476345142490},{"_id":"source/_posts/essay0922.md","hash":"51d6dd31b98e31e2acb087c26a9fcb144437e14b","modified":1476161572238},{"_id":"source/_posts/essay0923.md","hash":"1b6414a1d8e4b297d8dd3fd3b4f4229301752d30","modified":1474612973324},{"_id":"source/_posts/hexo.md","hash":"628f0968697c7ec8ae7c7f58a4bb6314b1cc9e03","modified":1479117941867},{"_id":"source/_posts/hexouser.md","hash":"1f2ecc9ee0ff53b324fc2af26a25153c7149383e","modified":1474523042387},{"_id":"source/_posts/hi-hexo.md","hash":"02f824ea6ebb884128e37668dd8969192a9a39fe","modified":1474445592997},{"_id":"source/_posts/huibian.md","hash":"dec43c058f2f5cfa2e908ca952fe6c53f68da979","modified":1476771863853},{"_id":"source/_posts/java1.md","hash":"59f79e7c34631253cd6fc9ebc8326dc8e51d93ea","modified":1483692331068},{"_id":"source/_posts/javaapi1.md","hash":"9d1d2ba22ad6571d5799fe19c6c7b22851072b30","modified":1482371263687},{"_id":"source/_posts/java性能优化.md","hash":"c834c4ef24f530b9d404c69e6482e91d09abc738","modified":1601289960089},{"_id":"source/_posts/java泛型.md","hash":"920e365734719a2e94b89b14d7bc68cefa401cb0","modified":1601289905852},{"_id":"source/_posts/java语言特性知识点汇总.md","hash":"3a6ee00cab074cb3bc8b22bfabd3da544c3deb22","modified":1596516553133},{"_id":"source/_posts/jenkins.md","hash":"91e043d94b415c4a507a2a58067a6b74e3f73464","modified":1482370794317},{"_id":"source/_posts/jinyan.md","hash":"80563375619e81995768d21e875c8fc0cd38f9ff","modified":1481174978310},{"_id":"source/_posts/jqiframe.md","hash":"974634285f392e1773485bd272dd495397da8b69","modified":1480323439214},{"_id":"source/_posts/jvm1.md","hash":"535156513c95aac5a77d9e3c8d4be15058861709","modified":1477381470629},{"_id":"source/_posts/linux1.md","hash":"fb2adf8a562ef19472f58c68fc3faadda06efadf","modified":1482370814961},{"_id":"source/_posts/jvm2.md","hash":"00a5eb83913c16b718902c3133f9b8c728f5ada7","modified":1482141039419},{"_id":"source/_posts/linux2.md","hash":"8031b80dd8e0aae00b47830fed627128f5894848","modified":1482371160090},{"_id":"source/_posts/liyue87.md","hash":"d78ce5698fa4f5640b8029b034a522c016d60cd9","modified":1474523274752},{"_id":"source/_posts/lua1.md","hash":"7ef617a6caa15ac48bd50b91b694c33ffe36307c","modified":1480936772390},{"_id":"source/_posts/mac 按键符号.md","hash":"4806258ad6f4c90f181b4354b1a0d0226d845f4e","modified":1601290631093},{"_id":"source/_posts/markdown.md","hash":"603db476d0ac23d0456429148823a3df6b108d7a","modified":1476841482410},{"_id":"source/_posts/maven.md","hash":"c6fe5d09cdbd7cb901b264da70e8a9310ec6518f","modified":1483667700912},{"_id":"source/_posts/mongodb.md","hash":"fdd9d93425ea00b9453688a1f0df925328f66242","modified":1476002543619},{"_id":"source/_posts/mooc10.md","hash":"d185f0adcfbff05e8ffc0255dbfe0361a7937ca2","modified":1474522959262},{"_id":"source/_posts/mst.md","hash":"b766197fdeb109614c9a280194b7dfee40cdfd0c","modified":1596517048328},{"_id":"source/_posts/mvnarchetype.md","hash":"44b463f30e41c370a1e0802cbf6df71d01a8b491","modified":1476161174429},{"_id":"source/_posts/mvnenvironmentseparate.md","hash":"67405642bc6871336986db10253372310c791dc2","modified":1477020491819},{"_id":"source/_posts/mybatis1.md","hash":"00e417f889da34c8c50e9cfd5e2e2fb73d58d07c","modified":1481859102127},{"_id":"source/_posts/mybatis2.md","hash":"f5152fe695b53cac4c36cd7c1a23bd6f9437e3e5","modified":1482921430510},{"_id":"source/_posts/mylife170320.md","hash":"c3966102a161c6f1a56faa2642fcb471daad91a7","modified":1489989009175},{"_id":"source/_posts/mysqlTransaction.md","hash":"e6060a5f52ce4b163df9b8f29fbc6abda8ab7e9d","modified":1478144204456},{"_id":"source/_posts/mysql哪些情况不适合建索引.md","hash":"d05303787127aaa19c4ca3514b7c8fc9bdbf1ded","modified":1596517048518},{"_id":"source/_posts/nba1.md","hash":"7b14fd3a54aaf3d415ce4bdab9a95659993a7caa","modified":1474522959207},{"_id":"source/_posts/node1.md","hash":"863437b265bc4b9b7212107ed0bef2cd5d313354","modified":1474970872855},{"_id":"source/_posts/node10.md","hash":"8cfb56c4417c276d69fcee01ff36fbe644db2c92","modified":1475896451239},{"_id":"source/_posts/node11.md","hash":"f5f92be64c2c1014a690d22e48e8d6f9dfb521e3","modified":1475910627294},{"_id":"source/_posts/node13.md","hash":"5d48af6583cc95e6f128da5fb35db6963f5516e9","modified":1475909234229},{"_id":"source/_posts/node12.md","hash":"56df237d1ea6f6bbdeb7df0e878208c1f2b62b05","modified":1475904444679},{"_id":"source/_posts/node14.md","hash":"5bfdd6fbfdf3d5e97b6097e89b3a1d159265c843","modified":1475909518805},{"_id":"source/_posts/node15.md","hash":"d7e07c790f4841cfc1b547e28fd64da5da5837bd","modified":1475917683580},{"_id":"source/_posts/node2.md","hash":"1256d74fe258d40c20a196502b06a8174fe139ca","modified":1475038899870},{"_id":"source/_posts/node3.md","hash":"51473c3beff21080a274d0563ba8530a6dfa6240","modified":1475040937124},{"_id":"source/_posts/node4.md","hash":"844f9a4316faeea0138d578e49cfa75f1ad68de1","modified":1475040927124},{"_id":"source/_posts/node5.md","hash":"adf225f05fc958901185e15a429a4912989c777a","modified":1475056828164},{"_id":"source/_posts/node6.md","hash":"ad6058abb22263735f96dde70aaa5cd0dc61b36a","modified":1475136190332},{"_id":"source/_posts/node7.md","hash":"848c123204ef80c26551e8016d49e80b59f75248","modified":1475136190394},{"_id":"source/_posts/node8.md","hash":"71bf4d0ab0ec9fadaa48aecc349bc803c31d43fd","modified":1475203867822},{"_id":"source/_posts/node9.md","hash":"30985f4d090e595dd8222e6e627ee201c40ba44d","modified":1475208999863},{"_id":"source/_posts/questions.md","hash":"75945db1ac1e8912fe0b2834884897eb4dc71797","modified":1483414702508},{"_id":"source/_posts/quickstart.md","hash":"1e18d9ffe9618d8ffdbe106347b1f7030fc5acf1","modified":1596517230629},{"_id":"source/_posts/servlet3.md","hash":"63a022e0335111bd407e5467245f30244b5f89b5","modified":1478080814305},{"_id":"source/_posts/shenzhou.md","hash":"498a89615904b3f1f3ed034591149351ea26b981","modified":1476671023578},{"_id":"source/_posts/society.md","hash":"a821f843321a4dc4b4aed991b5099be3564ab80d","modified":1475138140693},{"_id":"source/_posts/springbatch.md","hash":"b8a1345936c93bc9318da4acade854d769526d53","modified":1483934388600},{"_id":"source/_posts/sqljl.md","hash":"1c206a74ea2052573d33d15293bbeeea49b5405f","modified":1480493885724},{"_id":"source/_posts/sqlty.md","hash":"260f5c184dd6d6bb82e8a1247af1d250c249c53f","modified":1479114880245},{"_id":"source/_posts/staruml1.md","hash":"1800549166e9753711ecb0c490cb74262186141c","modified":1474880826273},{"_id":"source/_posts/storedprodcedure.md","hash":"aa138ccb2d8fce4451bee6f371c0eb3f9333b21f","modified":1477299193507},{"_id":"source/_posts/sublime.md","hash":"d9cc852a538de04830b3faa94c36b8ecb7650f6c","modified":1474969961623},{"_id":"source/_posts/svn1.md","hash":"5a3db92dd2bc3a0a4814930f8c3e7cc8ca435dff","modified":1482370943951},{"_id":"source/_posts/usapresident.md","hash":"354018db379a826f092cb259d46484421f785279","modified":1478662928403},{"_id":"source/_posts/vim.md","hash":"6932d8455ec041f0ed4fcfc536cefb6452d98276","modified":1475136201308},{"_id":"source/_posts/xingnen.md","hash":"3d9c115fc8ddd9ae329ad74cfbb96a8c96c33ff2","modified":1478161262305},{"_id":"source/_posts/xingnen2.md","hash":"4f81de1038f79604e4c0295ed2db148313eae1db","modified":1478662219733},{"_id":"source/_posts/xpath.md","hash":"5a54075653a0e382ebfc30af717aae4435ae6d8f","modified":1502333059680},{"_id":"source/_posts/yinyangshi.md","hash":"09b549dd113abed65bc944c268a498142690e999","modified":1489989309429},{"_id":"source/_posts/zookeeper相关.md","hash":"cd2543541409e68f2102f06d07d3502a30812e6a","modified":1601289814877},{"_id":"source/_posts/zookeeper选举规则.md","hash":"951fbdcea6dc42213f0965bf9ad7fd906e0cae8d","modified":1601289772147},{"_id":"source/_posts/使用jvm工具排查故障.md","hash":"63eb2ac3adaa32a71d419014fb921ffdf40655bc","modified":1601289656549},{"_id":"source/_posts/使用maxwell实时同步mysql数据到消息队列(rabbitMQ).md","hash":"39d88ff8108d724a66bc5283a9935f6d0fafacac","modified":1596517866841},{"_id":"source/_posts/前后端联调过程.md","hash":"d7de01c42600e5ea59be73a8dd1970749c1f274f","modified":1596517816152},{"_id":"source/_posts/如何替换 JDK 的类.md","hash":"1273b1f90f02e5bd3aedc2b5b64c4b9906ce6438","modified":1601289656468},{"_id":"source/_posts/如何有效的学习.md","hash":"8bed2f57acbdf8a351cdef24195bfbf21a1d3945","modified":1601289586849},{"_id":"source/_posts/小程序.md","hash":"efa42d1701bc4f615dabc416e3aace000f483374","modified":1601289557467},{"_id":"source/_posts/手写RPC框架.md","hash":"365008771c9f0c19f030fdc8cdaebf36345e8a89","modified":1596517903774},{"_id":"source/_posts/排序.md","hash":"28917adef1e78a63c68c48fa9912c7104dc4beed","modified":1601290798945},{"_id":"source/_posts/日拱一卒.md","hash":"8c0ac3d02d6b28a01891ec140e35ef584f0ac6a8","modified":1596517903942},{"_id":"source/_posts/消息队列.md","hash":"f8ef1265199440e2c1f8c884606016b40cbcac2f","modified":1596517903745},{"_id":"source/_posts/深克隆和浅克隆有什么区别.md","hash":"67b949ecef715ce4d065a5fc29748f11d85e3bef","modified":1601289516522},{"_id":"source/_posts/类加载.md","hash":"b2e6359a783f035ee6eae112c8165a18021778ac","modified":1601289320684},{"_id":"source/_posts/类装载.md","hash":"06730fe4269943d0b4ecf348d0d8c2c49abd851a","modified":1601289298588},{"_id":"source/_posts/系统性能核心关注点.md","hash":"81d5b8ba16f24d5f44d5197adb9bb2b2efab4e1d","modified":1596517903840},{"_id":"source/_posts/缓存.md","hash":"1d05cb9e018a39aa2f9be2ced4b66d71d1ed77ef","modified":1601289280226},{"_id":"source/_posts/编写springboot启动器.md","hash":"4592402dca5e0eb90af96b8a017903c2b5d406b9","modified":1596517048896},{"_id":"source/_posts/问题大全.md","hash":"00bf46990589539dc08920bb3b0ad03d366de0a5","modified":1596517048654},{"_id":"source/about/index.md","hash":"a58b60cae8f88d207c0619c9d8368cd072c6a884","modified":1476005130818},{"_id":"source/tags/index.md","hash":"8de40ccce7c923d6a33b3226d7f7e500b5f6b636","modified":1474445593013},{"_id":"themes/yelee/.git/COMMIT_EDITMSG","hash":"a6e9023b7c791ffb42c3d9c8366dbd99f2a8d4ee","modified":1596519479346},{"_id":"themes/yelee/.git/FETCH_HEAD","hash":"e916aa588361a657c380988cbf17a455263b1825","modified":1599803601342},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1474447632239},{"_id":"themes/yelee/.git/ORIG_HEAD","hash":"b494bfb78e5fb17581188010ae08c4b0b6b1341f","modified":1599803621459},{"_id":"themes/yelee/.git/config","hash":"fc9762f33cf36a22baab4720f661eeaa651e1c24","modified":1474447632323},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1474447496597},{"_id":"themes/yelee/.git/index","hash":"5cf1d3d7f71d4aaf11c9be78afe5af9463f81dd7","modified":1599803621856},{"_id":"themes/yelee/.git/packed-refs","hash":"d08588971d930bf5475f69fe4a0190a203dee104","modified":1474447632113},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"ce083abf397c12747893a23e901d46558b53e0ad","modified":1474447632630},{"_id":"themes/yelee/languages/en.yml","hash":"ff991c2c80d9ab69c984acb1c40480c8b98be2bc","modified":1474447632647},{"_id":"themes/yelee/languages/default.yml","hash":"3bdad891c90029447b4fbaedbbb11b8a59d06418","modified":1476004663235},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"4fa4068a65089810e7dd95692f9157eb80c2e8de","modified":1474447632650},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"bbc73dcd9170fe9efaab6fbbe1571886e0b8aa89","modified":1474447632652},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"88b4678bba940bc270c7aea2debbf869ecf6cc18","modified":1474447632655},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1474447633267},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1474447633269},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1474447633272},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1474447633278},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1474447633280},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1474447633281},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1474447633283},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1474447633287},{"_id":"source/_posts/builderpattern/builder.jpg","hash":"20d1d95d449942c57a52c74ee7175a9581668be4","modified":1474873814178},{"_id":"source/_posts/mvnenvironmentseparate/code.jpg","hash":"0b54356b98067887436114dd6d6deafe7ee77b94","modified":1476784574218},{"_id":"source/_posts/mvnenvironmentseparate/maven2.jpg","hash":"1ecc836875bdce934ef017a71beaf2dce128ddd4","modified":1477019671341},{"_id":"source/_posts/node4/node4.jpg","hash":"98d7e7c0f776f3cbee01a4146af73ff2ee35b687","modified":1475040162372},{"_id":"source/_posts/node8/node8.jpg","hash":"5b0e8b64730829a281e5ebeec52f7ec9f3b6242e","modified":1475203424687},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1474447496629},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1474447496644},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1474447496644},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1474447496664},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1474447496714},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1474447496730},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1474447496761},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1474447496777},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1474447496792},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1474447496808},{"_id":"themes/yelee/.git/logs/HEAD","hash":"751c3a20f1f2aed8328a1bebc523d429c3d6ec3b","modified":1599803621938},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1474447632665},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1474447632667},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1474447632676},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1474447632722},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1474447632726},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"aa4e751384546c2e1863b685bb9d888af8bf4db4","modified":1483934158486},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1474447632847},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1474447632904},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1474447632908},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"8d1e1f3953efbcf5ec84a451439a62a1c95b55d7","modified":1474447633056},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1474447633082},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1474447633105},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1474447633096},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1474447633132},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a59d4c768009dd621e741a29cf6446ebc2668fe9","modified":1474447633120},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1474447633139},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1474447633222},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"7c4a7177e0c77de2d7607ca29fc395abebd34db7","modified":1474447633234},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"c7b25ef136e129c948ac37d6ff19e8815ab9fee6","modified":1474447633256},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1474447633264},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1474447633310},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1474447633314},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1474447633318},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1474447633330},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1474447633425},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1474447633428},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1474447633428},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1474447633430},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1474447633429},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1474447633431},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1474447633431},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1474447633433},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1474447633432},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1474447633434},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1474447633434},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1474447633435},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1474447633436},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1474447633436},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1474447633437},{"_id":"themes/yelee/source/img/head.jpg","hash":"e6b5e664d5e23c99e75fffca7c37cf7cdf2c2ff7","modified":1474439302477},{"_id":"themes/yelee/source/img/header.jpg","hash":"5709de9895797d4dc273f0bd3f915d57e3eac1f7","modified":1474439389794},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1474447633437},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1474447633438},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1474447633439},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1474447633439},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1474447633440},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1474447633441},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1474447633441},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1474447633499},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1474447633486},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1474447633672},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1474447633598},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1474447633679},{"_id":"themes/yelee/source/js/search.js","hash":"001e324844e63f3bfb6f60d173b9c6954127be0b","modified":1474447633687},{"_id":"themes/yelee/source/js/toc.js","hash":"973c1a4e2c9de8f4f662b99623027658fe6d94c2","modified":1474447633694},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1474447633307},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1474447633322},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1474447633326},{"_id":"themes/yelee/.git/objects/04/54eedd711b553bc006544a78cf45105021faca","hash":"a275e7fd35b19713efeb9d5e817d44f09c30d345","modified":1596519478991},{"_id":"themes/yelee/.git/objects/14/8122a3b9804298b2f7608c76539fb9e7a7fd7e","hash":"4cce3f237a573db1cbbbbe745a0d4d11f8dc0d1c","modified":1599803600609},{"_id":"themes/yelee/.git/objects/15/f7a854f4363c7bcaf66f6e84ad7839775dbc86","hash":"6eabe351de5ee3ffa654a3c5d345fc89edd86d75","modified":1599803600881},{"_id":"themes/yelee/.git/objects/38/be142f4e51d885317152d3b79763cd32f6fea6","hash":"fbe65ef206659f499dfc8886fcc5a093349053ee","modified":1474450299781},{"_id":"themes/yelee/.git/objects/3f/c639cf4624a9e6b32cd51b8d4c890509c2444e","hash":"b2bf62fac0692886c6e48e041f850d52722348f0","modified":1596506030226},{"_id":"themes/yelee/.git/objects/42/ef69fbea00c636e896dc22874a150203c3f2cb","hash":"5409e172e398d510b38f88eb26f67084e3c9eb23","modified":1596506030177},{"_id":"themes/yelee/.git/objects/4b/b1594bcf43b4dda8ed947ffd378aad429a4335","hash":"5be2f213e1560f6fa9e0ae8cbb058c19f3259056","modified":1596506030434},{"_id":"themes/yelee/.git/objects/6e/9bc5a10fc2aa498577a19257a975e69bc15d5a","hash":"31d8ec16d23a46b22ee0b3f3e95cc7de7bd0361c","modified":1596506029881},{"_id":"themes/yelee/.git/objects/6f/2891e5347381677c2825a210b830dfea415298","hash":"1a0757ecedc6a7b56121f6a09455ce6608b89742","modified":1599803601121},{"_id":"themes/yelee/.git/objects/7a/a4e13d751e4c3b27d31d5f4ef51d7893e11b0b","hash":"4c49f17af9283e87cb37f7b5495d5983a13b547e","modified":1596519479348},{"_id":"themes/yelee/.git/objects/7a/d18d0cc2638b801590b1f3ba46723bd9851057","hash":"b8ac85545829b51c7b08d474008ed352605f974c","modified":1596506030376},{"_id":"themes/yelee/.git/objects/8a/0a2ba7eb43947ff63d5069207e03148dd6e7d1","hash":"133d7b5f8ded62da3f7d82bbe6ae6aa255bf5d9d","modified":1599803621865},{"_id":"themes/yelee/.git/objects/ae/56155ae1facb0ac5a1337f51b7e7902c184d45","hash":"9a8a0c8a8c56a462545cb2c0fbeb9c79c1fff46f","modified":1599803621544},{"_id":"themes/yelee/.git/objects/ba/d0be6c9c5b7758c6c905e7910e6e1199488782","hash":"dd2ea7b54da095a7cbd69c77df4a2f64bcb1a16f","modified":1596506029989},{"_id":"themes/yelee/.git/objects/c1/f8181f890c63a72c22fd37988227a2ff0b2b8d","hash":"cc23446c682a41f3b1c21cf5d4157897c5ca8ced","modified":1599803601002},{"_id":"themes/yelee/.git/objects/c2/639ecbb9d50926fdae6f3e4deb491a7b911fb6","hash":"c923fdd0ceff17c2b7d61228caceb2aff2be2346","modified":1474450299765},{"_id":"themes/yelee/.git/objects/c8/5f338d3349848e53daf9eaac916f4bd85adc2d","hash":"3081cb1bded7713288e4a3036ff9cc0349b8cd6f","modified":1599803600709},{"_id":"themes/yelee/.git/objects/ce/3d0ec3387818fee98567d42b3033e593bffb9d","hash":"40d5a04606fe476efbf4949db1e08da17fedf1d6","modified":1596519479207},{"_id":"themes/yelee/.git/objects/e3/cc5a12d49fe56669bb480db7f908884a037712","hash":"372fae36dea911225479b22347ff956c78ced261","modified":1599803600934},{"_id":"themes/yelee/.git/objects/e7/0d146029b4ba366faebf73f44d98fcff1bd3a9","hash":"88cd16c3d2650ae8d4b36951ab4cab33246c1a53","modified":1599803600822},{"_id":"themes/yelee/.git/objects/ed/3414be3bfdd109ffb5b85abfbbd468c4a094bd","hash":"42a191bf136a156dfa60897705d7bcd675c6ff63","modified":1596506030323},{"_id":"themes/yelee/.git/objects/ed/72cf51fa047d27c595d06771b2554a23242e66","hash":"9e2135831cf90a6ccfbe3e437ae3ae3df358e9b1","modified":1599803621728},{"_id":"themes/yelee/.git/objects/fd/486d9dd4008427b8665652b615d1f7410bdc83","hash":"3437e70d1b6d3a6c212b27be7b8e64e17ab4d748","modified":1596506030548},{"_id":"themes/yelee/.git/refs/heads/master","hash":"285cb767717aa0c052068171f0846c82d9990730","modified":1599803621937},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"ecc4d3ca997c6fd127e00fa2edf0158b925d1d3e","modified":1474447632759},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"ada2032e401b73b312c50b75bdbb8ee71d5a291e","modified":1474447632809},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1474447632818},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1474447632824},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"d150085faee4809ba50f69c55d904605699040cb","modified":1474447632833},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1474447633155},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1474447633171},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1474447633195},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1474447633204},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1474447633213},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1474447633218},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1474447633292},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1474447633296},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1474447633300},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1474447633333},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1474447633377},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1474447633380},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1474447633384},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1474447633387},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1474447633394},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1599803621498},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1474447633398},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"688ff535a6005be02d947be75d22cfe1f8ce72cd","modified":1474447633405},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1474447633400},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1474447633402},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1474447633408},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1474447633411},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1474447633416},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"8f2a057dc072285093e37f1f645e9cb53608642f","modified":1474447633413},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1474447633419},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1474447633422},{"_id":"themes/yelee/.git/objects/pack/pack-c4c5c8fa18d2c43c692faf1fc24d9af6d40859b0.idx","hash":"d3ed1005160ad7277c6a0f184118edaa88b877ab","modified":1474447631337},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1474447633303},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1474447633336},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"751c3a20f1f2aed8328a1bebc523d429c3d6ec3b","modified":1599803621939},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1474447632235},{"_id":"themes/yelee/.git/refs/remotes/origin/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1599803601321},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1474447633339},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1474447633361},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1474447633364},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"c29799f09ebd87767fd9cc3b1fa795db44a94670","modified":1474447633367},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1474447633369},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"7db683e2837a078ad7817fb88914535588e49cfa","modified":1474447633372},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1474447633375},{"_id":"source/_posts/node1/node1.gif","hash":"97e3c47eb1524f354f908fb785af27e5dab1bbc9","modified":1474970631294},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"623b489e6f679f0040a7a96dd735097bfb2a3387","modified":1474447632233},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/master","hash":"6adc46251724e9e5262d94da8168911ce24be4cc","modified":1599803601341},{"_id":"themes/yelee/.git/objects/pack/pack-c4c5c8fa18d2c43c692faf1fc24d9af6d40859b0.pack","hash":"dad5282a658f584f18610c0848dff1a86e528e6c","modified":1474447631490},{"_id":"public/webscan_360_cn.html","hash":"1a5548923a3785d356b9b477a51ba5a12a3a6ce2","modified":1601290700649},{"_id":"public/google7ca39094aba4a60e.html","hash":"e68138b099e46adfa11b022072b44f6bb105054d","modified":1601290701117},{"_id":"public/404.html","hash":"19f0e30c5ff36c50c099c8499d12960f98ac4955","modified":1601290701155},{"_id":"public/baidusitemap.xml","hash":"96a4ab695230aaebbe25effc128cbdac4b48772e","modified":1601291423345},{"_id":"public/atom.xml","hash":"0c1aaffd8b0edf92de8e658ddd9ced3ad3bdf729","modified":1601291424478},{"_id":"public/search.xml","hash":"6276407f92a3d5840837c609cf6f18423693c737","modified":1601291424554},{"_id":"public/sitemap.xml","hash":"5868cb61a5b8db1b5405989431de3f8aaca0a560","modified":1601291424555},{"_id":"public/about/index.html","hash":"04c6dc147192ba07b509758bd2d1e57901db5a96","modified":1601291424582},{"_id":"public/tags/index.html","hash":"6e6c3f78dccfc7df4f6e79b90174f00912388fea","modified":1601291424588},{"_id":"public/2020/09/11/排序/index.html","hash":"dd62b468dfc9b16f5776df7b2761ab05af1d6a72","modified":1601290702448},{"_id":"public/2020/09/11/Spring Boot/index.html","hash":"d5f4621b81a9cd4d923bc4e54025093259889bf0","modified":1601290702448},{"_id":"public/2020/09/11/Spring事务隔离级别/index.html","hash":"06c4a2798c26fce10288df63da8785cf7132e065","modified":1601290702448},{"_id":"public/2020/09/11/Dubbo请求数据的发送过程/index.html","hash":"9f37138a90782aeb2db48e99a9af727003b5e985","modified":1601290702448},{"_id":"public/2020/08/04/Redis 教程/index.html","hash":"0ea7e9bacab96deef43f0c4e34308b9d6de18806","modified":1601290702448},{"_id":"public/2020/07/27/使用maxwell实时同步mysql数据到消息队列(rabbitMQ)/index.html","hash":"9e57f1971496cde3f9f66b05c23b7f77bea34e3c","modified":1601291424589},{"_id":"public/2020/07/27/前后端联调过程/index.html","hash":"9045c6a1aab2990355cea3721fd802ab8db3e624","modified":1601291424589},{"_id":"public/2020/07/27/quickstart/index.html","hash":"d95ccece48805a224aa0981f0a2cc961842fb855","modified":1601291424589},{"_id":"public/2020/07/20/如何有效的学习/index.html","hash":"aaaa3e87d2c032c4c24d055b2426c20cd5d8c782","modified":1601291424589},{"_id":"public/2020/07/15/zookeeper选举规则/index.html","hash":"1a49c1ec374e4a8fcf27ec4366cb582b27bf3d8e","modified":1601291424590},{"_id":"public/2020/07/15/Zuul与GateWay有什么区别/index.html","hash":"2426f986e7f9ecc386d0fd7b105469c7e12bea34","modified":1601291424590},{"_id":"public/2020/07/15/如何替换 JDK 的类/index.html","hash":"37ba4da976d86d064e91045968c4ce2617ca7d70","modified":1601291424589},{"_id":"public/2020/07/15/使用jvm工具排查故障/index.html","hash":"7a49587fe5ef25a9237b1bcde7926845b6ce018a","modified":1601291424590},{"_id":"public/2020/07/15/zookeeper相关/index.html","hash":"adb2b5a3f6395e2c2de7dade2b0270938361e003","modified":1601291424590},{"_id":"public/2020/07/15/小程序/index.html","hash":"6b94662c0e39d2919caaf7100f22d2d52a327ea2","modified":1601291424590},{"_id":"public/2020/07/15/消息队列/index.html","hash":"75769b47adb11e311ce9609e49bbafa8db602e5d","modified":1601291424590},{"_id":"public/2020/07/03/日拱一卒/index.html","hash":"67feab8993c43085c56250f68665efa6be729d04","modified":1601291424590},{"_id":"public/2020/06/30/手写RPC框架/index.html","hash":"1f5f5f0b95cf0646504be47c1a9f68c0c73159ee","modified":1601291424590},{"_id":"public/2020/06/28/编写springboot启动器/index.html","hash":"59bca185ea6615df242d679f0cfbbafaa8a8ddec","modified":1601291424591},{"_id":"public/2020/06/09/Pinpoint/index.html","hash":"252e9a42c395357c593a8a7236c0f6da9e84b0cb","modified":1601291424591},{"_id":"public/2020/06/28/问题大全/index.html","hash":"f697376ae40833f51dc9e1094dfadf47366e3200","modified":1601291424591},{"_id":"public/2020/06/04/RabbitMQ命令行/index.html","hash":"fa1a29138020f7b83d95effb67cbab0cde175d11","modified":1601291424591},{"_id":"public/2020/05/29/docker 容器数据卷/index.html","hash":"0dc9f088a9de9455ba2e4883bcc465d977947602","modified":1601291424591},{"_id":"public/2020/05/29/docker 命令/index.html","hash":"37e3a9d464c978194873d68b3f296dfdba9cc7f4","modified":1601291424591},{"_id":"public/2020/05/28/Dockerfile指令/index.html","hash":"4fd2a3b88d1e90009a50396a5499886f15e9b4bd","modified":1601291424591},{"_id":"public/2020/05/28/Class文件格式/index.html","hash":"2e4ff1cdb43a27233122d0999e59093feb8455b5","modified":1601291424591},{"_id":"public/2020/05/28/GC日志配置/index.html","hash":"2e4e8c0105f3b758d0820f6d3f06ed6f47cb53fc","modified":1601291424592},{"_id":"public/2020/05/28/java泛型/index.html","hash":"d5ce8ad5a49060964e7827f52f354491e992c0f0","modified":1601291424591},{"_id":"public/2020/05/28/dubbo架构设计/index.html","hash":"9b193d993e026db9c04b8b6f23ed0727e7b9c0f3","modified":1601291424592},{"_id":"public/2020/05/28/Java字节码指令收集大全/index.html","hash":"926117b4a3775d3ddb7755c742cf840aaeaa1036","modified":1601291424591},{"_id":"public/2020/05/28/Java性能调优工具/index.html","hash":"91a89602946a5965f01765322284aa43dd52bf99","modified":1601291424591},{"_id":"public/2020/05/28/dubbo的原理/index.html","hash":"9f70ce40d0d91e82eef70b484bb8d469bb625157","modified":1601291424592},{"_id":"public/2020/05/28/java性能优化/index.html","hash":"574e67818e28c69215ee8a8d1321f4d6ea20d4c0","modified":1601291424594},{"_id":"public/2020/05/28/mst/index.html","hash":"aac6f8bda4ea65d7dd324ab007a12b46331afb9c","modified":1601291424593},{"_id":"public/2020/05/28/Docker搭建zookeeper集群/index.html","hash":"1c9272a5acf22c319397b61a92fe5ff8264d8d65","modified":1601291424592},{"_id":"public/2020/05/28/dubbo文档摘抄/index.html","hash":"e7aeab133900950aaa6ec4448912ed1c29183809","modified":1601291424592},{"_id":"public/2020/05/28/Context初始化流程/index.html","hash":"1f839e8bf8cb45ef2bf6ab6a354b084da6f22998","modified":1601291424593},{"_id":"public/2020/05/28/Java实现链表/index.html","hash":"eafcee8527a61083247a9a4a59c76c808ea6fcc4","modified":1601291424593},{"_id":"public/2020/05/28/java语言特性知识点汇总/index.html","hash":"7e5192b505e602b149ecccd1850ff3b954ab2f27","modified":1601291424593},{"_id":"public/2020/05/21/系统性能核心关注点/index.html","hash":"f8ae51794d21a969776d2621bc633adfd2a8d397","modified":1601291424593},{"_id":"public/2019/08/14/缓存/index.html","hash":"2c3392ab627a8baffe85fa669fc4e9875f81d115","modified":1601291424594},{"_id":"public/2019/07/24/Netty权威指南/index.html","hash":"8a752cdcf81e12cef348d618643787853859f411","modified":1601291424594},{"_id":"public/2018/08/17/bat/index.html","hash":"49b4bbd5dd533aa5d181d18ddac85825f8a3f118","modified":1601291424594},{"_id":"public/2018/05/27/MySQL权限分配/index.html","hash":"0017e3756ed41c392198a35b7e2db810947db2b4","modified":1601291424594},{"_id":"public/2018/05/19/mysql哪些情况不适合建索引/index.html","hash":"508a56d52fad7556f8521d316a0dfb5b35178984","modified":1601291424594},{"_id":"public/2017/08/14/类加载/index.html","hash":"133e08c5ad94e2513f72c86702a040cd2f105c0b","modified":1601291424594},{"_id":"public/2017/08/10/xpath/index.html","hash":"e04f91e9c957458571d174fdb108118f3105e75c","modified":1601291424594},{"_id":"public/2017/07/24/Netty/index.html","hash":"4f2db27989a27cca5dac80bb3495f5802db85aac","modified":1601291424594},{"_id":"public/2017/06/28/MyBatis使用了哪些设计模式，在源码上是如何体现的？/index.html","hash":"4713b684814a33a3b89336626f78a3edf71eaecc","modified":1601291424594},{"_id":"public/2017/03/20/yinyangshi/index.html","hash":"17236a8992ee709bd7be52a0d027863db6b7442a","modified":1601291424595},{"_id":"public/2017/03/20/Markdown操作/index.html","hash":"89682f1417e9e299332978ad525eb6954ac8cf1b","modified":1601291424595},{"_id":"public/2017/03/20/mac 按键符号/index.html","hash":"153a3a58cdfa7477d38af0e2b60b4cbf8aaad00b","modified":1601291424595},{"_id":"public/2017/03/20/MAT工具应用之深堆和浅堆/index.html","hash":"8b425d20e9e2e7c03b656fe4561552fb768d5b8d","modified":1601291424605},{"_id":"public/2017/03/20/mylife170320/index.html","hash":"e815794a56419ee416429a40d4383a20fa9ef0a3","modified":1601291424595},{"_id":"public/2017/01/06/java1/index.html","hash":"fb7d62c629798679dd73c9a859bd9d69c97d9f76","modified":1601291424595},{"_id":"public/2016/12/28/mybatis2/index.html","hash":"4bb9a6c37ccfffd3ca5320944449a47d94b1a9a9","modified":1601291424595},{"_id":"public/2016/12/27/springbatch/index.html","hash":"0c2a01960cc308e628943c37598744ff755dff11","modified":1601291424595},{"_id":"public/2016/12/26/docker/index.html","hash":"51cb295c4880b5f1a94321f75d85b3f6991fd3fb","modified":1601291424595},{"_id":"public/2016/12/21/jenkins/index.html","hash":"5d32d130c8e989b64e9f851a1296e73215c36b2c","modified":1601291424595},{"_id":"public/2016/12/21/linux2/index.html","hash":"cfa124f96c6ebe26f837a8dd2e6f0fa45e0266f3","modified":1601291424595},{"_id":"public/2016/12/21/linux1/index.html","hash":"30fac3fdb9d5a5fa9ff7fa89c481ede5f57f6560","modified":1601291424595},{"_id":"public/2016/12/21/svn1/index.html","hash":"ccd6072a19ac1637dc63bfd734927bd418578e14","modified":1601291424595},{"_id":"public/2016/12/19/jvm2/index.html","hash":"18d14e76bcef693286b189c212356b09fce16906","modified":1601291424596},{"_id":"public/2016/12/16/questions/index.html","hash":"a94f32badd08c1f3f9e36278776995821d79b435","modified":1601291424596},{"_id":"public/2016/12/12/mybatis1/index.html","hash":"a8bdbffa90422737c4548e658c578663c167098f","modified":1601291424596},{"_id":"public/2016/12/08/jinyan/index.html","hash":"e466b9ffe2c584a7406a8f3ed4ef76833ad1d3fd","modified":1601291424596},{"_id":"public/2016/12/08/javaapi1/index.html","hash":"d860d6609ecd0aca4cd8160f76e0b3ecf2faea6a","modified":1601291424596},{"_id":"public/2016/12/05/lua1/index.html","hash":"be7afcf1aea48e17d0514730ec88818aa4b4659d","modified":1601291424596},{"_id":"public/2016/11/30/sqljl/index.html","hash":"8ca8762e81118a18d5d6126ad593bbc9536cd2f1","modified":1601291424596},{"_id":"public/2016/11/28/jqiframe/index.html","hash":"d0e3fcbc6c02f3a894bd729b9a1b10f3f3270cfe","modified":1601291424596},{"_id":"public/2016/11/14/sqlty/index.html","hash":"eb77c0e0b0110da3386df098dde6f14db9a75634","modified":1601291424597},{"_id":"public/2016/11/09/usapresident/index.html","hash":"5183b5f918fae084febfa84718c6b5dac2e70df3","modified":1601291424597},{"_id":"public/2016/11/04/xingnen2/index.html","hash":"b66fb35bf8f6c508f1f5633c1b9244a88e2bdf86","modified":1601291424597},{"_id":"public/2016/11/03/xingnen/index.html","hash":"58fe4806f9b751d1746f8551572b23c9860e75c1","modified":1601291424597},{"_id":"public/2016/11/02/servlet3/index.html","hash":"781cd73de33c9ea90e6b95f53ae5bbe9c9d505c8","modified":1601291424597},{"_id":"public/2016/10/27/btyeclass/index.html","hash":"5ca8a69721b5e875d6b72e03d291764120813736","modified":1601291424597},{"_id":"public/2016/10/24/jvm1/index.html","hash":"afa896c1a8a750fe300b09b26abc6e173f2bd087","modified":1601291424597},{"_id":"public/2016/10/21/mvnenvironmentseparate/index.html","hash":"0b93d4e46804a7747a555291b6f01f0a3d75be15","modified":1601291424597},{"_id":"public/2016/10/18/huibian/index.html","hash":"3bfcd0f006c5130ed20a52da353e70f0e27de0bb","modified":1601291424597},{"_id":"public/2016/10/17/byyl/index.html","hash":"fb50c94297981b643a212c3fa61bfacdb5c34b2f","modified":1601291424597},{"_id":"public/2016/10/17/shenzhou/index.html","hash":"15801c6df3c7a723297976e4cc91e3959e735960","modified":1601291424598},{"_id":"public/2016/10/13/mysqlTransaction/index.html","hash":"17e001708b5e3c3ec6ecec68a53eeb5acac29fde","modified":1601291424598},{"_id":"public/2016/10/11/angularjs2d1/index.html","hash":"a9b2d31fce4acd23c6f32a116015a9244f323ce2","modified":1601291424598},{"_id":"public/2016/10/11/mvnarchetype/index.html","hash":"3057d68d7fea515121b5773acbfe2ed3ddff6812","modified":1601291424598},{"_id":"public/2016/10/09/hexo/index.html","hash":"6b144fe8fdb8c752f782af806b91981ca8c1b1fe","modified":1601291424598},{"_id":"public/2016/10/09/mongodb/index.html","hash":"9c316ec9c0fd6e5e19c76d971192eb40d3fe1359","modified":1601291424598},{"_id":"public/2016/09/29/society/index.html","hash":"5f9f61fae8a36683f9cc3e8de294af990352f944","modified":1601291424598},{"_id":"public/2016/09/22/essay0923/index.html","hash":"4849bedb0a733c6f4db07d1fd1019c8d52e0ec23","modified":1601291424598},{"_id":"public/2016/09/22/essay0922/index.html","hash":"88de2d33c1848eaef4ee971309933eac7ac79394","modified":1601291424598},{"_id":"public/2016/09/21/essay/index.html","hash":"19bea4d16916053389b490e2bdd6438599bd4038","modified":1601291424598},{"_id":"public/2016/08/24/node15/index.html","hash":"9d05dca85992b0428f324d1a0628a56dfe54d6d9","modified":1601291424598},{"_id":"public/2016/08/23/node14/index.html","hash":"a2ee364813f2e10907520ec9f399daf3f4e6b52a","modified":1601291424598},{"_id":"public/2016/08/22/node13/index.html","hash":"8b9bb1af20c782dba94d17bffdd3f1038b15f0e6","modified":1601291424598},{"_id":"public/2016/08/20/maven/index.html","hash":"d952a2ae20154c0163e22b0d9069170afa346c05","modified":1601291424599},{"_id":"public/2016/08/20/node12/index.html","hash":"7d32fb3cba7e19b0101284c7808f47628379950b","modified":1601291424598},{"_id":"public/2016/08/20/node11/index.html","hash":"4a607d9a43fb0c43b2a009a8743ee014f7220e00","modified":1601291424599},{"_id":"public/2016/08/19/node10/index.html","hash":"ce3dffd7e3ed659f76a132138b6da41838b8308b","modified":1601291424599},{"_id":"public/2016/08/17/node9/index.html","hash":"8b176bf27d8f6084043a42464a23dcdc6d1231b0","modified":1601291424599},{"_id":"public/2016/08/16/node8/index.html","hash":"157ceccea0a80e19305f984f44624ead875e5d70","modified":1601291424599},{"_id":"public/2016/08/16/node7/index.html","hash":"915d73c9ed5f33a0fcf0bf45939492d064fa1d0b","modified":1601291424599},{"_id":"public/2016/08/16/vim/index.html","hash":"095588a1533590008754046e80ba3015298b858b","modified":1601291424599},{"_id":"public/2016/08/16/node6/index.html","hash":"6d9c82933ca7ce23273794a65caba88d1bac318e","modified":1601291424599},{"_id":"public/2016/08/15/node5/index.html","hash":"6bcffc87d3ed6cca85adeec3a26c1e50ace6d35e","modified":1601291424599},{"_id":"public/2016/08/15/node4/index.html","hash":"313214305e2c1220020e6322152f562b7ccf85db","modified":1601291424599},{"_id":"public/2016/08/15/node3/index.html","hash":"8e388588bf422b44cf35560e22927985172e6105","modified":1601291424599},{"_id":"public/2016/08/15/markdown/index.html","hash":"9c82143371902e21398f7ee3011dbc2921239efd","modified":1601291424599},{"_id":"public/2016/08/15/node2/index.html","hash":"a202aec77652d4df4f475cea3df533cb2cbfa73b","modified":1601291424600},{"_id":"public/2016/08/14/sublime/index.html","hash":"3fe9f8272f87fb7aad3e5fbf48400ce2fe4cde3f","modified":1601291424600},{"_id":"public/2016/08/14/深克隆和浅克隆有什么区别/index.html","hash":"38da4ffcc7e66e5aad5a260e22da87109e932e1c","modified":1601291424600},{"_id":"public/2016/08/14/类装载/index.html","hash":"2dde1650312976af3d320f35e9a11fdd1ae88c42","modified":1601291424600},{"_id":"public/2016/08/14/node1/index.html","hash":"d555f33ae1dd181b6735ec3609a33b362b29b4de","modified":1601291424600},{"_id":"public/2016/08/10/staruml1/index.html","hash":"1228e905e3393c097e292861c0ff2f550d793e8d","modified":1601291424600},{"_id":"public/2016/08/10/builderpattern/index.html","hash":"538d831001a5032dac54e2c246ca3f48b982fd87","modified":1601291424600},{"_id":"public/2016/08/09/DesignPatterns/index.html","hash":"7f8a258b38c1d03afe656beaae32ace23922b7a3","modified":1601291424600},{"_id":"public/2016/08/08/MySQLSP/index.html","hash":"c6b810c352265be8243ce9653eb7896dc6289994","modified":1601291424600},{"_id":"public/2016/08/08/storedprodcedure/index.html","hash":"a6d8125e2ceb01b1e3d8447f2d026f97ea6197d7","modified":1601291424600},{"_id":"public/2016/08/07/liyue87/index.html","hash":"60a43e98a6b9f2a0e2812587f160150381311b34","modified":1601291424601},{"_id":"public/2016/08/03/nba1/index.html","hash":"009141cc25f4c4e830966b9c8557291ffa953665","modified":1601291424601},{"_id":"public/2016/08/02/mooc10/index.html","hash":"a91b9c05d20a6476390b950294d05d48296de4c3","modified":1601291424601},{"_id":"public/2016/08/01/hexouser/index.html","hash":"d599ec95b8a98bd4a7c972baa11e0ee6148e5ecc","modified":1601291424601},{"_id":"public/archives/index.html","hash":"985bb39942895d930ea95cd26d826c5fc9314c8c","modified":1601291424601},{"_id":"public/2016/07/30/hi-hexo/index.html","hash":"f7a961895c2573535bd57b4c02a4aeba07a30a8c","modified":1601291424601},{"_id":"public/archives/page/2/index.html","hash":"ebbaf1e1ef217897e7cb46f4384207002a4a570f","modified":1601291424601},{"_id":"public/archives/page/4/index.html","hash":"5e544626f6c8c7533717b2a0dcd978d841cf826c","modified":1601291424601},{"_id":"public/archives/page/3/index.html","hash":"7e51282936c37480bad79e1d26e598e3e041885a","modified":1601291424601},{"_id":"public/archives/page/5/index.html","hash":"8d1e2668640ebbf7abfc99a4efa2b2d77b12d167","modified":1601291424601},{"_id":"public/archives/page/6/index.html","hash":"54edd641bae9086edc07f9edbd0d82c191feeef6","modified":1601291424601},{"_id":"public/archives/page/7/index.html","hash":"a41727e60fd6f9f85e715703ac106472d1315250","modified":1601291424602},{"_id":"public/archives/page/8/index.html","hash":"a43f67bb9d5596adcb8cdf964e7e4c8fb7bd8527","modified":1601291424602},{"_id":"public/archives/page/9/index.html","hash":"379bec64746e694f0e571f28aa5073636009ace0","modified":1601291424602},{"_id":"public/archives/page/10/index.html","hash":"f0ce8fc1471af797d342805e723c87c400126905","modified":1601291424602},{"_id":"public/archives/page/11/index.html","hash":"fe30cf75ef8458c7e5e6db42aca03242da5597df","modified":1601291424602},{"_id":"public/archives/page/12/index.html","hash":"4a23623d21090a7b09019375fcde85e7a14b495f","modified":1601291424602},{"_id":"public/archives/page/13/index.html","hash":"d5efbddeb1f63de15e3181f67cfe50c5a9dae433","modified":1601291424602},{"_id":"public/archives/2016/index.html","hash":"9ae945985e5cfb945e19b85002d08446faaeee37","modified":1601291424602},{"_id":"public/archives/2016/page/2/index.html","hash":"d278e782a629d87120b8f843f5c2420ce1ce1350","modified":1601291424602},{"_id":"public/archives/2016/page/3/index.html","hash":"bc4ebcfaa7cd735f770b4b0ba67de79fd31cca52","modified":1601291424602},{"_id":"public/archives/2016/page/4/index.html","hash":"e39eff7e018cb7c8e8682d376e5cbe615d4a3b61","modified":1601291424602},{"_id":"public/archives/2016/page/5/index.html","hash":"83af9a6459363d1da4d1ed3f45d3589839c865c5","modified":1601291424602},{"_id":"public/archives/2016/page/6/index.html","hash":"019856019495c0db6381ba7460527e4d25e0c931","modified":1601291424602},{"_id":"public/archives/2016/page/7/index.html","hash":"c09fbbda4638bbac0639b589beb5549287a882d3","modified":1601291424602},{"_id":"public/archives/2016/07/index.html","hash":"69496b291e7f18e70d59beb5bff1346ce23a5c53","modified":1601291424602},{"_id":"public/archives/2016/08/index.html","hash":"02a05bef951789c502269b6daa245816ef78b9e7","modified":1601291424602},{"_id":"public/archives/2016/08/page/2/index.html","hash":"5e2d3cf5347266b59c7afbc073fd382bcaba0340","modified":1601291424603},{"_id":"public/archives/2016/08/page/3/index.html","hash":"985ddad2c510362ae4df4e568e679ace02f4a432","modified":1601291424603},{"_id":"public/archives/2016/09/index.html","hash":"cc65a0b6873ad6cfacfb210f2ec5fe7ca0a0be29","modified":1601291424603},{"_id":"public/archives/2016/10/index.html","hash":"84a0f05f280d2b9578b2b781779d2a83d1b7c7c6","modified":1601291424603},{"_id":"public/archives/2016/10/page/2/index.html","hash":"5da726957c2444e294be0d5649e6f7b5476eb4ae","modified":1601291424603},{"_id":"public/archives/2016/11/index.html","hash":"cf87a37ec641ebd27f9159f2515284a376cde299","modified":1601291424603},{"_id":"public/archives/2016/12/index.html","hash":"c91b69471d2151672ff43fa093d1b7674cc93da6","modified":1601291424603},{"_id":"public/archives/2016/12/page/2/index.html","hash":"3b5bbf5064b187ccf168d900e79817e59fb1884c","modified":1601291424603},{"_id":"public/archives/2017/index.html","hash":"ebcb4d6af48434c14eb71fd474d78e43f09dd8a0","modified":1601291424603},{"_id":"public/archives/2017/03/index.html","hash":"9e5b1b44f5c50d998d85fa75197079a66709859d","modified":1601291424604},{"_id":"public/archives/2017/01/index.html","hash":"97c76c44ed82af543f1b21d3b5724565baa03d58","modified":1601291424603},{"_id":"public/archives/2017/06/index.html","hash":"7b91fe99cf3a099a99f959499ed6666d728b5788","modified":1601291424604},{"_id":"public/archives/2017/07/index.html","hash":"eec0eb0cb12f49d2b9036392c77c0f621abdc3d9","modified":1601291424604},{"_id":"public/archives/2018/index.html","hash":"1e828553d65245ca4857fd8748841205b7e86245","modified":1601291424604},{"_id":"public/archives/2017/08/index.html","hash":"010fa913419a9b1a1a670bb787a62a39fcbad9b0","modified":1601291424604},{"_id":"public/archives/2018/05/index.html","hash":"4d18c808cd69ef3378f95cccf76de45b75d10c5c","modified":1601291424604},{"_id":"public/archives/2018/08/index.html","hash":"782da02616aed4cb8c049071f20d545af8e1c9f0","modified":1601291424604},{"_id":"public/archives/2019/index.html","hash":"32dcc6d34e7ff6f6d94d0234c77246eea22d5693","modified":1601291424604},{"_id":"public/archives/2019/07/index.html","hash":"c620664e9d50ebed4f86fb1986c8714e38a12e6f","modified":1601291424604},{"_id":"public/archives/2019/08/index.html","hash":"d2275421d5344f9f1147446a476ec2e75fb4b02b","modified":1601291424604},{"_id":"public/archives/2020/index.html","hash":"7ac7999a29cbd96783c3342a4312668a30d3cd19","modified":1601291424604},{"_id":"public/archives/2020/page/2/index.html","hash":"77256d70ed6880eca28acc8df6a566fb862b0657","modified":1601291424605},{"_id":"public/archives/2020/page/3/index.html","hash":"59e3aedf7d08d73645951302945312ff8fbab782","modified":1601291424605},{"_id":"public/archives/2020/page/4/index.html","hash":"958ad5f71e1b1c5b0dfb0b07aa2a47720ee17e1e","modified":1601291424605},{"_id":"public/archives/2020/05/index.html","hash":"39382af934940d812c5d0e2a1e1e83eb671a8fbc","modified":1601291424605},{"_id":"public/archives/2020/05/page/2/index.html","hash":"c4dd3e39c36ecb557c75ceb704bd5f0312d61b14","modified":1601291424605},{"_id":"public/archives/2020/06/index.html","hash":"4fbb3cf6db0f7062562f2fe05222def6dcde6564","modified":1601291424605},{"_id":"public/archives/2020/07/index.html","hash":"55b03b6f0586a8ced9baebf2e9126dd236031202","modified":1601291424605},{"_id":"public/archives/2020/07/page/2/index.html","hash":"d859b292cbd8bdebfdc65346ccc301e1a96b48bd","modified":1601291424605},{"_id":"public/archives/2020/08/index.html","hash":"36e6f9ea0e32ae6ca676bfd6cc29b4dd2c06c579","modified":1601290702478},{"_id":"public/archives/2020/09/index.html","hash":"a2cdacfe3c7853cf55e510efc6227f71b99c64f1","modified":1601291354885},{"_id":"public/categories/字节码/index.html","hash":"54fc6809b1855aaeff94dc53129458baa5fb746c","modified":1601291424605},{"_id":"public/categories/spring/index.html","hash":"05d3a37fc24d88c1f99705f005011f04d08a43d0","modified":1601291424605},{"_id":"public/categories/docker/index.html","hash":"870aedb699c6da45522154b311668a878edb2795","modified":1601291424605},{"_id":"public/categories/数据结构/index.html","hash":"966e2a9f45791736ff343518bc2b0597f4ff2260","modified":1601291424606},{"_id":"public/categories/GC/index.html","hash":"2e3a3667173a661800c7a25e09a7a2bf41ecfeca","modified":1601291424606},{"_id":"public/categories/性能调优/index.html","hash":"2b32d5819f582963224d93d1137a83131c89f0f9","modified":1601291424606},{"_id":"public/categories/Mybatis/index.html","hash":"080dc80e05c8c4da9ee9ad98a8eaa9e5b8f79187","modified":1601291424606},{"_id":"public/categories/jvm/index.html","hash":"be900352fd30c3bbd1722c11ba1155eada189852","modified":1601291424606},{"_id":"public/categories/mysql/index.html","hash":"4bb6ac12c4ca27f9ee3310c4ff26bd1916d817b4","modified":1601291424606},{"_id":"public/categories/Markdown/index.html","hash":"b3eb070b4d1befa2d19396cfe891bb7707bf2949","modified":1601291424606},{"_id":"public/categories/Netty/index.html","hash":"48ec28e6f2e747099d591cd7b76731e1b6ad4b5b","modified":1601291424606},{"_id":"public/categories/RabbitMQ/index.html","hash":"6bbcca7890de1218d01835286e46367c3d472b22","modified":1601291424606},{"_id":"public/categories/Pinpoint/index.html","hash":"b9a62ec3b946a08208485947c56c172862125082","modified":1601291424606},{"_id":"public/categories/网关/index.html","hash":"516ff1f02c12d782ade6bc1b2d07c3c735c20f45","modified":1601291424606},{"_id":"public/categories/angularjs2/index.html","hash":"3e6b8c075608827acef710a94084fea33045c392","modified":1601291424606},{"_id":"public/categories/面试题/index.html","hash":"6f52b19651c957d7850194fdf97e508843bf8f81","modified":1601291424606},{"_id":"public/categories/设计模式/index.html","hash":"f008d08fce1fda9ab388cb7dc485339694c5a715","modified":1601291424606},{"_id":"public/categories/database/index.html","hash":"1ec8311f2caacef79555a3ee7a07796d7aac2a91","modified":1601291424607},{"_id":"public/categories/编译原理/index.html","hash":"ec9ce822c0675c0b8ba8fa1daca548b9853fc296","modified":1601291424607},{"_id":"public/categories/dubbo/index.html","hash":"0442fc3d53df3c16264854f2595b46627367cb03","modified":1601291424607},{"_id":"public/categories/随笔/index.html","hash":"45554ab641de1142b4210ab77cd736512f73f2f5","modified":1601291424607},{"_id":"public/categories/微信/index.html","hash":"fa5dd2bef53c489ad41c4f0e53cbbd7fa7a230f7","modified":1601291424607},{"_id":"public/categories/Hexo/index.html","hash":"5cb11db092172ec1a7d5a7c161ec0351bd3595c3","modified":1601291424608},{"_id":"public/categories/hexo/index.html","hash":"2ee7eaa15a8b90d23407a6dc9d3c648466a35545","modified":1601291424608},{"_id":"public/categories/汇编语言/index.html","hash":"62066cbc4e2665f86acfbf616e0df9fc560a8af8","modified":1601291424607},{"_id":"public/categories/java/index.html","hash":"bf54217d694956e962b3e5d775f117d1c61d6392","modified":1601291424607},{"_id":"public/categories/java泛型/index.html","hash":"edd9608f2fd29a105d33d59b56945642fd3b1a0e","modified":1601291424607},{"_id":"public/categories/CI/index.html","hash":"5d7c1be0ee1df0eb13ecc9770c6033a514530c4f","modified":1601291424607},{"_id":"public/categories/其他/index.html","hash":"53c22181ca1490466737a3043286c1075174e2d9","modified":1601291424607},{"_id":"public/categories/jQuery/index.html","hash":"981688243b2db9c5a6044de37789e8b33bb96c35","modified":1601291424607},{"_id":"public/categories/体育/index.html","hash":"fd06b2c194ee676ed2be282dcd7a77c27a79e7b1","modified":1601291424607},{"_id":"public/categories/Lua/index.html","hash":"0390a433b181bcf3789e78a663892eab4208fbc6","modified":1601291424608},{"_id":"public/categories/Linux/index.html","hash":"8456cf01472740a93e50b62e60a2aac8a6ee58f5","modified":1601291424608},{"_id":"public/categories/maven/index.html","hash":"cd05628014542f43de83f6e7f2cffec87091b957","modified":1601291424608},{"_id":"public/categories/mac/index.html","hash":"2c313da8d2b5d3bf0b45392f4c578a5e0016da02","modified":1601291424608},{"_id":"public/categories/markdown/index.html","hash":"0d8239f1609cc268fa15e0c47d9ef2cbf41a1dd4","modified":1601291424608},{"_id":"public/categories/mongodb/index.html","hash":"4a454700fa0710519073561d4321fcabd2fd3d21","modified":1601291424608},{"_id":"public/categories/mybatis/index.html","hash":"9dd6ccc7fc70829190ad6f6fbe95662a03869d31","modified":1601291424608},{"_id":"public/categories/NBA/index.html","hash":"7344036a5156de63906f4e80cf7793f829b1da55","modified":1601291424608},{"_id":"public/categories/node/index.html","hash":"ecbf403fea14ca57ee9ac3d1cc2eaf0e1998ad65","modified":1601291424608},{"_id":"public/categories/node/page/2/index.html","hash":"d0ca37c59ae7dea7e3a898384606a238b2efbbca","modified":1601291424608},{"_id":"public/categories/异常/index.html","hash":"13abd3e108844bb1bc31d49505ee8ba1e2f275c2","modified":1601291424608},{"_id":"public/categories/maxwell/index.html","hash":"90b94d4b85ac6ee57b17081f6cd3155c8c014cf1","modified":1601291424608},{"_id":"public/categories/神舟飞船/index.html","hash":"b8f24e34a006c72aaf2ec21a18627d45b85fdffb","modified":1601291424608},{"_id":"public/categories/社会/index.html","hash":"0738efc8590587173736de420358e3e9d43124fb","modified":1601291424609},{"_id":"public/categories/sublime-text/index.html","hash":"2859fc03f136f91c109fa0a61ae1b411f8914d64","modified":1601291424609},{"_id":"public/categories/starUML/index.html","hash":"a3d0467f4383159f1da4c60140caa8499213dddd","modified":1601291424609},{"_id":"public/categories/svn/index.html","hash":"b372887817b5b2e717609b5645435ed1f499b233","modified":1601291424609},{"_id":"public/categories/vim/index.html","hash":"71daff62b40ff98e38d928c0818ab7841309f8f7","modified":1601291424609},{"_id":"public/categories/xpath/index.html","hash":"5dd77c5a31ad30d2fc402f830f0f6f66cc722ff2","modified":1601291424609},{"_id":"public/categories/游戏/index.html","hash":"1f56d2c6b243c2cae45956a3c772d0b6ffce1ec4","modified":1601291424609},{"_id":"public/categories/zookeeper/index.html","hash":"e86268a19d5c27508d3764af88202e75880f0f89","modified":1601291424609},{"_id":"public/categories/jps/index.html","hash":"9700b8970f91d848a1648bd8906a570f1bd6ce76","modified":1601291424609},{"_id":"public/categories/工作/index.html","hash":"ac131be84148c938635a8fc40b0408610bd950af","modified":1601291424609},{"_id":"public/categories/RPC/index.html","hash":"1067d566b20702c8168e2b5edc076c66af2235ae","modified":1601291424609},{"_id":"public/categories/小程序/index.html","hash":"4976d3892135c0449ae2994a6e520e811b3bdc93","modified":1601291424609},{"_id":"public/categories/如何替换-JDK-的类/index.html","hash":"cd1d2c45af55d5fe289bf9fcdf2bcfc75939b4a9","modified":1601291424609},{"_id":"public/categories/技巧/index.html","hash":"a57c63f7c047b49ddcd887bae3125273378a55c0","modified":1601291424609},{"_id":"public/categories/消息队列/index.html","hash":"fa15524244b12b1bfcbda97ee2139a6811c5719f","modified":1601291424610},{"_id":"public/categories/学习/index.html","hash":"11b51240bcc1f0f35f154307d58917e17830b31c","modified":1601291424610},{"_id":"public/categories/深克隆/index.html","hash":"fe5727f44eb65201c25c60890705114d97a052b5","modified":1601291424610},{"_id":"public/categories/类装载/index.html","hash":"b3deef995316fa86ee4ec57f52a4da95120978fd","modified":1601291424610},{"_id":"public/categories/系统性能/index.html","hash":"4cf8c1b097bcf87751d9b0fb94cef576a619c0e4","modified":1601291424610},{"_id":"public/categories/mst/index.html","hash":"77d374bf9d746fca26b56155a307738aa8578e51","modified":1601291424610},{"_id":"public/categories/springboot/index.html","hash":"2376b673cd750f80e2f756f9cfb1af64bcc1aecd","modified":1601291424610},{"_id":"public/categories/问题/index.html","hash":"ae687d6db5a6855f9774fb2d13881e42f4e9b7c2","modified":1601291424610},{"_id":"public/categories/Java字节码/index.html","hash":"5436e4f0ba539ab654b59fb53a4f0e37046a3e43","modified":1601291424610},{"_id":"public/page/2/index.html","hash":"fb6456bf8afa28b0396871b08937f6ac3af42cd7","modified":1601291424611},{"_id":"public/page/3/index.html","hash":"dc9d934d79744a73428583fc3f38af6ba8210b41","modified":1601291424611},{"_id":"public/page/4/index.html","hash":"f5a6224383bde58c12850431050fe2f020e80334","modified":1601291424611},{"_id":"public/index.html","hash":"490228b531e706034be4fbaa8817e4078d0b5abd","modified":1601291424611},{"_id":"public/page/5/index.html","hash":"4822a67ed6792d8cbca68ecbe987534c4cd842d0","modified":1601291424611},{"_id":"public/page/6/index.html","hash":"bc05d0f74a9da67c77bf739cd91fe56df5d90088","modified":1601291424611},{"_id":"public/page/7/index.html","hash":"737c4ca38c0010655e3b735ada5d1aa37f94051e","modified":1601291424611},{"_id":"public/page/8/index.html","hash":"39fdc6d49258a2b374bd8d9e56a64c9bffdabdbd","modified":1601291424612},{"_id":"public/page/9/index.html","hash":"3bfd59ecf05c25f31bcc3360c7f85d7b758c12a5","modified":1601291424612},{"_id":"public/page/10/index.html","hash":"bbf92cb3ffdff12300d4771493a8dd34750dd9df","modified":1601291424612},{"_id":"public/page/11/index.html","hash":"72e46983e5e584af81a05e80c32d38961466eb7c","modified":1601291424612},{"_id":"public/page/12/index.html","hash":"83d4a89207cf8863a4048c5d6e15c7c22732467b","modified":1601291424612},{"_id":"public/page/13/index.html","hash":"2faf29e2ccd638199bc82f9d35dc2429d769641e","modified":1601291424612},{"_id":"public/tags/字节码/index.html","hash":"73953c02f410b6b65aae9cd8378029bffb057a0d","modified":1601291424612},{"_id":"public/tags/spring/index.html","hash":"b3762fb92682e53d4f6ab0e091b65d7f37d1a875","modified":1601291424612},{"_id":"public/tags/docker/index.html","hash":"a6b573957ca665b8208954c911286c4954362f44","modified":1601291424612},{"_id":"public/tags/zookeeper/index.html","hash":"cf3dc445252cdb5a00c0310fced38517f552081c","modified":1601291424612},{"_id":"public/tags/数据结构/index.html","hash":"0e6e9cd31318fb8ffcb937c3a322ef678dc03e4a","modified":1601291424612},{"_id":"public/tags/GC/index.html","hash":"342d66703823b16d986e3d8666c037473a276762","modified":1601291424612},{"_id":"public/tags/性能调优/index.html","hash":"9b4b5cd4f652f2f19d2e6ee2d58b58b6975dd241","modified":1601291424612},{"_id":"public/tags/Mybatis/index.html","hash":"535cd55d60471922f18b0daecf5876cb3758bff1","modified":1601291424612},{"_id":"public/tags/设计模式/index.html","hash":"0f668fc12e1b08f6a59fee6c871d5d52b0d9b065","modified":1601291424612},{"_id":"public/tags/jvm/index.html","hash":"3ebeae254b19b299ba282c16fc67c08a2b5ed40c","modified":1601291424613},{"_id":"public/tags/mysql/index.html","hash":"a97d7add6adb45b8c027e14e9c38713cac1cdd0f","modified":1601291424613},{"_id":"public/tags/Markdown/index.html","hash":"31f161cb95760dd47162c2f006dce03a35cfb9e0","modified":1601291424613},{"_id":"public/tags/Netty/index.html","hash":"5c92e4b69a46bcdf72fb549a6ea236f23deed978","modified":1601291424613},{"_id":"public/tags/RabbitMQ/index.html","hash":"1f6aab988a25e1b2a630bcd70ffcadd84adffe33","modified":1601291424613},{"_id":"public/tags/消息队列/index.html","hash":"2152ab9541822d0e5f6daa5f7320a5b211f909c1","modified":1601291424613},{"_id":"public/tags/Pinpoint/index.html","hash":"4eb3243c7797b9d426657412d20c3f771b9fc350","modified":1601291424613},{"_id":"public/tags/链路追踪/index.html","hash":"6ad7f9d4f4e0420fc21a16752c1b4ca9fa6fd985","modified":1601291424613},{"_id":"public/tags/网关/index.html","hash":"0eb373e1415a31334bb0fad853ceae9c346aa8c7","modified":1601291424613},{"_id":"public/tags/angularjs2/index.html","hash":"341e73f24d11cb6b89b7d202720c094c160492c1","modified":1601291424613},{"_id":"public/tags/面试题/index.html","hash":"64447ad0a891a94ba5ec69b82401c8aba79bb3ee","modified":1601291424613},{"_id":"public/tags/java/index.html","hash":"a431c591c2735a5fa539fd33d92d6da14f5a032f","modified":1601291424613},{"_id":"public/tags/Stored-Procedure/index.html","hash":"22fe262dc6bd063bcdb99755407a52988d069f8c","modified":1601291424613},{"_id":"public/tags/dubbo/index.html","hash":"463eeecf61384ddcae28c7bd5b40a36afd90a000","modified":1601291424614},{"_id":"public/tags/编译原理/index.html","hash":"2dba3c5b9e423b40584a38a34d6aa4a9bb0acad2","modified":1601291424613},{"_id":"public/tags/随笔/index.html","hash":"98b49fbbb819dd2a50e56c710b8277c9ed019a94","modified":1601291424614},{"_id":"public/tags/微信小程序/index.html","hash":"c3a9c0e7b13b546264aba91a77aa4bedb6669eb8","modified":1601291424614},{"_id":"public/tags/Hexo/index.html","hash":"773b95230a68abff47826292495b9e874008469e","modified":1601291424614},{"_id":"public/tags/hexo/index.html","hash":"caaa21b779c018babb4080dc6cd758083771e336","modified":1601291424614},{"_id":"public/tags/汇编语言/index.html","hash":"55b15eeae68847b47634d33848d9530ac9d42159","modified":1601291424614},{"_id":"public/tags/java泛型/index.html","hash":"2a2fb5715fa79a1adf6d55bb665bbdbf670f6977","modified":1601291424614},{"_id":"public/tags/CI/index.html","hash":"3800729e1ce08bfd657a73d7581c89eb4ba361b8","modified":1601291424614},{"_id":"public/tags/其他/index.html","hash":"9b31fc61ecb0ba57cf1847b723ade6ee592772f4","modified":1601291424614},{"_id":"public/tags/jQuery/index.html","hash":"87c1e4743051cab207767e6eae293124f02876b3","modified":1601291424614},{"_id":"public/tags/iframe/index.html","hash":"01c9114a51ea7e7ce8a32bcf2d5fcf35785dc86d","modified":1601291424614},{"_id":"public/tags/里约/index.html","hash":"5c90c23369ea6d7a242fa2f3ed51fbc2325caa23","modified":1601291424614},{"_id":"public/tags/Lua/index.html","hash":"dafe3e9d8e27a11b2beda5a497f52b80c13fc271","modified":1601291424614},{"_id":"public/tags/Linux/index.html","hash":"cbd3c9b87df72c9a154a87d07578f17486bcc6ad","modified":1601291424614},{"_id":"public/tags/maven/index.html","hash":"9c3596940ca2410c214fa4d5aadd40cc2f110c00","modified":1601291424615},{"_id":"public/tags/mac/index.html","hash":"ecdb3ae67b98d853e02aade26485e5b537109c0a","modified":1601291424614},{"_id":"public/tags/markdown/index.html","hash":"8d185a54fb4ebd0f0b259496379429da05b9e2d3","modified":1601291424615},{"_id":"public/tags/mongodb/index.html","hash":"a0ab83db9eafbd57918edf94da6b017ccaefdffe","modified":1601291424615},{"_id":"public/tags/网站/index.html","hash":"c1e848525a9a696b119c9f479c8e5f8b30517857","modified":1601291424615},{"_id":"public/tags/mybatis/index.html","hash":"0aa438d78da40aee3e4e9b7bb34b7c3a2b89f5f8","modified":1601291424615},{"_id":"public/tags/索引/index.html","hash":"bc61e77a7af34e3be11b29ce346e2f545aafcd47","modified":1601291424615},{"_id":"public/tags/NBA/index.html","hash":"8ec9b8711dc7848c1fb12adcb1bcbe638dcea857","modified":1601291424615},{"_id":"public/tags/Transaction/index.html","hash":"9fe4f541b1f8c4cdfb4d98d22d175b89efa6905a","modified":1601291424615},{"_id":"public/tags/node/index.html","hash":"568edae0b3fbd74005604a6ceec77eab1dfcc726","modified":1601291424615},{"_id":"public/tags/node/page/2/index.html","hash":"9a6f254e856c86251a4cd5f464a50443cffa7744","modified":1601291424616},{"_id":"public/tags/Express/index.html","hash":"94a5cacdfffc928c40644c03eafe91633ec835ab","modified":1601291424616},{"_id":"public/tags/异常/index.html","hash":"dd79ce6ee637407d5c8123e9b56dca45214f92ab","modified":1601291424616},{"_id":"public/tags/maxwell/index.html","hash":"823e07eaa81cb71f190dc67bd402152313ec83ab","modified":1601291424616},{"_id":"public/tags/神舟飞船/index.html","hash":"8c55ed604b17ba3c6a723a34d43b0704ed4d0424","modified":1601291424616},{"_id":"public/tags/servlet/index.html","hash":"dbb7a085cf646029b3b615b4771edfb5a38ef7df","modified":1601291424616},{"_id":"public/tags/社会/index.html","hash":"ded3eef6a4eb7667edeb7ccddd61a6abfbceafdd","modified":1601291424617},{"_id":"public/tags/spring-batch/index.html","hash":"bacaa903c86613257ca286db0c17185f15ce5828","modified":1601291424617},{"_id":"public/tags/sublime-text/index.html","hash":"442962a46ba45da1923d2f96edf26f96b134673e","modified":1601291424617},{"_id":"public/tags/starUML/index.html","hash":"c72492c3a845f2cd1172e85a61fb0d85d87f8a79","modified":1601291424617},{"_id":"public/tags/GoF/index.html","hash":"27f40a5039452affbecdee44c3267b12d6b8370a","modified":1601291424617},{"_id":"public/tags/svn/index.html","hash":"a3c495b6d13e2104cdbba692efc49c5582ce662c","modified":1601291424617},{"_id":"public/tags/vim/index.html","hash":"d843bc6a9d26e4272d266931f4ca3a9b0a58e117","modified":1601291424617},{"_id":"public/tags/xpath/index.html","hash":"85b85242a36eca972e564caea108f79d7a94d48e","modified":1601291424618},{"_id":"public/tags/游戏/index.html","hash":"1533a2f65745f3bcfb6b246cf0b3d8fbbe9eb687","modified":1601291424618},{"_id":"public/tags/jps/index.html","hash":"4bdd9a02e16a5a01c72ae9b503aef2df9c808306","modified":1601291424618},{"_id":"public/tags/工作/index.html","hash":"b4c9c66bb39fc2486e44efd015d8315de5bff6f7","modified":1601291424618},{"_id":"public/tags/RPC/index.html","hash":"5f40c7dd65e252bae8b1d1866066f4c20b1a9d1d","modified":1601291424618},{"_id":"public/tags/小程序/index.html","hash":"32f4b6c7535331f900d4570c81468b4320a21381","modified":1601291424618},{"_id":"public/tags/如何替换-JDK-的类/index.html","hash":"9f112c366d82ac7e4f65872f68d56a1f5a85a2a0","modified":1601291424618},{"_id":"public/tags/知识/index.html","hash":"763872fa9a2bc2d306ff5b9c7fd6d6e7666581ca","modified":1601291424619},{"_id":"public/tags/学习/index.html","hash":"7270a27e668cb51fd595c0cd70b9f1bf9d52e3c5","modified":1601291424619},{"_id":"public/tags/深克隆/index.html","hash":"0fab70a12e157abe3e96187680f314b924c3b279","modified":1601291424619},{"_id":"public/tags/类装载/index.html","hash":"86d48f54fb6cfb4dfe06fae13da63a85a4e2e3dd","modified":1601291424619},{"_id":"public/tags/系统性能/index.html","hash":"987f9a555033b00040c0f56b0cefdecee8b67bd2","modified":1601291424619},{"_id":"public/tags/缓存/index.html","hash":"cca482273ba5df0baeb985a904f69fabe7d973ae","modified":1601291424619},{"_id":"public/tags/springboot/index.html","hash":"877d288ac47f56e60d5ef6755e1aff931e78d7cd","modified":1601291424619},{"_id":"public/tags/问题/index.html","hash":"e75c8f926c6efe4820ffd10abb6ca5f4e1b70f14","modified":1601291424619},{"_id":"public/tags/Java字节码/index.html","hash":"acc53b1aeee82bd00af21bbc2e67303121bf6009","modified":1601291424619},{"_id":"public/CNAME","hash":"5408e27812b0751751dccca9c358bc78aef2c4f3","modified":1601290702489},{"_id":"public/MP_verify_qP57Rj1DxXdguhhR.txt","hash":"1b8ff1e6bd3573db096d76d81c32d6885ce91696","modified":1601290702489},{"_id":"public/robots.txt","hash":"84a0453358e4b6b61c2161704f29149e52328a45","modified":1601290702489},{"_id":"public/favicon.ico","hash":"dcfdc7b05cb629f3b91a7267c7f304306f461724","modified":1601290702489},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1601290702489},{"_id":"public/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1601290702489},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1601290702489},{"_id":"public/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1601290702489},{"_id":"public/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1601290702489},{"_id":"public/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1601290702489},{"_id":"public/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1601290702489},{"_id":"public/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1601290702489},{"_id":"public/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1601290702489},{"_id":"public/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1601290702489},{"_id":"public/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1601290702489},{"_id":"public/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1601290702489},{"_id":"public/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1601290702489},{"_id":"public/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1601290702489},{"_id":"public/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1601290702489},{"_id":"public/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1601290702489},{"_id":"public/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1601290702489},{"_id":"public/img/head.jpg","hash":"e6b5e664d5e23c99e75fffca7c37cf7cdf2c2ff7","modified":1601290702489},{"_id":"public/img/header.jpg","hash":"5709de9895797d4dc273f0bd3f915d57e3eac1f7","modified":1601290702489},{"_id":"public/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1601290702489},{"_id":"public/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1601290702490},{"_id":"public/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1601290702490},{"_id":"public/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1601290702490},{"_id":"public/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1601290702490},{"_id":"public/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1601290702490},{"_id":"public/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1601290702490},{"_id":"public/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1601290702490},{"_id":"public/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1601290702490},{"_id":"public/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1601290702490},{"_id":"public/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1601290702490},{"_id":"public/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1601290702490},{"_id":"public/2016/08/10/builderpattern/builder.jpg","hash":"20d1d95d449942c57a52c74ee7175a9581668be4","modified":1601290702490},{"_id":"public/2016/08/15/node4/node4.jpg","hash":"98d7e7c0f776f3cbee01a4146af73ff2ee35b687","modified":1601290702490},{"_id":"public/2016/08/16/node8/node8.jpg","hash":"5b0e8b64730829a281e5ebeec52f7ec9f3b6242e","modified":1601290702490},{"_id":"public/2016/10/21/mvnenvironmentseparate/code.jpg","hash":"0b54356b98067887436114dd6d6deafe7ee77b94","modified":1601290702490},{"_id":"public/2016/10/21/mvnenvironmentseparate/maven2.jpg","hash":"1ecc836875bdce934ef017a71beaf2dce128ddd4","modified":1601290702490},{"_id":"public/404.jpg","hash":"ef349b958f15c83b7c39964f25af8042b88312bb","modified":1601290703348},{"_id":"public/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1601290703348},{"_id":"public/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1601290703350},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1601290703362},{"_id":"public/js/mobile.js","hash":"0f4c1fcd6df47a196ed9495c225173402aa7d769","modified":1601290703362},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1601290703362},{"_id":"public/js/main.js","hash":"d58bbc593d94d48e85d4ebfb002910444080cb06","modified":1601290703362},{"_id":"public/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1601290703362},{"_id":"public/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1601290703362},{"_id":"public/js/pc.js","hash":"19a1660b10358046e7a1f398284491519b2ffd47","modified":1601290703362},{"_id":"public/css/style.css","hash":"9acd2f73c97b600819c411874d47eb65da7f3b60","modified":1601290703362},{"_id":"public/2016/08/14/node1/node1.gif","hash":"97e3c47eb1524f354f908fb785af27e5dab1bbc9","modified":1601290703575},{"_id":"public/categories/Spring/index.html","hash":"2731c4eaef2781723681bf1c5b7fbf09209a45eb","modified":1601291424610},{"_id":"public/tags/Spring/index.html","hash":"e6d1bf002a15ff867b2f8046bd13669074da7d11","modified":1601291424620},{"_id":"public/2020/07/15/Spring事务隔离级别/index.html","hash":"284670d7becc910cc30b49a0a642e1c54e77d081","modified":1601291424590},{"_id":"public/2020/07/15/Redis 教程/index.html","hash":"5ff34bd1b4774f28eeb2d259ebd5d66ff954251a","modified":1601291424589},{"_id":"public/2020/07/15/Spring Boot/index.html","hash":"f6be8763c7e01aa6c6d466a99a5a6168ba6e0459","modified":1601291424590},{"_id":"public/2020/05/28/Dubbo请求数据的发送过程/index.html","hash":"6da2ba82890384528ce641b45673a6e19694906a","modified":1601291424592},{"_id":"public/2016/08/14/排序/index.html","hash":"9356b15d01bdda03582eb6afe57f94d808a614df","modified":1601291424600},{"_id":"public/archives/2016/08/page/4/index.html","hash":"214c05e65318ade2c1f2d6178e610534c86b7ddf","modified":1601291424603},{"_id":"public/categories/Redis/index.html","hash":"3ede1aeaac6993cd807a9adbf3ef0455197e1455","modified":1601291424610},{"_id":"public/tags/Redis/index.html","hash":"09b57039883b632dbc5197dca4b4730c9bc59eda","modified":1601291424620},{"_id":"source/_posts/Appollo配置中心原理.md","hash":"1e9fecb1971cc1f15cd2f3eaa40caaae1404e1be","modified":1601291299618},{"_id":"source/_posts/Bean的生命周期.md","hash":"9a36ae1da3e2e093c96f454756f9d93b7711970e","modified":1601291335939},{"_id":"source/_posts/MYSQL数据库设计规范.md","hash":"ec81c114231bc01a1a2c8aabc022f901d6d1d577","modified":1601291407024},{"_id":"public/2020/09/28/MYSQL数据库设计规范/index.html","hash":"ac3e163993d070f9905af13d64bab8186425fd02","modified":1601291354884},{"_id":"public/2020/01/17/Bean的生命周期/index.html","hash":"de5e4ade97fe1810845d3e35de95e51bc9b20f61","modified":1601291424594},{"_id":"public/2019/08/17/Appollo配置中心原理/index.html","hash":"30d01fff7981eadc2effd1da225f7f8e1ec1a057","modified":1601291424594},{"_id":"public/archives/2020/page/5/index.html","hash":"d756d810658105a13e1b6e8efb4dfeb222246483","modified":1601291424605},{"_id":"public/archives/2020/01/index.html","hash":"75f17cf5c4a6fb16f18675ef4fd8e5d3a3f9be17","modified":1601291424605},{"_id":"public/categories/Appollo/index.html","hash":"fb4ca2c0361d5d3ebeb7f251e3b5b5f81a52c95a","modified":1601291424610},{"_id":"public/tags/Appollo/index.html","hash":"d4467e58546d518b91ed67eabfad1b5059d267d6","modified":1601291424620},{"_id":"public/categories/MYSQL/index.html","hash":"439c0687caa7d72fb89b2ba856108ac7bff6e6d8","modified":1601291424611},{"_id":"public/tags/MYSQL/index.html","hash":"828e1b39a326c7e75ba1fc66a2362cf1d591225c","modified":1601291424620},{"_id":"public/2020/01/17/MYSQL数据库设计规范/index.html","hash":"0afd479e64e8f47435f7bece5a1635793b4fc0a2","modified":1601291424636},{"_id":"public/tags/数据库/index.html","hash":"2c80db9290d660361aa780f471e7f7d80178402e","modified":1601291424636}],"Category":[{"name":"字节码","_id":"ckfmf4yhp0006esqr5ngpflg2"},{"name":"spring","_id":"ckfmf4yhu000besqrotrumpjt"},{"name":"docker","_id":"ckfmf4yhz000hesqra43vkfhl"},{"name":"数据结构","_id":"ckfmf4yi9000tesqrc0qw7sm4"},{"name":"GC","_id":"ckfmf4yic000yesqr08p0idw8"},{"name":"性能调优","_id":"ckfmf4yih0016esqrfsmlqb19"},{"name":"Mybatis","_id":"ckfmf4yil001cesqrz0i4auks"},{"name":"jvm","_id":"ckfmf4yio001iesqrlbfo6sns"},{"name":"mysql","_id":"ckfmf4yis001oesqrk9j4ccci"},{"name":"Markdown","_id":"ckfmf4yiv001sesqrbgc3zo51"},{"name":"Netty","_id":"ckfmf4yiy001yesqrscjdk9pn"},{"name":"RabbitMQ","_id":"ckfmf4yj10025esqrnqvqcvw9"},{"name":"Pinpoint","_id":"ckfmf4yj30029esqryxriz72k"},{"name":"网关","_id":"ckfmf4yj6002eesqrxr1c6jgq"},{"name":"angularjs2","_id":"ckfmf4yj8002iesqrj0fagy48"},{"name":"面试题","_id":"ckfmf4yj9002lesqr1nv2sahj"},{"name":"设计模式","_id":"ckfmf4ykb0038esqr07zizunw"},{"name":"database","_id":"ckfmf4ykg003eesqrt7g576um"},{"name":"编译原理","_id":"ckfmf4ykk003kesqrhf3u17nf"},{"name":"dubbo","_id":"ckfmf4yks003tesqr6ntj7bd9"},{"name":"随笔","_id":"ckfmf4ykx0041esqrl4mevtu7"},{"name":"微信","_id":"ckfmf4ylc004iesqr0y4t6u24"},{"name":"Hexo","_id":"ckfmf4ylh004oesqr02agu6y3"},{"name":"hexo","_id":"ckfmf4ylt0052esqrlkex9rzt"},{"name":"汇编语言","_id":"ckfmf4yly005aesqr42b65s8e"},{"name":"java","_id":"ckfmf4ym4005iesqr2jejfd2j"},{"name":"java泛型","_id":"ckfmf4yme005yesqrdweenchn"},{"name":"CI","_id":"ckfmf4ymn0069esqr4g2fst72"},{"name":"其他","_id":"ckfmf4yms006fesqri6j8l0c3"},{"name":"jQuery","_id":"ckfmf4ymz006oesqrkbxmstrd"},{"name":"体育","_id":"ckfmf4yn4006uesqrx1kmd3ku"},{"name":"Lua","_id":"ckfmf4yn90072esqr07c4o1ei"},{"name":"Linux","_id":"ckfmf4yne0079esqrbmxw60bt"},{"name":"maven","_id":"ckfmf4ynj007hesqricpq5x7c"},{"name":"mac","_id":"ckfmf4ynn007nesqracvcaljb"},{"name":"markdown","_id":"ckfmf4yns007tesqrh8lkcb3y"},{"name":"mongodb","_id":"ckfmf4ynw007zesqr5b3xnbd2"},{"name":"mybatis","_id":"ckfmf4yof008oesqrbb8mk2rt"},{"name":"NBA","_id":"ckfmf4yoo0093esqrcvadruvk"},{"name":"node","_id":"ckfmf4yov009cesqrvd7lwn1o"},{"name":"异常","_id":"ckfmf4yqo00c0esqrzralimil"},{"name":"maxwell","_id":"ckfmf4yqq00c4esqrl80u888p"},{"name":"神舟飞船","_id":"ckfmf4yqs00c8esqr5mj27eq4"},{"name":"社会","_id":"ckfmf4yqv00ccesqrw1xcxm60"},{"name":"sublime text","_id":"ckfmf4yqy00chesqr0l0wx59w"},{"name":"starUML","_id":"ckfmf4yr000clesqruwkinhwo"},{"name":"svn","_id":"ckfmf4yr300cqesqrtoxnshdc"},{"name":"vim","_id":"ckfmf4yr400cuesqreglxk8sv"},{"name":"xpath","_id":"ckfmf4yr600cyesqrylzlmgpc"},{"name":"游戏","_id":"ckfmf4yr800d2esqrn0rnj2gz"},{"name":"zookeeper","_id":"ckfmf4yra00d5esqrfipo3ig4"},{"name":"jps","_id":"ckfmf4yrc00daesqrkm8vekt8"},{"name":"工作","_id":"ckfmf4yrh00djesqrsmtxjft5"},{"name":"RPC","_id":"ckfmf4yri00dnesqrcf3b4ofn"},{"name":"小程序","_id":"ckfmf4yrk00dresqr8usnv6r0"},{"name":"如何替换 JDK 的类","_id":"ckfmf4yrn00dvesqr431b4xge"},{"name":"技巧","_id":"ckfmf4yrp00e0esqrh83by9yl"},{"name":"学习","_id":"ckfmf4yrr00e4esqrfny2acw8"},{"name":"消息队列","_id":"ckfmf4yrt00e8esqrhh9k2916"},{"name":"深克隆","_id":"ckfmf4yrv00ecesqrkxu9io2x"},{"name":"类装载","_id":"ckfmf4yrx00egesqrd1hiqzkl"},{"name":"系统性能","_id":"ckfmf4ys200eoesqrnw92ffyv"},{"name":"mst","_id":"ckfmf4ys500esesqrpqqbmtij"},{"name":"springboot","_id":"ckfmf4ys800ewesqrgy1ppe2i"},{"name":"问题","_id":"ckfmf4ysa00f0esqryadw3n05"},{"name":"Java字节码","_id":"ckfmf4ytc00fiesqrtk4y0c7g"},{"name":"Spring","_id":"ckfmf82hw0003vgqrlyaith0f"},{"name":"Redis","_id":"ckfmf9hey0009vgqr01ziulid"},{"name":"Appollo","_id":"ckfmfhueq0003t8qrm07p7aqx"},{"name":"MYSQL","_id":"ckfmfk5aa0001m8qrtfk5vxr4"}],"Data":[],"Page":[{"layout":"false","title":"google","date":"2016-11-05T12:03:48.000Z","_content":"220b395acc0592ed9e1bd5c622a024d0","source":"webscan_360_cn.html","raw":"layout: false\ntitle: \"google\"\ndate: 2016-11-05 20:03:48\n---\n220b395acc0592ed9e1bd5c622a024d0","updated":"2016-11-10T10:13:54.240Z","path":"webscan_360_cn.html","comments":1,"_id":"ckfmf4yge0000esqr2fgp21ml","content":"220b395acc0592ed9e1bd5c622a024d0","excerpt":"","more":"220b395acc0592ed9e1bd5c622a024d0"},{"layout":"false","title":"google","date":"2016-11-05T12:03:48.000Z","_content":"google-site-verification: google7ca39094aba4a60e.html","source":"google7ca39094aba4a60e.html","raw":"layout: false\ntitle: \"google\"\ndate: 2016-11-05 20:03:48\n---\ngoogle-site-verification: google7ca39094aba4a60e.html","updated":"2016-11-10T10:13:45.676Z","path":"google7ca39094aba4a60e.html","comments":1,"_id":"ckfmf4ygj0001esqrqp3wrd7x","content":"google-site-verification: google7ca39094aba4a60e.html","excerpt":"","more":"google-site-verification: google7ca39094aba4a60e.html"},{"title":"404","date":"2016-07-30T14:18:06.000Z","layout":"false","_content":"<html>\n   <head>\n        <meta charset=\"UTF-8\" />\n        <title>404</title>                                                                                                                                       \n   </head>\n   <body>\n   <iframe scrolling='no' frameborder='0' src='http://yibo.iyiyun.com/Home/Distribute/ad404/key/1189509' width='654' height='470' style='display:block;'></iframe>\n   </body>\n</html>","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2016-07-30 22:18:06\npermalink: /404\nlayout: false\n---\n<html>\n   <head>\n        <meta charset=\"UTF-8\" />\n        <title>404</title>                                                                                                                                       \n   </head>\n   <body>\n   <iframe scrolling='no' frameborder='0' src='http://yibo.iyiyun.com/Home/Distribute/ad404/key/1189509' width='654' height='470' style='display:block;'></iframe>\n   </body>\n</html>","updated":"2016-09-27T03:19:47.117Z","path":"/404.html","comments":1,"_id":"ckfmf4yhl0003esqr1vwnf8mo","content":"<html><br>   <head><br>        <meta charset=\"UTF-8\"><br>        <title>404</title><br>   </head><br>   <body><br>   <iframe scrolling=\"no\" frameborder=\"0\" src=\"http://yibo.iyiyun.com/Home/Distribute/ad404/key/1189509\" width=\"654\" height=\"470\" style=\"display:block;\"></iframe><br>   </body><br></html>","excerpt":"","more":"<html><br>   <head><br>        <meta charset=\"UTF-8\"><br>        <title>404</title><br>   </head><br>   <body><br>   <iframe scrolling=\"no\" frameborder=\"0\" src=\"http://yibo.iyiyun.com/Home/Distribute/ad404/key/1189509\" width=\"654\" height=\"470\" style=\"display:block;\"></iframe><br>   </body><br></html>"},{"title":"about","date":"2016-07-30T14:18:13.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-30 22:18:13\ncomments: false\n---\n","updated":"2016-10-09T09:25:30.818Z","path":"about/index.html","layout":"page","_id":"ckfmf4yk80034esqrmoai8i08","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-07-30T14:18:20.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-07-30 22:18:20\n---\n","updated":"2016-09-21T08:13:13.013Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckfmf4yka0036esqrytt5csjq","content":"","excerpt":"","more":""}],"Post":[{"title":"Class文件格式","date":"2020-05-28T12:10:32.000Z","_content":"\n## Class文件格式\n\n| 类型 | 名称                | 数量                  |\n| ---- | ------------------- | --------------------- |\n| u4   | magic               | 1                     |\n| u2    | minor_version       | 1                     |\n| u2    | major_version       | 1                     |\n| u2    | constant_pool_count | 1                     |\n| cp_info | constant_pool       | constant_pool_count-1 |\n| u2    | access_flag         | 1                     |\n| u2    | this_class          | 1                     |\n| u2    | super_class         | 1                     |\n| u2    | interfaces_count    | 1                     |\n| u2    | interfaces          | interfaces_count      |\n| u2    | fields_count        | 1                     |\n| field_info | fields              | fields_count          |\n| u2    | methods_count       | 1                     |\n| method_info | methods             | methods_count         |\n| u2    | attributes_count    | 1                     |\n| attribute_info | attributes          | attributes_count      |\n\n\n\n字节码的组成：\n\n- 魔数（magic）+最小版本号（monir_version）+最大版本号(major_version)\n- 常量池大小+常量池\n- 访问标志\n- 类索引，父类索引，接口索引集合\n- 字段表集合\n- 方法表集合\n- 属性表集合","source":"_posts/Class文件格式.md","raw":"---\ntitle: Class文件格式\ndate: 2020-05-28 20:10:32\ncategories: [字节码]\ntags: [字节码]\n---\n\n## Class文件格式\n\n| 类型 | 名称                | 数量                  |\n| ---- | ------------------- | --------------------- |\n| u4   | magic               | 1                     |\n| u2    | minor_version       | 1                     |\n| u2    | major_version       | 1                     |\n| u2    | constant_pool_count | 1                     |\n| cp_info | constant_pool       | constant_pool_count-1 |\n| u2    | access_flag         | 1                     |\n| u2    | this_class          | 1                     |\n| u2    | super_class         | 1                     |\n| u2    | interfaces_count    | 1                     |\n| u2    | interfaces          | interfaces_count      |\n| u2    | fields_count        | 1                     |\n| field_info | fields              | fields_count          |\n| u2    | methods_count       | 1                     |\n| method_info | methods             | methods_count         |\n| u2    | attributes_count    | 1                     |\n| attribute_info | attributes          | attributes_count      |\n\n\n\n字节码的组成：\n\n- 魔数（magic）+最小版本号（monir_version）+最大版本号(major_version)\n- 常量池大小+常量池\n- 访问标志\n- 类索引，父类索引，接口索引集合\n- 字段表集合\n- 方法表集合\n- 属性表集合","slug":"Class文件格式","published":1,"updated":"2020-09-28T10:50:35.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yhh0002esqrp4zhmree","content":"<h2 id=\"Class文件格式\"><a href=\"#Class文件格式\" class=\"headerlink\" title=\"Class文件格式\"></a>Class文件格式</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u4</td>\n<td>magic</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>minor_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>major_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>constant_pool_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>cp_info</td>\n<td>constant_pool</td>\n<td>constant_pool_count-1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>access_flag</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>this_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>super_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>interfaces_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>interfaces</td>\n<td>interfaces_count</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>fields_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>field_info</td>\n<td>fields</td>\n<td>fields_count</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>methods_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>method_info</td>\n<td>methods</td>\n<td>methods_count</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>attributes_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>attribute_info</td>\n<td>attributes</td>\n<td>attributes_count</td>\n</tr>\n</tbody>\n</table>\n<p>字节码的组成：</p>\n<ul>\n<li>魔数（magic）+最小版本号（monir_version）+最大版本号(major_version)</li>\n<li>常量池大小+常量池</li>\n<li>访问标志</li>\n<li>类索引，父类索引，接口索引集合</li>\n<li>字段表集合</li>\n<li>方法表集合</li>\n<li>属性表集合</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Class文件格式\"><a href=\"#Class文件格式\" class=\"headerlink\" title=\"Class文件格式\"></a>Class文件格式</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>名称</th>\n<th>数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>u4</td>\n<td>magic</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>minor_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>major_version</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>constant_pool_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>cp_info</td>\n<td>constant_pool</td>\n<td>constant_pool_count-1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>access_flag</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>this_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>super_class</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>interfaces_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>interfaces</td>\n<td>interfaces_count</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>fields_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>field_info</td>\n<td>fields</td>\n<td>fields_count</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>methods_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>method_info</td>\n<td>methods</td>\n<td>methods_count</td>\n</tr>\n<tr>\n<td>u2</td>\n<td>attributes_count</td>\n<td>1</td>\n</tr>\n<tr>\n<td>attribute_info</td>\n<td>attributes</td>\n<td>attributes_count</td>\n</tr>\n</tbody>\n</table>\n<p>字节码的组成：</p>\n<ul>\n<li>魔数（magic）+最小版本号（monir_version）+最大版本号(major_version)</li>\n<li>常量池大小+常量池</li>\n<li>访问标志</li>\n<li>类索引，父类索引，接口索引集合</li>\n<li>字段表集合</li>\n<li>方法表集合</li>\n<li>属性表集合</li>\n</ul>\n"},{"title":"Context初始化流程","date":"2020-05-28T12:10:32.000Z","_content":"\nContext初始化流程\n\n1.prepareRefresh\n\n对刷新进行准备，包括设置开始时间、设置激活状态、初始化context环境中的占位符这个动作，根据之类的需求由子类来执行，然后验证是否却是必要的properties。\n\n2.ConfiguratbleListableBeanFactory beanFactory=obtainFreshBeanfactory();\n\n刷新并获得内部的Bean Factory。\n\n3.prepareBeanFactory(beanFactory);\n\n对beanFactory进行准备工作，比如设置类加载器和后置处理器，配置不进行自动装配的类型，注册默认的环境Bean。\n\n4.postProcessBeanFactory(beanFactory);\n\n为context的子类提供后置处理BeanFactory的扩展能力。如果子类想在Bean定义加载完成后，开始初始化上下文之前，做一些特殊逻辑，可以复写这个方法。\n\n5.invokeBeanFactotyPostProcessors(beanFactory);\n\n执行context中注册的beanfactory后缀处理器，这里有两种后置处理器一种是可以注册bean的后缀处理器。另一种是针对beanfactory进行处理的后置处理器。执行顺序是，先按照优先级执行可注册Bean的处理器，再按优先级执行针对Beanfactory的处理器。对springboot来书，这一步会进行BeanDefinition的解析。\n\n6.registerBeanPostProcessors(beanFactory);\n\n按照优先顺序在BeanFactory中注册Bean的后缀处理器，Bean后置处理器可以在Bean初始化前、后执行处理。\n\n7.initMessageSource();\n\n初始化消息源，消息源用来支持消息的国际化。\n\n8.initApplicationEventMulticaster();\n\n初始化应用事件广播器。事件广播器用来向ApplicationListener通知各种应用产生的事件，是一个标准的观察者模式。\n\n9.onRefresh();\n\n是留给子类的扩展步骤，用来让特定的Context子类初始化其他的bean。\n\n10.registerListeners();\n\n把实现了ApplicationListener的Bean注册到事件广播器，并对广播器中的早期未广播事件进行通知。\n\n11.finishBeanFactoryInitialization(beanFactory);\n\n冻结所有的Bean描述信息的修改，实例化非延迟加载的单例Bean\n\n12.finishRefresh();\n\n完成上下文的刷新工作，调用LifecycleProcessor的onFresh()方法以及发布ContextRefreshedEvent事件。\n\n13.resetCommonCaches();\n\n在finally中，执行第13步，重置公共的缓存，比如ReflectonUtils中的缓存、AnnotationUtils中的缓存等等。\n\n","source":"_posts/Context初始化流程.md","raw":"---\ntitle: Context初始化流程\ndate: 2020-05-28 20:10:32\ncategories: [spring]\ntags: [spring]\n---\n\nContext初始化流程\n\n1.prepareRefresh\n\n对刷新进行准备，包括设置开始时间、设置激活状态、初始化context环境中的占位符这个动作，根据之类的需求由子类来执行，然后验证是否却是必要的properties。\n\n2.ConfiguratbleListableBeanFactory beanFactory=obtainFreshBeanfactory();\n\n刷新并获得内部的Bean Factory。\n\n3.prepareBeanFactory(beanFactory);\n\n对beanFactory进行准备工作，比如设置类加载器和后置处理器，配置不进行自动装配的类型，注册默认的环境Bean。\n\n4.postProcessBeanFactory(beanFactory);\n\n为context的子类提供后置处理BeanFactory的扩展能力。如果子类想在Bean定义加载完成后，开始初始化上下文之前，做一些特殊逻辑，可以复写这个方法。\n\n5.invokeBeanFactotyPostProcessors(beanFactory);\n\n执行context中注册的beanfactory后缀处理器，这里有两种后置处理器一种是可以注册bean的后缀处理器。另一种是针对beanfactory进行处理的后置处理器。执行顺序是，先按照优先级执行可注册Bean的处理器，再按优先级执行针对Beanfactory的处理器。对springboot来书，这一步会进行BeanDefinition的解析。\n\n6.registerBeanPostProcessors(beanFactory);\n\n按照优先顺序在BeanFactory中注册Bean的后缀处理器，Bean后置处理器可以在Bean初始化前、后执行处理。\n\n7.initMessageSource();\n\n初始化消息源，消息源用来支持消息的国际化。\n\n8.initApplicationEventMulticaster();\n\n初始化应用事件广播器。事件广播器用来向ApplicationListener通知各种应用产生的事件，是一个标准的观察者模式。\n\n9.onRefresh();\n\n是留给子类的扩展步骤，用来让特定的Context子类初始化其他的bean。\n\n10.registerListeners();\n\n把实现了ApplicationListener的Bean注册到事件广播器，并对广播器中的早期未广播事件进行通知。\n\n11.finishBeanFactoryInitialization(beanFactory);\n\n冻结所有的Bean描述信息的修改，实例化非延迟加载的单例Bean\n\n12.finishRefresh();\n\n完成上下文的刷新工作，调用LifecycleProcessor的onFresh()方法以及发布ContextRefreshedEvent事件。\n\n13.resetCommonCaches();\n\n在finally中，执行第13步，重置公共的缓存，比如ReflectonUtils中的缓存、AnnotationUtils中的缓存等等。\n\n","slug":"Context初始化流程","published":1,"updated":"2020-09-28T10:49:44.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yhm0004esqrbxqq1n6d","content":"<p>Context初始化流程</p>\n<p>1.prepareRefresh</p>\n<p>对刷新进行准备，包括设置开始时间、设置激活状态、初始化context环境中的占位符这个动作，根据之类的需求由子类来执行，然后验证是否却是必要的properties。</p>\n<p>2.ConfiguratbleListableBeanFactory beanFactory=obtainFreshBeanfactory();</p>\n<p>刷新并获得内部的Bean Factory。</p>\n<p>3.prepareBeanFactory(beanFactory);</p>\n<p>对beanFactory进行准备工作，比如设置类加载器和后置处理器，配置不进行自动装配的类型，注册默认的环境Bean。</p>\n<p>4.postProcessBeanFactory(beanFactory);</p>\n<p>为context的子类提供后置处理BeanFactory的扩展能力。如果子类想在Bean定义加载完成后，开始初始化上下文之前，做一些特殊逻辑，可以复写这个方法。</p>\n<p>5.invokeBeanFactotyPostProcessors(beanFactory);</p>\n<p>执行context中注册的beanfactory后缀处理器，这里有两种后置处理器一种是可以注册bean的后缀处理器。另一种是针对beanfactory进行处理的后置处理器。执行顺序是，先按照优先级执行可注册Bean的处理器，再按优先级执行针对Beanfactory的处理器。对springboot来书，这一步会进行BeanDefinition的解析。</p>\n<p>6.registerBeanPostProcessors(beanFactory);</p>\n<p>按照优先顺序在BeanFactory中注册Bean的后缀处理器，Bean后置处理器可以在Bean初始化前、后执行处理。</p>\n<p>7.initMessageSource();</p>\n<p>初始化消息源，消息源用来支持消息的国际化。</p>\n<p>8.initApplicationEventMulticaster();</p>\n<p>初始化应用事件广播器。事件广播器用来向ApplicationListener通知各种应用产生的事件，是一个标准的观察者模式。</p>\n<p>9.onRefresh();</p>\n<p>是留给子类的扩展步骤，用来让特定的Context子类初始化其他的bean。</p>\n<p>10.registerListeners();</p>\n<p>把实现了ApplicationListener的Bean注册到事件广播器，并对广播器中的早期未广播事件进行通知。</p>\n<p>11.finishBeanFactoryInitialization(beanFactory);</p>\n<p>冻结所有的Bean描述信息的修改，实例化非延迟加载的单例Bean</p>\n<p>12.finishRefresh();</p>\n<p>完成上下文的刷新工作，调用LifecycleProcessor的onFresh()方法以及发布ContextRefreshedEvent事件。</p>\n<p>13.resetCommonCaches();</p>\n<p>在finally中，执行第13步，重置公共的缓存，比如ReflectonUtils中的缓存、AnnotationUtils中的缓存等等。</p>\n","excerpt":"","more":"<p>Context初始化流程</p>\n<p>1.prepareRefresh</p>\n<p>对刷新进行准备，包括设置开始时间、设置激活状态、初始化context环境中的占位符这个动作，根据之类的需求由子类来执行，然后验证是否却是必要的properties。</p>\n<p>2.ConfiguratbleListableBeanFactory beanFactory=obtainFreshBeanfactory();</p>\n<p>刷新并获得内部的Bean Factory。</p>\n<p>3.prepareBeanFactory(beanFactory);</p>\n<p>对beanFactory进行准备工作，比如设置类加载器和后置处理器，配置不进行自动装配的类型，注册默认的环境Bean。</p>\n<p>4.postProcessBeanFactory(beanFactory);</p>\n<p>为context的子类提供后置处理BeanFactory的扩展能力。如果子类想在Bean定义加载完成后，开始初始化上下文之前，做一些特殊逻辑，可以复写这个方法。</p>\n<p>5.invokeBeanFactotyPostProcessors(beanFactory);</p>\n<p>执行context中注册的beanfactory后缀处理器，这里有两种后置处理器一种是可以注册bean的后缀处理器。另一种是针对beanfactory进行处理的后置处理器。执行顺序是，先按照优先级执行可注册Bean的处理器，再按优先级执行针对Beanfactory的处理器。对springboot来书，这一步会进行BeanDefinition的解析。</p>\n<p>6.registerBeanPostProcessors(beanFactory);</p>\n<p>按照优先顺序在BeanFactory中注册Bean的后缀处理器，Bean后置处理器可以在Bean初始化前、后执行处理。</p>\n<p>7.initMessageSource();</p>\n<p>初始化消息源，消息源用来支持消息的国际化。</p>\n<p>8.initApplicationEventMulticaster();</p>\n<p>初始化应用事件广播器。事件广播器用来向ApplicationListener通知各种应用产生的事件，是一个标准的观察者模式。</p>\n<p>9.onRefresh();</p>\n<p>是留给子类的扩展步骤，用来让特定的Context子类初始化其他的bean。</p>\n<p>10.registerListeners();</p>\n<p>把实现了ApplicationListener的Bean注册到事件广播器，并对广播器中的早期未广播事件进行通知。</p>\n<p>11.finishBeanFactoryInitialization(beanFactory);</p>\n<p>冻结所有的Bean描述信息的修改，实例化非延迟加载的单例Bean</p>\n<p>12.finishRefresh();</p>\n<p>完成上下文的刷新工作，调用LifecycleProcessor的onFresh()方法以及发布ContextRefreshedEvent事件。</p>\n<p>13.resetCommonCaches();</p>\n<p>在finally中，执行第13步，重置公共的缓存，比如ReflectonUtils中的缓存、AnnotationUtils中的缓存等等。</p>\n"},{"title":"docker 容器数据卷","date":"2020-05-28T15:10:32.000Z","_content":"\n## Dockerfile指令\n\n#### FROM \n\n  基础镜像，当前镜像是基于哪个镜像的\n\n#### MAINTAINER\n\n  镜像维护者的姓名和邮箱地址等\n\n#### WORKDIR\n\n  指定创建容器后，终端默认位置（pwd的位置）\n\n#### ENV \n\n  构建镜像过程中的环境变量\n\n##### RUN\n\n  构建容器过程中的执行的命令\n\n#### EXPOSE\n\n  当前容器对外暴露出的端口\n\n#### VOLUME\n\n  容器数据卷，用于数据保存和持久化\n\n#### ADD\n\n  将宿主机目录下的文件拷贝到镜像中，且会解压 tar包和自动处理URL\n\n#### COPY\n\n  \n\n#### CMD\n\n指定容器启动时要执行的命令\n\n#### ENTRYPOINT\n\n\n\n#### ONBUILD\n\n","source":"_posts/Dockerfile指令.md","raw":"---\ntitle: docker 容器数据卷\ndate: 2020-05-28 23:10:32\ncategories: [docker]\ntags: [docker]\n---\n\n## Dockerfile指令\n\n#### FROM \n\n  基础镜像，当前镜像是基于哪个镜像的\n\n#### MAINTAINER\n\n  镜像维护者的姓名和邮箱地址等\n\n#### WORKDIR\n\n  指定创建容器后，终端默认位置（pwd的位置）\n\n#### ENV \n\n  构建镜像过程中的环境变量\n\n##### RUN\n\n  构建容器过程中的执行的命令\n\n#### EXPOSE\n\n  当前容器对外暴露出的端口\n\n#### VOLUME\n\n  容器数据卷，用于数据保存和持久化\n\n#### ADD\n\n  将宿主机目录下的文件拷贝到镜像中，且会解压 tar包和自动处理URL\n\n#### COPY\n\n  \n\n#### CMD\n\n指定容器启动时要执行的命令\n\n#### ENTRYPOINT\n\n\n\n#### ONBUILD\n\n","slug":"Dockerfile指令","published":1,"updated":"2020-08-04T04:47:30.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yhq0007esqrza9fu02f","content":"<h2 id=\"Dockerfile指令\"><a href=\"#Dockerfile指令\" class=\"headerlink\" title=\"Dockerfile指令\"></a>Dockerfile指令</h2><h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>  基础镜像，当前镜像是基于哪个镜像的</p>\n<h4 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h4><p>  镜像维护者的姓名和邮箱地址等</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><p>  指定创建容器后，终端默认位置（pwd的位置）</p>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p>  构建镜像过程中的环境变量</p>\n<h5 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h5><p>  构建容器过程中的执行的命令</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p>  当前容器对外暴露出的端口</p>\n<h4 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h4><p>  容器数据卷，用于数据保存和持久化</p>\n<h4 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h4><p>  将宿主机目录下的文件拷贝到镜像中，且会解压 tar包和自动处理URL</p>\n<h4 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h4><h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p>指定容器启动时要执行的命令</p>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4>","excerpt":"","more":"<h2 id=\"Dockerfile指令\"><a href=\"#Dockerfile指令\" class=\"headerlink\" title=\"Dockerfile指令\"></a>Dockerfile指令</h2><h4 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h4><p>  基础镜像，当前镜像是基于哪个镜像的</p>\n<h4 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h4><p>  镜像维护者的姓名和邮箱地址等</p>\n<h4 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h4><p>  指定创建容器后，终端默认位置（pwd的位置）</p>\n<h4 id=\"ENV\"><a href=\"#ENV\" class=\"headerlink\" title=\"ENV\"></a>ENV</h4><p>  构建镜像过程中的环境变量</p>\n<h5 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h5><p>  构建容器过程中的执行的命令</p>\n<h4 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h4><p>  当前容器对外暴露出的端口</p>\n<h4 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h4><p>  容器数据卷，用于数据保存和持久化</p>\n<h4 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h4><p>  将宿主机目录下的文件拷贝到镜像中，且会解压 tar包和自动处理URL</p>\n<h4 id=\"COPY\"><a href=\"#COPY\" class=\"headerlink\" title=\"COPY\"></a>COPY</h4><h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p>指定容器启动时要执行的命令</p>\n<h4 id=\"ENTRYPOINT\"><a href=\"#ENTRYPOINT\" class=\"headerlink\" title=\"ENTRYPOINT\"></a>ENTRYPOINT</h4><h4 id=\"ONBUILD\"><a href=\"#ONBUILD\" class=\"headerlink\" title=\"ONBUILD\"></a>ONBUILD</h4>"},{"title":"Docker搭建zookeeper集群","date":"2020-05-28T12:10:32.000Z","_content":"\n\n## Docker搭建zookeeper集群\n\n准备在3台虚拟机上搭建zookeeper集群\n\n#### 创建挂载目录\n\n用于存储配置文件和数据，使用docker数据和配置文件等需要放在自己的宿主机，而不是容器内，特别是数据\n\n`mkdir -p zookeeper/conf`\n\n`mkdir -p zookeeper/data`\n\n#### 创建配置文件\n\n在zookeeper/data下创建zoo.cfg\n\ntouch `zoo.cfg`\n\nclientPort=2181 \ndataDir=/data \ndataLogDir=/data/log \ntickTime=2000 \ninitLimit=5 \nsyncLimit=2 \nautopurge.snapRetainCount=3 \nautopurge.purgeInterval=0 \nmaxClientCnxns=60 \nserver.111=10.255.200.168:2888:3888\nserver.222=10.255.200.174:2888:3888\nserver.233=10.255.200.172:2888:3888\n\n#### 配置myid\n\n在zookeeper/data目录下创建**myid**，并配置id，里面的**id一定要和上面配置的server.id一致**\n\n`touch myid`\n\n`echo 111 > myid`\n\n#### 启动容器\n\ndocker run  --network host -v /usr/local/zookeeper/data:/data -v  /usr/local/zookeeper/conf:/conf --name zookeeper-2181 -d zookeeper:3.4.13\n\n","source":"_posts/Docker搭建zookeeper集群.md","raw":"---\ntitle: Docker搭建zookeeper集群\ndate: 2020-05-28 20:10:32\ncategories: [docker]\ntags: [docker,zookeeper]\n---\n\n\n## Docker搭建zookeeper集群\n\n准备在3台虚拟机上搭建zookeeper集群\n\n#### 创建挂载目录\n\n用于存储配置文件和数据，使用docker数据和配置文件等需要放在自己的宿主机，而不是容器内，特别是数据\n\n`mkdir -p zookeeper/conf`\n\n`mkdir -p zookeeper/data`\n\n#### 创建配置文件\n\n在zookeeper/data下创建zoo.cfg\n\ntouch `zoo.cfg`\n\nclientPort=2181 \ndataDir=/data \ndataLogDir=/data/log \ntickTime=2000 \ninitLimit=5 \nsyncLimit=2 \nautopurge.snapRetainCount=3 \nautopurge.purgeInterval=0 \nmaxClientCnxns=60 \nserver.111=10.255.200.168:2888:3888\nserver.222=10.255.200.174:2888:3888\nserver.233=10.255.200.172:2888:3888\n\n#### 配置myid\n\n在zookeeper/data目录下创建**myid**，并配置id，里面的**id一定要和上面配置的server.id一致**\n\n`touch myid`\n\n`echo 111 > myid`\n\n#### 启动容器\n\ndocker run  --network host -v /usr/local/zookeeper/data:/data -v  /usr/local/zookeeper/conf:/conf --name zookeeper-2181 -d zookeeper:3.4.13\n\n","slug":"Docker搭建zookeeper集群","published":1,"updated":"2020-08-04T04:48:09.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yhr0008esqry50pqgnw","content":"<h2 id=\"Docker搭建zookeeper集群\"><a href=\"#Docker搭建zookeeper集群\" class=\"headerlink\" title=\"Docker搭建zookeeper集群\"></a>Docker搭建zookeeper集群</h2><p>准备在3台虚拟机上搭建zookeeper集群</p>\n<h4 id=\"创建挂载目录\"><a href=\"#创建挂载目录\" class=\"headerlink\" title=\"创建挂载目录\"></a>创建挂载目录</h4><p>用于存储配置文件和数据，使用docker数据和配置文件等需要放在自己的宿主机，而不是容器内，特别是数据</p>\n<p><code>mkdir -p zookeeper/conf</code></p>\n<p><code>mkdir -p zookeeper/data</code></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>在zookeeper/data下创建zoo.cfg</p>\n<p>touch <code>zoo.cfg</code></p>\n<p>clientPort=2181<br>dataDir=/data<br>dataLogDir=/data/log<br>tickTime=2000<br>initLimit=5<br>syncLimit=2<br>autopurge.snapRetainCount=3<br>autopurge.purgeInterval=0<br>maxClientCnxns=60<br>server.111=10.255.200.168:2888:3888<br>server.222=10.255.200.174:2888:3888<br>server.233=10.255.200.172:2888:3888</p>\n<h4 id=\"配置myid\"><a href=\"#配置myid\" class=\"headerlink\" title=\"配置myid\"></a>配置myid</h4><p>在zookeeper/data目录下创建<strong>myid</strong>，并配置id，里面的<strong>id一定要和上面配置的server.id一致</strong></p>\n<p><code>touch myid</code></p>\n<p><code>echo 111 &gt; myid</code></p>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><p>docker run  –network host -v /usr/local/zookeeper/data:/data -v  /usr/local/zookeeper/conf:/conf –name zookeeper-2181 -d zookeeper:3.4.13</p>\n","excerpt":"","more":"<h2 id=\"Docker搭建zookeeper集群\"><a href=\"#Docker搭建zookeeper集群\" class=\"headerlink\" title=\"Docker搭建zookeeper集群\"></a>Docker搭建zookeeper集群</h2><p>准备在3台虚拟机上搭建zookeeper集群</p>\n<h4 id=\"创建挂载目录\"><a href=\"#创建挂载目录\" class=\"headerlink\" title=\"创建挂载目录\"></a>创建挂载目录</h4><p>用于存储配置文件和数据，使用docker数据和配置文件等需要放在自己的宿主机，而不是容器内，特别是数据</p>\n<p><code>mkdir -p zookeeper/conf</code></p>\n<p><code>mkdir -p zookeeper/data</code></p>\n<h4 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h4><p>在zookeeper/data下创建zoo.cfg</p>\n<p>touch <code>zoo.cfg</code></p>\n<p>clientPort=2181<br>dataDir=/data<br>dataLogDir=/data/log<br>tickTime=2000<br>initLimit=5<br>syncLimit=2<br>autopurge.snapRetainCount=3<br>autopurge.purgeInterval=0<br>maxClientCnxns=60<br>server.111=10.255.200.168:2888:3888<br>server.222=10.255.200.174:2888:3888<br>server.233=10.255.200.172:2888:3888</p>\n<h4 id=\"配置myid\"><a href=\"#配置myid\" class=\"headerlink\" title=\"配置myid\"></a>配置myid</h4><p>在zookeeper/data目录下创建<strong>myid</strong>，并配置id，里面的<strong>id一定要和上面配置的server.id一致</strong></p>\n<p><code>touch myid</code></p>\n<p><code>echo 111 &gt; myid</code></p>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><p>docker run  –network host -v /usr/local/zookeeper/data:/data -v  /usr/local/zookeeper/conf:/conf –name zookeeper-2181 -d zookeeper:3.4.13</p>\n"},{"title":"Dubbo请求数据的发送过程","date":"2020-05-28T12:10:32.000Z","_content":"\n### Dubbo请求数据的发送过程\n\n调用过程（IMAF FLADR HHAANN） （3invoke + doInvoke）*2+3request+3send+write\n\nProxy0#sayHello(String)\n\n​\t->InvokerInvocationHandle#invoke\n\n​\t\t->MockClusterInvoker#invoke\n\n​\t\t\t->AbstractClusterInvoker#invoke\n\n​\t\t\t\t->FailoverClusterInvoker#doInvoke\n\n​\t\t\t\t\t->Filter#invoke\n\n​\t\t\t\t\t\t->ListenerInvokerWrapper#invoke\n\n​\t\t\t\t\t\t\t->AbstractInvoker#invoke\n\n​\t\t\t\t\t\t\t\t->DubboInvoker#doInvoke\n\n​\t\t\t\t\t\t\t\t\t->ReferenceCountExchangeClient#request\n\n​\t\t\t\t\t\t\t\t\t\t->HeadExchangeClient#request\n\n​\t\t\t\t\t\t\t\t\t\t\t->HeadExchangeChannel#request\n\n​\t\t\t\t\t\t\t\t\t\t\t\t->AbstractPeer#send\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t->AbstractClient#send\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t->NettyChannel#send\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t->NioClientSocketChannel#write\n\n\n\n\n\n调用服务(NAMHAE)  messageReceved+receved*4+execute\n\nNettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)  \n\n​\t—> AbstractPeer#received(Channel, Object)    \n\n​\t\t—> MultiMessageHandler#received(Channel, Object)      \n\n​\t\t\t—> HeartbeatHandler#received(Channel, Object)        \n\n​\t\t\t\t—> AllChannelHandler#received(Channel, Object)          \n\n​\t\t\t\t\t—> ExecutorService#execute(Runnable)    // 由线程池执行后续的调用逻辑","source":"_posts/Dubbo请求数据的发送过程.md","raw":"---\ntitle: Dubbo请求数据的发送过程\ndate: 2020-05-28 20:10:32\ncategories: [dubbo]\ntags: [dubbo]\n---\n\n### Dubbo请求数据的发送过程\n\n调用过程（IMAF FLADR HHAANN） （3invoke + doInvoke）*2+3request+3send+write\n\nProxy0#sayHello(String)\n\n​\t->InvokerInvocationHandle#invoke\n\n​\t\t->MockClusterInvoker#invoke\n\n​\t\t\t->AbstractClusterInvoker#invoke\n\n​\t\t\t\t->FailoverClusterInvoker#doInvoke\n\n​\t\t\t\t\t->Filter#invoke\n\n​\t\t\t\t\t\t->ListenerInvokerWrapper#invoke\n\n​\t\t\t\t\t\t\t->AbstractInvoker#invoke\n\n​\t\t\t\t\t\t\t\t->DubboInvoker#doInvoke\n\n​\t\t\t\t\t\t\t\t\t->ReferenceCountExchangeClient#request\n\n​\t\t\t\t\t\t\t\t\t\t->HeadExchangeClient#request\n\n​\t\t\t\t\t\t\t\t\t\t\t->HeadExchangeChannel#request\n\n​\t\t\t\t\t\t\t\t\t\t\t\t->AbstractPeer#send\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t->AbstractClient#send\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t->NettyChannel#send\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t->NioClientSocketChannel#write\n\n\n\n\n\n调用服务(NAMHAE)  messageReceved+receved*4+execute\n\nNettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)  \n\n​\t—> AbstractPeer#received(Channel, Object)    \n\n​\t\t—> MultiMessageHandler#received(Channel, Object)      \n\n​\t\t\t—> HeartbeatHandler#received(Channel, Object)        \n\n​\t\t\t\t—> AllChannelHandler#received(Channel, Object)          \n\n​\t\t\t\t\t—> ExecutorService#execute(Runnable)    // 由线程池执行后续的调用逻辑","slug":"Dubbo请求数据的发送过程","published":1,"updated":"2020-09-28T11:02:38.791Z","_id":"ckfmf4yht000aesqrwusd8so5","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Dubbo请求数据的发送过程\"><a href=\"#Dubbo请求数据的发送过程\" class=\"headerlink\" title=\"Dubbo请求数据的发送过程\"></a>Dubbo请求数据的发送过程</h3><p>调用过程（IMAF FLADR HHAANN） （3invoke + doInvoke）*2+3request+3send+write</p>\n<p>Proxy0#sayHello(String)</p>\n<p>​    -&gt;InvokerInvocationHandle#invoke</p>\n<p>​        -&gt;MockClusterInvoker#invoke</p>\n<p>​            -&gt;AbstractClusterInvoker#invoke</p>\n<p>​                -&gt;FailoverClusterInvoker#doInvoke</p>\n<p>​                    -&gt;Filter#invoke</p>\n<p>​                        -&gt;ListenerInvokerWrapper#invoke</p>\n<p>​                            -&gt;AbstractInvoker#invoke</p>\n<p>​                                -&gt;DubboInvoker#doInvoke</p>\n<p>​                                    -&gt;ReferenceCountExchangeClient#request</p>\n<p>​                                        -&gt;HeadExchangeClient#request</p>\n<p>​                                            -&gt;HeadExchangeChannel#request</p>\n<p>​                                                -&gt;AbstractPeer#send</p>\n<p>​                                                    -&gt;AbstractClient#send</p>\n<p>​                                                        -&gt;NettyChannel#send</p>\n<p>​                                                            -&gt;NioClientSocketChannel#write</p>\n<p>调用服务(NAMHAE)  messageReceved+receved*4+execute</p>\n<p>NettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)  </p>\n<p>​    —&gt; AbstractPeer#received(Channel, Object)    </p>\n<p>​        —&gt; MultiMessageHandler#received(Channel, Object)      </p>\n<p>​            —&gt; HeartbeatHandler#received(Channel, Object)        </p>\n<p>​                —&gt; AllChannelHandler#received(Channel, Object)          </p>\n<p>​                    —&gt; ExecutorService#execute(Runnable)    // 由线程池执行后续的调用逻辑</p>\n","excerpt":"","more":"<h3 id=\"Dubbo请求数据的发送过程\"><a href=\"#Dubbo请求数据的发送过程\" class=\"headerlink\" title=\"Dubbo请求数据的发送过程\"></a>Dubbo请求数据的发送过程</h3><p>调用过程（IMAF FLADR HHAANN） （3invoke + doInvoke）*2+3request+3send+write</p>\n<p>Proxy0#sayHello(String)</p>\n<p>​    -&gt;InvokerInvocationHandle#invoke</p>\n<p>​        -&gt;MockClusterInvoker#invoke</p>\n<p>​            -&gt;AbstractClusterInvoker#invoke</p>\n<p>​                -&gt;FailoverClusterInvoker#doInvoke</p>\n<p>​                    -&gt;Filter#invoke</p>\n<p>​                        -&gt;ListenerInvokerWrapper#invoke</p>\n<p>​                            -&gt;AbstractInvoker#invoke</p>\n<p>​                                -&gt;DubboInvoker#doInvoke</p>\n<p>​                                    -&gt;ReferenceCountExchangeClient#request</p>\n<p>​                                        -&gt;HeadExchangeClient#request</p>\n<p>​                                            -&gt;HeadExchangeChannel#request</p>\n<p>​                                                -&gt;AbstractPeer#send</p>\n<p>​                                                    -&gt;AbstractClient#send</p>\n<p>​                                                        -&gt;NettyChannel#send</p>\n<p>​                                                            -&gt;NioClientSocketChannel#write</p>\n<p>调用服务(NAMHAE)  messageReceved+receved*4+execute</p>\n<p>NettyHandler#messageReceived(ChannelHandlerContext, MessageEvent)  </p>\n<p>​    —&gt; AbstractPeer#received(Channel, Object)    </p>\n<p>​        —&gt; MultiMessageHandler#received(Channel, Object)      </p>\n<p>​            —&gt; HeartbeatHandler#received(Channel, Object)        </p>\n<p>​                —&gt; AllChannelHandler#received(Channel, Object)          </p>\n<p>​                    —&gt; ExecutorService#execute(Runnable)    // 由线程池执行后续的调用逻辑</p>\n"},{"title":"Java实现链表","date":"2020-05-28T12:10:32.000Z","_content":"# Java实现链表\n\n\n\n**单链表**是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成:元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。**(逻辑地址相连，物理地址不相连）**\n\n\n\n  ","source":"_posts/Java实现链表.md","raw":"---\ntitle: Java实现链表\ndate: 2020-05-28 20:10:32\ncategories: [数据结构]\ntags: [数据结构]\n---\n# Java实现链表\n\n\n\n**单链表**是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成:元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。**(逻辑地址相连，物理地址不相连）**\n\n\n\n  ","slug":"Java实现链表","published":1,"updated":"2020-09-28T10:46:14.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yhw000desqrqhvcj5rf","content":"<h1 id=\"Java实现链表\"><a href=\"#Java实现链表\" class=\"headerlink\" title=\"Java实现链表\"></a>Java实现链表</h1><p><strong>单链表</strong>是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成:元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。<strong>(逻辑地址相连，物理地址不相连）</strong></p>\n","excerpt":"","more":"<h1 id=\"Java实现链表\"><a href=\"#Java实现链表\" class=\"headerlink\" title=\"Java实现链表\"></a>Java实现链表</h1><p><strong>单链表</strong>是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成:元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。<strong>(逻辑地址相连，物理地址不相连）</strong></p>\n"},{"title":"GC日志配置","date":"2020-05-28T12:10:32.000Z","_content":"\n**Java 8**\n\n```shell\n#!/bin/sh\nLOG_DIR=\"/tmp/logs\"\nJAVA_OPT_LOG=\" -verbose:gc\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintGCDetails\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintGCDateStamps\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintGCApplicationStoppedTime\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintTenuringDistribution\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -Xloggc:${LOG_DIR}/gc_%p.log\"\nJAVA_OPT_OOM=\" -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOG_DIR} -XX:ErrorFile=${LOG_DIR}/hs_error_pid%p.log \"\nJAVA_OPT=\"${JAVA_OPT_LOG} ${JAVA_OPT_OOM}\"\nJAVA_OPT=\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow\"\n```\n\n\n\n-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps \n-XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution \n-Xloggc:/tmp/logs/gc_%p.log -XX:+HeapDumpOnOutOfMemoryError \n-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log \n-XX:-OmitStackTraceInFastThrow\n\n\n\n**Java 13**\n\n\n\n```shell\n#!/bin/sh\nLOG_DIR=\"/tmp/logs\"\nJAVA_OPT_LOG=\" -verbose:gc\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file=${LOG_DIR}/gc_%p.log:tags,uptime,time,level\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -Xlog:safepoint:file=${LOG_DIR}/safepoint_%p.log:tags,uptime,time,level\"\nJAVA_OPT_OOM=\" -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOG_DIR} -XX:ErrorFile=${LOG_DIR}/hs_error_pid%p.log \"\nJAVA_OPT=\"${JAVA_OPT_LOG} ${JAVA_OPT_OOM}\"\nJAVA_OPT=\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow\"\necho $JAVA_OPT\n```\n\n\n\n-verbose:gc -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file\n=/tmp/logs/gc_%p.log:tags,uptime,time,level -Xlog:safepoint:file=/tmp\n/logs/safepoint_%p.log:tags,uptime,time,level -XX:+HeapDumpOnOutOfMemoryError \n-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log \n-XX:-OmitStackTraceInFastThrow\n\n","source":"_posts/GC日志配置.md","raw":"---\ntitle: GC日志配置\ndate: 2020-05-28 20:10:32\ncategories: [GC]\ntags: [GC]\n---\n\n**Java 8**\n\n```shell\n#!/bin/sh\nLOG_DIR=\"/tmp/logs\"\nJAVA_OPT_LOG=\" -verbose:gc\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintGCDetails\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintGCDateStamps\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintGCApplicationStoppedTime\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -XX:+PrintTenuringDistribution\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -Xloggc:${LOG_DIR}/gc_%p.log\"\nJAVA_OPT_OOM=\" -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOG_DIR} -XX:ErrorFile=${LOG_DIR}/hs_error_pid%p.log \"\nJAVA_OPT=\"${JAVA_OPT_LOG} ${JAVA_OPT_OOM}\"\nJAVA_OPT=\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow\"\n```\n\n\n\n-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps \n-XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution \n-Xloggc:/tmp/logs/gc_%p.log -XX:+HeapDumpOnOutOfMemoryError \n-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log \n-XX:-OmitStackTraceInFastThrow\n\n\n\n**Java 13**\n\n\n\n```shell\n#!/bin/sh\nLOG_DIR=\"/tmp/logs\"\nJAVA_OPT_LOG=\" -verbose:gc\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file=${LOG_DIR}/gc_%p.log:tags,uptime,time,level\"\nJAVA_OPT_LOG=\"${JAVA_OPT_LOG} -Xlog:safepoint:file=${LOG_DIR}/safepoint_%p.log:tags,uptime,time,level\"\nJAVA_OPT_OOM=\" -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${LOG_DIR} -XX:ErrorFile=${LOG_DIR}/hs_error_pid%p.log \"\nJAVA_OPT=\"${JAVA_OPT_LOG} ${JAVA_OPT_OOM}\"\nJAVA_OPT=\"${JAVA_OPT} -XX:-OmitStackTraceInFastThrow\"\necho $JAVA_OPT\n```\n\n\n\n-verbose:gc -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file\n=/tmp/logs/gc_%p.log:tags,uptime,time,level -Xlog:safepoint:file=/tmp\n/logs/safepoint_%p.log:tags,uptime,time,level -XX:+HeapDumpOnOutOfMemoryError \n-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log \n-XX:-OmitStackTraceInFastThrow\n\n","slug":"GC日志配置","published":1,"updated":"2020-09-28T10:47:36.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yhy000fesqr0u44c6k1","content":"<p><strong>Java 8</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">LOG_DIR=&quot;/tmp/logs&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot; -verbose:gc&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintGCDetails&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintGCDateStamps&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintGCApplicationStoppedTime&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintTenuringDistribution&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -Xloggc:$&#123;LOG_DIR&#125;/gc_%p.log&quot;</div><div class=\"line\">JAVA_OPT_OOM=&quot; -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_DIR&#125; -XX:ErrorFile=$&#123;LOG_DIR&#125;/hs_error_pid%p.log &quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT_LOG&#125; $&#123;JAVA_OPT_OOM&#125;&quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</div></pre></td></tr></table></figure>\n<p>-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps<br>-XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution<br>-Xloggc:/tmp/logs/gc_%p.log -XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log<br>-XX:-OmitStackTraceInFastThrow</p>\n<p><strong>Java 13</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">LOG_DIR=&quot;/tmp/logs&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot; -verbose:gc&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file=$&#123;LOG_DIR&#125;/gc_%p.log:tags,uptime,time,level&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -Xlog:safepoint:file=$&#123;LOG_DIR&#125;/safepoint_%p.log:tags,uptime,time,level&quot;</div><div class=\"line\">JAVA_OPT_OOM=&quot; -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_DIR&#125; -XX:ErrorFile=$&#123;LOG_DIR&#125;/hs_error_pid%p.log &quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT_LOG&#125; $&#123;JAVA_OPT_OOM&#125;&quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</div><div class=\"line\">echo $JAVA_OPT</div></pre></td></tr></table></figure>\n<p>-verbose:gc -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file<br>=/tmp/logs/gc<em>%p.log:tags,uptime,time,level -Xlog:safepoint:file=/tmp<br>/logs/safepoint</em>%p.log:tags,uptime,time,level -XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log<br>-XX:-OmitStackTraceInFastThrow</p>\n","excerpt":"","more":"<p><strong>Java 8</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">LOG_DIR=&quot;/tmp/logs&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot; -verbose:gc&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintGCDetails&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintGCDateStamps&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintGCApplicationStoppedTime&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -XX:+PrintTenuringDistribution&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -Xloggc:$&#123;LOG_DIR&#125;/gc_%p.log&quot;</div><div class=\"line\">JAVA_OPT_OOM=&quot; -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_DIR&#125; -XX:ErrorFile=$&#123;LOG_DIR&#125;/hs_error_pid%p.log &quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT_LOG&#125; $&#123;JAVA_OPT_OOM&#125;&quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</div></pre></td></tr></table></figure>\n<p>-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps<br>-XX:+PrintGCApplicationStoppedTime -XX:+PrintTenuringDistribution<br>-Xloggc:/tmp/logs/gc_%p.log -XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log<br>-XX:-OmitStackTraceInFastThrow</p>\n<p><strong>Java 13</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/bin/sh</div><div class=\"line\">LOG_DIR=&quot;/tmp/logs&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot; -verbose:gc&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file=$&#123;LOG_DIR&#125;/gc_%p.log:tags,uptime,time,level&quot;</div><div class=\"line\">JAVA_OPT_LOG=&quot;$&#123;JAVA_OPT_LOG&#125; -Xlog:safepoint:file=$&#123;LOG_DIR&#125;/safepoint_%p.log:tags,uptime,time,level&quot;</div><div class=\"line\">JAVA_OPT_OOM=&quot; -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=$&#123;LOG_DIR&#125; -XX:ErrorFile=$&#123;LOG_DIR&#125;/hs_error_pid%p.log &quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT_LOG&#125; $&#123;JAVA_OPT_OOM&#125;&quot;</div><div class=\"line\">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -XX:-OmitStackTraceInFastThrow&quot;</div><div class=\"line\">echo $JAVA_OPT</div></pre></td></tr></table></figure>\n<p>-verbose:gc -Xlog:gc,gc+ref=debug,gc+heap=debug,gc+age=trace:file<br>=/tmp/logs/gc<em>%p.log:tags,uptime,time,level -Xlog:safepoint:file=/tmp<br>/logs/safepoint</em>%p.log:tags,uptime,time,level -XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath=/tmp/logs -XX:ErrorFile=/tmp/logs/hs_error_pid%p.log<br>-XX:-OmitStackTraceInFastThrow</p>\n"},{"title":"Java性能调优工具","date":"2020-05-28T12:10:32.000Z","_content":"# Java性能调优工具\n\n\n\n## Linux命令行工具\n\n### top命令\n\n#### 语法\n\n```\ntop [-] [d delay] [q] [c] [S] [s] [i] [n] [b]\n```\n\n![image-20200901095826286](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200901095826286.png)\n\n\n\n两大区域**统计信息区**和**进程信息区**\n\n#### 统计信息区\n\n- 第一行：任务队列信息，与`uptime`命令执行结果相同。\n\n  - 09:58:07：系统当前时间\n  - up 195 days, 23:28：主机已运行时间\n  - 5 users：用户连接数（不是用户数，who命令）\n  - load average: 0.03, 0.09, 0.12：系统平均负载，统计最近1,5,15分钟的系统平均负载\n\n  **补充**：`uptime -V`可查询版本\n\n- 第二行：进程信息\n\n  - Tasks: 128 total：进程总数\n  - 1 running：正在运行的进程数\n  - 127 sleeping：睡眠的进程数\n  - 0 stopped：停止的进程数\n  - 0 zombie：僵尸进程数\n\n- 第三行：CPU信息（当有多个CPU时，这些内容可能会超过两行）\n\n  - 2.8us：用户空间所占CPU百分比\n  - 1.0sy：内核空间占用CPU百分比\n  - 0.0 ni：用户进程空间内改变过优先级的进程占用CPU百分比\n  - 96.3id：空闲CPU百分比\n  - 0.0 wa：等待输入输出的CPU时间百分比\n  - 0.0 hi：硬件CPU中断占用百分比\n  - 0.0 si：软中断占用百分比\n  - 0.0 st：虚拟机占用百分比\n\n- 第四行：内存信息（与第五行的信息类似与free命令）\n\n  - 8010424 total：物理内存总量\n  - 6038816 used：已使用的内存总量\n  - 274220 free：空闲的内存总量（free+used=total）\n  - 1723692 buffers：用作内核缓存的内存量\n\n- 第五行：swap信息\n\n  - 0total：交换分区总量\n  - 0used：已使用的交换分区总量\n  - 0free：空闲交换区总量\n  - 1663496cached Mem：缓冲的交换区总量，内存中的内容被换出到交换区，然后又被换入到内存，但是使用过的交换区没有被覆盖，交换区的这些内容已存在于内存中的交换区的大小，相应的内存再次被换出时可不必再对交换区写入。\n\n\n\n#### 进程信息区\n\n- PID:进程id\n- PPID:父进程id\n- RUSER:Real user name（看了好多，都是这样写，也不知道和user有什么区别，欢迎补充此处）\n- UID:进程所有者的id\n- USER:进程所有者的用户名\n- GROUP:进程所有者的组名\n- TTY:启动进程的终端名。不是从终端启动的进程则显示为?\n- PR:优先级\n- NI:nice值。负值表示高优先级，正值表示低优先级\n- P:最后使用的CPU，仅在多CPU环境下有意义\n- %CPU:上次更新到现在的CPU时间占用百分比\n- TIME:进程使用的CPU时间总计，单位秒\n- TIME+：进程所使用的CPU时间总计，单位1/100秒\n- %MEM:进程使用的物理内存百分比\n- VIRT:进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\n- SWAP:进程使用的虚拟内存中被被换出的大小\n- RES:进程使用的、未被换出的物理内存的大小\n- CODE:可执行代码占用的物理内存大小\n- DATA:可执行代码以外的部分（数据段+栈）占用的物理内存大小\n- SHR:共享内存大小\n- nFLT:页面错误次数\n- nDRT:最后一次写入到现在，被修改过的页面数\n- S:进程状态（D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）\n- COMMAND:命令名/行\n- WCHAN:若该进程在睡眠，则显示睡眠中的系统函数名\n- Flags:任务标志\n\n\n\n### top命令的使用\n\n#### top使用格式\n\ntop [-] [d] [p] [q] [c] [C] [S] [s] [n]\n\n#### top参数说明\n\n- d: 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。\n- p: 通过指定监控进程ID来仅仅监控某个进程的状态。\n- q: 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。\n- S: 指定累计模式\n- s: 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。\n- i: 使top不显示任何闲置或者僵死进程。\n- c: 显示整个命令行而不只是显示命令名\n\n#### 交互命令\n\n- Ctrl+L: 擦除并且重写屏幕。\n- h或者?: 显示帮助画面，给出一些简短的命令总结说明。\n- k: 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号;如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。\n- i: 忽略闲置和僵死进程。这是一个开关式命令。\n- q: 退出程序。\n- r: 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。\n- S: 切换到累计模式。\n- s: 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。\n- f或者F: 从当前显示中添加或者删除项目。\n- o或者O: 改变显示项目的顺序。\n- l: 切换显示平均负载和启动时间信息。\n- m: 切换显示内存信息。\n- t: 切换显示进程和CPU状态信息。\n- c: 切换显示命令名称和完整命令行。\n- M: 根据驻留内存大小进行排序。\n- P: 根据CPU使用百分比大小进行排序。\n- T: 根据时间/累计时间进行排序。\n- W: 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。\n\n\n\n\n\n### sar命令\n\n### vmstat\n\n### iostat\n\n### pidstat\n\n","source":"_posts/Java性能调优工具.md","raw":"---\ntitle: Java性能调优工具\ndate: 2020-05-28 20:10:32\ncategories: [性能调优]\ntags: [性能调优]\n---\n# Java性能调优工具\n\n\n\n## Linux命令行工具\n\n### top命令\n\n#### 语法\n\n```\ntop [-] [d delay] [q] [c] [S] [s] [i] [n] [b]\n```\n\n![image-20200901095826286](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200901095826286.png)\n\n\n\n两大区域**统计信息区**和**进程信息区**\n\n#### 统计信息区\n\n- 第一行：任务队列信息，与`uptime`命令执行结果相同。\n\n  - 09:58:07：系统当前时间\n  - up 195 days, 23:28：主机已运行时间\n  - 5 users：用户连接数（不是用户数，who命令）\n  - load average: 0.03, 0.09, 0.12：系统平均负载，统计最近1,5,15分钟的系统平均负载\n\n  **补充**：`uptime -V`可查询版本\n\n- 第二行：进程信息\n\n  - Tasks: 128 total：进程总数\n  - 1 running：正在运行的进程数\n  - 127 sleeping：睡眠的进程数\n  - 0 stopped：停止的进程数\n  - 0 zombie：僵尸进程数\n\n- 第三行：CPU信息（当有多个CPU时，这些内容可能会超过两行）\n\n  - 2.8us：用户空间所占CPU百分比\n  - 1.0sy：内核空间占用CPU百分比\n  - 0.0 ni：用户进程空间内改变过优先级的进程占用CPU百分比\n  - 96.3id：空闲CPU百分比\n  - 0.0 wa：等待输入输出的CPU时间百分比\n  - 0.0 hi：硬件CPU中断占用百分比\n  - 0.0 si：软中断占用百分比\n  - 0.0 st：虚拟机占用百分比\n\n- 第四行：内存信息（与第五行的信息类似与free命令）\n\n  - 8010424 total：物理内存总量\n  - 6038816 used：已使用的内存总量\n  - 274220 free：空闲的内存总量（free+used=total）\n  - 1723692 buffers：用作内核缓存的内存量\n\n- 第五行：swap信息\n\n  - 0total：交换分区总量\n  - 0used：已使用的交换分区总量\n  - 0free：空闲交换区总量\n  - 1663496cached Mem：缓冲的交换区总量，内存中的内容被换出到交换区，然后又被换入到内存，但是使用过的交换区没有被覆盖，交换区的这些内容已存在于内存中的交换区的大小，相应的内存再次被换出时可不必再对交换区写入。\n\n\n\n#### 进程信息区\n\n- PID:进程id\n- PPID:父进程id\n- RUSER:Real user name（看了好多，都是这样写，也不知道和user有什么区别，欢迎补充此处）\n- UID:进程所有者的id\n- USER:进程所有者的用户名\n- GROUP:进程所有者的组名\n- TTY:启动进程的终端名。不是从终端启动的进程则显示为?\n- PR:优先级\n- NI:nice值。负值表示高优先级，正值表示低优先级\n- P:最后使用的CPU，仅在多CPU环境下有意义\n- %CPU:上次更新到现在的CPU时间占用百分比\n- TIME:进程使用的CPU时间总计，单位秒\n- TIME+：进程所使用的CPU时间总计，单位1/100秒\n- %MEM:进程使用的物理内存百分比\n- VIRT:进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\n- SWAP:进程使用的虚拟内存中被被换出的大小\n- RES:进程使用的、未被换出的物理内存的大小\n- CODE:可执行代码占用的物理内存大小\n- DATA:可执行代码以外的部分（数据段+栈）占用的物理内存大小\n- SHR:共享内存大小\n- nFLT:页面错误次数\n- nDRT:最后一次写入到现在，被修改过的页面数\n- S:进程状态（D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）\n- COMMAND:命令名/行\n- WCHAN:若该进程在睡眠，则显示睡眠中的系统函数名\n- Flags:任务标志\n\n\n\n### top命令的使用\n\n#### top使用格式\n\ntop [-] [d] [p] [q] [c] [C] [S] [s] [n]\n\n#### top参数说明\n\n- d: 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。\n- p: 通过指定监控进程ID来仅仅监控某个进程的状态。\n- q: 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。\n- S: 指定累计模式\n- s: 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。\n- i: 使top不显示任何闲置或者僵死进程。\n- c: 显示整个命令行而不只是显示命令名\n\n#### 交互命令\n\n- Ctrl+L: 擦除并且重写屏幕。\n- h或者?: 显示帮助画面，给出一些简短的命令总结说明。\n- k: 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号;如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。\n- i: 忽略闲置和僵死进程。这是一个开关式命令。\n- q: 退出程序。\n- r: 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。\n- S: 切换到累计模式。\n- s: 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。\n- f或者F: 从当前显示中添加或者删除项目。\n- o或者O: 改变显示项目的顺序。\n- l: 切换显示平均负载和启动时间信息。\n- m: 切换显示内存信息。\n- t: 切换显示进程和CPU状态信息。\n- c: 切换显示命令名称和完整命令行。\n- M: 根据驻留内存大小进行排序。\n- P: 根据CPU使用百分比大小进行排序。\n- T: 根据时间/累计时间进行排序。\n- W: 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。\n\n\n\n\n\n### sar命令\n\n### vmstat\n\n### iostat\n\n### pidstat\n\n","slug":"Java性能调优工具","published":1,"updated":"2020-09-28T10:46:00.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yi0000jesqrusenqvbo","content":"<h1 id=\"Java性能调优工具\"><a href=\"#Java性能调优工具\" class=\"headerlink\" title=\"Java性能调优工具\"></a>Java性能调优工具</h1><h2 id=\"Linux命令行工具\"><a href=\"#Linux命令行工具\" class=\"headerlink\" title=\"Linux命令行工具\"></a>Linux命令行工具</h2><h3 id=\"top命令\"><a href=\"#top命令\" class=\"headerlink\" title=\"top命令\"></a>top命令</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]</div></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200901095826286.png\" alt=\"image-20200901095826286\"></p>\n<p>两大区域<strong>统计信息区</strong>和<strong>进程信息区</strong></p>\n<h4 id=\"统计信息区\"><a href=\"#统计信息区\" class=\"headerlink\" title=\"统计信息区\"></a>统计信息区</h4><ul>\n<li><p>第一行：任务队列信息，与<code>uptime</code>命令执行结果相同。</p>\n<ul>\n<li>09:58:07：系统当前时间</li>\n<li>up 195 days, 23:28：主机已运行时间</li>\n<li>5 users：用户连接数（不是用户数，who命令）</li>\n<li>load average: 0.03, 0.09, 0.12：系统平均负载，统计最近1,5,15分钟的系统平均负载</li>\n</ul>\n<p><strong>补充</strong>：<code>uptime -V</code>可查询版本</p>\n</li>\n<li><p>第二行：进程信息</p>\n<ul>\n<li>Tasks: 128 total：进程总数</li>\n<li>1 running：正在运行的进程数</li>\n<li>127 sleeping：睡眠的进程数</li>\n<li>0 stopped：停止的进程数</li>\n<li>0 zombie：僵尸进程数</li>\n</ul>\n</li>\n<li><p>第三行：CPU信息（当有多个CPU时，这些内容可能会超过两行）</p>\n<ul>\n<li>2.8us：用户空间所占CPU百分比</li>\n<li>1.0sy：内核空间占用CPU百分比</li>\n<li>0.0 ni：用户进程空间内改变过优先级的进程占用CPU百分比</li>\n<li>96.3id：空闲CPU百分比</li>\n<li>0.0 wa：等待输入输出的CPU时间百分比</li>\n<li>0.0 hi：硬件CPU中断占用百分比</li>\n<li>0.0 si：软中断占用百分比</li>\n<li>0.0 st：虚拟机占用百分比</li>\n</ul>\n</li>\n<li><p>第四行：内存信息（与第五行的信息类似与free命令）</p>\n<ul>\n<li>8010424 total：物理内存总量</li>\n<li>6038816 used：已使用的内存总量</li>\n<li>274220 free：空闲的内存总量（free+used=total）</li>\n<li>1723692 buffers：用作内核缓存的内存量</li>\n</ul>\n</li>\n<li><p>第五行：swap信息</p>\n<ul>\n<li>0total：交换分区总量</li>\n<li>0used：已使用的交换分区总量</li>\n<li>0free：空闲交换区总量</li>\n<li>1663496cached Mem：缓冲的交换区总量，内存中的内容被换出到交换区，然后又被换入到内存，但是使用过的交换区没有被覆盖，交换区的这些内容已存在于内存中的交换区的大小，相应的内存再次被换出时可不必再对交换区写入。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进程信息区\"><a href=\"#进程信息区\" class=\"headerlink\" title=\"进程信息区\"></a>进程信息区</h4><ul>\n<li>PID:进程id</li>\n<li>PPID:父进程id</li>\n<li>RUSER:Real user name（看了好多，都是这样写，也不知道和user有什么区别，欢迎补充此处）</li>\n<li>UID:进程所有者的id</li>\n<li>USER:进程所有者的用户名</li>\n<li>GROUP:进程所有者的组名</li>\n<li>TTY:启动进程的终端名。不是从终端启动的进程则显示为?</li>\n<li>PR:优先级</li>\n<li>NI:nice值。负值表示高优先级，正值表示低优先级</li>\n<li>P:最后使用的CPU，仅在多CPU环境下有意义</li>\n<li>%CPU:上次更新到现在的CPU时间占用百分比</li>\n<li>TIME:进程使用的CPU时间总计，单位秒</li>\n<li>TIME+：进程所使用的CPU时间总计，单位1/100秒</li>\n<li>%MEM:进程使用的物理内存百分比</li>\n<li>VIRT:进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</li>\n<li>SWAP:进程使用的虚拟内存中被被换出的大小</li>\n<li>RES:进程使用的、未被换出的物理内存的大小</li>\n<li>CODE:可执行代码占用的物理内存大小</li>\n<li>DATA:可执行代码以外的部分（数据段+栈）占用的物理内存大小</li>\n<li>SHR:共享内存大小</li>\n<li>nFLT:页面错误次数</li>\n<li>nDRT:最后一次写入到现在，被修改过的页面数</li>\n<li>S:进程状态（D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</li>\n<li>COMMAND:命令名/行</li>\n<li>WCHAN:若该进程在睡眠，则显示睡眠中的系统函数名</li>\n<li>Flags:任务标志</li>\n</ul>\n<h3 id=\"top命令的使用\"><a href=\"#top命令的使用\" class=\"headerlink\" title=\"top命令的使用\"></a>top命令的使用</h3><h4 id=\"top使用格式\"><a href=\"#top使用格式\" class=\"headerlink\" title=\"top使用格式\"></a>top使用格式</h4><p>top [-] [d] [p] [q] [c] [C] [S] [s] [n]</p>\n<h4 id=\"top参数说明\"><a href=\"#top参数说明\" class=\"headerlink\" title=\"top参数说明\"></a>top参数说明</h4><ul>\n<li>d: 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。</li>\n<li>p: 通过指定监控进程ID来仅仅监控某个进程的状态。</li>\n<li>q: 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。</li>\n<li>S: 指定累计模式</li>\n<li>s: 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</li>\n<li>i: 使top不显示任何闲置或者僵死进程。</li>\n<li>c: 显示整个命令行而不只是显示命令名</li>\n</ul>\n<h4 id=\"交互命令\"><a href=\"#交互命令\" class=\"headerlink\" title=\"交互命令\"></a>交互命令</h4><ul>\n<li>Ctrl+L: 擦除并且重写屏幕。</li>\n<li>h或者?: 显示帮助画面，给出一些简短的命令总结说明。</li>\n<li>k: 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号;如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。</li>\n<li>i: 忽略闲置和僵死进程。这是一个开关式命令。</li>\n<li>q: 退出程序。</li>\n<li>r: 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。</li>\n<li>S: 切换到累计模式。</li>\n<li>s: 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。</li>\n<li>f或者F: 从当前显示中添加或者删除项目。</li>\n<li>o或者O: 改变显示项目的顺序。</li>\n<li>l: 切换显示平均负载和启动时间信息。</li>\n<li>m: 切换显示内存信息。</li>\n<li>t: 切换显示进程和CPU状态信息。</li>\n<li>c: 切换显示命令名称和完整命令行。</li>\n<li>M: 根据驻留内存大小进行排序。</li>\n<li>P: 根据CPU使用百分比大小进行排序。</li>\n<li>T: 根据时间/累计时间进行排序。</li>\n<li>W: 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</li>\n</ul>\n<h3 id=\"sar命令\"><a href=\"#sar命令\" class=\"headerlink\" title=\"sar命令\"></a>sar命令</h3><h3 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h3><h3 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h3><h3 id=\"pidstat\"><a href=\"#pidstat\" class=\"headerlink\" title=\"pidstat\"></a>pidstat</h3>","excerpt":"","more":"<h1 id=\"Java性能调优工具\"><a href=\"#Java性能调优工具\" class=\"headerlink\" title=\"Java性能调优工具\"></a>Java性能调优工具</h1><h2 id=\"Linux命令行工具\"><a href=\"#Linux命令行工具\" class=\"headerlink\" title=\"Linux命令行工具\"></a>Linux命令行工具</h2><h3 id=\"top命令\"><a href=\"#top命令\" class=\"headerlink\" title=\"top命令\"></a>top命令</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]</div></pre></td></tr></table></figure>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200901095826286.png\" alt=\"image-20200901095826286\"></p>\n<p>两大区域<strong>统计信息区</strong>和<strong>进程信息区</strong></p>\n<h4 id=\"统计信息区\"><a href=\"#统计信息区\" class=\"headerlink\" title=\"统计信息区\"></a>统计信息区</h4><ul>\n<li><p>第一行：任务队列信息，与<code>uptime</code>命令执行结果相同。</p>\n<ul>\n<li>09:58:07：系统当前时间</li>\n<li>up 195 days, 23:28：主机已运行时间</li>\n<li>5 users：用户连接数（不是用户数，who命令）</li>\n<li>load average: 0.03, 0.09, 0.12：系统平均负载，统计最近1,5,15分钟的系统平均负载</li>\n</ul>\n<p><strong>补充</strong>：<code>uptime -V</code>可查询版本</p>\n</li>\n<li><p>第二行：进程信息</p>\n<ul>\n<li>Tasks: 128 total：进程总数</li>\n<li>1 running：正在运行的进程数</li>\n<li>127 sleeping：睡眠的进程数</li>\n<li>0 stopped：停止的进程数</li>\n<li>0 zombie：僵尸进程数</li>\n</ul>\n</li>\n<li><p>第三行：CPU信息（当有多个CPU时，这些内容可能会超过两行）</p>\n<ul>\n<li>2.8us：用户空间所占CPU百分比</li>\n<li>1.0sy：内核空间占用CPU百分比</li>\n<li>0.0 ni：用户进程空间内改变过优先级的进程占用CPU百分比</li>\n<li>96.3id：空闲CPU百分比</li>\n<li>0.0 wa：等待输入输出的CPU时间百分比</li>\n<li>0.0 hi：硬件CPU中断占用百分比</li>\n<li>0.0 si：软中断占用百分比</li>\n<li>0.0 st：虚拟机占用百分比</li>\n</ul>\n</li>\n<li><p>第四行：内存信息（与第五行的信息类似与free命令）</p>\n<ul>\n<li>8010424 total：物理内存总量</li>\n<li>6038816 used：已使用的内存总量</li>\n<li>274220 free：空闲的内存总量（free+used=total）</li>\n<li>1723692 buffers：用作内核缓存的内存量</li>\n</ul>\n</li>\n<li><p>第五行：swap信息</p>\n<ul>\n<li>0total：交换分区总量</li>\n<li>0used：已使用的交换分区总量</li>\n<li>0free：空闲交换区总量</li>\n<li>1663496cached Mem：缓冲的交换区总量，内存中的内容被换出到交换区，然后又被换入到内存，但是使用过的交换区没有被覆盖，交换区的这些内容已存在于内存中的交换区的大小，相应的内存再次被换出时可不必再对交换区写入。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进程信息区\"><a href=\"#进程信息区\" class=\"headerlink\" title=\"进程信息区\"></a>进程信息区</h4><ul>\n<li>PID:进程id</li>\n<li>PPID:父进程id</li>\n<li>RUSER:Real user name（看了好多，都是这样写，也不知道和user有什么区别，欢迎补充此处）</li>\n<li>UID:进程所有者的id</li>\n<li>USER:进程所有者的用户名</li>\n<li>GROUP:进程所有者的组名</li>\n<li>TTY:启动进程的终端名。不是从终端启动的进程则显示为?</li>\n<li>PR:优先级</li>\n<li>NI:nice值。负值表示高优先级，正值表示低优先级</li>\n<li>P:最后使用的CPU，仅在多CPU环境下有意义</li>\n<li>%CPU:上次更新到现在的CPU时间占用百分比</li>\n<li>TIME:进程使用的CPU时间总计，单位秒</li>\n<li>TIME+：进程所使用的CPU时间总计，单位1/100秒</li>\n<li>%MEM:进程使用的物理内存百分比</li>\n<li>VIRT:进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</li>\n<li>SWAP:进程使用的虚拟内存中被被换出的大小</li>\n<li>RES:进程使用的、未被换出的物理内存的大小</li>\n<li>CODE:可执行代码占用的物理内存大小</li>\n<li>DATA:可执行代码以外的部分（数据段+栈）占用的物理内存大小</li>\n<li>SHR:共享内存大小</li>\n<li>nFLT:页面错误次数</li>\n<li>nDRT:最后一次写入到现在，被修改过的页面数</li>\n<li>S:进程状态（D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程）</li>\n<li>COMMAND:命令名/行</li>\n<li>WCHAN:若该进程在睡眠，则显示睡眠中的系统函数名</li>\n<li>Flags:任务标志</li>\n</ul>\n<h3 id=\"top命令的使用\"><a href=\"#top命令的使用\" class=\"headerlink\" title=\"top命令的使用\"></a>top命令的使用</h3><h4 id=\"top使用格式\"><a href=\"#top使用格式\" class=\"headerlink\" title=\"top使用格式\"></a>top使用格式</h4><p>top [-] [d] [p] [q] [c] [C] [S] [s] [n]</p>\n<h4 id=\"top参数说明\"><a href=\"#top参数说明\" class=\"headerlink\" title=\"top参数说明\"></a>top参数说明</h4><ul>\n<li>d: 指定每两次屏幕信息刷新之间的时间间隔。当然用户可以使用s交互命令来改变之。</li>\n<li>p: 通过指定监控进程ID来仅仅监控某个进程的状态。</li>\n<li>q: 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。</li>\n<li>S: 指定累计模式</li>\n<li>s: 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</li>\n<li>i: 使top不显示任何闲置或者僵死进程。</li>\n<li>c: 显示整个命令行而不只是显示命令名</li>\n</ul>\n<h4 id=\"交互命令\"><a href=\"#交互命令\" class=\"headerlink\" title=\"交互命令\"></a>交互命令</h4><ul>\n<li>Ctrl+L: 擦除并且重写屏幕。</li>\n<li>h或者?: 显示帮助画面，给出一些简短的命令总结说明。</li>\n<li>k: 终止一个进程。系统将提示用户输入需要终止的进程PID，以及需要发送给该进程什么样的信号。一般的终止进程可以使用15信号;如果不能正常结束那就使用信号9强制结束该进程。默认值是信号15。在安全模式中此命令被屏蔽。</li>\n<li>i: 忽略闲置和僵死进程。这是一个开关式命令。</li>\n<li>q: 退出程序。</li>\n<li>r: 重新安排一个进程的优先级别。系统提示用户输入需要改变的进程PID以及需要设置的进程优先级值。输入一个正值将使优先级降低，反之则可以使该进程拥有更高的优先权。默认值是10。</li>\n<li>S: 切换到累计模式。</li>\n<li>s: 改变两次刷新之间的延迟时间。系统将提示用户输入新的时间，单位为s。如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s。需要注意的是如果设置太小的时间，很可能会引起不断刷新，从而根本来不及看清显示的情况，而且系统负载也会大大增加。</li>\n<li>f或者F: 从当前显示中添加或者删除项目。</li>\n<li>o或者O: 改变显示项目的顺序。</li>\n<li>l: 切换显示平均负载和启动时间信息。</li>\n<li>m: 切换显示内存信息。</li>\n<li>t: 切换显示进程和CPU状态信息。</li>\n<li>c: 切换显示命令名称和完整命令行。</li>\n<li>M: 根据驻留内存大小进行排序。</li>\n<li>P: 根据CPU使用百分比大小进行排序。</li>\n<li>T: 根据时间/累计时间进行排序。</li>\n<li>W: 将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</li>\n</ul>\n<h3 id=\"sar命令\"><a href=\"#sar命令\" class=\"headerlink\" title=\"sar命令\"></a>sar命令</h3><h3 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h3><h3 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h3><h3 id=\"pidstat\"><a href=\"#pidstat\" class=\"headerlink\" title=\"pidstat\"></a>pidstat</h3>"},{"title":"MyBatis使用了哪些设计模式，在源码上是如何体现的？","date":"2017-06-28T01:21:11.000Z","description":null,"_content":"\n<!-- more -->\n\n### MyBatis使用了哪些设计模式，在源码上是如何体现的？\n\n#### 工厂模式\n\nSqlsessionFactory\n\n#### 建造者模式\n\n#### 单例模式\n\n#### 适配器模式\n\n#### 代理模式\n\n#### 模版方法模式\n\n#### 装饰器模式","source":"_posts/MyBatis使用了哪些设计模式，在源码上是如何体现的？.md","raw":"---\n   title: MyBatis使用了哪些设计模式，在源码上是如何体现的？\n   categories: [Mybatis]\n   tags: [Mybatis,设计模式]\n   date: 2017-06-28 09:21:11\n   description:\n---\n\n<!-- more -->\n\n### MyBatis使用了哪些设计模式，在源码上是如何体现的？\n\n#### 工厂模式\n\nSqlsessionFactory\n\n#### 建造者模式\n\n#### 单例模式\n\n#### 适配器模式\n\n#### 代理模式\n\n#### 模版方法模式\n\n#### 装饰器模式","slug":"MyBatis使用了哪些设计模式，在源码上是如何体现的？","published":1,"updated":"2020-08-04T04:57:28.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yi1000kesqrgul9b834","content":"<a id=\"more\"></a>\n<h3 id=\"MyBatis使用了哪些设计模式，在源码上是如何体现的？\"><a href=\"#MyBatis使用了哪些设计模式，在源码上是如何体现的？\" class=\"headerlink\" title=\"MyBatis使用了哪些设计模式，在源码上是如何体现的？\"></a>MyBatis使用了哪些设计模式，在源码上是如何体现的？</h3><h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p>SqlsessionFactory</p>\n<h4 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h4><h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><h4 id=\"模版方法模式\"><a href=\"#模版方法模式\" class=\"headerlink\" title=\"模版方法模式\"></a>模版方法模式</h4><h4 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h4>","excerpt":"","more":"<h3 id=\"MyBatis使用了哪些设计模式，在源码上是如何体现的？\"><a href=\"#MyBatis使用了哪些设计模式，在源码上是如何体现的？\" class=\"headerlink\" title=\"MyBatis使用了哪些设计模式，在源码上是如何体现的？\"></a>MyBatis使用了哪些设计模式，在源码上是如何体现的？</h3><h4 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h4><p>SqlsessionFactory</p>\n<h4 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h4><h4 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h4><h4 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h4><h4 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h4><h4 id=\"模版方法模式\"><a href=\"#模版方法模式\" class=\"headerlink\" title=\"模版方法模式\"></a>模版方法模式</h4><h4 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h4>"},{"title":"MAT工具应用之深堆和浅堆","date":"2017-03-20T03:21:11.000Z","description":null,"_content":"\n## MAT工具应用之深堆和浅堆\n\n### 浅堆（Shallow Heap）\n\n浅堆是指一个对象所消耗的内存（对象头+实例数据+对齐填充，不包括内部引用对象大小）\n\n32位操作系统中\n一个对象的对象头占用8字节，对象中的一个引用占4个字节，需要补齐位8的倍数\n一维数组的为特殊对象，对象头占8个字节，加上4字节的长度数量，加上数组长度N*数组类型\nString类型占用的字节数位40+2N+pandding（补齐为8的个数）\n\n64位操作系统中\n一个对象的对象头占用16字节，对象中的一个引用占8个字节，需要补齐位8的倍数\n一维数组的为特殊对象，对象头占16个字节，加上8字节的长度数量，加上数组长度N*数组类型\nString类型占用的字节数位64+2N+pandding（补齐为8的个数）\n\n\n\n### 深堆（Retained Heap）\n\n深堆表示一个对象被 GC 回收后，可以真实释放的内存大小（保留空间）\n\n\n\n```java\npackage com.idea4j.jvm.mat;\n\npublic class Point {\n\n    private int x;\n    private int y;\n\n    public Point(int x, int y) {\n        super();\n        this.x = x;\n        this.y = y;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n}\n\n```\n\n\n\n```java\npackage com.idea4j.jvm.mat;\n\npublic class Line {\n    private Point startPoint;//\n    private Point endPoint;\n\n    public Line(Point startPoint, Point endPoint) {\n        this.startPoint = startPoint;\n        this.endPoint = endPoint;\n    }\n\n    public Point getStartPoint() {\n        return startPoint;\n    }\n\n    public void setStartPoint(Point startPoint) {\n        this.startPoint = startPoint;\n    }\n\n    public Point getEndPoint() {\n        return endPoint;\n    }\n\n    public void setEndPoint(Point endPoint) {\n        this.endPoint = endPoint;\n    }\n}\n\n```\n\n```java\npackage com.idea4j.jvm.mat;\n\npublic class ShallowRetainedDump {\n    public static void main(String[] args) throws InterruptedException {\n        //\n        Point a = new Point(0, 0);\n        Point b = new Point(1, 1);\n        Point c = new Point(5, 3);\n        Point d = new Point(9, 8);\n        Point e = new Point(6, 7);\n        Point f = new Point(3, 9);\n        Point g = new Point(4, 8);\n\n        Line aLine = new Line(a, b);\n        Line bLine = new Line(a, c);\n        Line cLine = new Line(d, e);\n        Line dLine = new Line(f, g);\n        a = null;\n        b = null;\n        c = null;\n        d = null;\n        e = null;\n\n        Thread.sleep(1000000);\n    }\n}\n\n```\n\n\n\n\n\n### ![image-20200828200917670](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200828200917670.png)\n\n如图（64位机器下），按照上面提到的  Line对象有两个Point对象组成 ,所以Line的浅\n\n浅堆的大小为：对象头（16）+ 两个对象引用（8*2）=32，与图中数值不符。这是为什么呢？\n\n这里是开启了指针压缩，开启指针压缩后，对象头占用字节为14，对象引用占用字节为4，那么，\n\n浅堆的大小为：对象头（12）+ 两个对象引用（4*2）= 20，20不是8的倍数需要补齐，所以浅堆的大小为24.\n\n```java\n * -XX:+UseCompressedOops开启指针压缩（默认） oop对象指针\n * -XX:-UseCompressedOops关闭指针压缩\n```","source":"_posts/MAT工具应用之深堆和浅堆.md","raw":"---\ntitle: MAT工具应用之深堆和浅堆\ncategories: [jvm]\ntags: [jvm]\ndate: 2017-03-20 11:21:11\ndescription:\n---\n\n## MAT工具应用之深堆和浅堆\n\n### 浅堆（Shallow Heap）\n\n浅堆是指一个对象所消耗的内存（对象头+实例数据+对齐填充，不包括内部引用对象大小）\n\n32位操作系统中\n一个对象的对象头占用8字节，对象中的一个引用占4个字节，需要补齐位8的倍数\n一维数组的为特殊对象，对象头占8个字节，加上4字节的长度数量，加上数组长度N*数组类型\nString类型占用的字节数位40+2N+pandding（补齐为8的个数）\n\n64位操作系统中\n一个对象的对象头占用16字节，对象中的一个引用占8个字节，需要补齐位8的倍数\n一维数组的为特殊对象，对象头占16个字节，加上8字节的长度数量，加上数组长度N*数组类型\nString类型占用的字节数位64+2N+pandding（补齐为8的个数）\n\n\n\n### 深堆（Retained Heap）\n\n深堆表示一个对象被 GC 回收后，可以真实释放的内存大小（保留空间）\n\n\n\n```java\npackage com.idea4j.jvm.mat;\n\npublic class Point {\n\n    private int x;\n    private int y;\n\n    public Point(int x, int y) {\n        super();\n        this.x = x;\n        this.y = y;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n}\n\n```\n\n\n\n```java\npackage com.idea4j.jvm.mat;\n\npublic class Line {\n    private Point startPoint;//\n    private Point endPoint;\n\n    public Line(Point startPoint, Point endPoint) {\n        this.startPoint = startPoint;\n        this.endPoint = endPoint;\n    }\n\n    public Point getStartPoint() {\n        return startPoint;\n    }\n\n    public void setStartPoint(Point startPoint) {\n        this.startPoint = startPoint;\n    }\n\n    public Point getEndPoint() {\n        return endPoint;\n    }\n\n    public void setEndPoint(Point endPoint) {\n        this.endPoint = endPoint;\n    }\n}\n\n```\n\n```java\npackage com.idea4j.jvm.mat;\n\npublic class ShallowRetainedDump {\n    public static void main(String[] args) throws InterruptedException {\n        //\n        Point a = new Point(0, 0);\n        Point b = new Point(1, 1);\n        Point c = new Point(5, 3);\n        Point d = new Point(9, 8);\n        Point e = new Point(6, 7);\n        Point f = new Point(3, 9);\n        Point g = new Point(4, 8);\n\n        Line aLine = new Line(a, b);\n        Line bLine = new Line(a, c);\n        Line cLine = new Line(d, e);\n        Line dLine = new Line(f, g);\n        a = null;\n        b = null;\n        c = null;\n        d = null;\n        e = null;\n\n        Thread.sleep(1000000);\n    }\n}\n\n```\n\n\n\n\n\n### ![image-20200828200917670](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200828200917670.png)\n\n如图（64位机器下），按照上面提到的  Line对象有两个Point对象组成 ,所以Line的浅\n\n浅堆的大小为：对象头（16）+ 两个对象引用（8*2）=32，与图中数值不符。这是为什么呢？\n\n这里是开启了指针压缩，开启指针压缩后，对象头占用字节为14，对象引用占用字节为4，那么，\n\n浅堆的大小为：对象头（12）+ 两个对象引用（4*2）= 20，20不是8的倍数需要补齐，所以浅堆的大小为24.\n\n```java\n * -XX:+UseCompressedOops开启指针压缩（默认） oop对象指针\n * -XX:-UseCompressedOops关闭指针压缩\n```","slug":"MAT工具应用之深堆和浅堆","published":1,"updated":"2020-09-28T10:55:09.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yi5000oesqr52n8fhv1","content":"<h2 id=\"MAT工具应用之深堆和浅堆\"><a href=\"#MAT工具应用之深堆和浅堆\" class=\"headerlink\" title=\"MAT工具应用之深堆和浅堆\"></a>MAT工具应用之深堆和浅堆</h2><h3 id=\"浅堆（Shallow-Heap）\"><a href=\"#浅堆（Shallow-Heap）\" class=\"headerlink\" title=\"浅堆（Shallow Heap）\"></a>浅堆（Shallow Heap）</h3><p>浅堆是指一个对象所消耗的内存（对象头+实例数据+对齐填充，不包括内部引用对象大小）</p>\n<p>32位操作系统中<br>一个对象的对象头占用8字节，对象中的一个引用占4个字节，需要补齐位8的倍数<br>一维数组的为特殊对象，对象头占8个字节，加上4字节的长度数量，加上数组长度N*数组类型<br>String类型占用的字节数位40+2N+pandding（补齐为8的个数）</p>\n<p>64位操作系统中<br>一个对象的对象头占用16字节，对象中的一个引用占8个字节，需要补齐位8的倍数<br>一维数组的为特殊对象，对象头占16个字节，加上8字节的长度数量，加上数组长度N*数组类型<br>String类型占用的字节数位64+2N+pandding（补齐为8的个数）</p>\n<h3 id=\"深堆（Retained-Heap）\"><a href=\"#深堆（Retained-Heap）\" class=\"headerlink\" title=\"深堆（Retained Heap）\"></a>深堆（Retained Heap）</h3><p>深堆表示一个对象被 GC 回收后，可以真实释放的内存大小（保留空间）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.jvm.mat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.jvm.mat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Point startPoint;<span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Point endPoint;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Line</span><span class=\"params\">(Point startPoint, Point endPoint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.startPoint = startPoint;</div><div class=\"line\">        <span class=\"keyword\">this</span>.endPoint = endPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">getStartPoint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> startPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStartPoint</span><span class=\"params\">(Point startPoint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.startPoint = startPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">getEndPoint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> endPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEndPoint</span><span class=\"params\">(Point endPoint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.endPoint = endPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.jvm.mat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShallowRetainedDump</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">        Point a = <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        Point b = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        Point c = <span class=\"keyword\">new</span> Point(<span class=\"number\">5</span>, <span class=\"number\">3</span>);</div><div class=\"line\">        Point d = <span class=\"keyword\">new</span> Point(<span class=\"number\">9</span>, <span class=\"number\">8</span>);</div><div class=\"line\">        Point e = <span class=\"keyword\">new</span> Point(<span class=\"number\">6</span>, <span class=\"number\">7</span>);</div><div class=\"line\">        Point f = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">9</span>);</div><div class=\"line\">        Point g = <span class=\"keyword\">new</span> Point(<span class=\"number\">4</span>, <span class=\"number\">8</span>);</div><div class=\"line\"></div><div class=\"line\">        Line aLine = <span class=\"keyword\">new</span> Line(a, b);</div><div class=\"line\">        Line bLine = <span class=\"keyword\">new</span> Line(a, c);</div><div class=\"line\">        Line cLine = <span class=\"keyword\">new</span> Line(d, e);</div><div class=\"line\">        Line dLine = <span class=\"keyword\">new</span> Line(f, g);</div><div class=\"line\">        a = <span class=\"keyword\">null</span>;</div><div class=\"line\">        b = <span class=\"keyword\">null</span>;</div><div class=\"line\">        c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        d = <span class=\"keyword\">null</span>;</div><div class=\"line\">        e = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        Thread.sleep(<span class=\"number\">1000000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200828200917670.png\" alt=\"image-20200828200917670\"></h3><p>如图（64位机器下），按照上面提到的  Line对象有两个Point对象组成 ,所以Line的浅</p>\n<p>浅堆的大小为：对象头（16）+ 两个对象引用（8*2）=32，与图中数值不符。这是为什么呢？</p>\n<p>这里是开启了指针压缩，开启指针压缩后，对象头占用字节为14，对象引用占用字节为4，那么，</p>\n<p>浅堆的大小为：对象头（12）+ 两个对象引用（4*2）= 20，20不是8的倍数需要补齐，所以浅堆的大小为24.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">* -XX:+UseCompressedOops开启指针压缩（默认） oop对象指针</div><div class=\"line\">* -XX:-UseCompressedOops关闭指针压缩</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"MAT工具应用之深堆和浅堆\"><a href=\"#MAT工具应用之深堆和浅堆\" class=\"headerlink\" title=\"MAT工具应用之深堆和浅堆\"></a>MAT工具应用之深堆和浅堆</h2><h3 id=\"浅堆（Shallow-Heap）\"><a href=\"#浅堆（Shallow-Heap）\" class=\"headerlink\" title=\"浅堆（Shallow Heap）\"></a>浅堆（Shallow Heap）</h3><p>浅堆是指一个对象所消耗的内存（对象头+实例数据+对齐填充，不包括内部引用对象大小）</p>\n<p>32位操作系统中<br>一个对象的对象头占用8字节，对象中的一个引用占4个字节，需要补齐位8的倍数<br>一维数组的为特殊对象，对象头占8个字节，加上4字节的长度数量，加上数组长度N*数组类型<br>String类型占用的字节数位40+2N+pandding（补齐为8的个数）</p>\n<p>64位操作系统中<br>一个对象的对象头占用16字节，对象中的一个引用占8个字节，需要补齐位8的倍数<br>一维数组的为特殊对象，对象头占16个字节，加上8字节的长度数量，加上数组长度N*数组类型<br>String类型占用的字节数位64+2N+pandding（补齐为8的个数）</p>\n<h3 id=\"深堆（Retained-Heap）\"><a href=\"#深堆（Retained-Heap）\" class=\"headerlink\" title=\"深堆（Retained Heap）\"></a>深堆（Retained Heap）</h3><p>深堆表示一个对象被 GC 回收后，可以真实释放的内存大小（保留空间）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.jvm.mat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> x;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> y;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getX</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setX</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.x = x;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getY</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> y;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setY</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.y = y;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.jvm.mat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Line</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Point startPoint;<span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Point endPoint;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Line</span><span class=\"params\">(Point startPoint, Point endPoint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.startPoint = startPoint;</div><div class=\"line\">        <span class=\"keyword\">this</span>.endPoint = endPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">getStartPoint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> startPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStartPoint</span><span class=\"params\">(Point startPoint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.startPoint = startPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Point <span class=\"title\">getEndPoint</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> endPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEndPoint</span><span class=\"params\">(Point endPoint)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.endPoint = endPoint;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.jvm.mat;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShallowRetainedDump</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//</span></div><div class=\"line\">        Point a = <span class=\"keyword\">new</span> Point(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        Point b = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</div><div class=\"line\">        Point c = <span class=\"keyword\">new</span> Point(<span class=\"number\">5</span>, <span class=\"number\">3</span>);</div><div class=\"line\">        Point d = <span class=\"keyword\">new</span> Point(<span class=\"number\">9</span>, <span class=\"number\">8</span>);</div><div class=\"line\">        Point e = <span class=\"keyword\">new</span> Point(<span class=\"number\">6</span>, <span class=\"number\">7</span>);</div><div class=\"line\">        Point f = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>, <span class=\"number\">9</span>);</div><div class=\"line\">        Point g = <span class=\"keyword\">new</span> Point(<span class=\"number\">4</span>, <span class=\"number\">8</span>);</div><div class=\"line\"></div><div class=\"line\">        Line aLine = <span class=\"keyword\">new</span> Line(a, b);</div><div class=\"line\">        Line bLine = <span class=\"keyword\">new</span> Line(a, c);</div><div class=\"line\">        Line cLine = <span class=\"keyword\">new</span> Line(d, e);</div><div class=\"line\">        Line dLine = <span class=\"keyword\">new</span> Line(f, g);</div><div class=\"line\">        a = <span class=\"keyword\">null</span>;</div><div class=\"line\">        b = <span class=\"keyword\">null</span>;</div><div class=\"line\">        c = <span class=\"keyword\">null</span>;</div><div class=\"line\">        d = <span class=\"keyword\">null</span>;</div><div class=\"line\">        e = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        Thread.sleep(<span class=\"number\">1000000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200828200917670.png\" alt=\"image-20200828200917670\"></h3><p>如图（64位机器下），按照上面提到的  Line对象有两个Point对象组成 ,所以Line的浅</p>\n<p>浅堆的大小为：对象头（16）+ 两个对象引用（8*2）=32，与图中数值不符。这是为什么呢？</p>\n<p>这里是开启了指针压缩，开启指针压缩后，对象头占用字节为14，对象引用占用字节为4，那么，</p>\n<p>浅堆的大小为：对象头（12）+ 两个对象引用（4*2）= 20，20不是8的倍数需要补齐，所以浅堆的大小为24.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">* -XX:+UseCompressedOops开启指针压缩（默认） oop对象指针</div><div class=\"line\">* -XX:-UseCompressedOops关闭指针压缩</div></pre></td></tr></table></figure>"},{"title":"MySQL权限分配","date":"2018-05-27T10:12:11.000Z","description":null,"_content":"\n<!-- more -->\n\n## MySQL权限分配\n\n### 创建用户\n\n```\nuse mysql;\n\n语法：create user 'username'[@'host'] identified by 'password';\n\n如：someuser 用户可以在所有主机登录，密码为 123456\n\nCREATE USER 'someuser' IDENTIFIED BY '654321'\n\n如：someuser 用户只能在本地登录\n\nCREATE USER 'someuser'@'localhost' IDENTIFIED BY '654321'\n```\n\n\n\n### 查看用户权限\n\n```\n语法：SELECT  privileges|* FROM user WHERE `user` = 'username';\n\n如：查看someuser的权限\n\nSELECT * FROM user WHERE `user` = 'someuser'; \n\n也可以用 SHOW GRANTS 查看 SHOW GRANTS FOR 'username' [@host];\n\n SHOW GRANTS FOR someuser;\n```\n\n\n\n### 赋予用户权限\n\n```\n语法：GRANT privileges ON database.table TO 'username'@'host' [IDENTIFIED BY 'password'];\n\n如：赋予 someuser在所有主机的所有权限，但不包含给其他账号赋予权限的权限（如果出现 Access denied for user 'root'@'localhost' to database 'newdatabase'，需要退出当前用户，重新登录）\n\nGRANT all ON *.* TO 'local_user'@'%';\n\nFLUSH PRIVILEGES;\n```\n\n\n\n- GRANT命令说明：\n  - *priveleges* (权限列表),可以是`all`, 表示所有权限，也可以是`select,update`等权限，多个权限的名词,相互之间用逗号分开。\n  - ON 用来指定权限针对哪些库和表。格式为`数据库 .表名` ，点号前面用来指定数据库名，点号后面用来指定表名，`*.*` 表示所有数据库所有表。\n  - TO 表示将权限赋予某个用户, 格式为`username@host`，@前面为用户名，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。*注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了*。\n  - IDENTIFIED BY 指定用户的登录密码,该项可以省略(某些版本下回报错，必须省略)。\n  - WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。\n    *备注：可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。*\n- 授权原则说明：\n  - 只授予能满足需要的最小权限，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。\n  - 创建用户的时候限制用户的登录主机，一般是限制成指定IP或者内网IP段。\n  - 初始化数据库的时候删除没有密码的用户。安装完数据库的时候会自动创建一些用户，这些用户默认没有密码。\n  - 为每个用户设置满足密码复杂度的密码。\n  - 定期清理不需要的用户。回收权限或者删除用户。\n\n### 收回用户权限\n\n```\n语法：REVOKE privileges ON database.table FROM 'username'@'host';\n如：收回 someuser 的写入和更新权限\nREVOKE insert,update ON *.* FROM 'someuser'@'%';\n```\n\n### 删除用户\n\n```\n语法:DROP USER 'username'@'host';\n如：删除本地用户 local_user\nDROP USER 'local_user'@'localhost';\n```","source":"_posts/MySQL权限分配.md","raw":"---\ntitle: MySQL权限分配\ncategories: [mysql]\ntags: [mysql]\ndate: 2018-05-27 18:12:11\ndescription:\n---\n\n<!-- more -->\n\n## MySQL权限分配\n\n### 创建用户\n\n```\nuse mysql;\n\n语法：create user 'username'[@'host'] identified by 'password';\n\n如：someuser 用户可以在所有主机登录，密码为 123456\n\nCREATE USER 'someuser' IDENTIFIED BY '654321'\n\n如：someuser 用户只能在本地登录\n\nCREATE USER 'someuser'@'localhost' IDENTIFIED BY '654321'\n```\n\n\n\n### 查看用户权限\n\n```\n语法：SELECT  privileges|* FROM user WHERE `user` = 'username';\n\n如：查看someuser的权限\n\nSELECT * FROM user WHERE `user` = 'someuser'; \n\n也可以用 SHOW GRANTS 查看 SHOW GRANTS FOR 'username' [@host];\n\n SHOW GRANTS FOR someuser;\n```\n\n\n\n### 赋予用户权限\n\n```\n语法：GRANT privileges ON database.table TO 'username'@'host' [IDENTIFIED BY 'password'];\n\n如：赋予 someuser在所有主机的所有权限，但不包含给其他账号赋予权限的权限（如果出现 Access denied for user 'root'@'localhost' to database 'newdatabase'，需要退出当前用户，重新登录）\n\nGRANT all ON *.* TO 'local_user'@'%';\n\nFLUSH PRIVILEGES;\n```\n\n\n\n- GRANT命令说明：\n  - *priveleges* (权限列表),可以是`all`, 表示所有权限，也可以是`select,update`等权限，多个权限的名词,相互之间用逗号分开。\n  - ON 用来指定权限针对哪些库和表。格式为`数据库 .表名` ，点号前面用来指定数据库名，点号后面用来指定表名，`*.*` 表示所有数据库所有表。\n  - TO 表示将权限赋予某个用户, 格式为`username@host`，@前面为用户名，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。*注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了*。\n  - IDENTIFIED BY 指定用户的登录密码,该项可以省略(某些版本下回报错，必须省略)。\n  - WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。\n    *备注：可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。*\n- 授权原则说明：\n  - 只授予能满足需要的最小权限，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。\n  - 创建用户的时候限制用户的登录主机，一般是限制成指定IP或者内网IP段。\n  - 初始化数据库的时候删除没有密码的用户。安装完数据库的时候会自动创建一些用户，这些用户默认没有密码。\n  - 为每个用户设置满足密码复杂度的密码。\n  - 定期清理不需要的用户。回收权限或者删除用户。\n\n### 收回用户权限\n\n```\n语法：REVOKE privileges ON database.table FROM 'username'@'host';\n如：收回 someuser 的写入和更新权限\nREVOKE insert,update ON *.* FROM 'someuser'@'%';\n```\n\n### 删除用户\n\n```\n语法:DROP USER 'username'@'host';\n如：删除本地用户 local_user\nDROP USER 'local_user'@'localhost';\n```","slug":"MySQL权限分配","published":1,"updated":"2020-08-04T04:57:28.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yi7000qesqr7vl99173","content":"<a id=\"more\"></a>\n<h2 id=\"MySQL权限分配\"><a href=\"#MySQL权限分配\" class=\"headerlink\" title=\"MySQL权限分配\"></a>MySQL权限分配</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">use mysql;</div><div class=\"line\"></div><div class=\"line\">语法：create user &apos;username&apos;[@&apos;host&apos;] identified by &apos;password&apos;;</div><div class=\"line\"></div><div class=\"line\">如：someuser 用户可以在所有主机登录，密码为 123456</div><div class=\"line\"></div><div class=\"line\">CREATE USER &apos;someuser&apos; IDENTIFIED BY &apos;654321&apos;</div><div class=\"line\"></div><div class=\"line\">如：someuser 用户只能在本地登录</div><div class=\"line\"></div><div class=\"line\">CREATE USER &apos;someuser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;654321&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：SELECT  privileges|* FROM user WHERE `user` = &apos;username&apos;;</div><div class=\"line\"></div><div class=\"line\">如：查看someuser的权限</div><div class=\"line\"></div><div class=\"line\">SELECT * FROM user WHERE `user` = &apos;someuser&apos;; </div><div class=\"line\"></div><div class=\"line\">也可以用 SHOW GRANTS 查看 SHOW GRANTS FOR &apos;username&apos; [@host];</div><div class=\"line\"></div><div class=\"line\"> SHOW GRANTS FOR someuser;</div></pre></td></tr></table></figure>\n<h3 id=\"赋予用户权限\"><a href=\"#赋予用户权限\" class=\"headerlink\" title=\"赋予用户权限\"></a>赋予用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：GRANT privileges ON database.table TO &apos;username&apos;@&apos;host&apos; [IDENTIFIED BY &apos;password&apos;];</div><div class=\"line\"></div><div class=\"line\">如：赋予 someuser在所有主机的所有权限，但不包含给其他账号赋予权限的权限（如果出现 Access denied for user &apos;root&apos;@&apos;localhost&apos; to database &apos;newdatabase&apos;，需要退出当前用户，重新登录）</div><div class=\"line\"></div><div class=\"line\">GRANT all ON *.* TO &apos;local_user&apos;@&apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>\n<ul>\n<li>GRANT命令说明：<ul>\n<li><em>priveleges</em> (权限列表),可以是<code>all</code>, 表示所有权限，也可以是<code>select,update</code>等权限，多个权限的名词,相互之间用逗号分开。</li>\n<li>ON 用来指定权限针对哪些库和表。格式为<code>数据库 .表名</code> ，点号前面用来指定数据库名，点号后面用来指定表名，<code>*.*</code> 表示所有数据库所有表。</li>\n<li>TO 表示将权限赋予某个用户, 格式为<code>username@host</code>，@前面为用户名，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。<em>注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了</em>。</li>\n<li>IDENTIFIED BY 指定用户的登录密码,该项可以省略(某些版本下回报错，必须省略)。</li>\n<li>WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。<br><em>备注：可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</em></li>\n</ul>\n</li>\n<li>授权原则说明：<ul>\n<li>只授予能满足需要的最小权限，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。</li>\n<li>创建用户的时候限制用户的登录主机，一般是限制成指定IP或者内网IP段。</li>\n<li>初始化数据库的时候删除没有密码的用户。安装完数据库的时候会自动创建一些用户，这些用户默认没有密码。</li>\n<li>为每个用户设置满足密码复杂度的密码。</li>\n<li>定期清理不需要的用户。回收权限或者删除用户。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"收回用户权限\"><a href=\"#收回用户权限\" class=\"headerlink\" title=\"收回用户权限\"></a>收回用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：REVOKE privileges ON database.table FROM &apos;username&apos;@&apos;host&apos;;</div><div class=\"line\">如：收回 someuser 的写入和更新权限</div><div class=\"line\">REVOKE insert,update ON *.* FROM &apos;someuser&apos;@&apos;%&apos;;</div></pre></td></tr></table></figure>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法:DROP USER &apos;username&apos;@&apos;host&apos;;</div><div class=\"line\">如：删除本地用户 local_user</div><div class=\"line\">DROP USER &apos;local_user&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"MySQL权限分配\"><a href=\"#MySQL权限分配\" class=\"headerlink\" title=\"MySQL权限分配\"></a>MySQL权限分配</h2><h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">use mysql;</div><div class=\"line\"></div><div class=\"line\">语法：create user &apos;username&apos;[@&apos;host&apos;] identified by &apos;password&apos;;</div><div class=\"line\"></div><div class=\"line\">如：someuser 用户可以在所有主机登录，密码为 123456</div><div class=\"line\"></div><div class=\"line\">CREATE USER &apos;someuser&apos; IDENTIFIED BY &apos;654321&apos;</div><div class=\"line\"></div><div class=\"line\">如：someuser 用户只能在本地登录</div><div class=\"line\"></div><div class=\"line\">CREATE USER &apos;someuser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;654321&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"查看用户权限\"><a href=\"#查看用户权限\" class=\"headerlink\" title=\"查看用户权限\"></a>查看用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：SELECT  privileges|* FROM user WHERE `user` = &apos;username&apos;;</div><div class=\"line\"></div><div class=\"line\">如：查看someuser的权限</div><div class=\"line\"></div><div class=\"line\">SELECT * FROM user WHERE `user` = &apos;someuser&apos;; </div><div class=\"line\"></div><div class=\"line\">也可以用 SHOW GRANTS 查看 SHOW GRANTS FOR &apos;username&apos; [@host];</div><div class=\"line\"></div><div class=\"line\"> SHOW GRANTS FOR someuser;</div></pre></td></tr></table></figure>\n<h3 id=\"赋予用户权限\"><a href=\"#赋予用户权限\" class=\"headerlink\" title=\"赋予用户权限\"></a>赋予用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：GRANT privileges ON database.table TO &apos;username&apos;@&apos;host&apos; [IDENTIFIED BY &apos;password&apos;];</div><div class=\"line\"></div><div class=\"line\">如：赋予 someuser在所有主机的所有权限，但不包含给其他账号赋予权限的权限（如果出现 Access denied for user &apos;root&apos;@&apos;localhost&apos; to database &apos;newdatabase&apos;，需要退出当前用户，重新登录）</div><div class=\"line\"></div><div class=\"line\">GRANT all ON *.* TO &apos;local_user&apos;@&apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\">FLUSH PRIVILEGES;</div></pre></td></tr></table></figure>\n<ul>\n<li>GRANT命令说明：<ul>\n<li><em>priveleges</em> (权限列表),可以是<code>all</code>, 表示所有权限，也可以是<code>select,update</code>等权限，多个权限的名词,相互之间用逗号分开。</li>\n<li>ON 用来指定权限针对哪些库和表。格式为<code>数据库 .表名</code> ，点号前面用来指定数据库名，点号后面用来指定表名，<code>*.*</code> 表示所有数据库所有表。</li>\n<li>TO 表示将权限赋予某个用户, 格式为<code>username@host</code>，@前面为用户名，@后面接限制的主机，可以是IP、IP段、域名以及%，%表示任何地方。<em>注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了</em>。</li>\n<li>IDENTIFIED BY 指定用户的登录密码,该项可以省略(某些版本下回报错，必须省略)。</li>\n<li>WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。<br><em>备注：可以使用GRANT重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</em></li>\n</ul>\n</li>\n<li>授权原则说明：<ul>\n<li>只授予能满足需要的最小权限，防止用户干坏事。比如用户只是需要查询，那就只给select权限就可以了，不要给用户赋予update、insert或者delete权限。</li>\n<li>创建用户的时候限制用户的登录主机，一般是限制成指定IP或者内网IP段。</li>\n<li>初始化数据库的时候删除没有密码的用户。安装完数据库的时候会自动创建一些用户，这些用户默认没有密码。</li>\n<li>为每个用户设置满足密码复杂度的密码。</li>\n<li>定期清理不需要的用户。回收权限或者删除用户。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"收回用户权限\"><a href=\"#收回用户权限\" class=\"headerlink\" title=\"收回用户权限\"></a>收回用户权限</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法：REVOKE privileges ON database.table FROM &apos;username&apos;@&apos;host&apos;;</div><div class=\"line\">如：收回 someuser 的写入和更新权限</div><div class=\"line\">REVOKE insert,update ON *.* FROM &apos;someuser&apos;@&apos;%&apos;;</div></pre></td></tr></table></figure>\n<h3 id=\"删除用户\"><a href=\"#删除用户\" class=\"headerlink\" title=\"删除用户\"></a>删除用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">语法:DROP USER &apos;username&apos;@&apos;host&apos;;</div><div class=\"line\">如：删除本地用户 local_user</div><div class=\"line\">DROP USER &apos;local_user&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure>"},{"title":"Markdown操作","date":"2017-03-20T03:21:11.000Z","description":null,"_content":"\nMarkdown操作\n\n公式单行用$公式$就可以\n\n首先正常来一个公式，用符号$套两边就可以\n\n显示效果如下 $ y =x+z$\n\n如果想要公式居中，再套上一对就行：$$y = x^2 + z^3$$\n显示效果如下：\n$$\ny = x^2 + z^3\n$$\n如果想要给公式后面添加编号，那么在公式后添加空格 + \\tag{1}就可以了：\n$$y = x^2 + z^3 \\tag{1}$$\n显示效果如下：\n$$\ny = x^2 + z^3 \\tag{1}\n$$\n\n当然这只是最简单的使用，复杂的编辑方式还是查阅文档的好。\n","source":"_posts/Markdown操作.md","raw":"---\ntitle: Markdown操作\ncategories: [Markdown]\ntags: [Markdown]\ndate: 2017-03-20 11:21:11\ndescription:\n---\n\nMarkdown操作\n\n公式单行用$公式$就可以\n\n首先正常来一个公式，用符号$套两边就可以\n\n显示效果如下 $ y =x+z$\n\n如果想要公式居中，再套上一对就行：$$y = x^2 + z^3$$\n显示效果如下：\n$$\ny = x^2 + z^3\n$$\n如果想要给公式后面添加编号，那么在公式后添加空格 + \\tag{1}就可以了：\n$$y = x^2 + z^3 \\tag{1}$$\n显示效果如下：\n$$\ny = x^2 + z^3 \\tag{1}\n$$\n\n当然这只是最简单的使用，复杂的编辑方式还是查阅文档的好。\n","slug":"Markdown操作","published":1,"updated":"2020-09-28T10:55:09.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yi9000uesqr7a3yqrjm","content":"<p>Markdown操作</p>\n<p>公式单行用$公式$就可以</p>\n<p>首先正常来一个公式，用符号$套两边就可以</p>\n<p>显示效果如下 $ y =x+z$</p>\n<p>如果想要公式居中，再套上一对就行：$$y = x^2 + z^3$$<br>显示效果如下：<br>$$<br>y = x^2 + z^3<br>$$<br>如果想要给公式后面添加编号，那么在公式后添加空格 + \\tag{1}就可以了：<br>$$y = x^2 + z^3 \\tag{1}$$<br>显示效果如下：<br>$$<br>y = x^2 + z^3 \\tag{1}<br>$$</p>\n<p>当然这只是最简单的使用，复杂的编辑方式还是查阅文档的好。</p>\n","excerpt":"","more":"<p>Markdown操作</p>\n<p>公式单行用$公式$就可以</p>\n<p>首先正常来一个公式，用符号$套两边就可以</p>\n<p>显示效果如下 $ y =x+z$</p>\n<p>如果想要公式居中，再套上一对就行：$$y = x^2 + z^3$$<br>显示效果如下：<br>$$<br>y = x^2 + z^3<br>$$<br>如果想要给公式后面添加编号，那么在公式后添加空格 + \\tag{1}就可以了：<br>$$y = x^2 + z^3 \\tag{1}$$<br>显示效果如下：<br>$$<br>y = x^2 + z^3 \\tag{1}<br>$$</p>\n<p>当然这只是最简单的使用，复杂的编辑方式还是查阅文档的好。</p>\n"},{"title":"Netty","date":"2017-07-24T09:22:10.000Z","description":null,"_content":"\n<!-- more -->\n\nNetty\n\nWhat is Netty?\n\nNetty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients.\n\n![image-20200721113424540](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200721113424540.png)\n\nUnix 提供的5种I/O模型：\n\n- 阻塞I/O模型：\n- 非阻塞I/O模型：\n- I/O复用模型：\n- 信号驱动模型：\n- 异步I/O:\n\n\n\nNIO服务端时序图\n\n```sequence\nNioServer->NioServer: 1.打开ServerSocketChannel \nNioServer->NioServer: 2.绑定监听地址InetSocketAddress\nReactor Thread->Reactor Thread: 3.创建Selector，启动线程\nNioServer->Reactor Thread: 4.将ServerSocketChannel注册到Selector，监听SelectionKey.OP_ACCEPT\nReactor Thread->Reactor Thread:5.Selector轮询就绪的Key\nIoHandler->Reactor Thread: 6.handlerAccept()处理新的客户端接入\nIoHandler->IoHandler: 7.设置新客户端连接的Socket参数\nIoHandler->Reactor Thread:8.向Selector注册监听读操作SelectionKey.OP_READ\nReactor Thread->IoHandler: 9.handleRead()异步读消息到ByteBuffer\nIoHandler->IoHandler: 10.decode请求消息\nIoHandler->Reactor Thread: 11.异步写ByteBuffer到SocketChannel\n```\n\n\n```java\n//第一步：打开ServerSocketChannel，用于监听客户端的连接，它是所有客户端的父管道\nServerSocketChannel acceptorSvr = ServerSocketChannel.open();\n//第二步，绑定监听端口，设置连接为非阻塞模式\nacceptorSvr.socket().bind(new InetSocketAddress(InetAddress.getByName(\"IP\"),port));\nacceptorSvr.configureBlocking(false);\n//第三步,创建Reactor线程，创建多路复用器并启动线程\nSelector selector = Selector.open();\nNew Thread(new ReactorTask()).start();\n//第四步，将ServerSocketChannel注册到Reactor线程的多路复用器Selector上，监听ACCEPT事件\nSelectionKey key = acceptorSvr.register(selector,SelectionKey.OP_ACCEPt,ioHandler);\n//第五步，多路复用器在线程run方法的无限循环体内轮询准备就绪的key\nint num = selector.select();\nSet selectedKeys = selector.selectedKeys();\nIterator it = selectedKeys.iterator();\nwhile(it.hasNext()){\n    SelectionKey key = (SelectionKey)it.next();\n    // ... deal with I/O event ...\n}\n//第六步，多路复用器监听到有新的客户端接入，处理新的接入请求，完成TCP三次握手，建立物理链路\nSocketChannel channel = svrChannel.accept();\n//第七步，设置客户端链路为非阻塞模式\nchannel.configureBlocking(false);\nchannel.socket().setReuseAddress(true);\n//第八步，将新接入的客户端连接注册到Reactor线程的多路复用器上，监听读操作，用来读取客户端发送的网络消息\nSelectionKey key = socketChannel.register(selector,SelectionKey.OP_READ,ioHandler);\n//第九步，异步读取客户端请求消息到缓冲区\nint readNumber = channel.read(receivedBuffer);\n//第十步，对ByteBuffer进行编码，如果有半包消息指针reset，继续读取后续的报文，将解码成功的消息封装成Task，投递到业务线程池中，进行业务逻辑编排\nObject message = null;\nwhile(buffer.hasRemain()){\n    byteBuffer.mark();\n    Object message = decode(byteBuffer);\n    if(message == null){\n        byteBuffer.reset();\n        break;\n    }\n    messageList.add(message);\n}\nif(!byteBuffer.hasRemain()){\n    byteBuffer.clear();\n}else{\n    byteBuffer.compact();\n}\nif(messageList !=null &!messageList.isEmpty()){\n    for(Object messageE : messageList){\n        handlerTask(messageE);\n    }\n}\n//第十一步，将POJO对象encode成ByteBuffer，调用SocketChannel的异步write接口，将消息异步发送给客户端\nsocketChannel.write(buffer);\n\n\n```\n\n\n\nNIO客户端时序图\n\n```sequence\nNioClient->NioClient:1.打开SocketChannel\nNioClient->NioClient:2.设置SocketChannel为非阻塞模式，同时设置TCP参数\nNioClient->server:3.异步连接服务端\nNioClient->NioClient:4.判断连接结果，如果连接成功，调到步骤10，否则执行步骤5\nNioClient->Reactor Thread:5.向Reactor线程的多路复用器注册OP CONNECT事件\nReactor Thread->Reactor Thread:6.创建Selector，启动线程\nReactor Thread->Reactor Thread:7.Selector轮询就绪的Key\nReactor Thread->IoHandler:8.handerConnect()\nIoHandler->IoHandler:9.判断连接是否完成，完成执行步骤10\nIoHandler->Reactor Thread:10.向多路复用器注册读事件OP_READ\nReactor Thread->IoHandler:11.handleRead()异步读请求消息到ByteBuffer\nIoHandler->IoHandler:12.decode请求消息\nIoHandler->Reactor Thread:13.异步写ByteBuffer到SocketChannel\n```\n\n\n\n\n\n","source":"_posts/Netty.md","raw":"---\ntitle: Netty\ncategories: [Netty]\ntags: [Netty]\ndate: 2017-07-24 17:22:10\ndescription:\n---\n\n<!-- more -->\n\nNetty\n\nWhat is Netty?\n\nNetty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients.\n\n![image-20200721113424540](C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200721113424540.png)\n\nUnix 提供的5种I/O模型：\n\n- 阻塞I/O模型：\n- 非阻塞I/O模型：\n- I/O复用模型：\n- 信号驱动模型：\n- 异步I/O:\n\n\n\nNIO服务端时序图\n\n```sequence\nNioServer->NioServer: 1.打开ServerSocketChannel \nNioServer->NioServer: 2.绑定监听地址InetSocketAddress\nReactor Thread->Reactor Thread: 3.创建Selector，启动线程\nNioServer->Reactor Thread: 4.将ServerSocketChannel注册到Selector，监听SelectionKey.OP_ACCEPT\nReactor Thread->Reactor Thread:5.Selector轮询就绪的Key\nIoHandler->Reactor Thread: 6.handlerAccept()处理新的客户端接入\nIoHandler->IoHandler: 7.设置新客户端连接的Socket参数\nIoHandler->Reactor Thread:8.向Selector注册监听读操作SelectionKey.OP_READ\nReactor Thread->IoHandler: 9.handleRead()异步读消息到ByteBuffer\nIoHandler->IoHandler: 10.decode请求消息\nIoHandler->Reactor Thread: 11.异步写ByteBuffer到SocketChannel\n```\n\n\n```java\n//第一步：打开ServerSocketChannel，用于监听客户端的连接，它是所有客户端的父管道\nServerSocketChannel acceptorSvr = ServerSocketChannel.open();\n//第二步，绑定监听端口，设置连接为非阻塞模式\nacceptorSvr.socket().bind(new InetSocketAddress(InetAddress.getByName(\"IP\"),port));\nacceptorSvr.configureBlocking(false);\n//第三步,创建Reactor线程，创建多路复用器并启动线程\nSelector selector = Selector.open();\nNew Thread(new ReactorTask()).start();\n//第四步，将ServerSocketChannel注册到Reactor线程的多路复用器Selector上，监听ACCEPT事件\nSelectionKey key = acceptorSvr.register(selector,SelectionKey.OP_ACCEPt,ioHandler);\n//第五步，多路复用器在线程run方法的无限循环体内轮询准备就绪的key\nint num = selector.select();\nSet selectedKeys = selector.selectedKeys();\nIterator it = selectedKeys.iterator();\nwhile(it.hasNext()){\n    SelectionKey key = (SelectionKey)it.next();\n    // ... deal with I/O event ...\n}\n//第六步，多路复用器监听到有新的客户端接入，处理新的接入请求，完成TCP三次握手，建立物理链路\nSocketChannel channel = svrChannel.accept();\n//第七步，设置客户端链路为非阻塞模式\nchannel.configureBlocking(false);\nchannel.socket().setReuseAddress(true);\n//第八步，将新接入的客户端连接注册到Reactor线程的多路复用器上，监听读操作，用来读取客户端发送的网络消息\nSelectionKey key = socketChannel.register(selector,SelectionKey.OP_READ,ioHandler);\n//第九步，异步读取客户端请求消息到缓冲区\nint readNumber = channel.read(receivedBuffer);\n//第十步，对ByteBuffer进行编码，如果有半包消息指针reset，继续读取后续的报文，将解码成功的消息封装成Task，投递到业务线程池中，进行业务逻辑编排\nObject message = null;\nwhile(buffer.hasRemain()){\n    byteBuffer.mark();\n    Object message = decode(byteBuffer);\n    if(message == null){\n        byteBuffer.reset();\n        break;\n    }\n    messageList.add(message);\n}\nif(!byteBuffer.hasRemain()){\n    byteBuffer.clear();\n}else{\n    byteBuffer.compact();\n}\nif(messageList !=null &!messageList.isEmpty()){\n    for(Object messageE : messageList){\n        handlerTask(messageE);\n    }\n}\n//第十一步，将POJO对象encode成ByteBuffer，调用SocketChannel的异步write接口，将消息异步发送给客户端\nsocketChannel.write(buffer);\n\n\n```\n\n\n\nNIO客户端时序图\n\n```sequence\nNioClient->NioClient:1.打开SocketChannel\nNioClient->NioClient:2.设置SocketChannel为非阻塞模式，同时设置TCP参数\nNioClient->server:3.异步连接服务端\nNioClient->NioClient:4.判断连接结果，如果连接成功，调到步骤10，否则执行步骤5\nNioClient->Reactor Thread:5.向Reactor线程的多路复用器注册OP CONNECT事件\nReactor Thread->Reactor Thread:6.创建Selector，启动线程\nReactor Thread->Reactor Thread:7.Selector轮询就绪的Key\nReactor Thread->IoHandler:8.handerConnect()\nIoHandler->IoHandler:9.判断连接是否完成，完成执行步骤10\nIoHandler->Reactor Thread:10.向多路复用器注册读事件OP_READ\nReactor Thread->IoHandler:11.handleRead()异步读请求消息到ByteBuffer\nIoHandler->IoHandler:12.decode请求消息\nIoHandler->Reactor Thread:13.异步写ByteBuffer到SocketChannel\n```\n\n\n\n\n\n","slug":"Netty","published":1,"updated":"2020-08-04T04:57:28.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yia000vesqr98n59evz","content":"<a id=\"more\"></a>\n<p>Netty</p>\n<p>What is Netty?</p>\n<p>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</p>\n<p><img src=\"/2017/07/24/Netty/Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200721113424540.png\" alt=\"image-20200721113424540\"></p>\n<p>Unix 提供的5种I/O模型：</p>\n<ul>\n<li>阻塞I/O模型：</li>\n<li>非阻塞I/O模型：</li>\n<li>I/O复用模型：</li>\n<li>信号驱动模型：</li>\n<li>异步I/O:</li>\n</ul>\n<p>NIO服务端时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">NioServer-&gt;NioServer: 1.打开ServerSocketChannel </div><div class=\"line\">NioServer-&gt;NioServer: 2.绑定监听地址InetSocketAddress</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread: 3.创建Selector，启动线程</div><div class=\"line\">NioServer-&gt;Reactor Thread: 4.将ServerSocketChannel注册到Selector，监听SelectionKey.OP_ACCEPT</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread:5.Selector轮询就绪的Key</div><div class=\"line\">IoHandler-&gt;Reactor Thread: 6.handlerAccept()处理新的客户端接入</div><div class=\"line\">IoHandler-&gt;IoHandler: 7.设置新客户端连接的Socket参数</div><div class=\"line\">IoHandler-&gt;Reactor Thread:8.向Selector注册监听读操作SelectionKey.OP_READ</div><div class=\"line\">Reactor Thread-&gt;IoHandler: 9.handleRead()异步读消息到ByteBuffer</div><div class=\"line\">IoHandler-&gt;IoHandler: 10.decode请求消息</div><div class=\"line\">IoHandler-&gt;Reactor Thread: 11.异步写ByteBuffer到SocketChannel</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一步：打开ServerSocketChannel，用于监听客户端的连接，它是所有客户端的父管道</span></div><div class=\"line\">ServerSocketChannel acceptorSvr = ServerSocketChannel.open();</div><div class=\"line\"><span class=\"comment\">//第二步，绑定监听端口，设置连接为非阻塞模式</span></div><div class=\"line\">acceptorSvr.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(InetAddress.getByName(<span class=\"string\">\"IP\"</span>),port));</div><div class=\"line\">acceptorSvr.configureBlocking(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//第三步,创建Reactor线程，创建多路复用器并启动线程</span></div><div class=\"line\">Selector selector = Selector.open();</div><div class=\"line\"><span class=\"function\">New <span class=\"title\">Thread</span><span class=\"params\">(new ReactorTask()</span>).<span class=\"title\">start</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//第四步，将ServerSocketChannel注册到Reactor线程的多路复用器Selector上，监听ACCEPT事件</span></div><div class=\"line\">SelectionKey key = acceptorSvr.register(selector,SelectionKey.OP_ACCEPt,ioHandler);</div><div class=\"line\"><span class=\"comment\">//第五步，多路复用器在线程run方法的无限循环体内轮询准备就绪的key</span></div><div class=\"line\"><span class=\"keyword\">int</span> num = selector.select();</div><div class=\"line\">Set selectedKeys = selector.selectedKeys();</div><div class=\"line\">Iterator it = selectedKeys.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">    SelectionKey key = (SelectionKey)it.next();</div><div class=\"line\">    <span class=\"comment\">// ... deal with I/O event ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//第六步，多路复用器监听到有新的客户端接入，处理新的接入请求，完成TCP三次握手，建立物理链路</span></div><div class=\"line\">SocketChannel channel = svrChannel.accept();</div><div class=\"line\"><span class=\"comment\">//第七步，设置客户端链路为非阻塞模式</span></div><div class=\"line\">channel.configureBlocking(<span class=\"keyword\">false</span>);</div><div class=\"line\">channel.socket().setReuseAddress(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//第八步，将新接入的客户端连接注册到Reactor线程的多路复用器上，监听读操作，用来读取客户端发送的网络消息</span></div><div class=\"line\">SelectionKey key = socketChannel.register(selector,SelectionKey.OP_READ,ioHandler);</div><div class=\"line\"><span class=\"comment\">//第九步，异步读取客户端请求消息到缓冲区</span></div><div class=\"line\"><span class=\"keyword\">int</span> readNumber = channel.read(receivedBuffer);</div><div class=\"line\"><span class=\"comment\">//第十步，对ByteBuffer进行编码，如果有半包消息指针reset，继续读取后续的报文，将解码成功的消息封装成Task，投递到业务线程池中，进行业务逻辑编排</span></div><div class=\"line\">Object message = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(buffer.hasRemain())&#123;</div><div class=\"line\">    byteBuffer.mark();</div><div class=\"line\">    Object message = decode(byteBuffer);</div><div class=\"line\">    <span class=\"keyword\">if</span>(message == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        byteBuffer.reset();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    messageList.add(message);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>(!byteBuffer.hasRemain())&#123;</div><div class=\"line\">    byteBuffer.clear();</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    byteBuffer.compact();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>(messageList !=<span class=\"keyword\">null</span> &amp;!messageList.isEmpty())&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(Object messageE : messageList)&#123;</div><div class=\"line\">        handlerTask(messageE);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//第十一步，将POJO对象encode成ByteBuffer，调用SocketChannel的异步write接口，将消息异步发送给客户端</span></div><div class=\"line\">socketChannel.write(buffer);</div></pre></td></tr></table></figure>\n<p>NIO客户端时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">NioClient-&gt;NioClient:1.打开SocketChannel</div><div class=\"line\">NioClient-&gt;NioClient:2.设置SocketChannel为非阻塞模式，同时设置TCP参数</div><div class=\"line\">NioClient-&gt;server:3.异步连接服务端</div><div class=\"line\">NioClient-&gt;NioClient:4.判断连接结果，如果连接成功，调到步骤10，否则执行步骤5</div><div class=\"line\">NioClient-&gt;Reactor Thread:5.向Reactor线程的多路复用器注册OP CONNECT事件</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread:6.创建Selector，启动线程</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread:7.Selector轮询就绪的Key</div><div class=\"line\">Reactor Thread-&gt;IoHandler:8.handerConnect()</div><div class=\"line\">IoHandler-&gt;IoHandler:9.判断连接是否完成，完成执行步骤10</div><div class=\"line\">IoHandler-&gt;Reactor Thread:10.向多路复用器注册读事件OP_READ</div><div class=\"line\">Reactor Thread-&gt;IoHandler:11.handleRead()异步读请求消息到ByteBuffer</div><div class=\"line\">IoHandler-&gt;IoHandler:12.decode请求消息</div><div class=\"line\">IoHandler-&gt;Reactor Thread:13.异步写ByteBuffer到SocketChannel</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Netty</p>\n<p>What is Netty?</p>\n<p>Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp; clients.</p>\n<p><img src=\"/2017/07/24/Netty/Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200721113424540.png\" alt=\"image-20200721113424540\"></p>\n<p>Unix 提供的5种I/O模型：</p>\n<ul>\n<li>阻塞I/O模型：</li>\n<li>非阻塞I/O模型：</li>\n<li>I/O复用模型：</li>\n<li>信号驱动模型：</li>\n<li>异步I/O:</li>\n</ul>\n<p>NIO服务端时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">NioServer-&gt;NioServer: 1.打开ServerSocketChannel </div><div class=\"line\">NioServer-&gt;NioServer: 2.绑定监听地址InetSocketAddress</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread: 3.创建Selector，启动线程</div><div class=\"line\">NioServer-&gt;Reactor Thread: 4.将ServerSocketChannel注册到Selector，监听SelectionKey.OP_ACCEPT</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread:5.Selector轮询就绪的Key</div><div class=\"line\">IoHandler-&gt;Reactor Thread: 6.handlerAccept()处理新的客户端接入</div><div class=\"line\">IoHandler-&gt;IoHandler: 7.设置新客户端连接的Socket参数</div><div class=\"line\">IoHandler-&gt;Reactor Thread:8.向Selector注册监听读操作SelectionKey.OP_READ</div><div class=\"line\">Reactor Thread-&gt;IoHandler: 9.handleRead()异步读消息到ByteBuffer</div><div class=\"line\">IoHandler-&gt;IoHandler: 10.decode请求消息</div><div class=\"line\">IoHandler-&gt;Reactor Thread: 11.异步写ByteBuffer到SocketChannel</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一步：打开ServerSocketChannel，用于监听客户端的连接，它是所有客户端的父管道</span></div><div class=\"line\">ServerSocketChannel acceptorSvr = ServerSocketChannel.open();</div><div class=\"line\"><span class=\"comment\">//第二步，绑定监听端口，设置连接为非阻塞模式</span></div><div class=\"line\">acceptorSvr.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(InetAddress.getByName(<span class=\"string\">\"IP\"</span>),port));</div><div class=\"line\">acceptorSvr.configureBlocking(<span class=\"keyword\">false</span>);</div><div class=\"line\"><span class=\"comment\">//第三步,创建Reactor线程，创建多路复用器并启动线程</span></div><div class=\"line\">Selector selector = Selector.open();</div><div class=\"line\"><span class=\"function\">New <span class=\"title\">Thread</span><span class=\"params\">(new ReactorTask()</span>).<span class=\"title\">start</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//第四步，将ServerSocketChannel注册到Reactor线程的多路复用器Selector上，监听ACCEPT事件</span></div><div class=\"line\">SelectionKey key = acceptorSvr.register(selector,SelectionKey.OP_ACCEPt,ioHandler);</div><div class=\"line\"><span class=\"comment\">//第五步，多路复用器在线程run方法的无限循环体内轮询准备就绪的key</span></div><div class=\"line\"><span class=\"keyword\">int</span> num = selector.select();</div><div class=\"line\">Set selectedKeys = selector.selectedKeys();</div><div class=\"line\">Iterator it = selectedKeys.iterator();</div><div class=\"line\"><span class=\"keyword\">while</span>(it.hasNext())&#123;</div><div class=\"line\">    SelectionKey key = (SelectionKey)it.next();</div><div class=\"line\">    <span class=\"comment\">// ... deal with I/O event ...</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//第六步，多路复用器监听到有新的客户端接入，处理新的接入请求，完成TCP三次握手，建立物理链路</span></div><div class=\"line\">SocketChannel channel = svrChannel.accept();</div><div class=\"line\"><span class=\"comment\">//第七步，设置客户端链路为非阻塞模式</span></div><div class=\"line\">channel.configureBlocking(<span class=\"keyword\">false</span>);</div><div class=\"line\">channel.socket().setReuseAddress(<span class=\"keyword\">true</span>);</div><div class=\"line\"><span class=\"comment\">//第八步，将新接入的客户端连接注册到Reactor线程的多路复用器上，监听读操作，用来读取客户端发送的网络消息</span></div><div class=\"line\">SelectionKey key = socketChannel.register(selector,SelectionKey.OP_READ,ioHandler);</div><div class=\"line\"><span class=\"comment\">//第九步，异步读取客户端请求消息到缓冲区</span></div><div class=\"line\"><span class=\"keyword\">int</span> readNumber = channel.read(receivedBuffer);</div><div class=\"line\"><span class=\"comment\">//第十步，对ByteBuffer进行编码，如果有半包消息指针reset，继续读取后续的报文，将解码成功的消息封装成Task，投递到业务线程池中，进行业务逻辑编排</span></div><div class=\"line\">Object message = <span class=\"keyword\">null</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(buffer.hasRemain())&#123;</div><div class=\"line\">    byteBuffer.mark();</div><div class=\"line\">    Object message = decode(byteBuffer);</div><div class=\"line\">    <span class=\"keyword\">if</span>(message == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">        byteBuffer.reset();</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    messageList.add(message);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>(!byteBuffer.hasRemain())&#123;</div><div class=\"line\">    byteBuffer.clear();</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    byteBuffer.compact();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>(messageList !=<span class=\"keyword\">null</span> &amp;!messageList.isEmpty())&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(Object messageE : messageList)&#123;</div><div class=\"line\">        handlerTask(messageE);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//第十一步，将POJO对象encode成ByteBuffer，调用SocketChannel的异步write接口，将消息异步发送给客户端</span></div><div class=\"line\">socketChannel.write(buffer);</div></pre></td></tr></table></figure>\n<p>NIO客户端时序图</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">NioClient-&gt;NioClient:1.打开SocketChannel</div><div class=\"line\">NioClient-&gt;NioClient:2.设置SocketChannel为非阻塞模式，同时设置TCP参数</div><div class=\"line\">NioClient-&gt;server:3.异步连接服务端</div><div class=\"line\">NioClient-&gt;NioClient:4.判断连接结果，如果连接成功，调到步骤10，否则执行步骤5</div><div class=\"line\">NioClient-&gt;Reactor Thread:5.向Reactor线程的多路复用器注册OP CONNECT事件</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread:6.创建Selector，启动线程</div><div class=\"line\">Reactor Thread-&gt;Reactor Thread:7.Selector轮询就绪的Key</div><div class=\"line\">Reactor Thread-&gt;IoHandler:8.handerConnect()</div><div class=\"line\">IoHandler-&gt;IoHandler:9.判断连接是否完成，完成执行步骤10</div><div class=\"line\">IoHandler-&gt;Reactor Thread:10.向多路复用器注册读事件OP_READ</div><div class=\"line\">Reactor Thread-&gt;IoHandler:11.handleRead()异步读请求消息到ByteBuffer</div><div class=\"line\">IoHandler-&gt;IoHandler:12.decode请求消息</div><div class=\"line\">IoHandler-&gt;Reactor Thread:13.异步写ByteBuffer到SocketChannel</div></pre></td></tr></table></figure>"},{"title":"Netty权威指南目录抄写","date":"2019-07-24T09:22:10.000Z","description":null,"_content":"\n# Netty权威指南\n\n## 走进java NIO\n\n## java的I/O演进之路\n\n## NIO入门\n\n## Netty入门应用\n\n## TCP粘包/拆包问题的解决之道\n\n## 分隔符和定长解码器的应用\n\n## 编解码技术\n\n## Java序列化\n\n## Google Protobuf编解码\n\n## JBoss Marshalling编解码\n\n## HTTP协议开发应用\n\n## WebSocket协议开发\n\n## UDP协议开发\n\n## 文件传输\n\n## 私有协议栈开发\n\n## ByteBuf和相关辅助类\n\n## Channel和Unsafe\n\n## ChannelPipline和ChannelHandler\n\n## EventLoop和EventLoopGroup\n\n## Future和Promise\n\n## java多线程在Netty中的应用\n\n## Netty框架剖析\n\n## Netty行业应用\n\n## Netty未来展望","source":"_posts/Netty权威指南.md","raw":"---\ntitle: Netty权威指南目录抄写\ncategories: [Netty]\ntags: [Netty]\ndate: 2019-07-24 17:22:10\ndescription:\n---\n\n# Netty权威指南\n\n## 走进java NIO\n\n## java的I/O演进之路\n\n## NIO入门\n\n## Netty入门应用\n\n## TCP粘包/拆包问题的解决之道\n\n## 分隔符和定长解码器的应用\n\n## 编解码技术\n\n## Java序列化\n\n## Google Protobuf编解码\n\n## JBoss Marshalling编解码\n\n## HTTP协议开发应用\n\n## WebSocket协议开发\n\n## UDP协议开发\n\n## 文件传输\n\n## 私有协议栈开发\n\n## ByteBuf和相关辅助类\n\n## Channel和Unsafe\n\n## ChannelPipline和ChannelHandler\n\n## EventLoop和EventLoopGroup\n\n## Future和Promise\n\n## java多线程在Netty中的应用\n\n## Netty框架剖析\n\n## Netty行业应用\n\n## Netty未来展望","slug":"Netty权威指南","published":1,"updated":"2020-08-04T04:41:15.046Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yic000zesqruf0ogy01","content":"<h1 id=\"Netty权威指南\"><a href=\"#Netty权威指南\" class=\"headerlink\" title=\"Netty权威指南\"></a>Netty权威指南</h1><h2 id=\"走进java-NIO\"><a href=\"#走进java-NIO\" class=\"headerlink\" title=\"走进java NIO\"></a>走进java NIO</h2><h2 id=\"java的I-O演进之路\"><a href=\"#java的I-O演进之路\" class=\"headerlink\" title=\"java的I/O演进之路\"></a>java的I/O演进之路</h2><h2 id=\"NIO入门\"><a href=\"#NIO入门\" class=\"headerlink\" title=\"NIO入门\"></a>NIO入门</h2><h2 id=\"Netty入门应用\"><a href=\"#Netty入门应用\" class=\"headerlink\" title=\"Netty入门应用\"></a>Netty入门应用</h2><h2 id=\"TCP粘包-拆包问题的解决之道\"><a href=\"#TCP粘包-拆包问题的解决之道\" class=\"headerlink\" title=\"TCP粘包/拆包问题的解决之道\"></a>TCP粘包/拆包问题的解决之道</h2><h2 id=\"分隔符和定长解码器的应用\"><a href=\"#分隔符和定长解码器的应用\" class=\"headerlink\" title=\"分隔符和定长解码器的应用\"></a>分隔符和定长解码器的应用</h2><h2 id=\"编解码技术\"><a href=\"#编解码技术\" class=\"headerlink\" title=\"编解码技术\"></a>编解码技术</h2><h2 id=\"Java序列化\"><a href=\"#Java序列化\" class=\"headerlink\" title=\"Java序列化\"></a>Java序列化</h2><h2 id=\"Google-Protobuf编解码\"><a href=\"#Google-Protobuf编解码\" class=\"headerlink\" title=\"Google Protobuf编解码\"></a>Google Protobuf编解码</h2><h2 id=\"JBoss-Marshalling编解码\"><a href=\"#JBoss-Marshalling编解码\" class=\"headerlink\" title=\"JBoss Marshalling编解码\"></a>JBoss Marshalling编解码</h2><h2 id=\"HTTP协议开发应用\"><a href=\"#HTTP协议开发应用\" class=\"headerlink\" title=\"HTTP协议开发应用\"></a>HTTP协议开发应用</h2><h2 id=\"WebSocket协议开发\"><a href=\"#WebSocket协议开发\" class=\"headerlink\" title=\"WebSocket协议开发\"></a>WebSocket协议开发</h2><h2 id=\"UDP协议开发\"><a href=\"#UDP协议开发\" class=\"headerlink\" title=\"UDP协议开发\"></a>UDP协议开发</h2><h2 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h2><h2 id=\"私有协议栈开发\"><a href=\"#私有协议栈开发\" class=\"headerlink\" title=\"私有协议栈开发\"></a>私有协议栈开发</h2><h2 id=\"ByteBuf和相关辅助类\"><a href=\"#ByteBuf和相关辅助类\" class=\"headerlink\" title=\"ByteBuf和相关辅助类\"></a>ByteBuf和相关辅助类</h2><h2 id=\"Channel和Unsafe\"><a href=\"#Channel和Unsafe\" class=\"headerlink\" title=\"Channel和Unsafe\"></a>Channel和Unsafe</h2><h2 id=\"ChannelPipline和ChannelHandler\"><a href=\"#ChannelPipline和ChannelHandler\" class=\"headerlink\" title=\"ChannelPipline和ChannelHandler\"></a>ChannelPipline和ChannelHandler</h2><h2 id=\"EventLoop和EventLoopGroup\"><a href=\"#EventLoop和EventLoopGroup\" class=\"headerlink\" title=\"EventLoop和EventLoopGroup\"></a>EventLoop和EventLoopGroup</h2><h2 id=\"Future和Promise\"><a href=\"#Future和Promise\" class=\"headerlink\" title=\"Future和Promise\"></a>Future和Promise</h2><h2 id=\"java多线程在Netty中的应用\"><a href=\"#java多线程在Netty中的应用\" class=\"headerlink\" title=\"java多线程在Netty中的应用\"></a>java多线程在Netty中的应用</h2><h2 id=\"Netty框架剖析\"><a href=\"#Netty框架剖析\" class=\"headerlink\" title=\"Netty框架剖析\"></a>Netty框架剖析</h2><h2 id=\"Netty行业应用\"><a href=\"#Netty行业应用\" class=\"headerlink\" title=\"Netty行业应用\"></a>Netty行业应用</h2><h2 id=\"Netty未来展望\"><a href=\"#Netty未来展望\" class=\"headerlink\" title=\"Netty未来展望\"></a>Netty未来展望</h2>","excerpt":"","more":"<h1 id=\"Netty权威指南\"><a href=\"#Netty权威指南\" class=\"headerlink\" title=\"Netty权威指南\"></a>Netty权威指南</h1><h2 id=\"走进java-NIO\"><a href=\"#走进java-NIO\" class=\"headerlink\" title=\"走进java NIO\"></a>走进java NIO</h2><h2 id=\"java的I-O演进之路\"><a href=\"#java的I-O演进之路\" class=\"headerlink\" title=\"java的I/O演进之路\"></a>java的I/O演进之路</h2><h2 id=\"NIO入门\"><a href=\"#NIO入门\" class=\"headerlink\" title=\"NIO入门\"></a>NIO入门</h2><h2 id=\"Netty入门应用\"><a href=\"#Netty入门应用\" class=\"headerlink\" title=\"Netty入门应用\"></a>Netty入门应用</h2><h2 id=\"TCP粘包-拆包问题的解决之道\"><a href=\"#TCP粘包-拆包问题的解决之道\" class=\"headerlink\" title=\"TCP粘包/拆包问题的解决之道\"></a>TCP粘包/拆包问题的解决之道</h2><h2 id=\"分隔符和定长解码器的应用\"><a href=\"#分隔符和定长解码器的应用\" class=\"headerlink\" title=\"分隔符和定长解码器的应用\"></a>分隔符和定长解码器的应用</h2><h2 id=\"编解码技术\"><a href=\"#编解码技术\" class=\"headerlink\" title=\"编解码技术\"></a>编解码技术</h2><h2 id=\"Java序列化\"><a href=\"#Java序列化\" class=\"headerlink\" title=\"Java序列化\"></a>Java序列化</h2><h2 id=\"Google-Protobuf编解码\"><a href=\"#Google-Protobuf编解码\" class=\"headerlink\" title=\"Google Protobuf编解码\"></a>Google Protobuf编解码</h2><h2 id=\"JBoss-Marshalling编解码\"><a href=\"#JBoss-Marshalling编解码\" class=\"headerlink\" title=\"JBoss Marshalling编解码\"></a>JBoss Marshalling编解码</h2><h2 id=\"HTTP协议开发应用\"><a href=\"#HTTP协议开发应用\" class=\"headerlink\" title=\"HTTP协议开发应用\"></a>HTTP协议开发应用</h2><h2 id=\"WebSocket协议开发\"><a href=\"#WebSocket协议开发\" class=\"headerlink\" title=\"WebSocket协议开发\"></a>WebSocket协议开发</h2><h2 id=\"UDP协议开发\"><a href=\"#UDP协议开发\" class=\"headerlink\" title=\"UDP协议开发\"></a>UDP协议开发</h2><h2 id=\"文件传输\"><a href=\"#文件传输\" class=\"headerlink\" title=\"文件传输\"></a>文件传输</h2><h2 id=\"私有协议栈开发\"><a href=\"#私有协议栈开发\" class=\"headerlink\" title=\"私有协议栈开发\"></a>私有协议栈开发</h2><h2 id=\"ByteBuf和相关辅助类\"><a href=\"#ByteBuf和相关辅助类\" class=\"headerlink\" title=\"ByteBuf和相关辅助类\"></a>ByteBuf和相关辅助类</h2><h2 id=\"Channel和Unsafe\"><a href=\"#Channel和Unsafe\" class=\"headerlink\" title=\"Channel和Unsafe\"></a>Channel和Unsafe</h2><h2 id=\"ChannelPipline和ChannelHandler\"><a href=\"#ChannelPipline和ChannelHandler\" class=\"headerlink\" title=\"ChannelPipline和ChannelHandler\"></a>ChannelPipline和ChannelHandler</h2><h2 id=\"EventLoop和EventLoopGroup\"><a href=\"#EventLoop和EventLoopGroup\" class=\"headerlink\" title=\"EventLoop和EventLoopGroup\"></a>EventLoop和EventLoopGroup</h2><h2 id=\"Future和Promise\"><a href=\"#Future和Promise\" class=\"headerlink\" title=\"Future和Promise\"></a>Future和Promise</h2><h2 id=\"java多线程在Netty中的应用\"><a href=\"#java多线程在Netty中的应用\" class=\"headerlink\" title=\"java多线程在Netty中的应用\"></a>java多线程在Netty中的应用</h2><h2 id=\"Netty框架剖析\"><a href=\"#Netty框架剖析\" class=\"headerlink\" title=\"Netty框架剖析\"></a>Netty框架剖析</h2><h2 id=\"Netty行业应用\"><a href=\"#Netty行业应用\" class=\"headerlink\" title=\"Netty行业应用\"></a>Netty行业应用</h2><h2 id=\"Netty未来展望\"><a href=\"#Netty未来展望\" class=\"headerlink\" title=\"Netty未来展望\"></a>Netty未来展望</h2>"},{"title":"RabbitMQ命令行","date":"2020-06-04T06:13:09.000Z","description":null,"_content":"<!-- more -->\n\n## RabbitMQ命令行\n\nRabbitMQ附带多个命令行工具：\n\n- 用于服务管理和一般操作员任务的[ rabbitmqctl](https://www.rabbitmq.com/rabbitmqctl.8.html)\n- 用于诊断和[健康检查的](https://www.rabbitmq.com/monitoring.html)[rabbitmq-diagnostics](https://www.rabbitmq.com/rabbitmq-diagnostics.8.html)\n- 用于[插件管理的](https://www.rabbitmq.com/plugins.html)[rabbitmq-plugins](https://www.rabbitmq.com/rabbitmq-plugins.8.html)\n- 用于[队列](https://www.rabbitmq.com/queues.html)（尤其是[仲裁队列）](https://www.rabbitmq.com/quorum-queues.html)维护任务的[ rabbitmq](https://www.rabbitmq.com/rabbitmq-queues.8.html)[队列](https://www.rabbitmq.com/quorum-queues.html)\n- [rabbitmq-upgrade](https://www.rabbitmq.com/rabbitmq-upgrade.8.html)用于与[升级](https://www.rabbitmq.com/upgrade.html)相关的维护任务\n\n它们可以在安装根目录的sbin目录下找到。\n\n- 创建交换机\n\n```sh\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, direct, true, false, false, []).'\n```\n\n- 创建队列\n\n```sh\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, true, false, [], none).'\n```\n\n- 绑定队列和交换机\n\n```sh\nrabbitmqctl eval 'rabbit_binding:add({binding, {resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, <<\"ac.routing.key.alarm\">>, {resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, []}).'\n```\n\n这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.\n","source":"_posts/RabbitMQ命令行.md","raw":"---\ntitle: RabbitMQ命令行\ncategories: [RabbitMQ]\ntags: [RabbitMQ,消息队列]\ndate: 2020-06-04 14:13:09\ndescription:\n---\n<!-- more -->\n\n## RabbitMQ命令行\n\nRabbitMQ附带多个命令行工具：\n\n- 用于服务管理和一般操作员任务的[ rabbitmqctl](https://www.rabbitmq.com/rabbitmqctl.8.html)\n- 用于诊断和[健康检查的](https://www.rabbitmq.com/monitoring.html)[rabbitmq-diagnostics](https://www.rabbitmq.com/rabbitmq-diagnostics.8.html)\n- 用于[插件管理的](https://www.rabbitmq.com/plugins.html)[rabbitmq-plugins](https://www.rabbitmq.com/rabbitmq-plugins.8.html)\n- 用于[队列](https://www.rabbitmq.com/queues.html)（尤其是[仲裁队列）](https://www.rabbitmq.com/quorum-queues.html)维护任务的[ rabbitmq](https://www.rabbitmq.com/rabbitmq-queues.8.html)[队列](https://www.rabbitmq.com/quorum-queues.html)\n- [rabbitmq-upgrade](https://www.rabbitmq.com/rabbitmq-upgrade.8.html)用于与[升级](https://www.rabbitmq.com/upgrade.html)相关的维护任务\n\n它们可以在安装根目录的sbin目录下找到。\n\n- 创建交换机\n\n```sh\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, direct, true, false, false, []).'\n```\n\n- 创建队列\n\n```sh\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, true, false, [], none).'\n```\n\n- 绑定队列和交换机\n\n```sh\nrabbitmqctl eval 'rabbit_binding:add({binding, {resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, <<\"ac.routing.key.alarm\">>, {resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, []}).'\n```\n\n这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.\n","slug":"RabbitMQ命令行","published":1,"updated":"2020-08-04T04:57:28.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yie0011esqrzgigu2ib","content":"<a id=\"more\"></a>\n<h2 id=\"RabbitMQ命令行\"><a href=\"#RabbitMQ命令行\" class=\"headerlink\" title=\"RabbitMQ命令行\"></a>RabbitMQ命令行</h2><p>RabbitMQ附带多个命令行工具：</p>\n<ul>\n<li>用于服务管理和一般操作员任务的<a href=\"https://www.rabbitmq.com/rabbitmqctl.8.html\" target=\"_blank\" rel=\"external\"> rabbitmqctl</a></li>\n<li>用于诊断和<a href=\"https://www.rabbitmq.com/monitoring.html\" target=\"_blank\" rel=\"external\">健康检查的</a><a href=\"https://www.rabbitmq.com/rabbitmq-diagnostics.8.html\" target=\"_blank\" rel=\"external\">rabbitmq-diagnostics</a></li>\n<li>用于<a href=\"https://www.rabbitmq.com/plugins.html\" target=\"_blank\" rel=\"external\">插件管理的</a><a href=\"https://www.rabbitmq.com/rabbitmq-plugins.8.html\" target=\"_blank\" rel=\"external\">rabbitmq-plugins</a></li>\n<li>用于<a href=\"https://www.rabbitmq.com/queues.html\" target=\"_blank\" rel=\"external\">队列</a>（尤其是<a href=\"https://www.rabbitmq.com/quorum-queues.html\" target=\"_blank\" rel=\"external\">仲裁队列）</a>维护任务的<a href=\"https://www.rabbitmq.com/rabbitmq-queues.8.html\" target=\"_blank\" rel=\"external\"> rabbitmq</a><a href=\"https://www.rabbitmq.com/quorum-queues.html\" target=\"_blank\" rel=\"external\">队列</a></li>\n<li><a href=\"https://www.rabbitmq.com/rabbitmq-upgrade.8.html\" target=\"_blank\" rel=\"external\">rabbitmq-upgrade</a>用于与<a href=\"https://www.rabbitmq.com/upgrade.html\" target=\"_blank\" rel=\"external\">升级</a>相关的维护任务</li>\n</ul>\n<p>它们可以在安装根目录的sbin目录下找到。</p>\n<ul>\n<li>创建交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_exchange:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, direct, true, false, false, []).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>创建队列</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_amqqueue:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, true, false, [], none).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>绑定队列和交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_binding:add(&#123;binding, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, &lt;&lt;\"ac.routing.key.alarm\"&gt;&gt;, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, []&#125;).'</span></div></pre></td></tr></table></figure>\n<p>这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.</p>\n","excerpt":"","more":"<h2 id=\"RabbitMQ命令行\"><a href=\"#RabbitMQ命令行\" class=\"headerlink\" title=\"RabbitMQ命令行\"></a>RabbitMQ命令行</h2><p>RabbitMQ附带多个命令行工具：</p>\n<ul>\n<li>用于服务管理和一般操作员任务的<a href=\"https://www.rabbitmq.com/rabbitmqctl.8.html\"> rabbitmqctl</a></li>\n<li>用于诊断和<a href=\"https://www.rabbitmq.com/monitoring.html\">健康检查的</a><a href=\"https://www.rabbitmq.com/rabbitmq-diagnostics.8.html\">rabbitmq-diagnostics</a></li>\n<li>用于<a href=\"https://www.rabbitmq.com/plugins.html\">插件管理的</a><a href=\"https://www.rabbitmq.com/rabbitmq-plugins.8.html\">rabbitmq-plugins</a></li>\n<li>用于<a href=\"https://www.rabbitmq.com/queues.html\">队列</a>（尤其是<a href=\"https://www.rabbitmq.com/quorum-queues.html\">仲裁队列）</a>维护任务的<a href=\"https://www.rabbitmq.com/rabbitmq-queues.8.html\"> rabbitmq</a><a href=\"https://www.rabbitmq.com/quorum-queues.html\">队列</a></li>\n<li><a href=\"https://www.rabbitmq.com/rabbitmq-upgrade.8.html\">rabbitmq-upgrade</a>用于与<a href=\"https://www.rabbitmq.com/upgrade.html\">升级</a>相关的维护任务</li>\n</ul>\n<p>它们可以在安装根目录的sbin目录下找到。</p>\n<ul>\n<li>创建交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_exchange:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, direct, true, false, false, []).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>创建队列</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_amqqueue:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, true, false, [], none).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>绑定队列和交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_binding:add(&#123;binding, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, &lt;&lt;\"ac.routing.key.alarm\"&gt;&gt;, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, []&#125;).'</span></div></pre></td></tr></table></figure>\n<p>这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.</p>"},{"title":"Pinpoint安装使用","date":"2020-06-09T03:02:09.000Z","description":null,"_content":"\n<!-- more -->\n# Pinpoint安装使用\n\n**Pinpoint**是用于用Java / PHP编写的大规模分布式系统的APM（应用程序性能管理）工具。受[Dapper的](http://research.google.com/pubs/pub36356.html)启发，Pinpoint提供了一种解决方案，可通过跟踪跨分布式应用程序的事务来帮助分析系统的整体结构以及其中的组件如何互连。\n\n你一定要检查**精确定位**，如果你想\n\n- 一目了然地了解您的[应用程序拓扑](http://naver.github.io/pinpoint/overview.html)\n- 监控应用程序*的实时*\n- 获得每笔交易的代码级可见性\n- 安装APM代理而无需更改任何代码\n- 对性能的影响最小（资源使用量增加约3％）\n\n## 一、下载pinpoint包\n\n从https://github.com/naver/pinpoint/releases 下载\n\n1. pinpoint-agent.tar.gz\n2. pinpoint-collector.war\n3. pinpoint-web.war\n\n## 二、安装 HBase\n\n修改 hbase-site.xml 为\n\n```\n<configuration>\n  <property>\n    <name>hbase.rootdir</name>\n    <value>file:///home/testuser/hbase</value>\n  </property>\n  <property>\n    <name>hbase.zookeeper.property.dataDir</name>\n    <value>/home/testuser/zookeeper</value>\n  </property>\n  <property>\n    <name>hbase.unsafe.stream.capability.enforce</name>\n    <value>false</value>\n  </property>\n</configuration>\n```\n\n执行 `bin/start-hbase.sh`启动 hbase\n\n执行 ./hbase shell hbase-create.hbase 文件创建表等\n\n## 三、启动 pinpoint-web\n\n修改 pinpoint-web.war 包配置文件（默认）\n\n```\n修改 WEB-INF\\classes\\hbase.properties 文件\nhbase.client.host 设置为 hbase 所用的 zk 地址\n\n修改 WEB-INF\\classes\\pinpoint-web.properties 文件\ncluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址\n```\n\n将 war 包放到 tomcat 中启动\n\n## 四、启动 pinpoint-collector\n\n修改 pinpoint-collector.war 包配置文件（默认）\n\n```\n修改 WEB-INF\\classes\\hbase.properties 文件\nhbase.client.host 设置为 hbase 所用的 zk 地址\n\n修改 WEB-INF\\classes\\pinpoint-collector.properties 文件\ncluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址\n```\n\n可以将 pinpoint-web 和 pinpoint-collector 放到一个 tomcat 中启动\n\n \n\n## 五、配置 Agent\n\n解压 pinpoint-agent.tar.gz，修改 pinpoint.config 中的 profiler.collector.ip 改为部署 collector 的机器ip\n\n\n\n## 六、启动应用服务\n\n```\njava -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-provider-id -Dpinpoint.applicationName=dubbo-provider -jar dubbo-provider-0.0.1-SNAPSHOT.jar\n\njava -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-consumer-id -Dpinpoint.applicationName=dubbo-consumer -jar dubbo-consumer-0.0.1-SNAPSHOT.jar\n```\n\n如果是通过 tomcat 启动，则需要修改 bin/catalina.sh 文件\n\n```\nCATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar\"\nCATALINA_OPTS=\"$CATALINA_OPTS -Dpinpoint.agentId=AGENT_ID\"\nCATALINA_OPTS=\"$CATALINA_OPTS -Dpinpoint.applicationName=APPLICATION_TEST\"\n```","source":"_posts/Pinpoint.md","raw":"---\ntitle: Pinpoint安装使用\ncategories: [Pinpoint]\ntags: [Pinpoint,链路追踪]\ndate: 2020-06-09 11:02:09\ndescription:\n---\n\n<!-- more -->\n# Pinpoint安装使用\n\n**Pinpoint**是用于用Java / PHP编写的大规模分布式系统的APM（应用程序性能管理）工具。受[Dapper的](http://research.google.com/pubs/pub36356.html)启发，Pinpoint提供了一种解决方案，可通过跟踪跨分布式应用程序的事务来帮助分析系统的整体结构以及其中的组件如何互连。\n\n你一定要检查**精确定位**，如果你想\n\n- 一目了然地了解您的[应用程序拓扑](http://naver.github.io/pinpoint/overview.html)\n- 监控应用程序*的实时*\n- 获得每笔交易的代码级可见性\n- 安装APM代理而无需更改任何代码\n- 对性能的影响最小（资源使用量增加约3％）\n\n## 一、下载pinpoint包\n\n从https://github.com/naver/pinpoint/releases 下载\n\n1. pinpoint-agent.tar.gz\n2. pinpoint-collector.war\n3. pinpoint-web.war\n\n## 二、安装 HBase\n\n修改 hbase-site.xml 为\n\n```\n<configuration>\n  <property>\n    <name>hbase.rootdir</name>\n    <value>file:///home/testuser/hbase</value>\n  </property>\n  <property>\n    <name>hbase.zookeeper.property.dataDir</name>\n    <value>/home/testuser/zookeeper</value>\n  </property>\n  <property>\n    <name>hbase.unsafe.stream.capability.enforce</name>\n    <value>false</value>\n  </property>\n</configuration>\n```\n\n执行 `bin/start-hbase.sh`启动 hbase\n\n执行 ./hbase shell hbase-create.hbase 文件创建表等\n\n## 三、启动 pinpoint-web\n\n修改 pinpoint-web.war 包配置文件（默认）\n\n```\n修改 WEB-INF\\classes\\hbase.properties 文件\nhbase.client.host 设置为 hbase 所用的 zk 地址\n\n修改 WEB-INF\\classes\\pinpoint-web.properties 文件\ncluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址\n```\n\n将 war 包放到 tomcat 中启动\n\n## 四、启动 pinpoint-collector\n\n修改 pinpoint-collector.war 包配置文件（默认）\n\n```\n修改 WEB-INF\\classes\\hbase.properties 文件\nhbase.client.host 设置为 hbase 所用的 zk 地址\n\n修改 WEB-INF\\classes\\pinpoint-collector.properties 文件\ncluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址\n```\n\n可以将 pinpoint-web 和 pinpoint-collector 放到一个 tomcat 中启动\n\n \n\n## 五、配置 Agent\n\n解压 pinpoint-agent.tar.gz，修改 pinpoint.config 中的 profiler.collector.ip 改为部署 collector 的机器ip\n\n\n\n## 六、启动应用服务\n\n```\njava -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-provider-id -Dpinpoint.applicationName=dubbo-provider -jar dubbo-provider-0.0.1-SNAPSHOT.jar\n\njava -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-consumer-id -Dpinpoint.applicationName=dubbo-consumer -jar dubbo-consumer-0.0.1-SNAPSHOT.jar\n```\n\n如果是通过 tomcat 启动，则需要修改 bin/catalina.sh 文件\n\n```\nCATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar\"\nCATALINA_OPTS=\"$CATALINA_OPTS -Dpinpoint.agentId=AGENT_ID\"\nCATALINA_OPTS=\"$CATALINA_OPTS -Dpinpoint.applicationName=APPLICATION_TEST\"\n```","slug":"Pinpoint","published":1,"updated":"2020-08-04T04:57:28.672Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yig0015esqrleowj95b","content":"<a id=\"more\"></a>\n<h1 id=\"Pinpoint安装使用\"><a href=\"#Pinpoint安装使用\" class=\"headerlink\" title=\"Pinpoint安装使用\"></a>Pinpoint安装使用</h1><p><strong>Pinpoint</strong>是用于用Java / PHP编写的大规模分布式系统的APM（应用程序性能管理）工具。受<a href=\"http://research.google.com/pubs/pub36356.html\" target=\"_blank\" rel=\"external\">Dapper的</a>启发，Pinpoint提供了一种解决方案，可通过跟踪跨分布式应用程序的事务来帮助分析系统的整体结构以及其中的组件如何互连。</p>\n<p>你一定要检查<strong>精确定位</strong>，如果你想</p>\n<ul>\n<li>一目了然地了解您的<a href=\"http://naver.github.io/pinpoint/overview.html\" target=\"_blank\" rel=\"external\">应用程序拓扑</a></li>\n<li>监控应用程序<em>的实时</em></li>\n<li>获得每笔交易的代码级可见性</li>\n<li>安装APM代理而无需更改任何代码</li>\n<li>对性能的影响最小（资源使用量增加约3％）</li>\n</ul>\n<h2 id=\"一、下载pinpoint包\"><a href=\"#一、下载pinpoint包\" class=\"headerlink\" title=\"一、下载pinpoint包\"></a>一、下载pinpoint包</h2><p>从<a href=\"https://github.com/naver/pinpoint/releases\" target=\"_blank\" rel=\"external\">https://github.com/naver/pinpoint/releases</a> 下载</p>\n<ol>\n<li>pinpoint-agent.tar.gz</li>\n<li>pinpoint-collector.war</li>\n<li>pinpoint-web.war</li>\n</ol>\n<h2 id=\"二、安装-HBase\"><a href=\"#二、安装-HBase\" class=\"headerlink\" title=\"二、安装 HBase\"></a>二、安装 HBase</h2><p>修改 hbase-site.xml 为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">  &lt;property&gt;</div><div class=\"line\">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class=\"line\">    &lt;value&gt;file:///home/testuser/hbase&lt;/value&gt;</div><div class=\"line\">  &lt;/property&gt;</div><div class=\"line\">  &lt;property&gt;</div><div class=\"line\">    &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</div><div class=\"line\">    &lt;value&gt;/home/testuser/zookeeper&lt;/value&gt;</div><div class=\"line\">  &lt;/property&gt;</div><div class=\"line\">  &lt;property&gt;</div><div class=\"line\">    &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</div><div class=\"line\">    &lt;value&gt;false&lt;/value&gt;</div><div class=\"line\">  &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>执行 <code>bin/start-hbase.sh</code>启动 hbase</p>\n<p>执行 ./hbase shell hbase-create.hbase 文件创建表等</p>\n<h2 id=\"三、启动-pinpoint-web\"><a href=\"#三、启动-pinpoint-web\" class=\"headerlink\" title=\"三、启动 pinpoint-web\"></a>三、启动 pinpoint-web</h2><p>修改 pinpoint-web.war 包配置文件（默认）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改 WEB-INF\\classes\\hbase.properties 文件</div><div class=\"line\">hbase.client.host 设置为 hbase 所用的 zk 地址</div><div class=\"line\"></div><div class=\"line\">修改 WEB-INF\\classes\\pinpoint-web.properties 文件</div><div class=\"line\">cluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址</div></pre></td></tr></table></figure>\n<p>将 war 包放到 tomcat 中启动</p>\n<h2 id=\"四、启动-pinpoint-collector\"><a href=\"#四、启动-pinpoint-collector\" class=\"headerlink\" title=\"四、启动 pinpoint-collector\"></a>四、启动 pinpoint-collector</h2><p>修改 pinpoint-collector.war 包配置文件（默认）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改 WEB-INF\\classes\\hbase.properties 文件</div><div class=\"line\">hbase.client.host 设置为 hbase 所用的 zk 地址</div><div class=\"line\"></div><div class=\"line\">修改 WEB-INF\\classes\\pinpoint-collector.properties 文件</div><div class=\"line\">cluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址</div></pre></td></tr></table></figure>\n<p>可以将 pinpoint-web 和 pinpoint-collector 放到一个 tomcat 中启动</p>\n<h2 id=\"五、配置-Agent\"><a href=\"#五、配置-Agent\" class=\"headerlink\" title=\"五、配置 Agent\"></a>五、配置 Agent</h2><p>解压 pinpoint-agent.tar.gz，修改 pinpoint.config 中的 profiler.collector.ip 改为部署 collector 的机器ip</p>\n<h2 id=\"六、启动应用服务\"><a href=\"#六、启动应用服务\" class=\"headerlink\" title=\"六、启动应用服务\"></a>六、启动应用服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-provider-id -Dpinpoint.applicationName=dubbo-provider -jar dubbo-provider-0.0.1-SNAPSHOT.jar</div><div class=\"line\"></div><div class=\"line\">java -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-consumer-id -Dpinpoint.applicationName=dubbo-consumer -jar dubbo-consumer-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>\n<p>如果是通过 tomcat 启动，则需要修改 bin/catalina.sh 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CATALINA_OPTS=&quot;$CATALINA_OPTS -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar&quot;</div><div class=\"line\">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.agentId=AGENT_ID&quot;</div><div class=\"line\">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.applicationName=APPLICATION_TEST&quot;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h1 id=\"Pinpoint安装使用\"><a href=\"#Pinpoint安装使用\" class=\"headerlink\" title=\"Pinpoint安装使用\"></a>Pinpoint安装使用</h1><p><strong>Pinpoint</strong>是用于用Java / PHP编写的大规模分布式系统的APM（应用程序性能管理）工具。受<a href=\"http://research.google.com/pubs/pub36356.html\">Dapper的</a>启发，Pinpoint提供了一种解决方案，可通过跟踪跨分布式应用程序的事务来帮助分析系统的整体结构以及其中的组件如何互连。</p>\n<p>你一定要检查<strong>精确定位</strong>，如果你想</p>\n<ul>\n<li>一目了然地了解您的<a href=\"http://naver.github.io/pinpoint/overview.html\">应用程序拓扑</a></li>\n<li>监控应用程序<em>的实时</em></li>\n<li>获得每笔交易的代码级可见性</li>\n<li>安装APM代理而无需更改任何代码</li>\n<li>对性能的影响最小（资源使用量增加约3％）</li>\n</ul>\n<h2 id=\"一、下载pinpoint包\"><a href=\"#一、下载pinpoint包\" class=\"headerlink\" title=\"一、下载pinpoint包\"></a>一、下载pinpoint包</h2><p>从<a href=\"https://github.com/naver/pinpoint/releases\">https://github.com/naver/pinpoint/releases</a> 下载</p>\n<ol>\n<li>pinpoint-agent.tar.gz</li>\n<li>pinpoint-collector.war</li>\n<li>pinpoint-web.war</li>\n</ol>\n<h2 id=\"二、安装-HBase\"><a href=\"#二、安装-HBase\" class=\"headerlink\" title=\"二、安装 HBase\"></a>二、安装 HBase</h2><p>修改 hbase-site.xml 为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">  &lt;property&gt;</div><div class=\"line\">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class=\"line\">    &lt;value&gt;file:///home/testuser/hbase&lt;/value&gt;</div><div class=\"line\">  &lt;/property&gt;</div><div class=\"line\">  &lt;property&gt;</div><div class=\"line\">    &lt;name&gt;hbase.zookeeper.property.dataDir&lt;/name&gt;</div><div class=\"line\">    &lt;value&gt;/home/testuser/zookeeper&lt;/value&gt;</div><div class=\"line\">  &lt;/property&gt;</div><div class=\"line\">  &lt;property&gt;</div><div class=\"line\">    &lt;name&gt;hbase.unsafe.stream.capability.enforce&lt;/name&gt;</div><div class=\"line\">    &lt;value&gt;false&lt;/value&gt;</div><div class=\"line\">  &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>执行 <code>bin/start-hbase.sh</code>启动 hbase</p>\n<p>执行 ./hbase shell hbase-create.hbase 文件创建表等</p>\n<h2 id=\"三、启动-pinpoint-web\"><a href=\"#三、启动-pinpoint-web\" class=\"headerlink\" title=\"三、启动 pinpoint-web\"></a>三、启动 pinpoint-web</h2><p>修改 pinpoint-web.war 包配置文件（默认）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改 WEB-INF\\classes\\hbase.properties 文件</div><div class=\"line\">hbase.client.host 设置为 hbase 所用的 zk 地址</div><div class=\"line\"></div><div class=\"line\">修改 WEB-INF\\classes\\pinpoint-web.properties 文件</div><div class=\"line\">cluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址</div></pre></td></tr></table></figure>\n<p>将 war 包放到 tomcat 中启动</p>\n<h2 id=\"四、启动-pinpoint-collector\"><a href=\"#四、启动-pinpoint-collector\" class=\"headerlink\" title=\"四、启动 pinpoint-collector\"></a>四、启动 pinpoint-collector</h2><p>修改 pinpoint-collector.war 包配置文件（默认）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">修改 WEB-INF\\classes\\hbase.properties 文件</div><div class=\"line\">hbase.client.host 设置为 hbase 所用的 zk 地址</div><div class=\"line\"></div><div class=\"line\">修改 WEB-INF\\classes\\pinpoint-collector.properties 文件</div><div class=\"line\">cluster.zookeeper.address 修改为给 Pinpoint 准备的 zk 地址</div></pre></td></tr></table></figure>\n<p>可以将 pinpoint-web 和 pinpoint-collector 放到一个 tomcat 中启动</p>\n<h2 id=\"五、配置-Agent\"><a href=\"#五、配置-Agent\" class=\"headerlink\" title=\"五、配置 Agent\"></a>五、配置 Agent</h2><p>解压 pinpoint-agent.tar.gz，修改 pinpoint.config 中的 profiler.collector.ip 改为部署 collector 的机器ip</p>\n<h2 id=\"六、启动应用服务\"><a href=\"#六、启动应用服务\" class=\"headerlink\" title=\"六、启动应用服务\"></a>六、启动应用服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-provider-id -Dpinpoint.applicationName=dubbo-provider -jar dubbo-provider-0.0.1-SNAPSHOT.jar</div><div class=\"line\"></div><div class=\"line\">java -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar  -Dpinpoint.agentId=dubbo-consumer-id -Dpinpoint.applicationName=dubbo-consumer -jar dubbo-consumer-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>\n<p>如果是通过 tomcat 启动，则需要修改 bin/catalina.sh 文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">CATALINA_OPTS=&quot;$CATALINA_OPTS -javaagent:/opt/agent/pinpoint-bootstrap-1.8.0-SNAPSHOT.jar&quot;</div><div class=\"line\">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.agentId=AGENT_ID&quot;</div><div class=\"line\">CATALINA_OPTS=&quot;$CATALINA_OPTS -Dpinpoint.applicationName=APPLICATION_TEST&quot;</div></pre></td></tr></table></figure>"},{"title":"Redis","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"# Redis 教程\n\nredis（remote dictionary server）\n\n\n\n### redis数据类型\n\nredis支持5种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）\n\n\n\n## Redis原理、协议及应用\n\n### Redis是如何运行的？\n\n#### Redis基本原理\n\n##### Redis简介\n\nRedis 是一款基于 ANSI C 语言编写的，BSD 许可的，日志型 key-value 存储组件，它的所有数据结构都存在内存中，可以用作缓存、数据库和消息中间件。\n\nRedis 是 Remote dictionary server 即远程字典服务的缩写，一个 Redis 实例可以有多个存储数据的字典，客户端可以通过 select 来选择字典即 DB 进行数据存储。\n\n### 如何理解、选择并使用Redis的核心数据类型？\n\n### Redis协议的请求和响应有哪些“套路”可循？\n\n## Redis进阶\n\n### Redis系统架构中各个处理模块是干什么的？\n\n### Redis如何处理文件事件和时间事件？\n\n### Redis读取请求数据后，如何进行协议解析和处理？\n\n### 怎么认识和应用Redis内部数据结构？\n\n### Redis是如何淘汰key的？\n\n### Redis崩溃后，是如何进行数据恢复的？\n\n### Redis是如何处理容易超时的系统调用的？\n\n### 如何大幅成倍提升Redis处理性能？\n\n## 分布式Redis实战\n\n### Redis是如何进行主从复制的？\n\n### 如何构建一个高性能、易扩展的Redis集群？\n\n### 从容应对亿级QPS访问，Redis还缺少什么？\n\n## 深入分布式缓存\n\n### 面对海量数据，为什么无法设计出完美的分布式缓存体系？\n\n### 如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\n\n### 一个典型的分布式缓存系统是什么样的？\n\n## 应用场景案例解析\n\n### 如何为秒杀系统设计缓存体系？\n\n### 如何为海量计数场景设计缓存体系？\n\n### 如何为设计feed场景设计缓存体系？","source":"_posts/Redis 教程.md","raw":"---\ntitle: Redis\ncategories: [Redis]\ntags: [Redis]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n# Redis 教程\n\nredis（remote dictionary server）\n\n\n\n### redis数据类型\n\nredis支持5种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）\n\n\n\n## Redis原理、协议及应用\n\n### Redis是如何运行的？\n\n#### Redis基本原理\n\n##### Redis简介\n\nRedis 是一款基于 ANSI C 语言编写的，BSD 许可的，日志型 key-value 存储组件，它的所有数据结构都存在内存中，可以用作缓存、数据库和消息中间件。\n\nRedis 是 Remote dictionary server 即远程字典服务的缩写，一个 Redis 实例可以有多个存储数据的字典，客户端可以通过 select 来选择字典即 DB 进行数据存储。\n\n### 如何理解、选择并使用Redis的核心数据类型？\n\n### Redis协议的请求和响应有哪些“套路”可循？\n\n## Redis进阶\n\n### Redis系统架构中各个处理模块是干什么的？\n\n### Redis如何处理文件事件和时间事件？\n\n### Redis读取请求数据后，如何进行协议解析和处理？\n\n### 怎么认识和应用Redis内部数据结构？\n\n### Redis是如何淘汰key的？\n\n### Redis崩溃后，是如何进行数据恢复的？\n\n### Redis是如何处理容易超时的系统调用的？\n\n### 如何大幅成倍提升Redis处理性能？\n\n## 分布式Redis实战\n\n### Redis是如何进行主从复制的？\n\n### 如何构建一个高性能、易扩展的Redis集群？\n\n### 从容应对亿级QPS访问，Redis还缺少什么？\n\n## 深入分布式缓存\n\n### 面对海量数据，为什么无法设计出完美的分布式缓存体系？\n\n### 如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\n\n### 一个典型的分布式缓存系统是什么样的？\n\n## 应用场景案例解析\n\n### 如何为秒杀系统设计缓存体系？\n\n### 如何为海量计数场景设计缓存体系？\n\n### 如何为设计feed场景设计缓存体系？","slug":"Redis 教程","published":1,"updated":"2020-09-28T11:01:49.530Z","_id":"ckfmf4yii0018esqrx914jkea","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis-教程\"><a href=\"#Redis-教程\" class=\"headerlink\" title=\"Redis 教程\"></a>Redis 教程</h1><p>redis（remote dictionary server）</p>\n<h3 id=\"redis数据类型\"><a href=\"#redis数据类型\" class=\"headerlink\" title=\"redis数据类型\"></a>redis数据类型</h3><p>redis支持5种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）</p>\n<h2 id=\"Redis原理、协议及应用\"><a href=\"#Redis原理、协议及应用\" class=\"headerlink\" title=\"Redis原理、协议及应用\"></a>Redis原理、协议及应用</h2><h3 id=\"Redis是如何运行的？\"><a href=\"#Redis是如何运行的？\" class=\"headerlink\" title=\"Redis是如何运行的？\"></a>Redis是如何运行的？</h3><h4 id=\"Redis基本原理\"><a href=\"#Redis基本原理\" class=\"headerlink\" title=\"Redis基本原理\"></a>Redis基本原理</h4><h5 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h5><p>Redis 是一款基于 ANSI C 语言编写的，BSD 许可的，日志型 key-value 存储组件，它的所有数据结构都存在内存中，可以用作缓存、数据库和消息中间件。</p>\n<p>Redis 是 Remote dictionary server 即远程字典服务的缩写，一个 Redis 实例可以有多个存储数据的字典，客户端可以通过 select 来选择字典即 DB 进行数据存储。</p>\n<h3 id=\"如何理解、选择并使用Redis的核心数据类型？\"><a href=\"#如何理解、选择并使用Redis的核心数据类型？\" class=\"headerlink\" title=\"如何理解、选择并使用Redis的核心数据类型？\"></a>如何理解、选择并使用Redis的核心数据类型？</h3><h3 id=\"Redis协议的请求和响应有哪些“套路”可循？\"><a href=\"#Redis协议的请求和响应有哪些“套路”可循？\" class=\"headerlink\" title=\"Redis协议的请求和响应有哪些“套路”可循？\"></a>Redis协议的请求和响应有哪些“套路”可循？</h3><h2 id=\"Redis进阶\"><a href=\"#Redis进阶\" class=\"headerlink\" title=\"Redis进阶\"></a>Redis进阶</h2><h3 id=\"Redis系统架构中各个处理模块是干什么的？\"><a href=\"#Redis系统架构中各个处理模块是干什么的？\" class=\"headerlink\" title=\"Redis系统架构中各个处理模块是干什么的？\"></a>Redis系统架构中各个处理模块是干什么的？</h3><h3 id=\"Redis如何处理文件事件和时间事件？\"><a href=\"#Redis如何处理文件事件和时间事件？\" class=\"headerlink\" title=\"Redis如何处理文件事件和时间事件？\"></a>Redis如何处理文件事件和时间事件？</h3><h3 id=\"Redis读取请求数据后，如何进行协议解析和处理？\"><a href=\"#Redis读取请求数据后，如何进行协议解析和处理？\" class=\"headerlink\" title=\"Redis读取请求数据后，如何进行协议解析和处理？\"></a>Redis读取请求数据后，如何进行协议解析和处理？</h3><h3 id=\"怎么认识和应用Redis内部数据结构？\"><a href=\"#怎么认识和应用Redis内部数据结构？\" class=\"headerlink\" title=\"怎么认识和应用Redis内部数据结构？\"></a>怎么认识和应用Redis内部数据结构？</h3><h3 id=\"Redis是如何淘汰key的？\"><a href=\"#Redis是如何淘汰key的？\" class=\"headerlink\" title=\"Redis是如何淘汰key的？\"></a>Redis是如何淘汰key的？</h3><h3 id=\"Redis崩溃后，是如何进行数据恢复的？\"><a href=\"#Redis崩溃后，是如何进行数据恢复的？\" class=\"headerlink\" title=\"Redis崩溃后，是如何进行数据恢复的？\"></a>Redis崩溃后，是如何进行数据恢复的？</h3><h3 id=\"Redis是如何处理容易超时的系统调用的？\"><a href=\"#Redis是如何处理容易超时的系统调用的？\" class=\"headerlink\" title=\"Redis是如何处理容易超时的系统调用的？\"></a>Redis是如何处理容易超时的系统调用的？</h3><h3 id=\"如何大幅成倍提升Redis处理性能？\"><a href=\"#如何大幅成倍提升Redis处理性能？\" class=\"headerlink\" title=\"如何大幅成倍提升Redis处理性能？\"></a>如何大幅成倍提升Redis处理性能？</h3><h2 id=\"分布式Redis实战\"><a href=\"#分布式Redis实战\" class=\"headerlink\" title=\"分布式Redis实战\"></a>分布式Redis实战</h2><h3 id=\"Redis是如何进行主从复制的？\"><a href=\"#Redis是如何进行主从复制的？\" class=\"headerlink\" title=\"Redis是如何进行主从复制的？\"></a>Redis是如何进行主从复制的？</h3><h3 id=\"如何构建一个高性能、易扩展的Redis集群？\"><a href=\"#如何构建一个高性能、易扩展的Redis集群？\" class=\"headerlink\" title=\"如何构建一个高性能、易扩展的Redis集群？\"></a>如何构建一个高性能、易扩展的Redis集群？</h3><h3 id=\"从容应对亿级QPS访问，Redis还缺少什么？\"><a href=\"#从容应对亿级QPS访问，Redis还缺少什么？\" class=\"headerlink\" title=\"从容应对亿级QPS访问，Redis还缺少什么？\"></a>从容应对亿级QPS访问，Redis还缺少什么？</h3><h2 id=\"深入分布式缓存\"><a href=\"#深入分布式缓存\" class=\"headerlink\" title=\"深入分布式缓存\"></a>深入分布式缓存</h2><h3 id=\"面对海量数据，为什么无法设计出完美的分布式缓存体系？\"><a href=\"#面对海量数据，为什么无法设计出完美的分布式缓存体系？\" class=\"headerlink\" title=\"面对海量数据，为什么无法设计出完美的分布式缓存体系？\"></a>面对海量数据，为什么无法设计出完美的分布式缓存体系？</h3><h3 id=\"如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\"><a href=\"#如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\" class=\"headerlink\" title=\"如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\"></a>如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？</h3><h3 id=\"一个典型的分布式缓存系统是什么样的？\"><a href=\"#一个典型的分布式缓存系统是什么样的？\" class=\"headerlink\" title=\"一个典型的分布式缓存系统是什么样的？\"></a>一个典型的分布式缓存系统是什么样的？</h3><h2 id=\"应用场景案例解析\"><a href=\"#应用场景案例解析\" class=\"headerlink\" title=\"应用场景案例解析\"></a>应用场景案例解析</h2><h3 id=\"如何为秒杀系统设计缓存体系？\"><a href=\"#如何为秒杀系统设计缓存体系？\" class=\"headerlink\" title=\"如何为秒杀系统设计缓存体系？\"></a>如何为秒杀系统设计缓存体系？</h3><h3 id=\"如何为海量计数场景设计缓存体系？\"><a href=\"#如何为海量计数场景设计缓存体系？\" class=\"headerlink\" title=\"如何为海量计数场景设计缓存体系？\"></a>如何为海量计数场景设计缓存体系？</h3><h3 id=\"如何为设计feed场景设计缓存体系？\"><a href=\"#如何为设计feed场景设计缓存体系？\" class=\"headerlink\" title=\"如何为设计feed场景设计缓存体系？\"></a>如何为设计feed场景设计缓存体系？</h3>","excerpt":"","more":"<h1 id=\"Redis-教程\"><a href=\"#Redis-教程\" class=\"headerlink\" title=\"Redis 教程\"></a>Redis 教程</h1><p>redis（remote dictionary server）</p>\n<h3 id=\"redis数据类型\"><a href=\"#redis数据类型\" class=\"headerlink\" title=\"redis数据类型\"></a>redis数据类型</h3><p>redis支持5种数据类型：string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合）</p>\n<h2 id=\"Redis原理、协议及应用\"><a href=\"#Redis原理、协议及应用\" class=\"headerlink\" title=\"Redis原理、协议及应用\"></a>Redis原理、协议及应用</h2><h3 id=\"Redis是如何运行的？\"><a href=\"#Redis是如何运行的？\" class=\"headerlink\" title=\"Redis是如何运行的？\"></a>Redis是如何运行的？</h3><h4 id=\"Redis基本原理\"><a href=\"#Redis基本原理\" class=\"headerlink\" title=\"Redis基本原理\"></a>Redis基本原理</h4><h5 id=\"Redis简介\"><a href=\"#Redis简介\" class=\"headerlink\" title=\"Redis简介\"></a>Redis简介</h5><p>Redis 是一款基于 ANSI C 语言编写的，BSD 许可的，日志型 key-value 存储组件，它的所有数据结构都存在内存中，可以用作缓存、数据库和消息中间件。</p>\n<p>Redis 是 Remote dictionary server 即远程字典服务的缩写，一个 Redis 实例可以有多个存储数据的字典，客户端可以通过 select 来选择字典即 DB 进行数据存储。</p>\n<h3 id=\"如何理解、选择并使用Redis的核心数据类型？\"><a href=\"#如何理解、选择并使用Redis的核心数据类型？\" class=\"headerlink\" title=\"如何理解、选择并使用Redis的核心数据类型？\"></a>如何理解、选择并使用Redis的核心数据类型？</h3><h3 id=\"Redis协议的请求和响应有哪些“套路”可循？\"><a href=\"#Redis协议的请求和响应有哪些“套路”可循？\" class=\"headerlink\" title=\"Redis协议的请求和响应有哪些“套路”可循？\"></a>Redis协议的请求和响应有哪些“套路”可循？</h3><h2 id=\"Redis进阶\"><a href=\"#Redis进阶\" class=\"headerlink\" title=\"Redis进阶\"></a>Redis进阶</h2><h3 id=\"Redis系统架构中各个处理模块是干什么的？\"><a href=\"#Redis系统架构中各个处理模块是干什么的？\" class=\"headerlink\" title=\"Redis系统架构中各个处理模块是干什么的？\"></a>Redis系统架构中各个处理模块是干什么的？</h3><h3 id=\"Redis如何处理文件事件和时间事件？\"><a href=\"#Redis如何处理文件事件和时间事件？\" class=\"headerlink\" title=\"Redis如何处理文件事件和时间事件？\"></a>Redis如何处理文件事件和时间事件？</h3><h3 id=\"Redis读取请求数据后，如何进行协议解析和处理？\"><a href=\"#Redis读取请求数据后，如何进行协议解析和处理？\" class=\"headerlink\" title=\"Redis读取请求数据后，如何进行协议解析和处理？\"></a>Redis读取请求数据后，如何进行协议解析和处理？</h3><h3 id=\"怎么认识和应用Redis内部数据结构？\"><a href=\"#怎么认识和应用Redis内部数据结构？\" class=\"headerlink\" title=\"怎么认识和应用Redis内部数据结构？\"></a>怎么认识和应用Redis内部数据结构？</h3><h3 id=\"Redis是如何淘汰key的？\"><a href=\"#Redis是如何淘汰key的？\" class=\"headerlink\" title=\"Redis是如何淘汰key的？\"></a>Redis是如何淘汰key的？</h3><h3 id=\"Redis崩溃后，是如何进行数据恢复的？\"><a href=\"#Redis崩溃后，是如何进行数据恢复的？\" class=\"headerlink\" title=\"Redis崩溃后，是如何进行数据恢复的？\"></a>Redis崩溃后，是如何进行数据恢复的？</h3><h3 id=\"Redis是如何处理容易超时的系统调用的？\"><a href=\"#Redis是如何处理容易超时的系统调用的？\" class=\"headerlink\" title=\"Redis是如何处理容易超时的系统调用的？\"></a>Redis是如何处理容易超时的系统调用的？</h3><h3 id=\"如何大幅成倍提升Redis处理性能？\"><a href=\"#如何大幅成倍提升Redis处理性能？\" class=\"headerlink\" title=\"如何大幅成倍提升Redis处理性能？\"></a>如何大幅成倍提升Redis处理性能？</h3><h2 id=\"分布式Redis实战\"><a href=\"#分布式Redis实战\" class=\"headerlink\" title=\"分布式Redis实战\"></a>分布式Redis实战</h2><h3 id=\"Redis是如何进行主从复制的？\"><a href=\"#Redis是如何进行主从复制的？\" class=\"headerlink\" title=\"Redis是如何进行主从复制的？\"></a>Redis是如何进行主从复制的？</h3><h3 id=\"如何构建一个高性能、易扩展的Redis集群？\"><a href=\"#如何构建一个高性能、易扩展的Redis集群？\" class=\"headerlink\" title=\"如何构建一个高性能、易扩展的Redis集群？\"></a>如何构建一个高性能、易扩展的Redis集群？</h3><h3 id=\"从容应对亿级QPS访问，Redis还缺少什么？\"><a href=\"#从容应对亿级QPS访问，Redis还缺少什么？\" class=\"headerlink\" title=\"从容应对亿级QPS访问，Redis还缺少什么？\"></a>从容应对亿级QPS访问，Redis还缺少什么？</h3><h2 id=\"深入分布式缓存\"><a href=\"#深入分布式缓存\" class=\"headerlink\" title=\"深入分布式缓存\"></a>深入分布式缓存</h2><h3 id=\"面对海量数据，为什么无法设计出完美的分布式缓存体系？\"><a href=\"#面对海量数据，为什么无法设计出完美的分布式缓存体系？\" class=\"headerlink\" title=\"面对海量数据，为什么无法设计出完美的分布式缓存体系？\"></a>面对海量数据，为什么无法设计出完美的分布式缓存体系？</h3><h3 id=\"如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\"><a href=\"#如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\" class=\"headerlink\" title=\"如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？\"></a>如何设计足够可靠的分布式缓存体系，以满足中型移动互联网系统的需要？</h3><h3 id=\"一个典型的分布式缓存系统是什么样的？\"><a href=\"#一个典型的分布式缓存系统是什么样的？\" class=\"headerlink\" title=\"一个典型的分布式缓存系统是什么样的？\"></a>一个典型的分布式缓存系统是什么样的？</h3><h2 id=\"应用场景案例解析\"><a href=\"#应用场景案例解析\" class=\"headerlink\" title=\"应用场景案例解析\"></a>应用场景案例解析</h2><h3 id=\"如何为秒杀系统设计缓存体系？\"><a href=\"#如何为秒杀系统设计缓存体系？\" class=\"headerlink\" title=\"如何为秒杀系统设计缓存体系？\"></a>如何为秒杀系统设计缓存体系？</h3><h3 id=\"如何为海量计数场景设计缓存体系？\"><a href=\"#如何为海量计数场景设计缓存体系？\" class=\"headerlink\" title=\"如何为海量计数场景设计缓存体系？\"></a>如何为海量计数场景设计缓存体系？</h3><h3 id=\"如何为设计feed场景设计缓存体系？\"><a href=\"#如何为设计feed场景设计缓存体系？\" class=\"headerlink\" title=\"如何为设计feed场景设计缓存体系？\"></a>如何为设计feed场景设计缓存体系？</h3>"},{"title":"Springboot","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n# Spring Boot入门\n\n# Spring Boot配置\n\n# Spring Boot与日志\n\n# Spring Boot与Web开发\n\n# Spring Boot与Docker\n\n# Spring Boot与数据访问\n\n# Spring Boot启动配置原理\n\n启动流程\n\n创建SpringApplication对象\n\n运行run方法\n\n\n\n\n\n\n\n# Spring Boot自定义starters\n\n# Spring Boot与缓存\n\n# Spring Boot与消息\n\n# Spring Boot与检索\n\n# Spring Boot与任务\n\n# Spring Boot与安全\n\n# Spring Boot与分布式\n\n# Spring Boot与开发热部署\n\n# Spring Boot与监控管理\n\n\n\n\n\n\n\n\n\n# ","source":"_posts/Spring Boot.md","raw":"---\ntitle: Springboot\ncategories: [Spring]\ntags: [Spring]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n# Spring Boot入门\n\n# Spring Boot配置\n\n# Spring Boot与日志\n\n# Spring Boot与Web开发\n\n# Spring Boot与Docker\n\n# Spring Boot与数据访问\n\n# Spring Boot启动配置原理\n\n启动流程\n\n创建SpringApplication对象\n\n运行run方法\n\n\n\n\n\n\n\n# Spring Boot自定义starters\n\n# Spring Boot与缓存\n\n# Spring Boot与消息\n\n# Spring Boot与检索\n\n# Spring Boot与任务\n\n# Spring Boot与安全\n\n# Spring Boot与分布式\n\n# Spring Boot与开发热部署\n\n# Spring Boot与监控管理\n\n\n\n\n\n\n\n\n\n# ","slug":"Spring Boot","published":1,"updated":"2020-09-28T11:01:19.775Z","_id":"ckfmf4yij001aesqrrqqlkkr9","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Spring-Boot入门\"><a href=\"#Spring-Boot入门\" class=\"headerlink\" title=\"Spring Boot入门\"></a>Spring Boot入门</h1><h1 id=\"Spring-Boot配置\"><a href=\"#Spring-Boot配置\" class=\"headerlink\" title=\"Spring Boot配置\"></a>Spring Boot配置</h1><h1 id=\"Spring-Boot与日志\"><a href=\"#Spring-Boot与日志\" class=\"headerlink\" title=\"Spring Boot与日志\"></a>Spring Boot与日志</h1><h1 id=\"Spring-Boot与Web开发\"><a href=\"#Spring-Boot与Web开发\" class=\"headerlink\" title=\"Spring Boot与Web开发\"></a>Spring Boot与Web开发</h1><h1 id=\"Spring-Boot与Docker\"><a href=\"#Spring-Boot与Docker\" class=\"headerlink\" title=\"Spring Boot与Docker\"></a>Spring Boot与Docker</h1><h1 id=\"Spring-Boot与数据访问\"><a href=\"#Spring-Boot与数据访问\" class=\"headerlink\" title=\"Spring Boot与数据访问\"></a>Spring Boot与数据访问</h1><h1 id=\"Spring-Boot启动配置原理\"><a href=\"#Spring-Boot启动配置原理\" class=\"headerlink\" title=\"Spring Boot启动配置原理\"></a>Spring Boot启动配置原理</h1><p>启动流程</p>\n<p>创建SpringApplication对象</p>\n<p>运行run方法</p>\n<h1 id=\"Spring-Boot自定义starters\"><a href=\"#Spring-Boot自定义starters\" class=\"headerlink\" title=\"Spring Boot自定义starters\"></a>Spring Boot自定义starters</h1><h1 id=\"Spring-Boot与缓存\"><a href=\"#Spring-Boot与缓存\" class=\"headerlink\" title=\"Spring Boot与缓存\"></a>Spring Boot与缓存</h1><h1 id=\"Spring-Boot与消息\"><a href=\"#Spring-Boot与消息\" class=\"headerlink\" title=\"Spring Boot与消息\"></a>Spring Boot与消息</h1><h1 id=\"Spring-Boot与检索\"><a href=\"#Spring-Boot与检索\" class=\"headerlink\" title=\"Spring Boot与检索\"></a>Spring Boot与检索</h1><h1 id=\"Spring-Boot与任务\"><a href=\"#Spring-Boot与任务\" class=\"headerlink\" title=\"Spring Boot与任务\"></a>Spring Boot与任务</h1><h1 id=\"Spring-Boot与安全\"><a href=\"#Spring-Boot与安全\" class=\"headerlink\" title=\"Spring Boot与安全\"></a>Spring Boot与安全</h1><h1 id=\"Spring-Boot与分布式\"><a href=\"#Spring-Boot与分布式\" class=\"headerlink\" title=\"Spring Boot与分布式\"></a>Spring Boot与分布式</h1><h1 id=\"Spring-Boot与开发热部署\"><a href=\"#Spring-Boot与开发热部署\" class=\"headerlink\" title=\"Spring Boot与开发热部署\"></a>Spring Boot与开发热部署</h1><h1 id=\"Spring-Boot与监控管理\"><a href=\"#Spring-Boot与监控管理\" class=\"headerlink\" title=\"Spring Boot与监控管理\"></a>Spring Boot与监控管理</h1><p># </p>\n","excerpt":"","more":"<h1 id=\"Spring-Boot入门\"><a href=\"#Spring-Boot入门\" class=\"headerlink\" title=\"Spring Boot入门\"></a>Spring Boot入门</h1><h1 id=\"Spring-Boot配置\"><a href=\"#Spring-Boot配置\" class=\"headerlink\" title=\"Spring Boot配置\"></a>Spring Boot配置</h1><h1 id=\"Spring-Boot与日志\"><a href=\"#Spring-Boot与日志\" class=\"headerlink\" title=\"Spring Boot与日志\"></a>Spring Boot与日志</h1><h1 id=\"Spring-Boot与Web开发\"><a href=\"#Spring-Boot与Web开发\" class=\"headerlink\" title=\"Spring Boot与Web开发\"></a>Spring Boot与Web开发</h1><h1 id=\"Spring-Boot与Docker\"><a href=\"#Spring-Boot与Docker\" class=\"headerlink\" title=\"Spring Boot与Docker\"></a>Spring Boot与Docker</h1><h1 id=\"Spring-Boot与数据访问\"><a href=\"#Spring-Boot与数据访问\" class=\"headerlink\" title=\"Spring Boot与数据访问\"></a>Spring Boot与数据访问</h1><h1 id=\"Spring-Boot启动配置原理\"><a href=\"#Spring-Boot启动配置原理\" class=\"headerlink\" title=\"Spring Boot启动配置原理\"></a>Spring Boot启动配置原理</h1><p>启动流程</p>\n<p>创建SpringApplication对象</p>\n<p>运行run方法</p>\n<h1 id=\"Spring-Boot自定义starters\"><a href=\"#Spring-Boot自定义starters\" class=\"headerlink\" title=\"Spring Boot自定义starters\"></a>Spring Boot自定义starters</h1><h1 id=\"Spring-Boot与缓存\"><a href=\"#Spring-Boot与缓存\" class=\"headerlink\" title=\"Spring Boot与缓存\"></a>Spring Boot与缓存</h1><h1 id=\"Spring-Boot与消息\"><a href=\"#Spring-Boot与消息\" class=\"headerlink\" title=\"Spring Boot与消息\"></a>Spring Boot与消息</h1><h1 id=\"Spring-Boot与检索\"><a href=\"#Spring-Boot与检索\" class=\"headerlink\" title=\"Spring Boot与检索\"></a>Spring Boot与检索</h1><h1 id=\"Spring-Boot与任务\"><a href=\"#Spring-Boot与任务\" class=\"headerlink\" title=\"Spring Boot与任务\"></a>Spring Boot与任务</h1><h1 id=\"Spring-Boot与安全\"><a href=\"#Spring-Boot与安全\" class=\"headerlink\" title=\"Spring Boot与安全\"></a>Spring Boot与安全</h1><h1 id=\"Spring-Boot与分布式\"><a href=\"#Spring-Boot与分布式\" class=\"headerlink\" title=\"Spring Boot与分布式\"></a>Spring Boot与分布式</h1><h1 id=\"Spring-Boot与开发热部署\"><a href=\"#Spring-Boot与开发热部署\" class=\"headerlink\" title=\"Spring Boot与开发热部署\"></a>Spring Boot与开发热部署</h1><h1 id=\"Spring-Boot与监控管理\"><a href=\"#Spring-Boot与监控管理\" class=\"headerlink\" title=\"Spring Boot与监控管理\"></a>Spring Boot与监控管理</h1><p># </p>\n"},{"title":"网关","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n\n\n\n\n\n作用：可以实现\n\n\n\n\n\n### Zuul与GateWay有什么区别\n\nZuul网关属于Nettfix公司开源框架，需要第一代微服务网关\n\nGateWay属于SpringCloud自己研发的网关框架，属于第二代网关\n\n\n\n相比来说GateWay比Zuul网关性能好\n\nZuul网关底层基于Servlet实现的，阻塞式api，不支持长连接\n\nSpringCloudGateWay基于Spring5构建，能够实现响应式非阻塞式api，支持长连接，更好的支持Spring系列产品，依赖Springboot-webflux。\n\n\n\n\n\n### 网关与Nginx的区别\n\n相同点：都可以实现api拦截，负载均衡，反向代理，请求过滤等\n\n\n\n不同点：Nginx采用c语言\n\n","source":"_posts/Zuul与GateWay有什么区别.md","raw":"---\ntitle: 网关\ncategories: [网关]\ntags: [网关]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n\n\n\n\n\n作用：可以实现\n\n\n\n\n\n### Zuul与GateWay有什么区别\n\nZuul网关属于Nettfix公司开源框架，需要第一代微服务网关\n\nGateWay属于SpringCloud自己研发的网关框架，属于第二代网关\n\n\n\n相比来说GateWay比Zuul网关性能好\n\nZuul网关底层基于Servlet实现的，阻塞式api，不支持长连接\n\nSpringCloudGateWay基于Spring5构建，能够实现响应式非阻塞式api，支持长连接，更好的支持Spring系列产品，依赖Springboot-webflux。\n\n\n\n\n\n### 网关与Nginx的区别\n\n相同点：都可以实现api拦截，负载均衡，反向代理，请求过滤等\n\n\n\n不同点：Nginx采用c语言\n\n","slug":"Zuul与GateWay有什么区别","published":1,"updated":"2020-09-28T10:42:52.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yim001eesqrmrbspwpd","content":"<p>作用：可以实现</p>\n<h3 id=\"Zuul与GateWay有什么区别\"><a href=\"#Zuul与GateWay有什么区别\" class=\"headerlink\" title=\"Zuul与GateWay有什么区别\"></a>Zuul与GateWay有什么区别</h3><p>Zuul网关属于Nettfix公司开源框架，需要第一代微服务网关</p>\n<p>GateWay属于SpringCloud自己研发的网关框架，属于第二代网关</p>\n<p>相比来说GateWay比Zuul网关性能好</p>\n<p>Zuul网关底层基于Servlet实现的，阻塞式api，不支持长连接</p>\n<p>SpringCloudGateWay基于Spring5构建，能够实现响应式非阻塞式api，支持长连接，更好的支持Spring系列产品，依赖Springboot-webflux。</p>\n<h3 id=\"网关与Nginx的区别\"><a href=\"#网关与Nginx的区别\" class=\"headerlink\" title=\"网关与Nginx的区别\"></a>网关与Nginx的区别</h3><p>相同点：都可以实现api拦截，负载均衡，反向代理，请求过滤等</p>\n<p>不同点：Nginx采用c语言</p>\n","excerpt":"","more":"<p>作用：可以实现</p>\n<h3 id=\"Zuul与GateWay有什么区别\"><a href=\"#Zuul与GateWay有什么区别\" class=\"headerlink\" title=\"Zuul与GateWay有什么区别\"></a>Zuul与GateWay有什么区别</h3><p>Zuul网关属于Nettfix公司开源框架，需要第一代微服务网关</p>\n<p>GateWay属于SpringCloud自己研发的网关框架，属于第二代网关</p>\n<p>相比来说GateWay比Zuul网关性能好</p>\n<p>Zuul网关底层基于Servlet实现的，阻塞式api，不支持长连接</p>\n<p>SpringCloudGateWay基于Spring5构建，能够实现响应式非阻塞式api，支持长连接，更好的支持Spring系列产品，依赖Springboot-webflux。</p>\n<h3 id=\"网关与Nginx的区别\"><a href=\"#网关与Nginx的区别\" class=\"headerlink\" title=\"网关与Nginx的区别\"></a>网关与Nginx的区别</h3><p>相同点：都可以实现api拦截，负载均衡，反向代理，请求过滤等</p>\n<p>不同点：Nginx采用c语言</p>\n"},{"title":"angularjs2d1","date":"2016-10-11T09:02:51.000Z","description":"angularjs2 开始了","_content":"\n官网地址：[https://angular.io](https://angular.io)\n\n创建D1个应用\n\nmkdir angular-quickstart\ncd angular-quickstart\n\n","source":"_posts/angularjs2d1.md","raw":"---\ntitle: angularjs2d1\ncategories: [angularjs2]\ntags: [angularjs2]\ndate: 2016-10-11 17:02:51\ndescription:  angularjs2 开始了\n---\n\n官网地址：[https://angular.io](https://angular.io)\n\n创建D1个应用\n\nmkdir angular-quickstart\ncd angular-quickstart\n\n","slug":"angularjs2d1","published":1,"updated":"2016-10-11T09:12:52.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yin001fesqr6n1y2p3z","content":"<p>官网地址：<a href=\"https://angular.io\" target=\"_blank\" rel=\"external\">https://angular.io</a></p>\n<p>创建D1个应用</p>\n<p>mkdir angular-quickstart<br>cd angular-quickstart</p>\n","excerpt":"","more":"<p>官网地址：<a href=\"https://angular.io\">https://angular.io</a></p>\n<p>创建D1个应用</p>\n<p>mkdir angular-quickstart<br>cd angular-quickstart</p>\n"},{"title":"Spring事务隔离级别","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n## Spring事务隔离级别\n\n\n\n一、Propagation （事务的传播属性）\n\nPropagation ：　　key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。有以下选项可供使用：PROPAGATION_REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。\nPROPAGATION_SUPPORTS--支持当前事务，如果当前没有事务，就以非事务方式执行。\nPROPAGATION_MANDATORY--支持当前事务，如果当前没有事务，就抛出异常。\nPROPAGATION_REQUIRES_NEW--新建事务，如果当前存在事务，把当前事务挂起。\nPROPAGATION_NOT_SUPPORTED--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\nPROPAGATION_NEVER--以非事务方式执行，如果当前存在事务，则抛出异常。\n\n1： PROPAGATION_REQUIRED\n加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务\n比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED, 那么由于执行ServiceA.methodA的时候，\nServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA\n的事务内部，就不再起新的事务。而假如ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。\n这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被\n提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚\n\n2： PROPAGATION_SUPPORTS\n如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行\n\n\n3： PROPAGATION_MANDATORY\n必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常\n\n4： PROPAGATION_REQUIRES_NEW\n这个就比较绕口了。 比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，\n那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，\n他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在\n两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，\n如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。\n\n5： PROPAGATION_NOT_SUPPORTED\n当前不支持事务。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED ，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED ，\n那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。\n\n6： PROPAGATION_NEVER\n不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，\n那么ServiceB.methodB就要抛出异常了。\n\n7： PROPAGATION_NESTED\n理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，\n而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。\n而Nested事务的好处是他有一个savepoint。\n*****************************************\nServiceA {\n\n/**\n\\* 事务属性配置为 PROPAGATION_REQUIRED\n*/\nvoid methodA() {\ntry {\n//savepoint\nServiceB.methodB(); //PROPAGATION_NESTED 级别\n} catch (SomeException) {\n// 执行其他业务, 如 ServiceC.methodC();\n}\n}\n\n}\n********************************************\n也就是说ServiceB.methodB失败回滚，那么ServiceA.methodA也会回滚到savepoint点上，ServiceA.methodA可以选择另外一个分支，比如\nServiceC.methodC，继续执行，来尝试完成自己的事务。\n但是这个事务并没有在EJB标准中定义。\n\nSpring事务的隔离级别\n \\1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.\n   另外四个与JDBC的隔离级别相对应\n \\2. ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。\n   这种隔离级别会产生脏读，不可重复读和幻像读。\n \\3. ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据\n \\4. ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。\n   它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。\n \\5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。\n   除了防止脏读，不可重复读外，还避免了幻像读。\n\n什么是脏数据，脏读，不可重复读，幻觉读？\n 脏读: 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，\n   另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一\n   个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。\n\n 不可重复读: 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。\n       那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据\n       可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。\n      \n 幻觉读: 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及\n     到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，\n     以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。","source":"_posts/Spring事务隔离级别.md","raw":"---\ntitle: Spring事务隔离级别\ncategories: [Spring]\ntags: [Spring]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n## Spring事务隔离级别\n\n\n\n一、Propagation （事务的传播属性）\n\nPropagation ：　　key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。有以下选项可供使用：PROPAGATION_REQUIRED--支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。\nPROPAGATION_SUPPORTS--支持当前事务，如果当前没有事务，就以非事务方式执行。\nPROPAGATION_MANDATORY--支持当前事务，如果当前没有事务，就抛出异常。\nPROPAGATION_REQUIRES_NEW--新建事务，如果当前存在事务，把当前事务挂起。\nPROPAGATION_NOT_SUPPORTED--以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。\nPROPAGATION_NEVER--以非事务方式执行，如果当前存在事务，则抛出异常。\n\n1： PROPAGATION_REQUIRED\n加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务\n比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED, 那么由于执行ServiceA.methodA的时候，\nServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA\n的事务内部，就不再起新的事务。而假如ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。\n这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被\n提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚\n\n2： PROPAGATION_SUPPORTS\n如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行\n\n\n3： PROPAGATION_MANDATORY\n必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常\n\n4： PROPAGATION_REQUIRES_NEW\n这个就比较绕口了。 比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，\n那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，\n他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在\n两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，\n如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。\n\n5： PROPAGATION_NOT_SUPPORTED\n当前不支持事务。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED ，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED ，\n那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。\n\n6： PROPAGATION_NEVER\n不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，\n那么ServiceB.methodB就要抛出异常了。\n\n7： PROPAGATION_NESTED\n理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，\n而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。\n而Nested事务的好处是他有一个savepoint。\n*****************************************\nServiceA {\n\n/**\n\\* 事务属性配置为 PROPAGATION_REQUIRED\n*/\nvoid methodA() {\ntry {\n//savepoint\nServiceB.methodB(); //PROPAGATION_NESTED 级别\n} catch (SomeException) {\n// 执行其他业务, 如 ServiceC.methodC();\n}\n}\n\n}\n********************************************\n也就是说ServiceB.methodB失败回滚，那么ServiceA.methodA也会回滚到savepoint点上，ServiceA.methodA可以选择另外一个分支，比如\nServiceC.methodC，继续执行，来尝试完成自己的事务。\n但是这个事务并没有在EJB标准中定义。\n\nSpring事务的隔离级别\n \\1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.\n   另外四个与JDBC的隔离级别相对应\n \\2. ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。\n   这种隔离级别会产生脏读，不可重复读和幻像读。\n \\3. ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据\n \\4. ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。\n   它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。\n \\5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。\n   除了防止脏读，不可重复读外，还避免了幻像读。\n\n什么是脏数据，脏读，不可重复读，幻觉读？\n 脏读: 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，\n   另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一\n   个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。\n\n 不可重复读: 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。\n       那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据\n       可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。\n      \n 幻觉读: 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及\n     到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，\n     以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。","slug":"Spring事务隔离级别","published":1,"updated":"2020-09-28T11:00:43.542Z","_id":"ckfmf4yip001jesqrfkuqc4v7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Spring事务隔离级别\"><a href=\"#Spring事务隔离级别\" class=\"headerlink\" title=\"Spring事务隔离级别\"></a>Spring事务隔离级别</h2><p>一、Propagation （事务的传播属性）</p>\n<p>Propagation ：　　key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。有以下选项可供使用：PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。<br>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。<br>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。<br>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。<br>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。<br>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。</p>\n<p>1： PROPAGATION_REQUIRED<br>加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务<br>比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED, 那么由于执行ServiceA.methodA的时候，<br>ServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA<br>的事务内部，就不再起新的事务。而假如ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。<br>这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被<br>提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚</p>\n<p>2： PROPAGATION_SUPPORTS<br>如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行</p>\n<p>3： PROPAGATION_MANDATORY<br>必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常</p>\n<p>4： PROPAGATION_REQUIRES_NEW<br>这个就比较绕口了。 比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，<br>那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，<br>他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在<br>两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，<br>如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。</p>\n<p>5： PROPAGATION_NOT_SUPPORTED<br>当前不支持事务。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED ，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED ，<br>那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。</p>\n<p>6： PROPAGATION_NEVER<br>不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，<br>那么ServiceB.methodB就要抛出异常了。</p>\n<p>7： PROPAGATION_NESTED<br>理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，<br>而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。<br>而Nested事务的好处是他有一个savepoint。</p>\n<hr>\n<p>ServiceA {</p>\n<p>/<em>*<br>\\</em> 事务属性配置为 PROPAGATION_REQUIRED<br>*/<br>void methodA() {<br>try {<br>//savepoint<br>ServiceB.methodB(); //PROPAGATION_NESTED 级别<br>} catch (SomeException) {<br>// 执行其他业务, 如 ServiceC.methodC();<br>}<br>}</p>\n<p>}</p>\n<hr>\n<p>也就是说ServiceB.methodB失败回滚，那么ServiceA.methodA也会回滚到savepoint点上，ServiceA.methodA可以选择另外一个分支，比如<br>ServiceC.methodC，继续执行，来尝试完成自己的事务。<br>但是这个事务并没有在EJB标准中定义。</p>\n<p>Spring事务的隔离级别<br> \\1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.<br>   另外四个与JDBC的隔离级别相对应<br> \\2. ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。<br>   这种隔离级别会产生脏读，不可重复读和幻像读。<br> \\3. ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据<br> \\4. ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。<br>   它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。<br> \\5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。<br>   除了防止脏读，不可重复读外，还避免了幻像读。</p>\n<p>什么是脏数据，脏读，不可重复读，幻觉读？<br> 脏读: 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，<br>   另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一<br>   个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p>\n<p> 不可重复读: 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。<br>       那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据<br>       可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</p>\n<p> 幻觉读: 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及<br>     到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，<br>     以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p>\n","excerpt":"","more":"<h2 id=\"Spring事务隔离级别\"><a href=\"#Spring事务隔离级别\" class=\"headerlink\" title=\"Spring事务隔离级别\"></a>Spring事务隔离级别</h2><p>一、Propagation （事务的传播属性）</p>\n<p>Propagation ：　　key属性确定代理应该给哪个方法增加事务行为。这样的属性最重要的部份是传播行为。有以下选项可供使用：PROPAGATION_REQUIRED–支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。<br>PROPAGATION_SUPPORTS–支持当前事务，如果当前没有事务，就以非事务方式执行。<br>PROPAGATION_MANDATORY–支持当前事务，如果当前没有事务，就抛出异常。<br>PROPAGATION_REQUIRES_NEW–新建事务，如果当前存在事务，把当前事务挂起。<br>PROPAGATION_NOT_SUPPORTED–以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。<br>PROPAGATION_NEVER–以非事务方式执行，如果当前存在事务，则抛出异常。</p>\n<p>1： PROPAGATION_REQUIRED<br>加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务<br>比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED, 那么由于执行ServiceA.methodA的时候，<br>ServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA<br>的事务内部，就不再起新的事务。而假如ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。<br>这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被<br>提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚</p>\n<p>2： PROPAGATION_SUPPORTS<br>如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行</p>\n<p>3： PROPAGATION_MANDATORY<br>必须在一个事务中运行。也就是说，他只能被一个父事务调用。否则，他就要抛出异常</p>\n<p>4： PROPAGATION_REQUIRES_NEW<br>这个就比较绕口了。 比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，<br>那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，<br>他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在<br>两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，<br>如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。</p>\n<p>5： PROPAGATION_NOT_SUPPORTED<br>当前不支持事务。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED ，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED ，<br>那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。</p>\n<p>6： PROPAGATION_NEVER<br>不能在事务中运行。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED， 而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，<br>那么ServiceB.methodB就要抛出异常了。</p>\n<p>7： PROPAGATION_NESTED<br>理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，<br>而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。<br>而Nested事务的好处是他有一个savepoint。</p>\n<hr>\n<p>ServiceA {</p>\n<p>/<em>*<br>\\</em> 事务属性配置为 PROPAGATION_REQUIRED<br>*/<br>void methodA() {<br>try {<br>//savepoint<br>ServiceB.methodB(); //PROPAGATION_NESTED 级别<br>} catch (SomeException) {<br>// 执行其他业务, 如 ServiceC.methodC();<br>}<br>}</p>\n<p>}</p>\n<hr>\n<p>也就是说ServiceB.methodB失败回滚，那么ServiceA.methodA也会回滚到savepoint点上，ServiceA.methodA可以选择另外一个分支，比如<br>ServiceC.methodC，继续执行，来尝试完成自己的事务。<br>但是这个事务并没有在EJB标准中定义。</p>\n<p>Spring事务的隔离级别<br> \\1. ISOLATION_DEFAULT： 这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.<br>   另外四个与JDBC的隔离级别相对应<br> \\2. ISOLATION_READ_UNCOMMITTED： 这是事务最低的隔离级别，它充许令外一个事务可以看到这个事务未提交的数据。<br>   这种隔离级别会产生脏读，不可重复读和幻像读。<br> \\3. ISOLATION_READ_COMMITTED： 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据<br> \\4. ISOLATION_REPEATABLE_READ： 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。<br>   它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)。<br> \\5. ISOLATION_SERIALIZABLE 这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。<br>   除了防止脏读，不可重复读外，还避免了幻像读。</p>\n<p>什么是脏数据，脏读，不可重复读，幻觉读？<br> 脏读: 指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，这时，<br>   另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据， 那么另外一<br>   个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p>\n<p> 不可重复读: 指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。<br>       那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据<br>       可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。</p>\n<p> 幻觉读: 指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及<br>     到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，<br>     以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。</p>\n"},{"title":"BAT后端开发面试108题","date":"2018-08-17T03:11:07.000Z","description":null,"_content":"\n### TCP报头格式\n","source":"_posts/bat.md","raw":"---\ntitle: BAT后端开发面试108题\ncategories: [面试题]\ntags: [面试题]\ndate: 2018-08-17 11:11:07\ndescription:\n---\n\n### TCP报头格式\n","slug":"bat","published":1,"updated":"2018-08-17T03:13:28.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yir001lesqrp17855au","content":"<h3 id=\"TCP报头格式\"><a href=\"#TCP报头格式\" class=\"headerlink\" title=\"TCP报头格式\"></a>TCP报头格式</h3>","excerpt":"","more":"<h3 id=\"TCP报头格式\"><a href=\"#TCP报头格式\" class=\"headerlink\" title=\"TCP报头格式\"></a>TCP报头格式</h3>"},{"title":"Class类文件的结构","date":"2016-10-27T02:07:36.000Z","description":"Class类文件解析","_content":"\nClass 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符，这\n使得整个Class文件之中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项是，则会\n按照高位在前的方式分割成若干个8位字节进行存储。\n\nClass结构中只有两种数据类型：无符号数和表\n\n### 无符号数\n属于基本数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节、8个字节的无符号数，无符号数可以用来描述数字、\n索引引用、数量值或者按照编码构成的字符串。\n\n### 表\n表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info” 结尾。表用于描述有层次关系的复\n合结构数据，整个Class文件本质上就是一张表,由下列数据项构成。\n\n|类型|名称|数量|\n|:-:|:-|:-|\n|u4|magic|1|\n|u2|minor_version|1|\n|u2|major_version|1|\n|u2|constant_pool_count|1|\n|cp_info|constant_pool|constant_pool_count-1|\n|u2|access_flags|1|\n|u2|this_class|1|\n|u2|super_class|1|\n|u2|interfaces_count|1|\n|u2|interface|interfaces_count|\n|u2|fields_count|1|\n|field_info|fields|fields_count|\n|u2|methods_count|1|\n|method_info|methods|methods_count|\n|u2|attributes_count|1|\n|attribute_info|attributes|attributes_count|\n\n### 魔数\n每个Class文件的头4个字节称为魔数（Magic Number），它的唯一作用是确定这个文件是否是一个能被虚拟机接受的Class\n文件。Class文件的魔数值为：0xCAFEBABE（咖啡宝贝）。\n紧接着魔数的4个字节存储的是Class文件的版本号，：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是\n主版本号（Majer Version）。\n\nClass 文件版本号\n\n|编译器版本|-target参数|十六进制版本号|十进制版本号|\n|:-:|:-|:-:|:-:|\n|JDK1.1.8|不带target参数|00 03 00 2D|45.3|\n|JDK1.2.2|不带（默认为-target1.1）|00 03 00 2D|45.3|\n|JDK1.2.2|-target1.2|00 00 00 2E|46.0|\n|JDK1.3.1_19|不带（默认为-target1.1）|00 03 00 2D|45.3|\n|JDK1.3.1_19|-target1.3|00 00 00 2F|47.0|\n|JDK1.4.2_10|不带（默认为-target1.2）|00 00 00 2E|46.0|\n|JDK1.4.2_10|-target1.4|00 00 00 30|48.0|\n|JDK1.5.0_11|不带（默认为-target1.5）|00 00 00 31|49.0|\n|JDK1.5.0_11|-target1.4 -source 1.4|00 00 00 30|48.0|\n|JDK1.6.0_01|不带（默认为-target1.6）|00 00 00 32|50.0|\n|JDK1.6.0_01|-target1.5|00 00 00 31|49.0|\n|JDK1.6.0_01|-target1.4 -source 1.4|00 00 00 30|48.0|\n|JDK1.7.0|不带（默认为-target1.7）|00 00 00 33|51.0|\n|JDK1.7.0|-target1.6|00 00 00 32|50.0|\n|JDK1.7.0|-target1.4 -source 1.4|00 00 00 30|48.0|\n\n### 常量池\n紧接着主次版本号之后的是常量池入口，常量池可以理解为Class文件的资源仓库。\n常量池中主要有两大类常量：字面量（Literal）和符号引用（Symbolic References)\n字面量接近于java语言层面的常量概念，如文本字符串、声明为final的常量等。\n\n符号引用属于编译原理方面的概念，包括了三类常量：\n- 类和接口的全限定名（Fully Qualifide Name）\n- 字段的名称和描述符（Descriper）\n- 方法的名称和描述符\n\n\n常量池中每一个常量都是一个表，JDK1.7之前有11种，JDK1.7为了更好地支持动态语言调用，又增加了3种（下表后3种）\n这14种表有一个共同点：第一位是一个u1类型的标识位（tag），代表当前这个常量属于哪个类型的常量类型。\n\n常量池的项目类型\n\n|类型|标志（tag）|描述|\n|:-|:-:|:-|\n|CONSTANT_Utf8_info|1|UTF-8编码的字符串|\n|CONSTANT_Integer_info|3|整型字面量|\n|CONSTANT_Float_info|4|浮点型字面量|\n|CONSTANT_Long_info|5|长整型字面量|\n|CONSTANT_Double_info|6|双精度浮点型字面量|\n|CONSTANT_Class_info|7|类或接口的符号引用|\n|CONSTANT_String_info|8|字符串类型字面量|\n|CONSTANT_Fieldref_info|9|字段的符号引用|\n|CONSTANT_Methodref_info|10|类中方法的符号引用|\n|CONSTANT_InterfaceMethodref_info|11|接口中方法的符号引用|\n|CONSTANT_NameAndType_info|12|字段或方法的部分符号引用|\n|CONSTANT_MethodHandle_info|15|表示方法句柄|\n|CONSTANT_MethodType_info|16|标识方法类型|\n|CONSTANT_InvokDynamic_info|18|表示一个动态方法调用点|\n\n\n\n\n","source":"_posts/btyeclass.md","raw":"---\ntitle: Class类文件的结构\ncategories: [jvm]\ntags: [java,jvm]\ndate: 2016-10-27 10:07:36\ndescription: Class类文件解析\n---\n\nClass 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符，这\n使得整个Class文件之中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项是，则会\n按照高位在前的方式分割成若干个8位字节进行存储。\n\nClass结构中只有两种数据类型：无符号数和表\n\n### 无符号数\n属于基本数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节、8个字节的无符号数，无符号数可以用来描述数字、\n索引引用、数量值或者按照编码构成的字符串。\n\n### 表\n表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info” 结尾。表用于描述有层次关系的复\n合结构数据，整个Class文件本质上就是一张表,由下列数据项构成。\n\n|类型|名称|数量|\n|:-:|:-|:-|\n|u4|magic|1|\n|u2|minor_version|1|\n|u2|major_version|1|\n|u2|constant_pool_count|1|\n|cp_info|constant_pool|constant_pool_count-1|\n|u2|access_flags|1|\n|u2|this_class|1|\n|u2|super_class|1|\n|u2|interfaces_count|1|\n|u2|interface|interfaces_count|\n|u2|fields_count|1|\n|field_info|fields|fields_count|\n|u2|methods_count|1|\n|method_info|methods|methods_count|\n|u2|attributes_count|1|\n|attribute_info|attributes|attributes_count|\n\n### 魔数\n每个Class文件的头4个字节称为魔数（Magic Number），它的唯一作用是确定这个文件是否是一个能被虚拟机接受的Class\n文件。Class文件的魔数值为：0xCAFEBABE（咖啡宝贝）。\n紧接着魔数的4个字节存储的是Class文件的版本号，：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是\n主版本号（Majer Version）。\n\nClass 文件版本号\n\n|编译器版本|-target参数|十六进制版本号|十进制版本号|\n|:-:|:-|:-:|:-:|\n|JDK1.1.8|不带target参数|00 03 00 2D|45.3|\n|JDK1.2.2|不带（默认为-target1.1）|00 03 00 2D|45.3|\n|JDK1.2.2|-target1.2|00 00 00 2E|46.0|\n|JDK1.3.1_19|不带（默认为-target1.1）|00 03 00 2D|45.3|\n|JDK1.3.1_19|-target1.3|00 00 00 2F|47.0|\n|JDK1.4.2_10|不带（默认为-target1.2）|00 00 00 2E|46.0|\n|JDK1.4.2_10|-target1.4|00 00 00 30|48.0|\n|JDK1.5.0_11|不带（默认为-target1.5）|00 00 00 31|49.0|\n|JDK1.5.0_11|-target1.4 -source 1.4|00 00 00 30|48.0|\n|JDK1.6.0_01|不带（默认为-target1.6）|00 00 00 32|50.0|\n|JDK1.6.0_01|-target1.5|00 00 00 31|49.0|\n|JDK1.6.0_01|-target1.4 -source 1.4|00 00 00 30|48.0|\n|JDK1.7.0|不带（默认为-target1.7）|00 00 00 33|51.0|\n|JDK1.7.0|-target1.6|00 00 00 32|50.0|\n|JDK1.7.0|-target1.4 -source 1.4|00 00 00 30|48.0|\n\n### 常量池\n紧接着主次版本号之后的是常量池入口，常量池可以理解为Class文件的资源仓库。\n常量池中主要有两大类常量：字面量（Literal）和符号引用（Symbolic References)\n字面量接近于java语言层面的常量概念，如文本字符串、声明为final的常量等。\n\n符号引用属于编译原理方面的概念，包括了三类常量：\n- 类和接口的全限定名（Fully Qualifide Name）\n- 字段的名称和描述符（Descriper）\n- 方法的名称和描述符\n\n\n常量池中每一个常量都是一个表，JDK1.7之前有11种，JDK1.7为了更好地支持动态语言调用，又增加了3种（下表后3种）\n这14种表有一个共同点：第一位是一个u1类型的标识位（tag），代表当前这个常量属于哪个类型的常量类型。\n\n常量池的项目类型\n\n|类型|标志（tag）|描述|\n|:-|:-:|:-|\n|CONSTANT_Utf8_info|1|UTF-8编码的字符串|\n|CONSTANT_Integer_info|3|整型字面量|\n|CONSTANT_Float_info|4|浮点型字面量|\n|CONSTANT_Long_info|5|长整型字面量|\n|CONSTANT_Double_info|6|双精度浮点型字面量|\n|CONSTANT_Class_info|7|类或接口的符号引用|\n|CONSTANT_String_info|8|字符串类型字面量|\n|CONSTANT_Fieldref_info|9|字段的符号引用|\n|CONSTANT_Methodref_info|10|类中方法的符号引用|\n|CONSTANT_InterfaceMethodref_info|11|接口中方法的符号引用|\n|CONSTANT_NameAndType_info|12|字段或方法的部分符号引用|\n|CONSTANT_MethodHandle_info|15|表示方法句柄|\n|CONSTANT_MethodType_info|16|标识方法类型|\n|CONSTANT_InvokDynamic_info|18|表示一个动态方法调用点|\n\n\n\n\n","slug":"btyeclass","published":1,"updated":"2016-10-27T09:34:16.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yit001pesqr7fadjpv1","content":"<p>Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符，这<br>使得整个Class文件之中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项是，则会<br>按照高位在前的方式分割成若干个8位字节进行存储。</p>\n<p>Class结构中只有两种数据类型：无符号数和表</p>\n<h3 id=\"无符号数\"><a href=\"#无符号数\" class=\"headerlink\" title=\"无符号数\"></a>无符号数</h3><p>属于基本数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节、8个字节的无符号数，无符号数可以用来描述数字、<br>索引引用、数量值或者按照编码构成的字符串。</p>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info” 结尾。表用于描述有层次关系的复<br>合结构数据，整个Class文件本质上就是一张表,由下列数据项构成。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">u4</td>\n<td style=\"text-align:left\">magic</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">minor_version</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">major_version</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">constant_pool_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cp_info</td>\n<td style=\"text-align:left\">constant_pool</td>\n<td style=\"text-align:left\">constant_pool_count-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">access_flags</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">this_class</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">super_class</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">interfaces_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">interface</td>\n<td style=\"text-align:left\">interfaces_count</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">fields_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">field_info</td>\n<td style=\"text-align:left\">fields</td>\n<td style=\"text-align:left\">fields_count</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">methods_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method_info</td>\n<td style=\"text-align:left\">methods</td>\n<td style=\"text-align:left\">methods_count</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">attributes_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">attribute_info</td>\n<td style=\"text-align:left\">attributes</td>\n<td style=\"text-align:left\">attributes_count</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"魔数\"><a href=\"#魔数\" class=\"headerlink\" title=\"魔数\"></a>魔数</h3><p>每个Class文件的头4个字节称为魔数（Magic Number），它的唯一作用是确定这个文件是否是一个能被虚拟机接受的Class<br>文件。Class文件的魔数值为：0xCAFEBABE（咖啡宝贝）。<br>紧接着魔数的4个字节存储的是Class文件的版本号，：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是<br>主版本号（Majer Version）。</p>\n<p>Class 文件版本号</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编译器版本</th>\n<th style=\"text-align:left\">-target参数</th>\n<th style=\"text-align:center\">十六进制版本号</th>\n<th style=\"text-align:center\">十进制版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">JDK1.1.8</td>\n<td style=\"text-align:left\">不带target参数</td>\n<td style=\"text-align:center\">00 03 00 2D</td>\n<td style=\"text-align:center\">45.3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.2.2</td>\n<td style=\"text-align:left\">不带（默认为-target1.1）</td>\n<td style=\"text-align:center\">00 03 00 2D</td>\n<td style=\"text-align:center\">45.3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.2.2</td>\n<td style=\"text-align:left\">-target1.2</td>\n<td style=\"text-align:center\">00 00 00 2E</td>\n<td style=\"text-align:center\">46.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.3.1_19</td>\n<td style=\"text-align:left\">不带（默认为-target1.1）</td>\n<td style=\"text-align:center\">00 03 00 2D</td>\n<td style=\"text-align:center\">45.3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.3.1_19</td>\n<td style=\"text-align:left\">-target1.3</td>\n<td style=\"text-align:center\">00 00 00 2F</td>\n<td style=\"text-align:center\">47.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.4.2_10</td>\n<td style=\"text-align:left\">不带（默认为-target1.2）</td>\n<td style=\"text-align:center\">00 00 00 2E</td>\n<td style=\"text-align:center\">46.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.4.2_10</td>\n<td style=\"text-align:left\">-target1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.5.0_11</td>\n<td style=\"text-align:left\">不带（默认为-target1.5）</td>\n<td style=\"text-align:center\">00 00 00 31</td>\n<td style=\"text-align:center\">49.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.5.0_11</td>\n<td style=\"text-align:left\">-target1.4 -source 1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.6.0_01</td>\n<td style=\"text-align:left\">不带（默认为-target1.6）</td>\n<td style=\"text-align:center\">00 00 00 32</td>\n<td style=\"text-align:center\">50.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.6.0_01</td>\n<td style=\"text-align:left\">-target1.5</td>\n<td style=\"text-align:center\">00 00 00 31</td>\n<td style=\"text-align:center\">49.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.6.0_01</td>\n<td style=\"text-align:left\">-target1.4 -source 1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.7.0</td>\n<td style=\"text-align:left\">不带（默认为-target1.7）</td>\n<td style=\"text-align:center\">00 00 00 33</td>\n<td style=\"text-align:center\">51.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.7.0</td>\n<td style=\"text-align:left\">-target1.6</td>\n<td style=\"text-align:center\">00 00 00 32</td>\n<td style=\"text-align:center\">50.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.7.0</td>\n<td style=\"text-align:left\">-target1.4 -source 1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h3><p>紧接着主次版本号之后的是常量池入口，常量池可以理解为Class文件的资源仓库。<br>常量池中主要有两大类常量：字面量（Literal）和符号引用（Symbolic References)<br>字面量接近于java语言层面的常量概念，如文本字符串、声明为final的常量等。</p>\n<p>符号引用属于编译原理方面的概念，包括了三类常量：</p>\n<ul>\n<li>类和接口的全限定名（Fully Qualifide Name）</li>\n<li>字段的名称和描述符（Descriper）</li>\n<li>方法的名称和描述符</li>\n</ul>\n<p>常量池中每一个常量都是一个表，JDK1.7之前有11种，JDK1.7为了更好地支持动态语言调用，又增加了3种（下表后3种）<br>这14种表有一个共同点：第一位是一个u1类型的标识位（tag），代表当前这个常量属于哪个类型的常量类型。</p>\n<p>常量池的项目类型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:center\">标志（tag）</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Utf8_info</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">UTF-8编码的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Integer_info</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">整型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Float_info</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">浮点型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Long_info</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">长整型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Double_info</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">双精度浮点型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Class_info</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">类或接口的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_String_info</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">字符串类型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Fieldref_info</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">字段的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Methodref_info</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">类中方法的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_InterfaceMethodref_info</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">接口中方法的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_NameAndType_info</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">字段或方法的部分符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_MethodHandle_info</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\">表示方法句柄</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_MethodType_info</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\">标识方法类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_InvokDynamic_info</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\">表示一个动态方法调用点</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>Class 文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符，这<br>使得整个Class文件之中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。当遇到需要占用8位字节以上空间的数据项是，则会<br>按照高位在前的方式分割成若干个8位字节进行存储。</p>\n<p>Class结构中只有两种数据类型：无符号数和表</p>\n<h3 id=\"无符号数\"><a href=\"#无符号数\" class=\"headerlink\" title=\"无符号数\"></a>无符号数</h3><p>属于基本数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节、8个字节的无符号数，无符号数可以用来描述数字、<br>索引引用、数量值或者按照编码构成的字符串。</p>\n<h3 id=\"表\"><a href=\"#表\" class=\"headerlink\" title=\"表\"></a>表</h3><p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info” 结尾。表用于描述有层次关系的复<br>合结构数据，整个Class文件本质上就是一张表,由下列数据项构成。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">u4</td>\n<td style=\"text-align:left\">magic</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">minor_version</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">major_version</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">constant_pool_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cp_info</td>\n<td style=\"text-align:left\">constant_pool</td>\n<td style=\"text-align:left\">constant_pool_count-1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">access_flags</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">this_class</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">super_class</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">interfaces_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">interface</td>\n<td style=\"text-align:left\">interfaces_count</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">fields_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">field_info</td>\n<td style=\"text-align:left\">fields</td>\n<td style=\"text-align:left\">fields_count</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">methods_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">method_info</td>\n<td style=\"text-align:left\">methods</td>\n<td style=\"text-align:left\">methods_count</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">u2</td>\n<td style=\"text-align:left\">attributes_count</td>\n<td style=\"text-align:left\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">attribute_info</td>\n<td style=\"text-align:left\">attributes</td>\n<td style=\"text-align:left\">attributes_count</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"魔数\"><a href=\"#魔数\" class=\"headerlink\" title=\"魔数\"></a>魔数</h3><p>每个Class文件的头4个字节称为魔数（Magic Number），它的唯一作用是确定这个文件是否是一个能被虚拟机接受的Class<br>文件。Class文件的魔数值为：0xCAFEBABE（咖啡宝贝）。<br>紧接着魔数的4个字节存储的是Class文件的版本号，：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是<br>主版本号（Majer Version）。</p>\n<p>Class 文件版本号</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编译器版本</th>\n<th style=\"text-align:left\">-target参数</th>\n<th style=\"text-align:center\">十六进制版本号</th>\n<th style=\"text-align:center\">十进制版本号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">JDK1.1.8</td>\n<td style=\"text-align:left\">不带target参数</td>\n<td style=\"text-align:center\">00 03 00 2D</td>\n<td style=\"text-align:center\">45.3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.2.2</td>\n<td style=\"text-align:left\">不带（默认为-target1.1）</td>\n<td style=\"text-align:center\">00 03 00 2D</td>\n<td style=\"text-align:center\">45.3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.2.2</td>\n<td style=\"text-align:left\">-target1.2</td>\n<td style=\"text-align:center\">00 00 00 2E</td>\n<td style=\"text-align:center\">46.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.3.1_19</td>\n<td style=\"text-align:left\">不带（默认为-target1.1）</td>\n<td style=\"text-align:center\">00 03 00 2D</td>\n<td style=\"text-align:center\">45.3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.3.1_19</td>\n<td style=\"text-align:left\">-target1.3</td>\n<td style=\"text-align:center\">00 00 00 2F</td>\n<td style=\"text-align:center\">47.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.4.2_10</td>\n<td style=\"text-align:left\">不带（默认为-target1.2）</td>\n<td style=\"text-align:center\">00 00 00 2E</td>\n<td style=\"text-align:center\">46.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.4.2_10</td>\n<td style=\"text-align:left\">-target1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.5.0_11</td>\n<td style=\"text-align:left\">不带（默认为-target1.5）</td>\n<td style=\"text-align:center\">00 00 00 31</td>\n<td style=\"text-align:center\">49.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.5.0_11</td>\n<td style=\"text-align:left\">-target1.4 -source 1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.6.0_01</td>\n<td style=\"text-align:left\">不带（默认为-target1.6）</td>\n<td style=\"text-align:center\">00 00 00 32</td>\n<td style=\"text-align:center\">50.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.6.0_01</td>\n<td style=\"text-align:left\">-target1.5</td>\n<td style=\"text-align:center\">00 00 00 31</td>\n<td style=\"text-align:center\">49.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.6.0_01</td>\n<td style=\"text-align:left\">-target1.4 -source 1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.7.0</td>\n<td style=\"text-align:left\">不带（默认为-target1.7）</td>\n<td style=\"text-align:center\">00 00 00 33</td>\n<td style=\"text-align:center\">51.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.7.0</td>\n<td style=\"text-align:left\">-target1.6</td>\n<td style=\"text-align:center\">00 00 00 32</td>\n<td style=\"text-align:center\">50.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">JDK1.7.0</td>\n<td style=\"text-align:left\">-target1.4 -source 1.4</td>\n<td style=\"text-align:center\">00 00 00 30</td>\n<td style=\"text-align:center\">48.0</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h3><p>紧接着主次版本号之后的是常量池入口，常量池可以理解为Class文件的资源仓库。<br>常量池中主要有两大类常量：字面量（Literal）和符号引用（Symbolic References)<br>字面量接近于java语言层面的常量概念，如文本字符串、声明为final的常量等。</p>\n<p>符号引用属于编译原理方面的概念，包括了三类常量：</p>\n<ul>\n<li>类和接口的全限定名（Fully Qualifide Name）</li>\n<li>字段的名称和描述符（Descriper）</li>\n<li>方法的名称和描述符</li>\n</ul>\n<p>常量池中每一个常量都是一个表，JDK1.7之前有11种，JDK1.7为了更好地支持动态语言调用，又增加了3种（下表后3种）<br>这14种表有一个共同点：第一位是一个u1类型的标识位（tag），代表当前这个常量属于哪个类型的常量类型。</p>\n<p>常量池的项目类型</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:center\">标志（tag）</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Utf8_info</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">UTF-8编码的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Integer_info</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">整型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Float_info</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">浮点型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Long_info</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">长整型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Double_info</td>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">双精度浮点型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Class_info</td>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">类或接口的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_String_info</td>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">字符串类型字面量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Fieldref_info</td>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">字段的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_Methodref_info</td>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">类中方法的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_InterfaceMethodref_info</td>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">接口中方法的符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_NameAndType_info</td>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">字段或方法的部分符号引用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_MethodHandle_info</td>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\">表示方法句柄</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_MethodType_info</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\">标识方法类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CONSTANT_InvokDynamic_info</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\">表示一个动态方法调用点</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"设计模式(一)","date":"2016-08-09T13:11:41.000Z","_content":"\n设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结\n<!-- more -->\n# 设计模式\n\n## 设计模式的分类\n总体来说设计模式分为三大类：\n创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n## 设计模式的六大原则\n**1、开闭原则（Open Close Principle）**\n    开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。\n    所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面\n    的具体设计中我们会提到这点。\n**2、里氏代换原则（Liskov Substitution Principle）**\n    里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现\n    的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才\n    能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则\n    的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n**3、依赖倒转原则（Dependence Inversion Principle）**\n    这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。\n**4、接口隔离原则（Interface Segregation Principle）**\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实\n    设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n**5、迪米特法则（最少知道原则）（Demeter Principle）**\n    为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n**6、合成复用原则（Composite Reuse Principle）**\n    原则是尽量使用合成/聚合的方式，而不是使用继承。\n    \n## Java常见的23中设计模式\n### 1、工厂方法模式（Factory Method）\n凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入\n的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。\n#### 普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\n#### 多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\n#### 静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\n\n### 2、抽象工厂模式（Abstract Factory）\n工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，\n所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加\n新的工厂类就可以了，不需要修改之前的代码。\n\n### 3、单例模式（Singleton）\n单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：\n1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。\n2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。\n### 4、建造者模式（Builder）\n工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性\n### 5、原型模式（Prototype）\n\n### 6、适配器模式\n\n### 7、装饰模式（Decorator）\n装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例\n\n装饰器模式的应用场景：\n1、需要扩展一个类的功能。\n2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）\n缺点：产生过多相似的对象，不易排错！\n\n### 8、代理模式（Proxy）\n代理模式就是多一个代理类出来，替原对象进行一些操作\n\n代理模式的应用场景：\n如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：\n1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。\n2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。\n使用代理模式，可以将功能划分的更加清晰，有助于后期维护！\n\n### 9、外观模式（Facade）\n\n### 10、桥接模式（Bridge）\n桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，\n像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝\n毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了\n\n### 11、组合模式（Composite）\n组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便\n\n### 12、享元模式（Flyweight）\n享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。\n\n### 13、策略模式（strategy）\n策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计\n一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数\n\n\n### 14、模板方法模式（Template Method）\n解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象的，也可以是实际的方法，定义\n一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用\n### 15、观察者模式（Observer）\n包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记得归纳，记得本文最开始的那个\n图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你\n订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到\n通知，并且随着变化！对象之间是一种一对多的关系\n\n### 16、迭代子模式（Iterator）\n顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分\n轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。\n### 17、责任链模式（Chain of Responsibility）\n有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但\n是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。\n### 18、命令模式（Command）\n命令模式（Command Pattern）：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录\n请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式。\n### 19、备忘录模式（Memento）\n备忘录模式（Memento Pattern）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以\n在以后将对象回复到原先保存的状态。这是一个对象行为型模式。\n### 20、状态模式（State）\n状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。状态模式是一种对\n象行为型模式。核心思想就是：当对象的状态改变时，同时改变其行为。\n### 21、访问者模式（Visitor）\n访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又\n易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适\n合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个\n访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。\n\n简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做\n其它的修改的效果。\n\n该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：\n1、新功能会不会与现有功能出现兼容性问题？\n2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？\n面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦\n### 22、中介者模式（Mediator）\n中介者模式（Mediator Pattern）：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用，从而使其\n耦合松散，而且可以独立地改变它们之间的交互。中介者模式是一种对象行为型模式。\n### 23、解释器模式（Interpreter）\n\n","source":"_posts/DesignPatterns.md","raw":"---\ntitle: 设计模式(一)\ndate: 2016-08-09 21:11:41\ncategories: [设计模式]\ntags: [设计模式,java]\n---\n\n设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结\n<!-- more -->\n# 设计模式\n\n## 设计模式的分类\n总体来说设计模式分为三大类：\n创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。\n结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。\n行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。\n\n## 设计模式的六大原则\n**1、开闭原则（Open Close Principle）**\n    开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。\n    所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面\n    的具体设计中我们会提到这点。\n**2、里氏代换原则（Liskov Substitution Principle）**\n    里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现\n    的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才\n    能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则\n    的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n**3、依赖倒转原则（Dependence Inversion Principle）**\n    这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。\n**4、接口隔离原则（Interface Segregation Principle）**\n    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实\n    设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。\n**5、迪米特法则（最少知道原则）（Demeter Principle）**\n    为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。\n**6、合成复用原则（Composite Reuse Principle）**\n    原则是尽量使用合成/聚合的方式，而不是使用继承。\n    \n## Java常见的23中设计模式\n### 1、工厂方法模式（Factory Method）\n凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入\n的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。\n#### 普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\n#### 多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\n#### 静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\n\n### 2、抽象工厂模式（Abstract Factory）\n工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，\n所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加\n新的工厂类就可以了，不需要修改之前的代码。\n\n### 3、单例模式（Singleton）\n单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：\n1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。\n2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。\n### 4、建造者模式（Builder）\n工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性\n### 5、原型模式（Prototype）\n\n### 6、适配器模式\n\n### 7、装饰模式（Decorator）\n装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例\n\n装饰器模式的应用场景：\n1、需要扩展一个类的功能。\n2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）\n缺点：产生过多相似的对象，不易排错！\n\n### 8、代理模式（Proxy）\n代理模式就是多一个代理类出来，替原对象进行一些操作\n\n代理模式的应用场景：\n如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：\n1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。\n2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。\n使用代理模式，可以将功能划分的更加清晰，有助于后期维护！\n\n### 9、外观模式（Facade）\n\n### 10、桥接模式（Bridge）\n桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，\n像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝\n毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了\n\n### 11、组合模式（Composite）\n组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便\n\n### 12、享元模式（Flyweight）\n享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。\n\n### 13、策略模式（strategy）\n策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计\n一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数\n\n\n### 14、模板方法模式（Template Method）\n解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象的，也可以是实际的方法，定义\n一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用\n### 15、观察者模式（Observer）\n包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记得归纳，记得本文最开始的那个\n图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你\n订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到\n通知，并且随着变化！对象之间是一种一对多的关系\n\n### 16、迭代子模式（Iterator）\n顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分\n轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。\n### 17、责任链模式（Chain of Responsibility）\n有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但\n是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。\n### 18、命令模式（Command）\n命令模式（Command Pattern）：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录\n请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式。\n### 19、备忘录模式（Memento）\n备忘录模式（Memento Pattern）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以\n在以后将对象回复到原先保存的状态。这是一个对象行为型模式。\n### 20、状态模式（State）\n状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。状态模式是一种对\n象行为型模式。核心思想就是：当对象的状态改变时，同时改变其行为。\n### 21、访问者模式（Visitor）\n访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又\n易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适\n合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个\n访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。\n\n简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做\n其它的修改的效果。\n\n该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：\n1、新功能会不会与现有功能出现兼容性问题？\n2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？\n面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦\n### 22、中介者模式（Mediator）\n中介者模式（Mediator Pattern）：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用，从而使其\n耦合松散，而且可以独立地改变它们之间的交互。中介者模式是一种对象行为型模式。\n### 23、解释器模式（Interpreter）\n\n","slug":"DesignPatterns","published":1,"updated":"2016-09-27T08:31:13.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yk70033esqrhzuh53gs","content":"<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结<br><a id=\"more\"></a></p>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong><br>    开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。<br>    所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面<br>    的具体设计中我们会提到这点。<br><strong>2、里氏代换原则（Liskov Substitution Principle）</strong><br>    里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现<br>    的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才<br>    能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则<br>    的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong><br>    这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。<br><strong>4、接口隔离原则（Interface Segregation Principle）</strong><br>    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实<br>    设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。<br><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong><br>    为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。<br><strong>6、合成复用原则（Composite Reuse Principle）</strong><br>    原则是尽量使用合成/聚合的方式，而不是使用继承。</p>\n<h2 id=\"Java常见的23中设计模式\"><a href=\"#Java常见的23中设计模式\" class=\"headerlink\" title=\"Java常见的23中设计模式\"></a>Java常见的23中设计模式</h2><h3 id=\"1、工厂方法模式（Factory-Method）\"><a href=\"#1、工厂方法模式（Factory-Method）\" class=\"headerlink\" title=\"1、工厂方法模式（Factory Method）\"></a>1、工厂方法模式（Factory Method）</h3><p>凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入<br>的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p>\n<h4 id=\"普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\"><a href=\"#普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\" class=\"headerlink\" title=\"普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\"></a>普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建</h4><h4 id=\"多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\"><a href=\"#多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\" class=\"headerlink\" title=\"多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\"></a>多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。</h4><h4 id=\"静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\"><a href=\"#静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\" class=\"headerlink\" title=\"静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\"></a>静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</h4><h3 id=\"2、抽象工厂模式（Abstract-Factory）\"><a href=\"#2、抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"2、抽象工厂模式（Abstract Factory）\"></a>2、抽象工厂模式（Abstract Factory）</h3><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，<br>所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加<br>新的工厂类就可以了，不需要修改之前的代码。</p>\n<h3 id=\"3、单例模式（Singleton）\"><a href=\"#3、单例模式（Singleton）\" class=\"headerlink\" title=\"3、单例模式（Singleton）\"></a>3、单例模式（Singleton）</h3><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：<br>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</p>\n<h3 id=\"4、建造者模式（Builder）\"><a href=\"#4、建造者模式（Builder）\" class=\"headerlink\" title=\"4、建造者模式（Builder）\"></a>4、建造者模式（Builder）</h3><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性</p>\n<h3 id=\"5、原型模式（Prototype）\"><a href=\"#5、原型模式（Prototype）\" class=\"headerlink\" title=\"5、原型模式（Prototype）\"></a>5、原型模式（Prototype）</h3><h3 id=\"6、适配器模式\"><a href=\"#6、适配器模式\" class=\"headerlink\" title=\"6、适配器模式\"></a>6、适配器模式</h3><h3 id=\"7、装饰模式（Decorator）\"><a href=\"#7、装饰模式（Decorator）\" class=\"headerlink\" title=\"7、装饰模式（Decorator）\"></a>7、装饰模式（Decorator）</h3><p>装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例</p>\n<p>装饰器模式的应用场景：<br>1、需要扩展一个类的功能。<br>2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>缺点：产生过多相似的对象，不易排错！</p>\n<h3 id=\"8、代理模式（Proxy）\"><a href=\"#8、代理模式（Proxy）\" class=\"headerlink\" title=\"8、代理模式（Proxy）\"></a>8、代理模式（Proxy）</h3><p>代理模式就是多一个代理类出来，替原对象进行一些操作</p>\n<p>代理模式的应用场景：<br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：<br>1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。<br>2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>\n<h3 id=\"9、外观模式（Facade）\"><a href=\"#9、外观模式（Facade）\" class=\"headerlink\" title=\"9、外观模式（Facade）\"></a>9、外观模式（Facade）</h3><h3 id=\"10、桥接模式（Bridge）\"><a href=\"#10、桥接模式（Bridge）\" class=\"headerlink\" title=\"10、桥接模式（Bridge）\"></a>10、桥接模式（Bridge）</h3><p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，<br>像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝<br>毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了</p>\n<h3 id=\"11、组合模式（Composite）\"><a href=\"#11、组合模式（Composite）\" class=\"headerlink\" title=\"11、组合模式（Composite）\"></a>11、组合模式（Composite）</h3><p>组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便</p>\n<h3 id=\"12、享元模式（Flyweight）\"><a href=\"#12、享元模式（Flyweight）\" class=\"headerlink\" title=\"12、享元模式（Flyweight）\"></a>12、享元模式（Flyweight）</h3><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p>\n<h3 id=\"13、策略模式（strategy）\"><a href=\"#13、策略模式（strategy）\" class=\"headerlink\" title=\"13、策略模式（strategy）\"></a>13、策略模式（strategy）</h3><p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计<br>一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数</p>\n<h3 id=\"14、模板方法模式（Template-Method）\"><a href=\"#14、模板方法模式（Template-Method）\" class=\"headerlink\" title=\"14、模板方法模式（Template Method）\"></a>14、模板方法模式（Template Method）</h3><p>解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义<br>一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用</p>\n<h3 id=\"15、观察者模式（Observer）\"><a href=\"#15、观察者模式（Observer）\" class=\"headerlink\" title=\"15、观察者模式（Observer）\"></a>15、观察者模式（Observer）</h3><p>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记得归纳，记得本文最开始的那个<br>图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你<br>订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到<br>通知，并且随着变化！对象之间是一种一对多的关系</p>\n<h3 id=\"16、迭代子模式（Iterator）\"><a href=\"#16、迭代子模式（Iterator）\" class=\"headerlink\" title=\"16、迭代子模式（Iterator）\"></a>16、迭代子模式（Iterator）</h3><p>顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分<br>轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。</p>\n<h3 id=\"17、责任链模式（Chain-of-Responsibility）\"><a href=\"#17、责任链模式（Chain-of-Responsibility）\" class=\"headerlink\" title=\"17、责任链模式（Chain of Responsibility）\"></a>17、责任链模式（Chain of Responsibility）</h3><p>有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但<br>是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。</p>\n<h3 id=\"18、命令模式（Command）\"><a href=\"#18、命令模式（Command）\" class=\"headerlink\" title=\"18、命令模式（Command）\"></a>18、命令模式（Command）</h3><p>命令模式（Command Pattern）：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录<br>请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式。</p>\n<h3 id=\"19、备忘录模式（Memento）\"><a href=\"#19、备忘录模式（Memento）\" class=\"headerlink\" title=\"19、备忘录模式（Memento）\"></a>19、备忘录模式（Memento）</h3><p>备忘录模式（Memento Pattern）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以<br>在以后将对象回复到原先保存的状态。这是一个对象行为型模式。</p>\n<h3 id=\"20、状态模式（State）\"><a href=\"#20、状态模式（State）\" class=\"headerlink\" title=\"20、状态模式（State）\"></a>20、状态模式（State）</h3><p>状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。状态模式是一种对<br>象行为型模式。核心思想就是：当对象的状态改变时，同时改变其行为。</p>\n<h3 id=\"21、访问者模式（Visitor）\"><a href=\"#21、访问者模式（Visitor）\" class=\"headerlink\" title=\"21、访问者模式（Visitor）\"></a>21、访问者模式（Visitor）</h3><p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又<br>易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适<br>合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个<br>访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。</p>\n<p>简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做<br>其它的修改的效果。</p>\n<p>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：<br>1、新功能会不会与现有功能出现兼容性问题？<br>2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？<br>面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦</p>\n<h3 id=\"22、中介者模式（Mediator）\"><a href=\"#22、中介者模式（Mediator）\" class=\"headerlink\" title=\"22、中介者模式（Mediator）\"></a>22、中介者模式（Mediator）</h3><p>中介者模式（Mediator Pattern）：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用，从而使其<br>耦合松散，而且可以独立地改变它们之间的交互。中介者模式是一种对象行为型模式。</p>\n<h3 id=\"23、解释器模式（Interpreter）\"><a href=\"#23、解释器模式（Interpreter）\" class=\"headerlink\" title=\"23、解释器模式（Interpreter）\"></a>23、解释器模式（Interpreter）</h3>","excerpt":"<p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结<br></p>","more":"<p></p>\n<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><p>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><p><strong>1、开闭原则（Open Close Principle）</strong><br>    开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。<br>    所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面<br>    的具体设计中我们会提到这点。<br><strong>2、里氏代换原则（Liskov Substitution Principle）</strong><br>    里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现<br>    的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才<br>    能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则<br>    的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong><br>    这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。<br><strong>4、接口隔离原则（Interface Segregation Principle）</strong><br>    这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实<br>    设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。<br><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong><br>    为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。<br><strong>6、合成复用原则（Composite Reuse Principle）</strong><br>    原则是尽量使用合成/聚合的方式，而不是使用继承。</p>\n<h2 id=\"Java常见的23中设计模式\"><a href=\"#Java常见的23中设计模式\" class=\"headerlink\" title=\"Java常见的23中设计模式\"></a>Java常见的23中设计模式</h2><h3 id=\"1、工厂方法模式（Factory-Method）\"><a href=\"#1、工厂方法模式（Factory-Method）\" class=\"headerlink\" title=\"1、工厂方法模式（Factory Method）\"></a>1、工厂方法模式（Factory Method）</h3><p>凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入<br>的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p>\n<h4 id=\"普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\"><a href=\"#普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\" class=\"headerlink\" title=\"普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建\"></a>普通工厂模式，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建</h4><h4 id=\"多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\"><a href=\"#多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\" class=\"headerlink\" title=\"多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。\"></a>多个工厂方法模式，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。</h4><h4 id=\"静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\"><a href=\"#静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\" class=\"headerlink\" title=\"静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。\"></a>静态工厂方法模式，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</h4><h3 id=\"2、抽象工厂模式（Abstract-Factory）\"><a href=\"#2、抽象工厂模式（Abstract-Factory）\" class=\"headerlink\" title=\"2、抽象工厂模式（Abstract Factory）\"></a>2、抽象工厂模式（Abstract Factory）</h3><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，<br>所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加<br>新的工厂类就可以了，不需要修改之前的代码。</p>\n<h3 id=\"3、单例模式（Singleton）\"><a href=\"#3、单例模式（Singleton）\" class=\"headerlink\" title=\"3、单例模式（Singleton）\"></a>3、单例模式（Singleton）</h3><p>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：<br>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。<br>2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</p>\n<h3 id=\"4、建造者模式（Builder）\"><a href=\"#4、建造者模式（Builder）\" class=\"headerlink\" title=\"4、建造者模式（Builder）\"></a>4、建造者模式（Builder）</h3><p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性</p>\n<h3 id=\"5、原型模式（Prototype）\"><a href=\"#5、原型模式（Prototype）\" class=\"headerlink\" title=\"5、原型模式（Prototype）\"></a>5、原型模式（Prototype）</h3><h3 id=\"6、适配器模式\"><a href=\"#6、适配器模式\" class=\"headerlink\" title=\"6、适配器模式\"></a>6、适配器模式</h3><h3 id=\"7、装饰模式（Decorator）\"><a href=\"#7、装饰模式（Decorator）\" class=\"headerlink\" title=\"7、装饰模式（Decorator）\"></a>7、装饰模式（Decorator）</h3><p>装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例</p>\n<p>装饰器模式的应用场景：<br>1、需要扩展一个类的功能。<br>2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）<br>缺点：产生过多相似的对象，不易排错！</p>\n<h3 id=\"8、代理模式（Proxy）\"><a href=\"#8、代理模式（Proxy）\" class=\"headerlink\" title=\"8、代理模式（Proxy）\"></a>8、代理模式（Proxy）</h3><p>代理模式就是多一个代理类出来，替原对象进行一些操作</p>\n<p>代理模式的应用场景：<br>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：<br>1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。<br>2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。<br>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>\n<h3 id=\"9、外观模式（Facade）\"><a href=\"#9、外观模式（Facade）\" class=\"headerlink\" title=\"9、外观模式（Facade）\"></a>9、外观模式（Facade）</h3><h3 id=\"10、桥接模式（Bridge）\"><a href=\"#10、桥接模式（Bridge）\" class=\"headerlink\" title=\"10、桥接模式（Bridge）\"></a>10、桥接模式（Bridge）</h3><p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，<br>像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝<br>毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了</p>\n<h3 id=\"11、组合模式（Composite）\"><a href=\"#11、组合模式（Composite）\" class=\"headerlink\" title=\"11、组合模式（Composite）\"></a>11、组合模式（Composite）</h3><p>组合模式有时又叫部分-整体模式在处理类似树形结构的问题时比较方便</p>\n<h3 id=\"12、享元模式（Flyweight）\"><a href=\"#12、享元模式（Flyweight）\" class=\"headerlink\" title=\"12、享元模式（Flyweight）\"></a>12、享元模式（Flyweight）</h3><p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p>\n<h3 id=\"13、策略模式（strategy）\"><a href=\"#13、策略模式（strategy）\" class=\"headerlink\" title=\"13、策略模式（strategy）\"></a>13、策略模式（strategy）</h3><p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计<br>一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数</p>\n<h3 id=\"14、模板方法模式（Template-Method）\"><a href=\"#14、模板方法模式（Template-Method）\" class=\"headerlink\" title=\"14、模板方法模式（Template Method）\"></a>14、模板方法模式（Template Method）</h3><p>解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1…n个方法，可以是抽象的，也可以是实际的方法，定义<br>一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用</p>\n<h3 id=\"15、观察者模式（Observer）\"><a href=\"#15、观察者模式（Observer）\" class=\"headerlink\" title=\"15、观察者模式（Observer）\"></a>15、观察者模式（Observer）</h3><p>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 记得归纳，记得本文最开始的那个<br>图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你<br>订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到<br>通知，并且随着变化！对象之间是一种一对多的关系</p>\n<h3 id=\"16、迭代子模式（Iterator）\"><a href=\"#16、迭代子模式（Iterator）\" class=\"headerlink\" title=\"16、迭代子模式（Iterator）\"></a>16、迭代子模式（Iterator）</h3><p>顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分<br>轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。</p>\n<h3 id=\"17、责任链模式（Chain-of-Responsibility）\"><a href=\"#17、责任链模式（Chain-of-Responsibility）\" class=\"headerlink\" title=\"17、责任链模式（Chain of Responsibility）\"></a>17、责任链模式（Chain of Responsibility）</h3><p>有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但<br>是发出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。</p>\n<h3 id=\"18、命令模式（Command）\"><a href=\"#18、命令模式（Command）\" class=\"headerlink\" title=\"18、命令模式（Command）\"></a>18、命令模式（Command）</h3><p>命令模式（Command Pattern）：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录<br>请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式。</p>\n<h3 id=\"19、备忘录模式（Memento）\"><a href=\"#19、备忘录模式（Memento）\" class=\"headerlink\" title=\"19、备忘录模式（Memento）\"></a>19、备忘录模式（Memento）</h3><p>备忘录模式（Memento Pattern）：在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以<br>在以后将对象回复到原先保存的状态。这是一个对象行为型模式。</p>\n<h3 id=\"20、状态模式（State）\"><a href=\"#20、状态模式（State）\" class=\"headerlink\" title=\"20、状态模式（State）\"></a>20、状态模式（State）</h3><p>状态模式（State Pattern）：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。状态模式是一种对<br>象行为型模式。核心思想就是：当对象的状态改变时，同时改变其行为。</p>\n<h3 id=\"21、访问者模式（Visitor）\"><a href=\"#21、访问者模式（Visitor）\" class=\"headerlink\" title=\"21、访问者模式（Visitor）\"></a>21、访问者模式（Visitor）</h3><p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又<br>易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适<br>合使用访问者模式。访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个<br>访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。</p>\n<p>简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做<br>其它的修改的效果。</p>\n<p>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：<br>1、新功能会不会与现有功能出现兼容性问题？<br>2、以后会不会再需要添加？3、如果类不允许修改代码怎么办？<br>面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解耦</p>\n<h3 id=\"22、中介者模式（Mediator）\"><a href=\"#22、中介者模式（Mediator）\" class=\"headerlink\" title=\"22、中介者模式（Mediator）\"></a>22、中介者模式（Mediator）</h3><p>中介者模式（Mediator Pattern）：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显示地相互引用，从而使其<br>耦合松散，而且可以独立地改变它们之间的交互。中介者模式是一种对象行为型模式。</p>\n<h3 id=\"23、解释器模式（Interpreter）\"><a href=\"#23、解释器模式（Interpreter）\" class=\"headerlink\" title=\"23、解释器模式（Interpreter）\"></a>23、解释器模式（Interpreter）</h3>"},{"title":"MySQL 存储过程的使用","date":"2016-08-08T09:27:18.000Z","_content":"\n存储过程的使用\n<!-- more -->\n\n## MySQL存储过程的创建\n### 格式\n  ***CREATE PROCEDURE 过程名 ([过程参数[,...]])[特性 ...] 过程体***\n### 声明分隔符\nDELIMITER //和DELIMITER ;\n    因为MySQL默认以\";\"为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，\n则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将\";\"当做存储\n过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。\n### 参数 \nMySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：\n***CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形...])***  \nIN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值\nOUT 输出参数:该值可在存储过程内部被改变，并可返回\nINOUT 输入输出参数:调用时指定，并且可被改变和返回\n   \n```sql\nDELIMITER //\nCREATE PROCEDURE demo_in_parameter(IN p_in INT)\nBEGIN\nUPDATE sys_user SET login_name='test' WHERE id = p_in ;\nEND ;\n//\nDELIMITER ;\n\nCALL demo_in_parameter(1)\n```\n    \n```SQL\nDELIMITER //\n CREATE PROCEDURE demo_out_parameter(OUT s INT)  \n BEGIN \n SELECT COUNT(*) INTO s FROM sys_user;  \n END \n //\n DELIMITER ;\n \n SET @p_out=1;\n CALL demo_out_parameter(@p_out);\n SELECT @p_out;\n ```\n \n ```sql\n DELIMITER //\n CREATE PROCEDURE demo_inout_paramter(INOUT p_inout INT)\n BEGIN\n SELECT p_inout;\n SET p_inout=2;\n SELECT p_inout;\n END\n //\n DELIMITER ;\n \n SET @p_inout=1;\n CALL demo_inout_paramter(@p_inout);\n SELECT @p_inout\n ```\n### 变量\nⅠ. 变量定义\n***DECLARE variable_name [,variable_name...] datatype [DEFAULT value];***\n其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length)\n例如:\n```sql\nDECLARE l_int int unsigned default 4000000;  \nDECLARE l_numeric number(8,2) DEFAULT 9.95;  \nDECLARE l_date date DEFAULT '1999-12-31';  \nDECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  \nDECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';   \n ```\n \nⅡ. 变量赋值\n***SET 变量名 = 表达式值 [,variable_name = expression ...]***\n \nⅢ. 用户变量\n①在MySQL客户端使用用户变量\n```sql\nSELECT COUNT(*) INTO @countuser FROM sys_user; -- 将count(*) 的值赋给 @countuser\nSELECT @countuser;\n\nset @greeting = \"hello\";\nselect @greeting; -- hello\n\nSET @result = 25*4;\nselect @result; -- 100\n```\n②在存储过程中使用用户变量\n```sql\nCREATE PROCEDURE GreetWorld() SELECT CONCAT(@greeting,' World');  \nSET @greeting='Hello';  \nCALL GreetWorld(); --Hello World\n```\n\n③在存储过程间传递全局范围的用户变量\n```sql\nCREATE PROCEDURE p1()   SET @last_procedure='p1';  \nCREATE PROCEDURE p2() SELECT CONCAT('Last procedure was ',@last_procedure);  \nCALL p1( );  \nCALL p2( ); -- Last procedure was p1\n```\n注意:\n用户变量名一般以@开头,滥用用户变量会导致程序难以理解及管理\n\n## MySQL存储过程的查询、删除\n```sql\nselect name from mysql.proc where db='数据库名';\nselect routine_name from information_schema.routines where routine_schema='数据库名';\nshow procedure status where db='数据库名';\nSHOW CREATE PROCEDURE 数据库.存储过程名;\n\n-- 删除\nDROP PROCEDURE  '存储过程名'\n```\n##  MySQL存储过程的控制语句\n### 变量作用域\n内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，\n应为在存储过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派给会话变量来保存其值。\n```sql\nDELIMITER //\nCREATE PROCEDURE pro_variable_field()\nBEGIN\nDECLARE var1 VARCHAR(5) DEFAULT 'outer';\nBEGIN\nDECLARE var1 VARCHAR(5) DEFAULT 'inner';\nSELECT var1;\nEND;\nSELECT var1;\nEND;\n//\nDELIMITER ;\n```\n### 条件语句\nⅠ. if-then -else语句\n```sql\nDELIMITER //\nCREATE PROCEDURE ifthenelse(IN parameter INT)\nBEGIN\nDECLARE var INT ;\nSET var = parameter + 1;\nIF var=0 THEN\nINSERT INTO sys_log VALUE(1,1,1,NULL,1,1,1,1,1,1);\nEND IF;\nIF parameter=0 THEN\nUPDATE sys_log SET id=id+1;\nELSE\nUPDATE sys_log SET id=id+1;\nEND IF;\nEND;\n//\nDELIMITER ;\n```\nⅡ. case语句： \n```sql\nDELIMITER $$\nCREATE PROCEDURE casewhenthen(IN caseparameter INT)\nBEGIN\nDECLARE var INT ;\nSET var = caseparameter+1;\nCASE var\nWHEN 0 THEN\nSELECT var+1;\nWHEN 1 THEN \nSELECT var+2;\nELSE\nSELECT var+8;\nEND CASE;\nEND;\n$$\nDELIMITER ;\n\nCALL casewhenthen(0);\n\n```\n### 循环语句\nⅠ. while ···· end while：\n```sql\nDELIMITER !!\nCREATE PROCEDURE whileloop()\nBEGIN\nDECLARE var INT;\nSET var = 0;\nWHILE var<6 DO \nSELECT var;\nSET var = var+1;\nEND WHILE;\nEND;\n!!\nDELIMITER ;\n\nCALL whileloop();\n```\nⅡ. repeat···· end repeat：\n它在执行操作后检查结果，而while则是执行前进行检查。\n```sql\nDELIMITER **\nCREATE PROCEDURE repeatuntil()\nBEGIN\nDECLARE var INT;\nSET var = 0;\nREPEAT \nSELECT var;\nSET var = var+1;\nUNTIL var>=5\nEND REPEAT;\nEND;\n**\nDELIMITER ;\n\nCALL repeatuntil();\n```\nⅢ. loop ·····end loop:\nloop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。\n```sql\nDELIMITER **\nCREATE PROCEDURE loopdemo()\nBEGIN\nDECLARE var INT;\nSET var = 4;\nLOOP_LABLE:LOOP\nSELECT var;\nSET var = var+1;\nIF var>=8 THEN\nLEAVE LOOP_LABLE;\nEND IF;\nEND LOOP;\nEND;\n**\nDELIMITER ;\n\nCALL loopdemo();\n```\n### ITERATE迭代\nⅠ. ITERATE:\n通过引用复合语句的标号,来从新开始复合语句\n\n\n## MySQL存储过程的基本函数\n \n### 字符串类\nCHARSET(str) //返回字串字符集\nCONCAT (string2 [,... ]) //连接字串\nINSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0\nLCASE (string2 ) //转换成小写\nLEFT (string2 ,length ) //从string2中的左边起取length个字符\nLENGTH (string ) //string长度\nLOAD_FILE (file_name ) //从文件读取内容\nLOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置\nLPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length\nLTRIM (string2 ) //去除前端空格\nREPEAT (string2 ,count ) //重复count次\nREPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str\nRPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length\nRTRIM (string2 ) //去除后端空格\nSTRCMP (string1 ,string2 ) //逐字符比较两字串大小,\nSUBSTRING (str , position [,length ]) //从str的position开始,取length个字符,\n注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1 \n \n\nTRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符\nUCASE (string2 ) //转换成大写\nRIGHT(string2,length) //取string2最后length个字符\nSPACE(count) //生成count个空格\n### 数学类\nABS (number2 ) //绝对值\nBIN (decimal_number ) //十进制转二进制\nCEILING (number2 ) //向上取整\nCONV(number2,from_base,to_base) //进制转换\nFLOOR (number2 ) //向下取整\nFORMAT (number,decimal_places ) //保留小数位数\nHEX (DecimalNumber ) //转十六进制\n注：HEX()中可传入字符串，则返回其ASC-11码，如HEX('DEF')返回4142143\n也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19\nLEAST (number , number2 [,..]) //求最小值\nMOD (numerator ,denominator ) //求余\nPOWER (number ,power ) //求指数\nRAND([seed]) //随机数\nROUND (number [,decimals ]) //四舍五入,decimals为小数位数]\n注：返回类型并非均为整数，如：\n(1)默认变为整形值\n(2)可以设定小数位数，返回浮点型数据\n### 日期时间类\nADDTIME (date2 ,time_interval ) //将time_interval加到date2\nCONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区\nCURRENT_DATE ( ) //当前日期\nCURRENT_TIME ( ) //当前时间\nCURRENT_TIMESTAMP ( ) //当前时间戳\nDATE (datetime ) //返回datetime的日期部分\nDATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间\nDATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime\nDATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间\nDATEDIFF (date1 ,date2 ) //两个日期差\nDAY (date ) //返回日期的天\nDAYNAME (date ) //英文星期\nDAYOFWEEK (date ) //星期(1-7) ,1为星期天\nDAYOFYEAR (date ) //一年中的第几天\nEXTRACT (interval_name FROM date ) //从date中提取日期的指定部分\nMAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串\nMAKETIME (hour ,minute ,second ) //生成时间串\nMONTHNAME (date ) //英文月份名\nNOW ( ) //当前时间\nSEC_TO_TIME (seconds ) //秒数转成时间\nSTR_TO_DATE (string ,format ) //字串转成时间,以format格式显示\nTIMEDIFF (datetime1 ,datetime2 ) //两个时间差\nTIME_TO_SEC (time ) //时间转秒数]\nWEEK (date_time [,start_of_week ]) //第几周\nYEAR (datetime ) //年份\nDAYOFMONTH(datetime) //月的第几天\nHOUR(datetime) //小时\nLAST_DAY(date) //date的月的最后日期\nMICROSECOND(datetime) //微秒\nMONTH(datetime) //月\nMINUTE(datetime) //分返回符号,正负或0\nSQRT(number2) //开平方","source":"_posts/MySQLSP.md","raw":"---\ntitle: MySQL 存储过程的使用\ndate: 2016-08-08 17:27:18\ncategories: [database]\ntags: [Stored Procedure,mysql] \n---\n\n存储过程的使用\n<!-- more -->\n\n## MySQL存储过程的创建\n### 格式\n  ***CREATE PROCEDURE 过程名 ([过程参数[,...]])[特性 ...] 过程体***\n### 声明分隔符\nDELIMITER //和DELIMITER ;\n    因为MySQL默认以\";\"为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，\n则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将\";\"当做存储\n过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。\n### 参数 \nMySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：\n***CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形...])***  \nIN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值\nOUT 输出参数:该值可在存储过程内部被改变，并可返回\nINOUT 输入输出参数:调用时指定，并且可被改变和返回\n   \n```sql\nDELIMITER //\nCREATE PROCEDURE demo_in_parameter(IN p_in INT)\nBEGIN\nUPDATE sys_user SET login_name='test' WHERE id = p_in ;\nEND ;\n//\nDELIMITER ;\n\nCALL demo_in_parameter(1)\n```\n    \n```SQL\nDELIMITER //\n CREATE PROCEDURE demo_out_parameter(OUT s INT)  \n BEGIN \n SELECT COUNT(*) INTO s FROM sys_user;  \n END \n //\n DELIMITER ;\n \n SET @p_out=1;\n CALL demo_out_parameter(@p_out);\n SELECT @p_out;\n ```\n \n ```sql\n DELIMITER //\n CREATE PROCEDURE demo_inout_paramter(INOUT p_inout INT)\n BEGIN\n SELECT p_inout;\n SET p_inout=2;\n SELECT p_inout;\n END\n //\n DELIMITER ;\n \n SET @p_inout=1;\n CALL demo_inout_paramter(@p_inout);\n SELECT @p_inout\n ```\n### 变量\nⅠ. 变量定义\n***DECLARE variable_name [,variable_name...] datatype [DEFAULT value];***\n其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length)\n例如:\n```sql\nDECLARE l_int int unsigned default 4000000;  \nDECLARE l_numeric number(8,2) DEFAULT 9.95;  \nDECLARE l_date date DEFAULT '1999-12-31';  \nDECLARE l_datetime datetime DEFAULT '1999-12-31 23:59:59';  \nDECLARE l_varchar varchar(255) DEFAULT 'This will not be padded';   \n ```\n \nⅡ. 变量赋值\n***SET 变量名 = 表达式值 [,variable_name = expression ...]***\n \nⅢ. 用户变量\n①在MySQL客户端使用用户变量\n```sql\nSELECT COUNT(*) INTO @countuser FROM sys_user; -- 将count(*) 的值赋给 @countuser\nSELECT @countuser;\n\nset @greeting = \"hello\";\nselect @greeting; -- hello\n\nSET @result = 25*4;\nselect @result; -- 100\n```\n②在存储过程中使用用户变量\n```sql\nCREATE PROCEDURE GreetWorld() SELECT CONCAT(@greeting,' World');  \nSET @greeting='Hello';  \nCALL GreetWorld(); --Hello World\n```\n\n③在存储过程间传递全局范围的用户变量\n```sql\nCREATE PROCEDURE p1()   SET @last_procedure='p1';  \nCREATE PROCEDURE p2() SELECT CONCAT('Last procedure was ',@last_procedure);  \nCALL p1( );  \nCALL p2( ); -- Last procedure was p1\n```\n注意:\n用户变量名一般以@开头,滥用用户变量会导致程序难以理解及管理\n\n## MySQL存储过程的查询、删除\n```sql\nselect name from mysql.proc where db='数据库名';\nselect routine_name from information_schema.routines where routine_schema='数据库名';\nshow procedure status where db='数据库名';\nSHOW CREATE PROCEDURE 数据库.存储过程名;\n\n-- 删除\nDROP PROCEDURE  '存储过程名'\n```\n##  MySQL存储过程的控制语句\n### 变量作用域\n内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，\n应为在存储过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派给会话变量来保存其值。\n```sql\nDELIMITER //\nCREATE PROCEDURE pro_variable_field()\nBEGIN\nDECLARE var1 VARCHAR(5) DEFAULT 'outer';\nBEGIN\nDECLARE var1 VARCHAR(5) DEFAULT 'inner';\nSELECT var1;\nEND;\nSELECT var1;\nEND;\n//\nDELIMITER ;\n```\n### 条件语句\nⅠ. if-then -else语句\n```sql\nDELIMITER //\nCREATE PROCEDURE ifthenelse(IN parameter INT)\nBEGIN\nDECLARE var INT ;\nSET var = parameter + 1;\nIF var=0 THEN\nINSERT INTO sys_log VALUE(1,1,1,NULL,1,1,1,1,1,1);\nEND IF;\nIF parameter=0 THEN\nUPDATE sys_log SET id=id+1;\nELSE\nUPDATE sys_log SET id=id+1;\nEND IF;\nEND;\n//\nDELIMITER ;\n```\nⅡ. case语句： \n```sql\nDELIMITER $$\nCREATE PROCEDURE casewhenthen(IN caseparameter INT)\nBEGIN\nDECLARE var INT ;\nSET var = caseparameter+1;\nCASE var\nWHEN 0 THEN\nSELECT var+1;\nWHEN 1 THEN \nSELECT var+2;\nELSE\nSELECT var+8;\nEND CASE;\nEND;\n$$\nDELIMITER ;\n\nCALL casewhenthen(0);\n\n```\n### 循环语句\nⅠ. while ···· end while：\n```sql\nDELIMITER !!\nCREATE PROCEDURE whileloop()\nBEGIN\nDECLARE var INT;\nSET var = 0;\nWHILE var<6 DO \nSELECT var;\nSET var = var+1;\nEND WHILE;\nEND;\n!!\nDELIMITER ;\n\nCALL whileloop();\n```\nⅡ. repeat···· end repeat：\n它在执行操作后检查结果，而while则是执行前进行检查。\n```sql\nDELIMITER **\nCREATE PROCEDURE repeatuntil()\nBEGIN\nDECLARE var INT;\nSET var = 0;\nREPEAT \nSELECT var;\nSET var = var+1;\nUNTIL var>=5\nEND REPEAT;\nEND;\n**\nDELIMITER ;\n\nCALL repeatuntil();\n```\nⅢ. loop ·····end loop:\nloop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。\n```sql\nDELIMITER **\nCREATE PROCEDURE loopdemo()\nBEGIN\nDECLARE var INT;\nSET var = 4;\nLOOP_LABLE:LOOP\nSELECT var;\nSET var = var+1;\nIF var>=8 THEN\nLEAVE LOOP_LABLE;\nEND IF;\nEND LOOP;\nEND;\n**\nDELIMITER ;\n\nCALL loopdemo();\n```\n### ITERATE迭代\nⅠ. ITERATE:\n通过引用复合语句的标号,来从新开始复合语句\n\n\n## MySQL存储过程的基本函数\n \n### 字符串类\nCHARSET(str) //返回字串字符集\nCONCAT (string2 [,... ]) //连接字串\nINSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0\nLCASE (string2 ) //转换成小写\nLEFT (string2 ,length ) //从string2中的左边起取length个字符\nLENGTH (string ) //string长度\nLOAD_FILE (file_name ) //从文件读取内容\nLOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置\nLPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length\nLTRIM (string2 ) //去除前端空格\nREPEAT (string2 ,count ) //重复count次\nREPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str\nRPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length\nRTRIM (string2 ) //去除后端空格\nSTRCMP (string1 ,string2 ) //逐字符比较两字串大小,\nSUBSTRING (str , position [,length ]) //从str的position开始,取length个字符,\n注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1 \n \n\nTRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符\nUCASE (string2 ) //转换成大写\nRIGHT(string2,length) //取string2最后length个字符\nSPACE(count) //生成count个空格\n### 数学类\nABS (number2 ) //绝对值\nBIN (decimal_number ) //十进制转二进制\nCEILING (number2 ) //向上取整\nCONV(number2,from_base,to_base) //进制转换\nFLOOR (number2 ) //向下取整\nFORMAT (number,decimal_places ) //保留小数位数\nHEX (DecimalNumber ) //转十六进制\n注：HEX()中可传入字符串，则返回其ASC-11码，如HEX('DEF')返回4142143\n也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19\nLEAST (number , number2 [,..]) //求最小值\nMOD (numerator ,denominator ) //求余\nPOWER (number ,power ) //求指数\nRAND([seed]) //随机数\nROUND (number [,decimals ]) //四舍五入,decimals为小数位数]\n注：返回类型并非均为整数，如：\n(1)默认变为整形值\n(2)可以设定小数位数，返回浮点型数据\n### 日期时间类\nADDTIME (date2 ,time_interval ) //将time_interval加到date2\nCONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区\nCURRENT_DATE ( ) //当前日期\nCURRENT_TIME ( ) //当前时间\nCURRENT_TIMESTAMP ( ) //当前时间戳\nDATE (datetime ) //返回datetime的日期部分\nDATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间\nDATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime\nDATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间\nDATEDIFF (date1 ,date2 ) //两个日期差\nDAY (date ) //返回日期的天\nDAYNAME (date ) //英文星期\nDAYOFWEEK (date ) //星期(1-7) ,1为星期天\nDAYOFYEAR (date ) //一年中的第几天\nEXTRACT (interval_name FROM date ) //从date中提取日期的指定部分\nMAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串\nMAKETIME (hour ,minute ,second ) //生成时间串\nMONTHNAME (date ) //英文月份名\nNOW ( ) //当前时间\nSEC_TO_TIME (seconds ) //秒数转成时间\nSTR_TO_DATE (string ,format ) //字串转成时间,以format格式显示\nTIMEDIFF (datetime1 ,datetime2 ) //两个时间差\nTIME_TO_SEC (time ) //时间转秒数]\nWEEK (date_time [,start_of_week ]) //第几周\nYEAR (datetime ) //年份\nDAYOFMONTH(datetime) //月的第几天\nHOUR(datetime) //小时\nLAST_DAY(date) //date的月的最后日期\nMICROSECOND(datetime) //微秒\nMONTH(datetime) //月\nMINUTE(datetime) //分返回符号,正负或0\nSQRT(number2) //开平方","slug":"MySQLSP","published":1,"updated":"2016-09-26T02:40:51.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yk90035esqrdz6ixgmk","content":"<p>存储过程的使用<br><a id=\"more\"></a></p>\n<h2 id=\"MySQL存储过程的创建\"><a href=\"#MySQL存储过程的创建\" class=\"headerlink\" title=\"MySQL存储过程的创建\"></a>MySQL存储过程的创建</h2><h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>  <strong><em>CREATE PROCEDURE 过程名 ([过程参数[,…]])[特性 …] 过程体</em></strong></p>\n<h3 id=\"声明分隔符\"><a href=\"#声明分隔符\" class=\"headerlink\" title=\"声明分隔符\"></a>声明分隔符</h3><p>DELIMITER //和DELIMITER ;<br>    因为MySQL默认以”;”为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，<br>则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将”;”当做存储<br>过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：<br><strong><em>CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形…])</em></strong><br>IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值<br>OUT 输出参数:该值可在存储过程内部被改变，并可返回<br>INOUT 输入输出参数:调用时指定，并且可被改变和返回</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> demo_in_parameter(<span class=\"keyword\">IN</span> p_in <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">UPDATE</span> sys_user <span class=\"keyword\">SET</span> login_name=<span class=\"string\">'test'</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = p_in ;</div><div class=\"line\"><span class=\"keyword\">END</span> ;</div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">CALL</span> demo_in_parameter(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> demo_out_parameter(<span class=\"keyword\">OUT</span> s <span class=\"built_in\">INT</span>)  </div><div class=\"line\"> <span class=\"keyword\">BEGIN</span> </div><div class=\"line\"> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">INTO</span> s <span class=\"keyword\">FROM</span> sys_user;  </div><div class=\"line\"> <span class=\"keyword\">END</span> </div><div class=\"line\"> //</div><div class=\"line\"> DELIMITER ;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">SET</span> @p_out=<span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"keyword\">CALL</span> demo_out_parameter(@p_out);</div><div class=\"line\"> <span class=\"keyword\">SELECT</span> @p_out;</div></pre></td></tr></table></figure>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> demo_inout_paramter(INOUT p_inout <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> p_inout;</div><div class=\"line\"><span class=\"keyword\">SET</span> p_inout=<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> p_inout;</div><div class=\"line\"><span class=\"keyword\">END</span></div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SET</span> @p_inout=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">CALL</span> demo_inout_paramter(@p_inout);</div><div class=\"line\"><span class=\"keyword\">SELECT</span> @p_inout</div></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>Ⅰ. 变量定义<br><strong><em>DECLARE variable_name [,variable_name…] datatype [DEFAULT value];</em></strong><br>其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length)<br>例如:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_int <span class=\"built_in\">int</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">default</span> <span class=\"number\">4000000</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_numeric <span class=\"built_in\">number</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"number\">9.95</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_date <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31'</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_datetime datetime <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31 23:59:59'</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_varchar <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'This will not be padded'</span>;</div></pre></td></tr></table></figure></p>\n<p>Ⅱ. 变量赋值<br><strong><em>SET 变量名 = 表达式值 [,variable_name = expression …]</em></strong></p>\n<p>Ⅲ. 用户变量<br>①在MySQL客户端使用用户变量<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">INTO</span> @countuser <span class=\"keyword\">FROM</span> sys_user; <span class=\"comment\">-- 将count(*) 的值赋给 @countuser</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> @countuser;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span> @greeting = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> @greeting; <span class=\"comment\">-- hello</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">result</span> = <span class=\"number\">25</span>*<span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> @<span class=\"keyword\">result</span>; <span class=\"comment\">-- 100</span></div></pre></td></tr></table></figure></p>\n<p>②在存储过程中使用用户变量<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> GreetWorld() <span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(@greeting,<span class=\"string\">' World'</span>);  </div><div class=\"line\"><span class=\"keyword\">SET</span> @greeting=<span class=\"string\">'Hello'</span>;  </div><div class=\"line\"><span class=\"keyword\">CALL</span> GreetWorld(); <span class=\"comment\">--Hello World</span></div></pre></td></tr></table></figure></p>\n<p>③在存储过程间传递全局范围的用户变量<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> p1()   <span class=\"keyword\">SET</span> @last_procedure=<span class=\"string\">'p1'</span>;  </div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> p2() <span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'Last procedure was '</span>,@last_procedure);  </div><div class=\"line\"><span class=\"keyword\">CALL</span> p1( );  </div><div class=\"line\"><span class=\"keyword\">CALL</span> p2( ); <span class=\"comment\">-- Last procedure was p1</span></div></pre></td></tr></table></figure></p>\n<p>注意:<br>用户变量名一般以@开头,滥用用户变量会导致程序难以理解及管理</p>\n<h2 id=\"MySQL存储过程的查询、删除\"><a href=\"#MySQL存储过程的查询、删除\" class=\"headerlink\" title=\"MySQL存储过程的查询、删除\"></a>MySQL存储过程的查询、删除</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> mysql.proc <span class=\"keyword\">where</span> db=<span class=\"string\">'数据库名'</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> routine_name <span class=\"keyword\">from</span> information_schema.routines <span class=\"keyword\">where</span> routine_schema=<span class=\"string\">'数据库名'</span>;</div><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">procedure</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> db=<span class=\"string\">'数据库名'</span>;</div><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 数据库.存储过程名;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 删除</span></div><div class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span>  <span class=\"string\">'存储过程名'</span></div></pre></td></tr></table></figure>\n<h2 id=\"MySQL存储过程的控制语句\"><a href=\"#MySQL存储过程的控制语句\" class=\"headerlink\" title=\"MySQL存储过程的控制语句\"></a>MySQL存储过程的控制语句</h2><h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><p>内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，<br>应为在存储过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派给会话变量来保存其值。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> pro_variable_field()</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> var1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">5</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'outer'</span>;</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> var1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">5</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'inner'</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> var1;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> var1;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div></pre></td></tr></table></figure></p>\n<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><p>Ⅰ. if-then -else语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> ifthenelse(<span class=\"keyword\">IN</span> parameter <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"keyword\">var</span> <span class=\"built_in\">INT</span> ;</div><div class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">var</span> = parameter + <span class=\"number\">1</span>;</div><div class=\"line\">IF var=0 THEN</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> sys_log <span class=\"keyword\">VALUE</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</div><div class=\"line\">IF parameter=0 THEN</div><div class=\"line\"><span class=\"keyword\">UPDATE</span> sys_log <span class=\"keyword\">SET</span> <span class=\"keyword\">id</span>=<span class=\"keyword\">id</span>+<span class=\"number\">1</span>;</div><div class=\"line\">ELSE</div><div class=\"line\"><span class=\"keyword\">UPDATE</span> sys_log <span class=\"keyword\">SET</span> <span class=\"keyword\">id</span>=<span class=\"keyword\">id</span>+<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div></pre></td></tr></table></figure></p>\n<p>Ⅱ. case语句：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER $$</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> casewhenthen(<span class=\"keyword\">IN</span> caseparameter <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"keyword\">var</span> <span class=\"built_in\">INT</span> ;</div><div class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">var</span> = caseparameter+<span class=\"number\">1</span>;</div><div class=\"line\">CASE var</div><div class=\"line\">WHEN 0 THEN</div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">var</span>+<span class=\"number\">1</span>;</div><div class=\"line\">WHEN 1 THEN </div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">var</span>+<span class=\"number\">2</span>;</div><div class=\"line\">ELSE</div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">var</span>+<span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">CASE</span>;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\">$$</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">CALL</span> casewhenthen(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p>Ⅰ. while ···· end while：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER !!</div><div class=\"line\">CREATE PROCEDURE whileloop()</div><div class=\"line\">BEGIN</div><div class=\"line\">DECLARE var INT;</div><div class=\"line\">SET var = 0;</div><div class=\"line\">WHILE var&lt;6 DO </div><div class=\"line\">SELECT var;</div><div class=\"line\">SET var = var+1;</div><div class=\"line\">END WHILE;</div><div class=\"line\">END;</div><div class=\"line\">!!</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\">CALL whileloop();</div></pre></td></tr></table></figure></p>\n<p>Ⅱ. repeat···· end repeat：<br>它在执行操作后检查结果，而while则是执行前进行检查。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER **</div><div class=\"line\">CREATE PROCEDURE repeatuntil()</div><div class=\"line\">BEGIN</div><div class=\"line\">DECLARE var INT;</div><div class=\"line\">SET var = 0;</div><div class=\"line\">REPEAT </div><div class=\"line\">SELECT var;</div><div class=\"line\">SET var = var+1;</div><div class=\"line\">UNTIL var&gt;=5</div><div class=\"line\">END REPEAT;</div><div class=\"line\">END;</div><div class=\"line\">**</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\">CALL repeatuntil();</div></pre></td></tr></table></figure></p>\n<p>Ⅲ. loop ·····end loop:<br>loop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER **</div><div class=\"line\">CREATE PROCEDURE loopdemo()</div><div class=\"line\">BEGIN</div><div class=\"line\">DECLARE var INT;</div><div class=\"line\">SET var = 4;</div><div class=\"line\">LOOP_LABLE:LOOP</div><div class=\"line\">SELECT var;</div><div class=\"line\">SET var = var+1;</div><div class=\"line\">IF var&gt;=8 THEN</div><div class=\"line\">LEAVE LOOP_LABLE;</div><div class=\"line\">END IF;</div><div class=\"line\">END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">**</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\">CALL loopdemo();</div></pre></td></tr></table></figure></p>\n<h3 id=\"ITERATE迭代\"><a href=\"#ITERATE迭代\" class=\"headerlink\" title=\"ITERATE迭代\"></a>ITERATE迭代</h3><p>Ⅰ. ITERATE:<br>通过引用复合语句的标号,来从新开始复合语句</p>\n<h2 id=\"MySQL存储过程的基本函数\"><a href=\"#MySQL存储过程的基本函数\" class=\"headerlink\" title=\"MySQL存储过程的基本函数\"></a>MySQL存储过程的基本函数</h2><h3 id=\"字符串类\"><a href=\"#字符串类\" class=\"headerlink\" title=\"字符串类\"></a>字符串类</h3><p>CHARSET(str) //返回字串字符集<br>CONCAT (string2 [,… ]) //连接字串<br>INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0<br>LCASE (string2 ) //转换成小写<br>LEFT (string2 ,length ) //从string2中的左边起取length个字符<br>LENGTH (string ) //string长度<br>LOAD_FILE (file_name ) //从文件读取内容<br>LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置<br>LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length<br>LTRIM (string2 ) //去除前端空格<br>REPEAT (string2 ,count ) //重复count次<br>REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str<br>RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length<br>RTRIM (string2 ) //去除后端空格<br>STRCMP (string1 ,string2 ) //逐字符比较两字串大小,<br>SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符,<br>注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1 </p>\n<p>TRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符<br>UCASE (string2 ) //转换成大写<br>RIGHT(string2,length) //取string2最后length个字符<br>SPACE(count) //生成count个空格</p>\n<h3 id=\"数学类\"><a href=\"#数学类\" class=\"headerlink\" title=\"数学类\"></a>数学类</h3><p>ABS (number2 ) //绝对值<br>BIN (decimal_number ) //十进制转二进制<br>CEILING (number2 ) //向上取整<br>CONV(number2,from_base,to_base) //进制转换<br>FLOOR (number2 ) //向下取整<br>FORMAT (number,decimal_places ) //保留小数位数<br>HEX (DecimalNumber ) //转十六进制<br>注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(‘DEF’)返回4142143<br>也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19<br>LEAST (number , number2 [,..]) //求最小值<br>MOD (numerator ,denominator ) //求余<br>POWER (number ,power ) //求指数<br>RAND([seed]) //随机数<br>ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]<br>注：返回类型并非均为整数，如：<br>(1)默认变为整形值<br>(2)可以设定小数位数，返回浮点型数据</p>\n<h3 id=\"日期时间类\"><a href=\"#日期时间类\" class=\"headerlink\" title=\"日期时间类\"></a>日期时间类</h3><p>ADDTIME (date2 ,time_interval ) //将time_interval加到date2<br>CONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区<br>CURRENT_DATE ( ) //当前日期<br>CURRENT_TIME ( ) //当前时间<br>CURRENT_TIMESTAMP ( ) //当前时间戳<br>DATE (datetime ) //返回datetime的日期部分<br>DATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间<br>DATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime<br>DATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间<br>DATEDIFF (date1 ,date2 ) //两个日期差<br>DAY (date ) //返回日期的天<br>DAYNAME (date ) //英文星期<br>DAYOFWEEK (date ) //星期(1-7) ,1为星期天<br>DAYOFYEAR (date ) //一年中的第几天<br>EXTRACT (interval_name FROM date ) //从date中提取日期的指定部分<br>MAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串<br>MAKETIME (hour ,minute ,second ) //生成时间串<br>MONTHNAME (date ) //英文月份名<br>NOW ( ) //当前时间<br>SEC_TO_TIME (seconds ) //秒数转成时间<br>STR_TO_DATE (string ,format ) //字串转成时间,以format格式显示<br>TIMEDIFF (datetime1 ,datetime2 ) //两个时间差<br>TIME_TO_SEC (time ) //时间转秒数]<br>WEEK (date_time [,start_of_week ]) //第几周<br>YEAR (datetime ) //年份<br>DAYOFMONTH(datetime) //月的第几天<br>HOUR(datetime) //小时<br>LAST_DAY(date) //date的月的最后日期<br>MICROSECOND(datetime) //微秒<br>MONTH(datetime) //月<br>MINUTE(datetime) //分返回符号,正负或0<br>SQRT(number2) //开平方</p>\n","excerpt":"<p>存储过程的使用<br></p>","more":"<p></p>\n<h2 id=\"MySQL存储过程的创建\"><a href=\"#MySQL存储过程的创建\" class=\"headerlink\" title=\"MySQL存储过程的创建\"></a>MySQL存储过程的创建</h2><h3 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h3><p>  <strong><em>CREATE PROCEDURE 过程名 ([过程参数[,…]])[特性 …] 过程体</em></strong></p>\n<h3 id=\"声明分隔符\"><a href=\"#声明分隔符\" class=\"headerlink\" title=\"声明分隔符\"></a>声明分隔符</h3><p>DELIMITER //和DELIMITER ;<br>    因为MySQL默认以”;”为分隔符，如果我们没有声明分割符，那么编译器会把存储过程当成SQL语句进行处理，<br>则存储过程的编译过程会报错，所以要事先用DELIMITER关键字申明当前段分隔符，这样MySQL才会将”;”当做存储<br>过程中的代码，不会执行这些代码，用完了之后要把分隔符还原。</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：<br><strong><em>CREATE PROCEDURE([[IN |OUT |INOUT ] 参数名 数据类形…])</em></strong><br>IN 输入参数:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值<br>OUT 输出参数:该值可在存储过程内部被改变，并可返回<br>INOUT 输入输出参数:调用时指定，并且可被改变和返回</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> demo_in_parameter(<span class=\"keyword\">IN</span> p_in <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">UPDATE</span> sys_user <span class=\"keyword\">SET</span> login_name=<span class=\"string\">'test'</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">id</span> = p_in ;</div><div class=\"line\"><span class=\"keyword\">END</span> ;</div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">CALL</span> demo_in_parameter(<span class=\"number\">1</span>)</div></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> demo_out_parameter(<span class=\"keyword\">OUT</span> s <span class=\"built_in\">INT</span>)  </div><div class=\"line\"> <span class=\"keyword\">BEGIN</span> </div><div class=\"line\"> <span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">INTO</span> s <span class=\"keyword\">FROM</span> sys_user;  </div><div class=\"line\"> <span class=\"keyword\">END</span> </div><div class=\"line\"> //</div><div class=\"line\"> DELIMITER ;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">SET</span> @p_out=<span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"keyword\">CALL</span> demo_out_parameter(@p_out);</div><div class=\"line\"> <span class=\"keyword\">SELECT</span> @p_out;</div></pre></td></tr></table></figure>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> demo_inout_paramter(INOUT p_inout <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> p_inout;</div><div class=\"line\"><span class=\"keyword\">SET</span> p_inout=<span class=\"number\">2</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> p_inout;</div><div class=\"line\"><span class=\"keyword\">END</span></div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SET</span> @p_inout=<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">CALL</span> demo_inout_paramter(@p_inout);</div><div class=\"line\"><span class=\"keyword\">SELECT</span> @p_inout</div></pre></td></tr></table></figure>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>Ⅰ. 变量定义<br><strong><em>DECLARE variable_name [,variable_name…] datatype [DEFAULT value];</em></strong><br>其中，datatype为MySQL的数据类型，如:int, float, date, varchar(length)<br>例如:<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_int <span class=\"built_in\">int</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">default</span> <span class=\"number\">4000000</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_numeric <span class=\"built_in\">number</span>(<span class=\"number\">8</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"number\">9.95</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_date <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31'</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_datetime datetime <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1999-12-31 23:59:59'</span>;  </div><div class=\"line\"><span class=\"keyword\">DECLARE</span> l_varchar <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'This will not be padded'</span>;</div></pre></td></tr></table></figure></p>\n<p>Ⅱ. 变量赋值<br><strong><em>SET 变量名 = 表达式值 [,variable_name = expression …]</em></strong></p>\n<p>Ⅲ. 用户变量<br>①在MySQL客户端使用用户变量<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">INTO</span> @countuser <span class=\"keyword\">FROM</span> sys_user; <span class=\"comment\">-- 将count(*) 的值赋给 @countuser</span></div><div class=\"line\"><span class=\"keyword\">SELECT</span> @countuser;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">set</span> @greeting = <span class=\"string\">\"hello\"</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> @greeting; <span class=\"comment\">-- hello</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">SET</span> @<span class=\"keyword\">result</span> = <span class=\"number\">25</span>*<span class=\"number\">4</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> @<span class=\"keyword\">result</span>; <span class=\"comment\">-- 100</span></div></pre></td></tr></table></figure></p>\n<p>②在存储过程中使用用户变量<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> GreetWorld() <span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(@greeting,<span class=\"string\">' World'</span>);  </div><div class=\"line\"><span class=\"keyword\">SET</span> @greeting=<span class=\"string\">'Hello'</span>;  </div><div class=\"line\"><span class=\"keyword\">CALL</span> GreetWorld(); <span class=\"comment\">--Hello World</span></div></pre></td></tr></table></figure></p>\n<p>③在存储过程间传递全局范围的用户变量<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> p1()   <span class=\"keyword\">SET</span> @last_procedure=<span class=\"string\">'p1'</span>;  </div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> p2() <span class=\"keyword\">SELECT</span> <span class=\"keyword\">CONCAT</span>(<span class=\"string\">'Last procedure was '</span>,@last_procedure);  </div><div class=\"line\"><span class=\"keyword\">CALL</span> p1( );  </div><div class=\"line\"><span class=\"keyword\">CALL</span> p2( ); <span class=\"comment\">-- Last procedure was p1</span></div></pre></td></tr></table></figure></p>\n<p>注意:<br>用户变量名一般以@开头,滥用用户变量会导致程序难以理解及管理</p>\n<h2 id=\"MySQL存储过程的查询、删除\"><a href=\"#MySQL存储过程的查询、删除\" class=\"headerlink\" title=\"MySQL存储过程的查询、删除\"></a>MySQL存储过程的查询、删除</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">name</span> <span class=\"keyword\">from</span> mysql.proc <span class=\"keyword\">where</span> db=<span class=\"string\">'数据库名'</span>;</div><div class=\"line\"><span class=\"keyword\">select</span> routine_name <span class=\"keyword\">from</span> information_schema.routines <span class=\"keyword\">where</span> routine_schema=<span class=\"string\">'数据库名'</span>;</div><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">procedure</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> db=<span class=\"string\">'数据库名'</span>;</div><div class=\"line\"><span class=\"keyword\">SHOW</span> <span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 数据库.存储过程名;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">-- 删除</span></div><div class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">PROCEDURE</span>  <span class=\"string\">'存储过程名'</span></div></pre></td></tr></table></figure>\n<h2 id=\"MySQL存储过程的控制语句\"><a href=\"#MySQL存储过程的控制语句\" class=\"headerlink\" title=\"MySQL存储过程的控制语句\"></a>MySQL存储过程的控制语句</h2><h3 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h3><p>内部的变量在其作用域范围内享有更高的优先权，当执行到end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，<br>应为在存储过程外再也不能找到这个申明的变量，但是你可以通过out参数或者将其值指派给会话变量来保存其值。<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> pro_variable_field()</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> var1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">5</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'outer'</span>;</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> var1 <span class=\"built_in\">VARCHAR</span>(<span class=\"number\">5</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'inner'</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> var1;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\"><span class=\"keyword\">SELECT</span> var1;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div></pre></td></tr></table></figure></p>\n<h3 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h3><p>Ⅰ. if-then -else语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER //</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> ifthenelse(<span class=\"keyword\">IN</span> parameter <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"keyword\">var</span> <span class=\"built_in\">INT</span> ;</div><div class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">var</span> = parameter + <span class=\"number\">1</span>;</div><div class=\"line\">IF var=0 THEN</div><div class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> sys_log <span class=\"keyword\">VALUE</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</div><div class=\"line\">IF parameter=0 THEN</div><div class=\"line\"><span class=\"keyword\">UPDATE</span> sys_log <span class=\"keyword\">SET</span> <span class=\"keyword\">id</span>=<span class=\"keyword\">id</span>+<span class=\"number\">1</span>;</div><div class=\"line\">ELSE</div><div class=\"line\"><span class=\"keyword\">UPDATE</span> sys_log <span class=\"keyword\">SET</span> <span class=\"keyword\">id</span>=<span class=\"keyword\">id</span>+<span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\">//</div><div class=\"line\">DELIMITER ;</div></pre></td></tr></table></figure></p>\n<p>Ⅱ. case语句：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER $$</div><div class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> casewhenthen(<span class=\"keyword\">IN</span> caseparameter <span class=\"built_in\">INT</span>)</div><div class=\"line\"><span class=\"keyword\">BEGIN</span></div><div class=\"line\"><span class=\"keyword\">DECLARE</span> <span class=\"keyword\">var</span> <span class=\"built_in\">INT</span> ;</div><div class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">var</span> = caseparameter+<span class=\"number\">1</span>;</div><div class=\"line\">CASE var</div><div class=\"line\">WHEN 0 THEN</div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">var</span>+<span class=\"number\">1</span>;</div><div class=\"line\">WHEN 1 THEN </div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">var</span>+<span class=\"number\">2</span>;</div><div class=\"line\">ELSE</div><div class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">var</span>+<span class=\"number\">8</span>;</div><div class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">CASE</span>;</div><div class=\"line\"><span class=\"keyword\">END</span>;</div><div class=\"line\">$$</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">CALL</span> casewhenthen(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h3><p>Ⅰ. while ···· end while：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER !!</div><div class=\"line\">CREATE PROCEDURE whileloop()</div><div class=\"line\">BEGIN</div><div class=\"line\">DECLARE var INT;</div><div class=\"line\">SET var = 0;</div><div class=\"line\">WHILE var&lt;6 DO </div><div class=\"line\">SELECT var;</div><div class=\"line\">SET var = var+1;</div><div class=\"line\">END WHILE;</div><div class=\"line\">END;</div><div class=\"line\">!!</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\">CALL whileloop();</div></pre></td></tr></table></figure></p>\n<p>Ⅱ. repeat···· end repeat：<br>它在执行操作后检查结果，而while则是执行前进行检查。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER **</div><div class=\"line\">CREATE PROCEDURE repeatuntil()</div><div class=\"line\">BEGIN</div><div class=\"line\">DECLARE var INT;</div><div class=\"line\">SET var = 0;</div><div class=\"line\">REPEAT </div><div class=\"line\">SELECT var;</div><div class=\"line\">SET var = var+1;</div><div class=\"line\">UNTIL var&gt;=5</div><div class=\"line\">END REPEAT;</div><div class=\"line\">END;</div><div class=\"line\">**</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\">CALL repeatuntil();</div></pre></td></tr></table></figure></p>\n<p>Ⅲ. loop ·····end loop:<br>loop循环不需要初始条件，这点和while 循环相似，同时和repeat循环一样不需要结束条件, leave语句的意义是离开循环。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">DELIMITER **</div><div class=\"line\">CREATE PROCEDURE loopdemo()</div><div class=\"line\">BEGIN</div><div class=\"line\">DECLARE var INT;</div><div class=\"line\">SET var = 4;</div><div class=\"line\">LOOP_LABLE:LOOP</div><div class=\"line\">SELECT var;</div><div class=\"line\">SET var = var+1;</div><div class=\"line\">IF var&gt;=8 THEN</div><div class=\"line\">LEAVE LOOP_LABLE;</div><div class=\"line\">END IF;</div><div class=\"line\">END LOOP;</div><div class=\"line\">END;</div><div class=\"line\">**</div><div class=\"line\">DELIMITER ;</div><div class=\"line\"></div><div class=\"line\">CALL loopdemo();</div></pre></td></tr></table></figure></p>\n<h3 id=\"ITERATE迭代\"><a href=\"#ITERATE迭代\" class=\"headerlink\" title=\"ITERATE迭代\"></a>ITERATE迭代</h3><p>Ⅰ. ITERATE:<br>通过引用复合语句的标号,来从新开始复合语句</p>\n<h2 id=\"MySQL存储过程的基本函数\"><a href=\"#MySQL存储过程的基本函数\" class=\"headerlink\" title=\"MySQL存储过程的基本函数\"></a>MySQL存储过程的基本函数</h2><h3 id=\"字符串类\"><a href=\"#字符串类\" class=\"headerlink\" title=\"字符串类\"></a>字符串类</h3><p>CHARSET(str) //返回字串字符集<br>CONCAT (string2 [,… ]) //连接字串<br>INSTR (string ,substring ) //返回substring首次在string中出现的位置,不存在返回0<br>LCASE (string2 ) //转换成小写<br>LEFT (string2 ,length ) //从string2中的左边起取length个字符<br>LENGTH (string ) //string长度<br>LOAD_FILE (file_name ) //从文件读取内容<br>LOCATE (substring , string [,start_position ] ) 同INSTR,但可指定开始位置<br>LPAD (string2 ,length ,pad ) //重复用pad加在string开头,直到字串长度为length<br>LTRIM (string2 ) //去除前端空格<br>REPEAT (string2 ,count ) //重复count次<br>REPLACE (str ,search_str ,replace_str ) //在str中用replace_str替换search_str<br>RPAD (string2 ,length ,pad) //在str后用pad补充,直到长度为length<br>RTRIM (string2 ) //去除后端空格<br>STRCMP (string1 ,string2 ) //逐字符比较两字串大小,<br>SUBSTRING (str , position [,length ]) //从str的position开始,取length个字符,<br>注：mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1 </p>\n<p>TRIM([[BOTH|LEADING|TRAILING] [padding] FROM]string2) //去除指定位置的指定字符<br>UCASE (string2 ) //转换成大写<br>RIGHT(string2,length) //取string2最后length个字符<br>SPACE(count) //生成count个空格</p>\n<h3 id=\"数学类\"><a href=\"#数学类\" class=\"headerlink\" title=\"数学类\"></a>数学类</h3><p>ABS (number2 ) //绝对值<br>BIN (decimal_number ) //十进制转二进制<br>CEILING (number2 ) //向上取整<br>CONV(number2,from_base,to_base) //进制转换<br>FLOOR (number2 ) //向下取整<br>FORMAT (number,decimal_places ) //保留小数位数<br>HEX (DecimalNumber ) //转十六进制<br>注：HEX()中可传入字符串，则返回其ASC-11码，如HEX(‘DEF’)返回4142143<br>也可以传入十进制整数，返回其十六进制编码，如HEX(25)返回19<br>LEAST (number , number2 [,..]) //求最小值<br>MOD (numerator ,denominator ) //求余<br>POWER (number ,power ) //求指数<br>RAND([seed]) //随机数<br>ROUND (number [,decimals ]) //四舍五入,decimals为小数位数]<br>注：返回类型并非均为整数，如：<br>(1)默认变为整形值<br>(2)可以设定小数位数，返回浮点型数据</p>\n<h3 id=\"日期时间类\"><a href=\"#日期时间类\" class=\"headerlink\" title=\"日期时间类\"></a>日期时间类</h3><p>ADDTIME (date2 ,time_interval ) //将time_interval加到date2<br>CONVERT_TZ (datetime2 ,fromTZ ,toTZ ) //转换时区<br>CURRENT_DATE ( ) //当前日期<br>CURRENT_TIME ( ) //当前时间<br>CURRENT_TIMESTAMP ( ) //当前时间戳<br>DATE (datetime ) //返回datetime的日期部分<br>DATE_ADD (date2 , INTERVAL d_value d_type ) //在date2中加上日期或时间<br>DATE_FORMAT (datetime ,FormatCodes ) //使用formatcodes格式显示datetime<br>DATE_SUB (date2 , INTERVAL d_value d_type ) //在date2上减去一个时间<br>DATEDIFF (date1 ,date2 ) //两个日期差<br>DAY (date ) //返回日期的天<br>DAYNAME (date ) //英文星期<br>DAYOFWEEK (date ) //星期(1-7) ,1为星期天<br>DAYOFYEAR (date ) //一年中的第几天<br>EXTRACT (interval_name FROM date ) //从date中提取日期的指定部分<br>MAKEDATE (year ,day ) //给出年及年中的第几天,生成日期串<br>MAKETIME (hour ,minute ,second ) //生成时间串<br>MONTHNAME (date ) //英文月份名<br>NOW ( ) //当前时间<br>SEC_TO_TIME (seconds ) //秒数转成时间<br>STR_TO_DATE (string ,format ) //字串转成时间,以format格式显示<br>TIMEDIFF (datetime1 ,datetime2 ) //两个时间差<br>TIME_TO_SEC (time ) //时间转秒数]<br>WEEK (date_time [,start_of_week ]) //第几周<br>YEAR (datetime ) //年份<br>DAYOFMONTH(datetime) //月的第几天<br>HOUR(datetime) //小时<br>LAST_DAY(date) //date的月的最后日期<br>MICROSECOND(datetime) //微秒<br>MONTH(datetime) //月<br>MINUTE(datetime) //分返回符号,正负或0<br>SQRT(number2) //开平方</p>"},{"title":"builderpattern","date":"2016-08-10T05:41:38.000Z","_content":"Java之建造者模式(Builder Pattern)\n<!-- more -->\n## 1.概念\n\n***建造者模式(Builder Pattern)又叫生成器模式，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。 （构建与表示分离，同构建不同表示）***\n与抽象工厂的区别：在建造者模式里，有个指导者，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造模式可以强制实行一种分步骤进行的建造过程。\n建造模式是将复杂的内部创建封装在内部，对于外部调用的人来说，只需要传入建造者和建造工具，对于内部是如何建造成成品的，调用者无需关心。\n举个简单的例子，如汽车，有很多部件，车轮，方向盘，发动机还有各种小零件等等，部件很多，但远不止这些，如何将这些部件装配成一部汽车，这个装配过程也很复杂（需要很好的组装技术）， builder模式就是为了将部件和组装分开。\n## 2.UML图\n![](builder.jpg)\n## 3.代码\n```java\npublic abstract class Builder {\n\n    abstract void buildPartA();\n\n    abstract void buildPartB();\n\n    abstract void buildPartC();\n\n    abstract Product getResult();\n}\n\npublic class ConcreteBuilder extends Builder {\n    Part partA, partB, partC;\n\n    @Override\n    void buildPartA() {\n    }\n\n    @Override\n    void buildPartB() {\n    }\n\n    @Override\n    void buildPartC() {\n    }\n\n    @Override\n    Product getResult() {\n        return null;\n    }\n}\n\npublic class Director {\n    /** */\n    public Builder builder;\n\n    /** */\n    public Director(Builder builder) {\n        this.builder = builder;\n    }\n\n    public void construct() {\n        builder.buildPartA();\n        builder.buildPartB();\n        builder.buildPartC();\n    }\n}\n\npublic interface Part {\n}\n\npublic interface Product {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcreteBuilder builder = new ConcreteBuilder();\n        Director director = new Director(builder);\n        director.construct();\n        Product product = builder.getResult();\n    }\n}\n```\n\n    ","source":"_posts/builderpattern.md","raw":"---\ntitle: builderpattern\ndate: 2016-08-10 13:41:38\ncategories:\ntags:\n---\nJava之建造者模式(Builder Pattern)\n<!-- more -->\n## 1.概念\n\n***建造者模式(Builder Pattern)又叫生成器模式，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。 （构建与表示分离，同构建不同表示）***\n与抽象工厂的区别：在建造者模式里，有个指导者，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造模式可以强制实行一种分步骤进行的建造过程。\n建造模式是将复杂的内部创建封装在内部，对于外部调用的人来说，只需要传入建造者和建造工具，对于内部是如何建造成成品的，调用者无需关心。\n举个简单的例子，如汽车，有很多部件，车轮，方向盘，发动机还有各种小零件等等，部件很多，但远不止这些，如何将这些部件装配成一部汽车，这个装配过程也很复杂（需要很好的组装技术）， builder模式就是为了将部件和组装分开。\n## 2.UML图\n![](builder.jpg)\n## 3.代码\n```java\npublic abstract class Builder {\n\n    abstract void buildPartA();\n\n    abstract void buildPartB();\n\n    abstract void buildPartC();\n\n    abstract Product getResult();\n}\n\npublic class ConcreteBuilder extends Builder {\n    Part partA, partB, partC;\n\n    @Override\n    void buildPartA() {\n    }\n\n    @Override\n    void buildPartB() {\n    }\n\n    @Override\n    void buildPartC() {\n    }\n\n    @Override\n    Product getResult() {\n        return null;\n    }\n}\n\npublic class Director {\n    /** */\n    public Builder builder;\n\n    /** */\n    public Director(Builder builder) {\n        this.builder = builder;\n    }\n\n    public void construct() {\n        builder.buildPartA();\n        builder.buildPartB();\n        builder.buildPartC();\n    }\n}\n\npublic interface Part {\n}\n\npublic interface Product {\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcreteBuilder builder = new ConcreteBuilder();\n        Director director = new Director(builder);\n        director.construct();\n        Product product = builder.getResult();\n    }\n}\n```\n\n    ","slug":"builderpattern","published":1,"updated":"2016-09-26T09:37:04.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykc0039esqro0v176lf","content":"<p>Java之建造者模式(Builder Pattern)<br><a id=\"more\"></a></p>\n<h2 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h2><p><strong><em>建造者模式(Builder Pattern)又叫生成器模式，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。 （构建与表示分离，同构建不同表示）</em></strong><br>与抽象工厂的区别：在建造者模式里，有个指导者，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造模式可以强制实行一种分步骤进行的建造过程。<br>建造模式是将复杂的内部创建封装在内部，对于外部调用的人来说，只需要传入建造者和建造工具，对于内部是如何建造成成品的，调用者无需关心。<br>举个简单的例子，如汽车，有很多部件，车轮，方向盘，发动机还有各种小零件等等，部件很多，但远不止这些，如何将这些部件装配成一部汽车，这个装配过程也很复杂（需要很好的组装技术）， builder模式就是为了将部件和组装分开。</p>\n<h2 id=\"2-UML图\"><a href=\"#2-UML图\" class=\"headerlink\" title=\"2.UML图\"></a>2.UML图</h2><p><img src=\"/2016/08/10/builderpattern/builder.jpg\" alt=\"\"></p>\n<h2 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Product <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    Part partA, partB, partC;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\">Product <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Builder builder;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Director</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.builder = builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        builder.buildPartA();</div><div class=\"line\">        builder.buildPartB();</div><div class=\"line\">        builder.buildPartC();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Part</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        ConcreteBuilder builder = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">        Director director = <span class=\"keyword\">new</span> Director(builder);</div><div class=\"line\">        director.construct();</div><div class=\"line\">        Product product = builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>Java之建造者模式(Builder Pattern)<br></p>","more":"<p></p>\n<h2 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1.概念\"></a>1.概念</h2><p><strong><em>建造者模式(Builder Pattern)又叫生成器模式，将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。 （构建与表示分离，同构建不同表示）</em></strong><br>与抽象工厂的区别：在建造者模式里，有个指导者，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造模式可以强制实行一种分步骤进行的建造过程。<br>建造模式是将复杂的内部创建封装在内部，对于外部调用的人来说，只需要传入建造者和建造工具，对于内部是如何建造成成品的，调用者无需关心。<br>举个简单的例子，如汽车，有很多部件，车轮，方向盘，发动机还有各种小零件等等，部件很多，但远不止这些，如何将这些部件装配成一部汽车，这个装配过程也很复杂（需要很好的组装技术）， builder模式就是为了将部件和组装分开。</p>\n<h2 id=\"2-UML图\"><a href=\"#2-UML图\" class=\"headerlink\" title=\"2.UML图\"></a>2.UML图</h2><p><img src=\"/2016/08/10/builderpattern/builder.jpg\" alt=\"\"></p>\n<h2 id=\"3-代码\"><a href=\"#3-代码\" class=\"headerlink\" title=\"3.代码\"></a>3.代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> Product <span class=\"title\">getResult</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Builder</span> </span>&#123;</div><div class=\"line\">    Part partA, partB, partC;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildPartA</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildPartB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildPartC</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\">Product <span class=\"title\">getResult</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Director</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** */</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Builder builder;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Director</span><span class=\"params\">(Builder builder)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.builder = builder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">construct</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        builder.buildPartA();</div><div class=\"line\">        builder.buildPartB();</div><div class=\"line\">        builder.buildPartC();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Part</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        ConcreteBuilder builder = <span class=\"keyword\">new</span> ConcreteBuilder();</div><div class=\"line\">        Director director = <span class=\"keyword\">new</span> Director(builder);</div><div class=\"line\">        director.construct();</div><div class=\"line\">        Product product = builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"byyl","date":"2016-10-17T03:17:42.000Z","description":null,"_content":"\n返璞归真下，今天开始啃编译原理\n\n编译器和解释器的之间的区别是什么？\n\n编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的\n主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) → \n链接器 (Linker) → 可执行程序 (executables)\n\n解释器：又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。\n\n","source":"_posts/byyl.md","raw":"---\ntitle: byyl\ncategories: [编译原理]\ntags: [编译原理]\ndate: 2016-10-17 11:17:42\ndescription:\n---\n\n返璞归真下，今天开始啃编译原理\n\n编译器和解释器的之间的区别是什么？\n\n编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的\n主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) → \n链接器 (Linker) → 可执行程序 (executables)\n\n解释器：又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。\n\n","slug":"byyl","published":1,"updated":"2016-12-09T06:12:37.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yke003cesqrbr0lx97a","content":"<p>返璞归真下，今天开始啃编译原理</p>\n<p>编译器和解释器的之间的区别是什么？</p>\n<p>编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的<br>主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) →<br>链接器 (Linker) → 可执行程序 (executables)</p>\n<p>解释器：又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。</p>\n","excerpt":"","more":"<p>返璞归真下，今天开始啃编译原理</p>\n<p>编译器和解释器的之间的区别是什么？</p>\n<p>编译器：编译器就是将“一种语言（通常为高级语言）”翻译为“另一种语言（通常为低级语言）”的程序。一个现代编译器的<br>主要工作流程：源代码 (source code) → 预处理器 (preprocessor) → 编译器 (compiler) → 目标代码 (object code) →<br>链接器 (Linker) → 可执行程序 (executables)</p>\n<p>解释器：又译为直译器，是一种电脑程序，能够把高级编程语言一行一行直接转译运行。</p>\n"},{"title":"docker 命令","date":"2020-05-29T11:10:32.000Z","_content":"\n## docker 命令\n\ndocker search\n\n### docker pull tomcat\n\n命令格式：`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]`\n\n### docker run  --name  mytomcat -d tomcat:latest \n\n### docker ps\n\ndocker stop\n\ndocker ps a\n\ndocker start\n\ndocker rm\n\ndocker run -d -p 8888:8080 tomcat\n\ndocker images [name]\n\ndocker build -f /usr/local/dockerfile -t [name] path\n\ndocker build -t saleorder:1.0 . \n\ndocker exec ","source":"_posts/docker 命令.md","raw":"---\ntitle: docker 命令\ndate: 2020-05-29 19:10:32\ncategories: [docker]\ntags: [docker]\n---\n\n## docker 命令\n\ndocker search\n\n### docker pull tomcat\n\n命令格式：`docker run [OPTIONS] IMAGE [COMMAND] [ARG...]`\n\n### docker run  --name  mytomcat -d tomcat:latest \n\n### docker ps\n\ndocker stop\n\ndocker ps a\n\ndocker start\n\ndocker rm\n\ndocker run -d -p 8888:8080 tomcat\n\ndocker images [name]\n\ndocker build -f /usr/local/dockerfile -t [name] path\n\ndocker build -t saleorder:1.0 . \n\ndocker exec ","slug":"docker 命令","published":1,"updated":"2020-08-04T04:47:19.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykf003desqrl47mwmjm","content":"<h2 id=\"docker-命令\"><a href=\"#docker-命令\" class=\"headerlink\" title=\"docker 命令\"></a>docker 命令</h2><p>docker search</p>\n<h3 id=\"docker-pull-tomcat\"><a href=\"#docker-pull-tomcat\" class=\"headerlink\" title=\"docker pull tomcat\"></a>docker pull tomcat</h3><p>命令格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>\n<h3 id=\"docker-run-–name-mytomcat-d-tomcat-latest\"><a href=\"#docker-run-–name-mytomcat-d-tomcat-latest\" class=\"headerlink\" title=\"docker run  –name  mytomcat -d tomcat:latest\"></a>docker run  –name  mytomcat -d tomcat:latest</h3><h3 id=\"docker-ps\"><a href=\"#docker-ps\" class=\"headerlink\" title=\"docker ps\"></a>docker ps</h3><p>docker stop</p>\n<p>docker ps a</p>\n<p>docker start</p>\n<p>docker rm</p>\n<p>docker run -d -p 8888:8080 tomcat</p>\n<p>docker images [name]</p>\n<p>docker build -f /usr/local/dockerfile -t [name] path</p>\n<p>docker build -t saleorder:1.0 . </p>\n<p>docker exec </p>\n","excerpt":"","more":"<h2 id=\"docker-命令\"><a href=\"#docker-命令\" class=\"headerlink\" title=\"docker 命令\"></a>docker 命令</h2><p>docker search</p>\n<h3 id=\"docker-pull-tomcat\"><a href=\"#docker-pull-tomcat\" class=\"headerlink\" title=\"docker pull tomcat\"></a>docker pull tomcat</h3><p>命令格式：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>\n<h3 id=\"docker-run-–name-mytomcat-d-tomcat-latest\"><a href=\"#docker-run-–name-mytomcat-d-tomcat-latest\" class=\"headerlink\" title=\"docker run  –name  mytomcat -d tomcat:latest\"></a>docker run  –name  mytomcat -d tomcat:latest</h3><h3 id=\"docker-ps\"><a href=\"#docker-ps\" class=\"headerlink\" title=\"docker ps\"></a>docker ps</h3><p>docker stop</p>\n<p>docker ps a</p>\n<p>docker start</p>\n<p>docker rm</p>\n<p>docker run -d -p 8888:8080 tomcat</p>\n<p>docker images [name]</p>\n<p>docker build -f /usr/local/dockerfile -t [name] path</p>\n<p>docker build -t saleorder:1.0 . </p>\n<p>docker exec </p>\n"},{"title":"Boot2Docker 启动闪退","date":"2016-12-26T02:10:28.000Z","description":"boot2docker 启动问题解决","_content":"\nwindows 安装了个Boot2Docker来玩玩，结果安装完，一点启动出现个对话框就闪退了，百度了下也有人出现同样的问题\nhttp://blog.csdn.net/freeape/article/details/51173258\n\n按照上面的方法试了下出现了一下问题：\n\nuxtheme.dll 这个文件得取的权限才能替换。关闭主题服务，重命名，什么的，replace.exe都试了个遍，不好使。修改了权限\n好不容易替换了这个文件，结果重新启动的时候，屏幕就灰屏了，悲剧了，只好找人做了U盘，用PE把文件换回来，电脑才活了过来\n\n\n------------------------悲惨的经历，系统文件最好还是不要轻易替换，即使替换也得保存个备份-----------------------------\n\n机器活过来后，又重新看了下上面网址说的原因：闪退是跟Oracle VM VirtualBox有关，于是换了个思路，下了个最新版Oracle VM VirtualBox\n\n重新打开Boot2Docker start 启动成功了。\n\n额，替换文件，用PE恢复电脑这个过程是一个痛苦的过程。\n\n所以，Boot2Docker 启动闪退 ，*更新下Oracle VM VirtualBox就好了*，不要替换啥dll文件了\n","source":"_posts/docker.md","raw":"---\ntitle: Boot2Docker 启动闪退\ncategories: [docker]\ntags: [docker]\ndate: 2016-12-26 10:10:28\ndescription: boot2docker 启动问题解决\n---\n\nwindows 安装了个Boot2Docker来玩玩，结果安装完，一点启动出现个对话框就闪退了，百度了下也有人出现同样的问题\nhttp://blog.csdn.net/freeape/article/details/51173258\n\n按照上面的方法试了下出现了一下问题：\n\nuxtheme.dll 这个文件得取的权限才能替换。关闭主题服务，重命名，什么的，replace.exe都试了个遍，不好使。修改了权限\n好不容易替换了这个文件，结果重新启动的时候，屏幕就灰屏了，悲剧了，只好找人做了U盘，用PE把文件换回来，电脑才活了过来\n\n\n------------------------悲惨的经历，系统文件最好还是不要轻易替换，即使替换也得保存个备份-----------------------------\n\n机器活过来后，又重新看了下上面网址说的原因：闪退是跟Oracle VM VirtualBox有关，于是换了个思路，下了个最新版Oracle VM VirtualBox\n\n重新打开Boot2Docker start 启动成功了。\n\n额，替换文件，用PE恢复电脑这个过程是一个痛苦的过程。\n\n所以，Boot2Docker 启动闪退 ，*更新下Oracle VM VirtualBox就好了*，不要替换啥dll文件了\n","slug":"docker","published":1,"updated":"2016-12-26T02:30:42.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykh003gesqrixxev105","content":"<p>windows 安装了个Boot2Docker来玩玩，结果安装完，一点启动出现个对话框就闪退了，百度了下也有人出现同样的问题<br><a href=\"http://blog.csdn.net/freeape/article/details/51173258\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/freeape/article/details/51173258</a></p>\n<p>按照上面的方法试了下出现了一下问题：</p>\n<p>uxtheme.dll 这个文件得取的权限才能替换。关闭主题服务，重命名，什么的，replace.exe都试了个遍，不好使。修改了权限<br>好不容易替换了这个文件，结果重新启动的时候，屏幕就灰屏了，悲剧了，只好找人做了U盘，用PE把文件换回来，电脑才活了过来</p>\n<p>————————悲惨的经历，系统文件最好还是不要轻易替换，即使替换也得保存个备份—————————–</p>\n<p>机器活过来后，又重新看了下上面网址说的原因：闪退是跟Oracle VM VirtualBox有关，于是换了个思路，下了个最新版Oracle VM VirtualBox</p>\n<p>重新打开Boot2Docker start 启动成功了。</p>\n<p>额，替换文件，用PE恢复电脑这个过程是一个痛苦的过程。</p>\n<p>所以，Boot2Docker 启动闪退 ，<em>更新下Oracle VM VirtualBox就好了</em>，不要替换啥dll文件了</p>\n","excerpt":"","more":"<p>windows 安装了个Boot2Docker来玩玩，结果安装完，一点启动出现个对话框就闪退了，百度了下也有人出现同样的问题<br><a href=\"http://blog.csdn.net/freeape/article/details/51173258\">http://blog.csdn.net/freeape/article/details/51173258</a></p>\n<p>按照上面的方法试了下出现了一下问题：</p>\n<p>uxtheme.dll 这个文件得取的权限才能替换。关闭主题服务，重命名，什么的，replace.exe都试了个遍，不好使。修改了权限<br>好不容易替换了这个文件，结果重新启动的时候，屏幕就灰屏了，悲剧了，只好找人做了U盘，用PE把文件换回来，电脑才活了过来</p>\n<p>————————悲惨的经历，系统文件最好还是不要轻易替换，即使替换也得保存个备份—————————–</p>\n<p>机器活过来后，又重新看了下上面网址说的原因：闪退是跟Oracle VM VirtualBox有关，于是换了个思路，下了个最新版Oracle VM VirtualBox</p>\n<p>重新打开Boot2Docker start 启动成功了。</p>\n<p>额，替换文件，用PE恢复电脑这个过程是一个痛苦的过程。</p>\n<p>所以，Boot2Docker 启动闪退 ，<em>更新下Oracle VM VirtualBox就好了</em>，不要替换啥dll文件了</p>\n"},{"title":"dubbo架构设计","date":"2020-05-28T12:10:32.000Z","_content":"\n### dubbo架构设计\n\n\n\n![image-20200821100631881](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200821100631881.png)\n\n\n\n淡蓝色是服务提供者使用到的接口，淡绿色是服务消费者使用接口，中轴线上是双方都用到的接口。\n\n从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表之间的依赖关系，每一层都可以剥离上层被复用，其中，Service和Config层为API，其他各层均为SPI。\n\n绿色小块的为扩展接口，蓝色小块为实现类\n\n蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行是调用链，紫色三角箭头为继承\n\n\n\nconfig配置层：对外配置接口，以ServiceConfig,ReferenceConfig为中心，可以直接初始化配置类，也可以通过spring解析配置生成配置类\n\nproxy服务代理层\n\nregistry注册中心层\n\ncluster路由层\n\nmonitor监控层\n\nptotocol远程调用层\n\nexchange信息交换层\n\ntransport网络传输层\n\nserialize 数据序列化层","source":"_posts/dubbo架构设计.md","raw":"---\ntitle: dubbo架构设计\ndate: 2020-05-28 20:10:32\ncategories: [dubbo]\ntags: [dubbo]\n---\n\n### dubbo架构设计\n\n\n\n![image-20200821100631881](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200821100631881.png)\n\n\n\n淡蓝色是服务提供者使用到的接口，淡绿色是服务消费者使用接口，中轴线上是双方都用到的接口。\n\n从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表之间的依赖关系，每一层都可以剥离上层被复用，其中，Service和Config层为API，其他各层均为SPI。\n\n绿色小块的为扩展接口，蓝色小块为实现类\n\n蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行是调用链，紫色三角箭头为继承\n\n\n\nconfig配置层：对外配置接口，以ServiceConfig,ReferenceConfig为中心，可以直接初始化配置类，也可以通过spring解析配置生成配置类\n\nproxy服务代理层\n\nregistry注册中心层\n\ncluster路由层\n\nmonitor监控层\n\nptotocol远程调用层\n\nexchange信息交换层\n\ntransport网络传输层\n\nserialize 数据序列化层","slug":"dubbo架构设计","published":1,"updated":"2020-09-28T10:48:20.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykj003jesqryjbrq99m","content":"<h3 id=\"dubbo架构设计\"><a href=\"#dubbo架构设计\" class=\"headerlink\" title=\"dubbo架构设计\"></a>dubbo架构设计</h3><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200821100631881.png\" alt=\"image-20200821100631881\"></p>\n<p>淡蓝色是服务提供者使用到的接口，淡绿色是服务消费者使用接口，中轴线上是双方都用到的接口。</p>\n<p>从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表之间的依赖关系，每一层都可以剥离上层被复用，其中，Service和Config层为API，其他各层均为SPI。</p>\n<p>绿色小块的为扩展接口，蓝色小块为实现类</p>\n<p>蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行是调用链，紫色三角箭头为继承</p>\n<p>config配置层：对外配置接口，以ServiceConfig,ReferenceConfig为中心，可以直接初始化配置类，也可以通过spring解析配置生成配置类</p>\n<p>proxy服务代理层</p>\n<p>registry注册中心层</p>\n<p>cluster路由层</p>\n<p>monitor监控层</p>\n<p>ptotocol远程调用层</p>\n<p>exchange信息交换层</p>\n<p>transport网络传输层</p>\n<p>serialize 数据序列化层</p>\n","excerpt":"","more":"<h3 id=\"dubbo架构设计\"><a href=\"#dubbo架构设计\" class=\"headerlink\" title=\"dubbo架构设计\"></a>dubbo架构设计</h3><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200821100631881.png\" alt=\"image-20200821100631881\"></p>\n<p>淡蓝色是服务提供者使用到的接口，淡绿色是服务消费者使用接口，中轴线上是双方都用到的接口。</p>\n<p>从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表之间的依赖关系，每一层都可以剥离上层被复用，其中，Service和Config层为API，其他各层均为SPI。</p>\n<p>绿色小块的为扩展接口，蓝色小块为实现类</p>\n<p>蓝色虚线为初始化过程，即启动时组装链，红色实线为方法调用过程，即运行是调用链，紫色三角箭头为继承</p>\n<p>config配置层：对外配置接口，以ServiceConfig,ReferenceConfig为中心，可以直接初始化配置类，也可以通过spring解析配置生成配置类</p>\n<p>proxy服务代理层</p>\n<p>registry注册中心层</p>\n<p>cluster路由层</p>\n<p>monitor监控层</p>\n<p>ptotocol远程调用层</p>\n<p>exchange信息交换层</p>\n<p>transport网络传输层</p>\n<p>serialize 数据序列化层</p>\n"},{"title":"docker 容器数据卷","date":"2020-05-29T11:10:32.000Z","_content":"\n## docker 容器数据卷\n\ndocker run -it  -v 宿主机目录:/容器目录 镜像名\n\n","source":"_posts/docker 容器数据卷.md","raw":"---\ntitle: docker 容器数据卷\ndate: 2020-05-29 19:10:32\ncategories: [docker]\ntags: [docker]\n---\n\n## docker 容器数据卷\n\ndocker run -it  -v 宿主机目录:/容器目录 镜像名\n\n","slug":"docker 容器数据卷","published":1,"updated":"2020-08-04T04:47:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykm003nesqrnfuw3djq","content":"<h2 id=\"docker-容器数据卷\"><a href=\"#docker-容器数据卷\" class=\"headerlink\" title=\"docker 容器数据卷\"></a>docker 容器数据卷</h2><p>docker run -it  -v 宿主机目录:/容器目录 镜像名</p>\n","excerpt":"","more":"<h2 id=\"docker-容器数据卷\"><a href=\"#docker-容器数据卷\" class=\"headerlink\" title=\"docker 容器数据卷\"></a>docker 容器数据卷</h2><p>docker run -it  -v 宿主机目录:/容器目录 镜像名</p>\n"},{"title":"随笔","date":"2016-09-21T15:22:32.000Z","_content":"\n恍惚之间\n三十了\n我还没有二够啊\n回蓦过去就在眼前\n窥望将来总也看不到边\n似乎又能清清楚楚地看到\n也许就是今天的循环复制\n\n\n\n\n\n","source":"_posts/essay.md","raw":"---\ntitle: 随笔\ndate: 2016-09-21 23:22:32\ncategories: [随笔]\ntags: [随笔]\n---\n\n恍惚之间\n三十了\n我还没有二够啊\n回蓦过去就在眼前\n窥望将来总也看不到边\n似乎又能清清楚楚地看到\n也许就是今天的循环复制\n\n\n\n\n\n","slug":"essay","published":1,"updated":"2016-10-13T07:52:22.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykp003resqri0dpneqp","content":"<p>恍惚之间<br>三十了<br>我还没有二够啊<br>回蓦过去就在眼前<br>窥望将来总也看不到边<br>似乎又能清清楚楚地看到<br>也许就是今天的循环复制</p>\n","excerpt":"","more":"<p>恍惚之间<br>三十了<br>我还没有二够啊<br>回蓦过去就在眼前<br>窥望将来总也看不到边<br>似乎又能清清楚楚地看到<br>也许就是今天的循环复制</p>\n"},{"title":"dubbo的原理","date":"2020-05-28T12:10:32.000Z","_content":"\ndubbo的原理\n\nscp r cm pets\n\n框架设计\n\n启动解析\n\n服务暴露\n\n服务引用\n\n服务调用\n\n","source":"_posts/dubbo的原理.md","raw":"---\ntitle: dubbo的原理\ndate: 2020-05-28 20:10:32\ncategories: [dubbo]\ntags: [dubbo]\n---\n\ndubbo的原理\n\nscp r cm pets\n\n框架设计\n\n启动解析\n\n服务暴露\n\n服务引用\n\n服务调用\n\n","slug":"dubbo的原理","published":1,"updated":"2020-09-28T10:48:02.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykt003vesqrv02qhqcs","content":"<p>dubbo的原理</p>\n<p>scp r cm pets</p>\n<p>框架设计</p>\n<p>启动解析</p>\n<p>服务暴露</p>\n<p>服务引用</p>\n<p>服务调用</p>\n","excerpt":"","more":"<p>dubbo的原理</p>\n<p>scp r cm pets</p>\n<p>框架设计</p>\n<p>启动解析</p>\n<p>服务暴露</p>\n<p>服务引用</p>\n<p>服务调用</p>\n"},{"title":"个人小记","date":"2016-09-22T02:23:15.000Z","_content":"   耳机中播放着有网易云音乐搜到Alizee的歌，歌词是法文的，尽管听不懂，但是Alizee的声音和音乐的节奏\n总是能让我心情舒缓。\n<!-- more -->\n   很长的时间没有这样把自己的所思所想化为文字了，记不清上次这样是什么时候了，也许是某天突如其来的\n兴致写过吧。现在已经记不清内容，不过可以确定的是那些文字是用笔倾吐的。今天并不是我第一次用键盘表达\n然而确是第一次强烈地想通过键盘回想记录和表达心情。\n### 毕业后    \n   某一天，经过了四年“中国式”大学生活的我毕业了（想找四个字来形容下我的大学生活，一时竟想不出），\n毕业的我是兴奋的，被校园禁锢了近20年，终于不用再天天啃书本了，虽然大学并没有真正的啃过一本书。在学\n校签了三方协议去一家汽车公司工作，也算是专业对口，然而我还是太年轻，车间的工作真的是适应不了。\n   终于迎来了人生比较充实的生活，不顾家人的反对，一个人背着行李来北京培训了java编程，本来是想学习\n Android的，却阴差阳错的学习了javaEE，无论如何，生活充实了。周一到周六早起晚睡的学习语法，练习代码，\n 周日星期天也不曾放松，由于大学有C语言的基础，学起来也不是很吃力，也第一次感到大学学到的知识的实用\n 保持着在培训机构每天第一批人去上学，最后一批走的习惯，总算修炼小成。\n### 电子商务很火\n   记得那年电子商务很火，我的第一份工作就是开发电子商务系统，因为公司是重头开始做电子商务系统，而我\n 是被招进公司技术部门的第3个员工，所以结果就是加班，不停地加班，996++这个状态一直持续到我从这家公司\n 离职。现在想起来，中间偶尔有个双休，简直不要太爽，周六休息完，一想周日还能休息，那感觉！然而，也正\n 是这段时间，我的技术得到了很大的提升。\n### 我要搞IOS\n   几个月的IOS开发生活后，又回到了JavaEE开发上，转了个圈。事实说明，学习的环境很重要... ,然后这个时\n 期，我试着用了阿里云，搭建了svn、jira，搞了代码自动生成工具...\n### 猴子出世\n   用户1000W了，网站相对稳定\n### 到此还没完\n              \n     \n        \n        \n        \n        \n","source":"_posts/essay0922.md","raw":"---\ntitle: 个人小记\ndate: 2016-09-22 10:23:15\ncategories: [随笔]\ntags: [随笔]\n---\n   耳机中播放着有网易云音乐搜到Alizee的歌，歌词是法文的，尽管听不懂，但是Alizee的声音和音乐的节奏\n总是能让我心情舒缓。\n<!-- more -->\n   很长的时间没有这样把自己的所思所想化为文字了，记不清上次这样是什么时候了，也许是某天突如其来的\n兴致写过吧。现在已经记不清内容，不过可以确定的是那些文字是用笔倾吐的。今天并不是我第一次用键盘表达\n然而确是第一次强烈地想通过键盘回想记录和表达心情。\n### 毕业后    \n   某一天，经过了四年“中国式”大学生活的我毕业了（想找四个字来形容下我的大学生活，一时竟想不出），\n毕业的我是兴奋的，被校园禁锢了近20年，终于不用再天天啃书本了，虽然大学并没有真正的啃过一本书。在学\n校签了三方协议去一家汽车公司工作，也算是专业对口，然而我还是太年轻，车间的工作真的是适应不了。\n   终于迎来了人生比较充实的生活，不顾家人的反对，一个人背着行李来北京培训了java编程，本来是想学习\n Android的，却阴差阳错的学习了javaEE，无论如何，生活充实了。周一到周六早起晚睡的学习语法，练习代码，\n 周日星期天也不曾放松，由于大学有C语言的基础，学起来也不是很吃力，也第一次感到大学学到的知识的实用\n 保持着在培训机构每天第一批人去上学，最后一批走的习惯，总算修炼小成。\n### 电子商务很火\n   记得那年电子商务很火，我的第一份工作就是开发电子商务系统，因为公司是重头开始做电子商务系统，而我\n 是被招进公司技术部门的第3个员工，所以结果就是加班，不停地加班，996++这个状态一直持续到我从这家公司\n 离职。现在想起来，中间偶尔有个双休，简直不要太爽，周六休息完，一想周日还能休息，那感觉！然而，也正\n 是这段时间，我的技术得到了很大的提升。\n### 我要搞IOS\n   几个月的IOS开发生活后，又回到了JavaEE开发上，转了个圈。事实说明，学习的环境很重要... ,然后这个时\n 期，我试着用了阿里云，搭建了svn、jira，搞了代码自动生成工具...\n### 猴子出世\n   用户1000W了，网站相对稳定\n### 到此还没完\n              \n     \n        \n        \n        \n        \n","slug":"essay0922","published":1,"updated":"2016-10-11T04:52:52.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ykv003zesqrkvuhyaps","content":"<p>   耳机中播放着有网易云音乐搜到Alizee的歌，歌词是法文的，尽管听不懂，但是Alizee的声音和音乐的节奏<br>总是能让我心情舒缓。<br><a id=\"more\"></a><br>   很长的时间没有这样把自己的所思所想化为文字了，记不清上次这样是什么时候了，也许是某天突如其来的<br>兴致写过吧。现在已经记不清内容，不过可以确定的是那些文字是用笔倾吐的。今天并不是我第一次用键盘表达<br>然而确是第一次强烈地想通过键盘回想记录和表达心情。</p>\n<h3 id=\"毕业后\"><a href=\"#毕业后\" class=\"headerlink\" title=\"毕业后\"></a>毕业后</h3><p>   某一天，经过了四年“中国式”大学生活的我毕业了（想找四个字来形容下我的大学生活，一时竟想不出），<br>毕业的我是兴奋的，被校园禁锢了近20年，终于不用再天天啃书本了，虽然大学并没有真正的啃过一本书。在学<br>校签了三方协议去一家汽车公司工作，也算是专业对口，然而我还是太年轻，车间的工作真的是适应不了。<br>   终于迎来了人生比较充实的生活，不顾家人的反对，一个人背着行李来北京培训了java编程，本来是想学习<br> Android的，却阴差阳错的学习了javaEE，无论如何，生活充实了。周一到周六早起晚睡的学习语法，练习代码，<br> 周日星期天也不曾放松，由于大学有C语言的基础，学起来也不是很吃力，也第一次感到大学学到的知识的实用<br> 保持着在培训机构每天第一批人去上学，最后一批走的习惯，总算修炼小成。</p>\n<h3 id=\"电子商务很火\"><a href=\"#电子商务很火\" class=\"headerlink\" title=\"电子商务很火\"></a>电子商务很火</h3><p>   记得那年电子商务很火，我的第一份工作就是开发电子商务系统，因为公司是重头开始做电子商务系统，而我<br> 是被招进公司技术部门的第3个员工，所以结果就是加班，不停地加班，996++这个状态一直持续到我从这家公司<br> 离职。现在想起来，中间偶尔有个双休，简直不要太爽，周六休息完，一想周日还能休息，那感觉！然而，也正<br> 是这段时间，我的技术得到了很大的提升。</p>\n<h3 id=\"我要搞IOS\"><a href=\"#我要搞IOS\" class=\"headerlink\" title=\"我要搞IOS\"></a>我要搞IOS</h3><p>   几个月的IOS开发生活后，又回到了JavaEE开发上，转了个圈。事实说明，学习的环境很重要… ,然后这个时<br> 期，我试着用了阿里云，搭建了svn、jira，搞了代码自动生成工具…</p>\n<h3 id=\"猴子出世\"><a href=\"#猴子出世\" class=\"headerlink\" title=\"猴子出世\"></a>猴子出世</h3><p>   用户1000W了，网站相对稳定</p>\n<h3 id=\"到此还没完\"><a href=\"#到此还没完\" class=\"headerlink\" title=\"到此还没完\"></a>到此还没完</h3>","excerpt":"<p>   耳机中播放着有网易云音乐搜到Alizee的歌，歌词是法文的，尽管听不懂，但是Alizee的声音和音乐的节奏<br>总是能让我心情舒缓。<br></p>","more":"<br>   很长的时间没有这样把自己的所思所想化为文字了，记不清上次这样是什么时候了，也许是某天突如其来的<br>兴致写过吧。现在已经记不清内容，不过可以确定的是那些文字是用笔倾吐的。今天并不是我第一次用键盘表达<br>然而确是第一次强烈地想通过键盘回想记录和表达心情。<p></p>\n<h3 id=\"毕业后\"><a href=\"#毕业后\" class=\"headerlink\" title=\"毕业后\"></a>毕业后</h3><p>   某一天，经过了四年“中国式”大学生活的我毕业了（想找四个字来形容下我的大学生活，一时竟想不出），<br>毕业的我是兴奋的，被校园禁锢了近20年，终于不用再天天啃书本了，虽然大学并没有真正的啃过一本书。在学<br>校签了三方协议去一家汽车公司工作，也算是专业对口，然而我还是太年轻，车间的工作真的是适应不了。<br>   终于迎来了人生比较充实的生活，不顾家人的反对，一个人背着行李来北京培训了java编程，本来是想学习<br> Android的，却阴差阳错的学习了javaEE，无论如何，生活充实了。周一到周六早起晚睡的学习语法，练习代码，<br> 周日星期天也不曾放松，由于大学有C语言的基础，学起来也不是很吃力，也第一次感到大学学到的知识的实用<br> 保持着在培训机构每天第一批人去上学，最后一批走的习惯，总算修炼小成。</p>\n<h3 id=\"电子商务很火\"><a href=\"#电子商务很火\" class=\"headerlink\" title=\"电子商务很火\"></a>电子商务很火</h3><p>   记得那年电子商务很火，我的第一份工作就是开发电子商务系统，因为公司是重头开始做电子商务系统，而我<br> 是被招进公司技术部门的第3个员工，所以结果就是加班，不停地加班，996++这个状态一直持续到我从这家公司<br> 离职。现在想起来，中间偶尔有个双休，简直不要太爽，周六休息完，一想周日还能休息，那感觉！然而，也正<br> 是这段时间，我的技术得到了很大的提升。</p>\n<h3 id=\"我要搞IOS\"><a href=\"#我要搞IOS\" class=\"headerlink\" title=\"我要搞IOS\"></a>我要搞IOS</h3><p>   几个月的IOS开发生活后，又回到了JavaEE开发上，转了个圈。事实说明，学习的环境很重要… ,然后这个时<br> 期，我试着用了阿里云，搭建了svn、jira，搞了代码自动生成工具…</p>\n<h3 id=\"猴子出世\"><a href=\"#猴子出世\" class=\"headerlink\" title=\"猴子出世\"></a>猴子出世</h3><p>   用户1000W了，网站相对稳定</p>\n<h3 id=\"到此还没完\"><a href=\"#到此还没完\" class=\"headerlink\" title=\"到此还没完\"></a>到此还没完</h3>"},{"title":"微信小程序","date":"2016-09-22T15:10:26.000Z","_content":"微信小程序开发参考资源\n\n[https://github.com/Aufree/awesome-wechat-weapp](https://github.com/Aufree/awesome-wechat-weapp)\n[https://github.com/justjavac/awesome-wechat-weapp](https://github.com/justjavac/awesome-wechat-weapp)\n","source":"_posts/essay0923.md","raw":"---\ntitle: 微信小程序\ndate: 2016-09-22 23:10:26\ncategories: [微信]\ntags: [微信小程序]\n---\n微信小程序开发参考资源\n\n[https://github.com/Aufree/awesome-wechat-weapp](https://github.com/Aufree/awesome-wechat-weapp)\n[https://github.com/justjavac/awesome-wechat-weapp](https://github.com/justjavac/awesome-wechat-weapp)\n","slug":"essay0923","published":1,"updated":"2016-09-23T06:42:53.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yky0043esqrlzrlgt24","content":"<p>微信小程序开发参考资源</p>\n<p><a href=\"https://github.com/Aufree/awesome-wechat-weapp\" target=\"_blank\" rel=\"external\">https://github.com/Aufree/awesome-wechat-weapp</a><br><a href=\"https://github.com/justjavac/awesome-wechat-weapp\" target=\"_blank\" rel=\"external\">https://github.com/justjavac/awesome-wechat-weapp</a></p>\n","excerpt":"","more":"<p>微信小程序开发参考资源</p>\n<p><a href=\"https://github.com/Aufree/awesome-wechat-weapp\">https://github.com/Aufree/awesome-wechat-weapp</a><br><a href=\"https://github.com/justjavac/awesome-wechat-weapp\">https://github.com/justjavac/awesome-wechat-weapp</a></p>\n"},{"title":"在多台电脑上使用hexo","date":"2016-08-01T04:42:35.000Z","_content":"\n家里和公司可以同时写了\n<!-- more -->\n### 1.上传初始电脑上的Hexo源文件到github的“hexo”仓库\n    git init\n    git add README.md\n    git commit -m \"first commit\"\n    git remote add origin git@github.com:beijinguang/hexo.git\n    git push -u origin master\n### 2.在其他电脑上安装hexo环境，gitclone “hexo”\n    git clone git@github.com:beijinguang/hexo.git\n### 3.所有电脑上都先检查更新再修改上传\n    a.建议先检查更新git pull，将本地博客源文件更新至最新版本:git pull\n    b.然后可以新建或修改博客内容，进行预览等操作\n    c.新建博客后，先同步Hexo源文件，将修改后的源文件同步至github:\n     git add . ,git commit -m \"record\", git push orign master\n    d.然后再执行Hexo的生成文件和部署指令:hexo generate ,hexo deploy\n\n","source":"_posts/hexouser.md","raw":"---\ntitle: 在多台电脑上使用hexo\ndate: 2016-08-01 12:42:35\ncategories: [Hexo]\ntags: [Hexo]\n---\n\n家里和公司可以同时写了\n<!-- more -->\n### 1.上传初始电脑上的Hexo源文件到github的“hexo”仓库\n    git init\n    git add README.md\n    git commit -m \"first commit\"\n    git remote add origin git@github.com:beijinguang/hexo.git\n    git push -u origin master\n### 2.在其他电脑上安装hexo环境，gitclone “hexo”\n    git clone git@github.com:beijinguang/hexo.git\n### 3.所有电脑上都先检查更新再修改上传\n    a.建议先检查更新git pull，将本地博客源文件更新至最新版本:git pull\n    b.然后可以新建或修改博客内容，进行预览等操作\n    c.新建博客后，先同步Hexo源文件，将修改后的源文件同步至github:\n     git add . ,git commit -m \"record\", git push orign master\n    d.然后再执行Hexo的生成文件和部署指令:hexo generate ,hexo deploy\n\n","slug":"hexouser","published":1,"updated":"2016-09-22T05:44:02.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yl10046esqru8lxhcqj","content":"<p>家里和公司可以同时写了<br><a id=\"more\"></a></p>\n<h3 id=\"1-上传初始电脑上的Hexo源文件到github的“hexo”仓库\"><a href=\"#1-上传初始电脑上的Hexo源文件到github的“hexo”仓库\" class=\"headerlink\" title=\"1.上传初始电脑上的Hexo源文件到github的“hexo”仓库\"></a>1.上传初始电脑上的Hexo源文件到github的“hexo”仓库</h3><pre><code>git init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit remote add origin git@github.com:beijinguang/hexo.git\ngit push -u origin master\n</code></pre><h3 id=\"2-在其他电脑上安装hexo环境，gitclone-“hexo”\"><a href=\"#2-在其他电脑上安装hexo环境，gitclone-“hexo”\" class=\"headerlink\" title=\"2.在其他电脑上安装hexo环境，gitclone “hexo”\"></a>2.在其他电脑上安装hexo环境，gitclone “hexo”</h3><pre><code>git clone git@github.com:beijinguang/hexo.git\n</code></pre><h3 id=\"3-所有电脑上都先检查更新再修改上传\"><a href=\"#3-所有电脑上都先检查更新再修改上传\" class=\"headerlink\" title=\"3.所有电脑上都先检查更新再修改上传\"></a>3.所有电脑上都先检查更新再修改上传</h3><pre><code>a.建议先检查更新git pull，将本地博客源文件更新至最新版本:git pull\nb.然后可以新建或修改博客内容，进行预览等操作\nc.新建博客后，先同步Hexo源文件，将修改后的源文件同步至github:\n git add . ,git commit -m &quot;record&quot;, git push orign master\nd.然后再执行Hexo的生成文件和部署指令:hexo generate ,hexo deploy\n</code></pre>","excerpt":"<p>家里和公司可以同时写了<br></p>","more":"<p></p>\n<h3 id=\"1-上传初始电脑上的Hexo源文件到github的“hexo”仓库\"><a href=\"#1-上传初始电脑上的Hexo源文件到github的“hexo”仓库\" class=\"headerlink\" title=\"1.上传初始电脑上的Hexo源文件到github的“hexo”仓库\"></a>1.上传初始电脑上的Hexo源文件到github的“hexo”仓库</h3><pre><code>git init\ngit add README.md\ngit commit -m &quot;first commit&quot;\ngit remote add origin git@github.com:beijinguang/hexo.git\ngit push -u origin master\n</code></pre><h3 id=\"2-在其他电脑上安装hexo环境，gitclone-“hexo”\"><a href=\"#2-在其他电脑上安装hexo环境，gitclone-“hexo”\" class=\"headerlink\" title=\"2.在其他电脑上安装hexo环境，gitclone “hexo”\"></a>2.在其他电脑上安装hexo环境，gitclone “hexo”</h3><pre><code>git clone git@github.com:beijinguang/hexo.git\n</code></pre><h3 id=\"3-所有电脑上都先检查更新再修改上传\"><a href=\"#3-所有电脑上都先检查更新再修改上传\" class=\"headerlink\" title=\"3.所有电脑上都先检查更新再修改上传\"></a>3.所有电脑上都先检查更新再修改上传</h3><pre><code>a.建议先检查更新git pull，将本地博客源文件更新至最新版本:git pull\nb.然后可以新建或修改博客内容，进行预览等操作\nc.新建博客后，先同步Hexo源文件，将修改后的源文件同步至github:\n git add . ,git commit -m &quot;record&quot;, git push orign master\nd.然后再执行Hexo的生成文件和部署指令:hexo generate ,hexo deploy\n</code></pre>"},{"title":"hexo","date":"2016-07-30T09:58:27.000Z","_content":"\nhexo生成的第一篇文章\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hi-hexo.md","raw":"---\ntitle: hexo\ndate: 2016-07-30 17:58:27\ncategories: [Hexo]\ntags: [Hexo]\n---\n\nhexo生成的第一篇文章\n<!-- more -->\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hi-hexo","published":1,"updated":"2016-09-21T08:13:12.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yl5004aesqr546e65i5","content":"<p>hexo生成的第一篇文章<br><a id=\"more\"></a></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>hexo生成的第一篇文章<br></p>","more":"<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"hexo + github建站","date":"2016-10-09T09:45:43.000Z","description":null,"_content":"\n### 使用hexo前提\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n- [Node.js](https://nodejs.org/en/)\n- [Git](https://git-scm.com/)\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n```sh\nnpm install -g hexo-cli\n```\n### 新建一个blog\n```sh\nhexo init [folder]\n```\n","source":"_posts/hexo.md","raw":"---\ntitle: hexo + github建站\ncategories: [hexo]\ntags: [hexo]\ndate: 2016-10-09 17:45:43\ndescription:\n---\n\n### 使用hexo前提\n安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：\n- [Node.js](https://nodejs.org/en/)\n- [Git](https://git-scm.com/)\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n```sh\nnpm install -g hexo-cli\n```\n### 新建一个blog\n```sh\nhexo init [folder]\n```\n","slug":"hexo","published":1,"updated":"2016-11-14T10:05:41.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yl7004desqrrrnyqaor","content":"<h3 id=\"使用hexo前提\"><a href=\"#使用hexo前提\" class=\"headerlink\" title=\"使用hexo前提\"></a>使用hexo前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"新建一个blog\"><a href=\"#新建一个blog\" class=\"headerlink\" title=\"新建一个blog\"></a>新建一个blog</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder]</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"使用hexo前提\"><a href=\"#使用hexo前提\" class=\"headerlink\" title=\"使用hexo前提\"></a>使用hexo前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>\n<ul>\n<li><a href=\"https://nodejs.org/en/\">Node.js</a></li>\n<li><a href=\"https://git-scm.com/\">Git</a><br>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"新建一个blog\"><a href=\"#新建一个blog\" class=\"headerlink\" title=\"新建一个blog\"></a>新建一个blog</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init [folder]</div></pre></td></tr></table></figure>\n"},{"title":"汇编语言(一)","date":"2016-10-18T06:18:58.000Z","description":"汇编语言检测","_content":"\n汇编语言\n（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 13位。\n（2）1KB的存储器有 1024 个存储单元，存储单元的编号从 0 到 1023 。\n（3）1KB的存储器可以存储 8192（2^13） 个bit， 1024个Byte。\n（4）1GB是 1073741824 （2^30） 个Byte、1MB是 1048576（2^20） 个Byte、1KB是 1024（2^10）个Byte。\n（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为:64 （KB）、 1 （MB）、 16 （MB）、 4 （GB）。\n（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: 1 （B）、 1 （B）、 2 （B）、 2 （B）、 4 （B）。\n（7）从内存中读取1024字节的数据，8086至少要读 512 次，80386至少要读 256 次。\n（8）在存储器中，数据和程序以 二进制 形式存放\n\n解题过程：\n（1）1KB=1024B，8KB=1024B*8=2^N，N=13。\n（2）存储器的容量是以字节为最小单位来计算的，1KB=1024B。\n（3）8Bit=1Byte，1024Byte=1KB（1KB=1024B=1024B*8Bit）。\n（4）1GB=1073741824B（即2^30）1MB=1048576B（即2^20）1KB=1024B（即2^10）。\n（5）一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。（一个内存单元=1Byte）。\n（6）8根数据总线一次可以传送8位二进制数据（即一个字节）。\n（7）8086的数据总线宽度为16根（即一次传送的数据为2B）1024B/2B=512，同理1024B/4B=256。\n（8）在存储器中指令和数据没有任何区别，都是二进制信息。\n\n\n","source":"_posts/huibian.md","raw":"---\ntitle: 汇编语言(一)\ncategories: [汇编语言]\ntags: [汇编语言]\ndate: 2016-10-18 14:18:58\ndescription: 汇编语言检测\n---\n\n汇编语言\n（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 13位。\n（2）1KB的存储器有 1024 个存储单元，存储单元的编号从 0 到 1023 。\n（3）1KB的存储器可以存储 8192（2^13） 个bit， 1024个Byte。\n（4）1GB是 1073741824 （2^30） 个Byte、1MB是 1048576（2^20） 个Byte、1KB是 1024（2^10）个Byte。\n（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为:64 （KB）、 1 （MB）、 16 （MB）、 4 （GB）。\n（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: 1 （B）、 1 （B）、 2 （B）、 2 （B）、 4 （B）。\n（7）从内存中读取1024字节的数据，8086至少要读 512 次，80386至少要读 256 次。\n（8）在存储器中，数据和程序以 二进制 形式存放\n\n解题过程：\n（1）1KB=1024B，8KB=1024B*8=2^N，N=13。\n（2）存储器的容量是以字节为最小单位来计算的，1KB=1024B。\n（3）8Bit=1Byte，1024Byte=1KB（1KB=1024B=1024B*8Bit）。\n（4）1GB=1073741824B（即2^30）1MB=1048576B（即2^20）1KB=1024B（即2^10）。\n（5）一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。（一个内存单元=1Byte）。\n（6）8根数据总线一次可以传送8位二进制数据（即一个字节）。\n（7）8086的数据总线宽度为16根（即一次传送的数据为2B）1024B/2B=512，同理1024B/4B=256。\n（8）在存储器中指令和数据没有任何区别，都是二进制信息。\n\n\n","slug":"huibian","published":1,"updated":"2016-10-18T06:24:23.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yla004hesqro3co2bwx","content":"<p>汇编语言<br>（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 13位。<br>（2）1KB的存储器有 1024 个存储单元，存储单元的编号从 0 到 1023 。<br>（3）1KB的存储器可以存储 8192（2^13） 个bit， 1024个Byte。<br>（4）1GB是 1073741824 （2^30） 个Byte、1MB是 1048576（2^20） 个Byte、1KB是 1024（2^10）个Byte。<br>（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为:64 （KB）、 1 （MB）、 16 （MB）、 4 （GB）。<br>（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: 1 （B）、 1 （B）、 2 （B）、 2 （B）、 4 （B）。<br>（7）从内存中读取1024字节的数据，8086至少要读 512 次，80386至少要读 256 次。<br>（8）在存储器中，数据和程序以 二进制 形式存放</p>\n<p>解题过程：<br>（1）1KB=1024B，8KB=1024B<em>8=2^N，N=13。<br>（2）存储器的容量是以字节为最小单位来计算的，1KB=1024B。<br>（3）8Bit=1Byte，1024Byte=1KB（1KB=1024B=1024B</em>8Bit）。<br>（4）1GB=1073741824B（即2^30）1MB=1048576B（即2^20）1KB=1024B（即2^10）。<br>（5）一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。（一个内存单元=1Byte）。<br>（6）8根数据总线一次可以传送8位二进制数据（即一个字节）。<br>（7）8086的数据总线宽度为16根（即一次传送的数据为2B）1024B/2B=512，同理1024B/4B=256。<br>（8）在存储器中指令和数据没有任何区别，都是二进制信息。</p>\n","excerpt":"","more":"<p>汇编语言<br>（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 13位。<br>（2）1KB的存储器有 1024 个存储单元，存储单元的编号从 0 到 1023 。<br>（3）1KB的存储器可以存储 8192（2^13） 个bit， 1024个Byte。<br>（4）1GB是 1073741824 （2^30） 个Byte、1MB是 1048576（2^20） 个Byte、1KB是 1024（2^10）个Byte。<br>（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为:64 （KB）、 1 （MB）、 16 （MB）、 4 （GB）。<br>（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: 1 （B）、 1 （B）、 2 （B）、 2 （B）、 4 （B）。<br>（7）从内存中读取1024字节的数据，8086至少要读 512 次，80386至少要读 256 次。<br>（8）在存储器中，数据和程序以 二进制 形式存放</p>\n<p>解题过程：<br>（1）1KB=1024B，8KB=1024B<em>8=2^N，N=13。<br>（2）存储器的容量是以字节为最小单位来计算的，1KB=1024B。<br>（3）8Bit=1Byte，1024Byte=1KB（1KB=1024B=1024B</em>8Bit）。<br>（4）1GB=1073741824B（即2^30）1MB=1048576B（即2^20）1KB=1024B（即2^10）。<br>（5）一个CPU有N根地址线，则可以说这个CPU的地址总线的宽度为N。这样的CPU最多可以寻找2的N次方个内存单元。（一个内存单元=1Byte）。<br>（6）8根数据总线一次可以传送8位二进制数据（即一个字节）。<br>（7）8086的数据总线宽度为16根（即一次传送的数据为2B）1024B/2B=512，同理1024B/4B=256。<br>（8）在存储器中指令和数据没有任何区别，都是二进制信息。</p>\n"},{"title":"pacakge-info.java","date":"2017-01-06T08:34:00.000Z","description":"包注释","_content":"### pacakge-info.java介绍\npacakge-info.java是一个Java文件，可以添加到任何的Java源码包中。pacakge-info.java的目标是提供一个包级的文档说明或者是包级的注释。\n\npacakge-info.java文件中，唯一要求包含的内容是包的声明语句，比如：\n\npackage edu.jiangxin.tools;\n包文档\n在Java 5之前，包级的文档是package.html，是通过JavaDoc生成的。而在Java 5以上版本，包的描述以及相关的文档都可以写入pacakge-info.java文件，它也用于JavaDoc的生成。比如：\n```java\n    /**\n     * 超卡-app接口控制器包\n     */\n    package com.sc.controller;\n```\n\n### 生成javadoc\nIntelliJ IDEA 生成javadoc时，在＂Tools->Gerenate JavaDoc\"面版的 \n\n＂Other command line arguments:\"栏里输入＂-encoding utf-8 -charset utf-8＂, \n\n就是以utf-8编码读取文件和生成javadoc\n","source":"_posts/java1.md","raw":"---\ntitle: pacakge-info.java\ncategories: [java]\ntags: [java]\ndate: 2017-01-06 16:34:00\ndescription: 包注释\n---\n### pacakge-info.java介绍\npacakge-info.java是一个Java文件，可以添加到任何的Java源码包中。pacakge-info.java的目标是提供一个包级的文档说明或者是包级的注释。\n\npacakge-info.java文件中，唯一要求包含的内容是包的声明语句，比如：\n\npackage edu.jiangxin.tools;\n包文档\n在Java 5之前，包级的文档是package.html，是通过JavaDoc生成的。而在Java 5以上版本，包的描述以及相关的文档都可以写入pacakge-info.java文件，它也用于JavaDoc的生成。比如：\n```java\n    /**\n     * 超卡-app接口控制器包\n     */\n    package com.sc.controller;\n```\n\n### 生成javadoc\nIntelliJ IDEA 生成javadoc时，在＂Tools->Gerenate JavaDoc\"面版的 \n\n＂Other command line arguments:\"栏里输入＂-encoding utf-8 -charset utf-8＂, \n\n就是以utf-8编码读取文件和生成javadoc\n","slug":"java1","published":1,"updated":"2017-01-06T08:45:31.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylc004jesqrcl2i9ibi","content":"<h3 id=\"pacakge-info-java介绍\"><a href=\"#pacakge-info-java介绍\" class=\"headerlink\" title=\"pacakge-info.java介绍\"></a>pacakge-info.java介绍</h3><p>pacakge-info.java是一个Java文件，可以添加到任何的Java源码包中。pacakge-info.java的目标是提供一个包级的文档说明或者是包级的注释。</p>\n<p>pacakge-info.java文件中，唯一要求包含的内容是包的声明语句，比如：</p>\n<p>package edu.jiangxin.tools;<br>包文档<br>在Java 5之前，包级的文档是package.html，是通过JavaDoc生成的。而在Java 5以上版本，包的描述以及相关的文档都可以写入pacakge-info.java文件，它也用于JavaDoc的生成。比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 超卡-app接口控制器包</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> com.sc.controller;</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成javadoc\"><a href=\"#生成javadoc\" class=\"headerlink\" title=\"生成javadoc\"></a>生成javadoc</h3><p>IntelliJ IDEA 生成javadoc时，在＂Tools-&gt;Gerenate JavaDoc”面版的 </p>\n<p>＂Other command line arguments:”栏里输入＂-encoding utf-8 -charset utf-8＂, </p>\n<p>就是以utf-8编码读取文件和生成javadoc</p>\n","excerpt":"","more":"<h3 id=\"pacakge-info-java介绍\"><a href=\"#pacakge-info-java介绍\" class=\"headerlink\" title=\"pacakge-info.java介绍\"></a>pacakge-info.java介绍</h3><p>pacakge-info.java是一个Java文件，可以添加到任何的Java源码包中。pacakge-info.java的目标是提供一个包级的文档说明或者是包级的注释。</p>\n<p>pacakge-info.java文件中，唯一要求包含的内容是包的声明语句，比如：</p>\n<p>package edu.jiangxin.tools;<br>包文档<br>在Java 5之前，包级的文档是package.html，是通过JavaDoc生成的。而在Java 5以上版本，包的描述以及相关的文档都可以写入pacakge-info.java文件，它也用于JavaDoc的生成。比如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 超卡-app接口控制器包</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">package</span> com.sc.controller;</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成javadoc\"><a href=\"#生成javadoc\" class=\"headerlink\" title=\"生成javadoc\"></a>生成javadoc</h3><p>IntelliJ IDEA 生成javadoc时，在＂Tools-&gt;Gerenate JavaDoc”面版的 </p>\n<p>＂Other command line arguments:”栏里输入＂-encoding utf-8 -charset utf-8＂, </p>\n<p>就是以utf-8编码读取文件和生成javadoc</p>\n"},{"title":"Java API 学习之ClassLoader","date":"2016-12-08T02:13:42.000Z","description":"ClassLoader","_content":"\n### 基本信息\n- 包：java.lang\n- 父类：java.lang.Object\n- 类属性：抽象类\n- 定义语句：public abstract class ClassLoader extends Object\n\n### 概念和用途\n类加载器是负责加载类的对象。如果给定类的二进制名称，那么类加载器会试图查找或生成构成类定义的数据。一般策略是将名称转换\n为某个文件名，然后从文件系统读取该名称的“类文件”。\n每个 Class 对象都包含一个对定义它的 ClassLoader 的引用。每个Class有一个getClassLoader()\n数组类的 Class 对象不是由类加载器创建的，而是由 Java 运行时根据需要自动创建。数组类的类加载器由 Class.getClassLoader() \n返回，该加载器与其元素类型的类加载器是相同的；如果该元素类型是基本类型，则该数组类没有类加载器。","source":"_posts/javaapi1.md","raw":"---\ntitle: Java API 学习之ClassLoader\ncategories: [java]\ntags: [java]\ndate: 2016-12-08 10:13:42\ndescription: ClassLoader\n---\n\n### 基本信息\n- 包：java.lang\n- 父类：java.lang.Object\n- 类属性：抽象类\n- 定义语句：public abstract class ClassLoader extends Object\n\n### 概念和用途\n类加载器是负责加载类的对象。如果给定类的二进制名称，那么类加载器会试图查找或生成构成类定义的数据。一般策略是将名称转换\n为某个文件名，然后从文件系统读取该名称的“类文件”。\n每个 Class 对象都包含一个对定义它的 ClassLoader 的引用。每个Class有一个getClassLoader()\n数组类的 Class 对象不是由类加载器创建的，而是由 Java 运行时根据需要自动创建。数组类的类加载器由 Class.getClassLoader() \n返回，该加载器与其元素类型的类加载器是相同的；如果该元素类型是基本类型，则该数组类没有类加载器。","slug":"javaapi1","published":1,"updated":"2016-12-22T01:47:43.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yle004mesqrgkoeqclm","content":"<h3 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h3><ul>\n<li>包：java.lang</li>\n<li>父类：java.lang.Object</li>\n<li>类属性：抽象类</li>\n<li>定义语句：public abstract class ClassLoader extends Object</li>\n</ul>\n<h3 id=\"概念和用途\"><a href=\"#概念和用途\" class=\"headerlink\" title=\"概念和用途\"></a>概念和用途</h3><p>类加载器是负责加载类的对象。如果给定类的二进制名称，那么类加载器会试图查找或生成构成类定义的数据。一般策略是将名称转换<br>为某个文件名，然后从文件系统读取该名称的“类文件”。<br>每个 Class 对象都包含一个对定义它的 ClassLoader 的引用。每个Class有一个getClassLoader()<br>数组类的 Class 对象不是由类加载器创建的，而是由 Java 运行时根据需要自动创建。数组类的类加载器由 Class.getClassLoader()<br>返回，该加载器与其元素类型的类加载器是相同的；如果该元素类型是基本类型，则该数组类没有类加载器。</p>\n","excerpt":"","more":"<h3 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h3><ul>\n<li>包：java.lang</li>\n<li>父类：java.lang.Object</li>\n<li>类属性：抽象类</li>\n<li>定义语句：public abstract class ClassLoader extends Object</li>\n</ul>\n<h3 id=\"概念和用途\"><a href=\"#概念和用途\" class=\"headerlink\" title=\"概念和用途\"></a>概念和用途</h3><p>类加载器是负责加载类的对象。如果给定类的二进制名称，那么类加载器会试图查找或生成构成类定义的数据。一般策略是将名称转换<br>为某个文件名，然后从文件系统读取该名称的“类文件”。<br>每个 Class 对象都包含一个对定义它的 ClassLoader 的引用。每个Class有一个getClassLoader()<br>数组类的 Class 对象不是由类加载器创建的，而是由 Java 运行时根据需要自动创建。数组类的类加载器由 Class.getClassLoader()<br>返回，该加载器与其元素类型的类加载器是相同的；如果该元素类型是基本类型，则该数组类没有类加载器。</p>\n"},{"title":"java性能优化","date":"2020-05-28T12:10:32.000Z","_content":"\n### java性能优化\n\n项目的并发量级是多少？\n\n有没有性能问题诊断和优化的生产经验\n\n说说你过往项目的真实调优过程，常用指标有哪些？\n\njvm参数设置大小的依据是什么？\n\n解决过索引失效问题吗？\n\n基于并发量要求你会从哪些维度考虑\n\n网络宽带，QPS，TPS，连接数，数据量级","source":"_posts/java性能优化.md","raw":"---\ntitle: java性能优化\ndate: 2020-05-28 20:10:32\ncategories: [性能调优]\ntags: [性能调优]\n---\n\n### java性能优化\n\n项目的并发量级是多少？\n\n有没有性能问题诊断和优化的生产经验\n\n说说你过往项目的真实调优过程，常用指标有哪些？\n\njvm参数设置大小的依据是什么？\n\n解决过索引失效问题吗？\n\n基于并发量要求你会从哪些维度考虑\n\n网络宽带，QPS，TPS，连接数，数据量级","slug":"java性能优化","published":1,"updated":"2020-09-28T10:46:00.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylh004pesqrhp1s2vsz","content":"<h3 id=\"java性能优化\"><a href=\"#java性能优化\" class=\"headerlink\" title=\"java性能优化\"></a>java性能优化</h3><p>项目的并发量级是多少？</p>\n<p>有没有性能问题诊断和优化的生产经验</p>\n<p>说说你过往项目的真实调优过程，常用指标有哪些？</p>\n<p>jvm参数设置大小的依据是什么？</p>\n<p>解决过索引失效问题吗？</p>\n<p>基于并发量要求你会从哪些维度考虑</p>\n<p>网络宽带，QPS，TPS，连接数，数据量级</p>\n","excerpt":"","more":"<h3 id=\"java性能优化\"><a href=\"#java性能优化\" class=\"headerlink\" title=\"java性能优化\"></a>java性能优化</h3><p>项目的并发量级是多少？</p>\n<p>有没有性能问题诊断和优化的生产经验</p>\n<p>说说你过往项目的真实调优过程，常用指标有哪些？</p>\n<p>jvm参数设置大小的依据是什么？</p>\n<p>解决过索引失效问题吗？</p>\n<p>基于并发量要求你会从哪些维度考虑</p>\n<p>网络宽带，QPS，TPS，连接数，数据量级</p>\n"},{"title":"java泛型","date":"2020-05-28T12:10:32.000Z","_content":"\n# java泛型\n\nJava从1.5之后支持泛型，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。\n\n1.类型安全。泛型的主要目标是提高Java程序的类型安全。通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中消除强制。一类型安全范畴的主要目标是提高Java程序的类型安全通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中。\n\n\n\n2.消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，\n\n3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。","source":"_posts/java泛型.md","raw":"---\ntitle: java泛型\ndate: 2020-05-28 20:10:32\ncategories: [java泛型]\ntags: [java泛型]\n---\n\n# java泛型\n\nJava从1.5之后支持泛型，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。\n\n1.类型安全。泛型的主要目标是提高Java程序的类型安全。通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中消除强制。一类型安全范畴的主要目标是提高Java程序的类型安全通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中。\n\n\n\n2.消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，\n\n3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。","slug":"java泛型","published":1,"updated":"2020-09-28T10:45:05.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylk004sesqr8kcwer4f","content":"<h1 id=\"java泛型\"><a href=\"#java泛型\" class=\"headerlink\" title=\"java泛型\"></a>java泛型</h1><p>Java从1.5之后支持泛型，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。</p>\n<p>1.类型安全。泛型的主要目标是提高Java程序的类型安全。通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中消除强制。一类型安全范畴的主要目标是提高Java程序的类型安全通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中。</p>\n<p>2.消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，</p>\n<p>3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。</p>\n","excerpt":"","more":"<h1 id=\"java泛型\"><a href=\"#java泛型\" class=\"headerlink\" title=\"java泛型\"></a>java泛型</h1><p>Java从1.5之后支持泛型，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。</p>\n<p>1.类型安全。泛型的主要目标是提高Java程序的类型安全。通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中消除强制。一类型安全范畴的主要目标是提高Java程序的类型安全通过知道使用放心定义的变量的类型限制，并且可以在一个高得多的成熟度上验证类型。假设如果没有反省，这些假设就只存在于程序员的头脑中。</p>\n<p>2.消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，</p>\n<p>3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。消除强制类型转换翻新的一个附带的好处，是消除源代码中，许多强制类型转换，这使得代码更加可读，并且减少了出错的机会，3000赞的性能收益饭行为较大的优化带来了可能在梵行的初始视线中，编译器将强制类型。</p>\n"},{"title":"java语言特性知识点汇总","date":"2020-05-28T12:10:32.000Z","_content":"\n```mermaid\ngraph LR\njava --> B(JUC)\nB --> ConcurrentXXX\nB --> AtomicXXX\nB --> Executor\nB --> Caller&&Future\nB --> Queue\nB --> Locks\n\njava --> C(数据类型)\nC --> 空间占用\nC --> 基本数据结构\nC --> 自动转型与强制转型\nC --> 封箱与拆箱\n\njava --> 版本差异新特性\njava --> 动态代理与反射\n\njava --> E(常用集合)\nE --> HashMap\nE --> ConcurrentHashMap\nE --> ArrayList&LinkedList\nE --> HashSet\nE --> TreeMap\n\njava --> F(对象引用)\nF --> 强引用\nF --> 弱引用\nF --> 软引用\nF --> 虚引用\n\njava --> G(扩展知识点)\nG --> SPI机制\nG --> 注解处理机制\n```\n\n\n\n\n\n","source":"_posts/java语言特性知识点汇总.md","raw":"---\ntitle: java语言特性知识点汇总\ndate: 2020-05-28 20:10:32\ncategories: [java]\ntags: [java]\n---\n\n```mermaid\ngraph LR\njava --> B(JUC)\nB --> ConcurrentXXX\nB --> AtomicXXX\nB --> Executor\nB --> Caller&&Future\nB --> Queue\nB --> Locks\n\njava --> C(数据类型)\nC --> 空间占用\nC --> 基本数据结构\nC --> 自动转型与强制转型\nC --> 封箱与拆箱\n\njava --> 版本差异新特性\njava --> 动态代理与反射\n\njava --> E(常用集合)\nE --> HashMap\nE --> ConcurrentHashMap\nE --> ArrayList&LinkedList\nE --> HashSet\nE --> TreeMap\n\njava --> F(对象引用)\nF --> 强引用\nF --> 弱引用\nF --> 软引用\nF --> 虚引用\n\njava --> G(扩展知识点)\nG --> SPI机制\nG --> 注解处理机制\n```\n\n\n\n\n\n","slug":"java语言特性知识点汇总","published":1,"updated":"2020-08-04T04:49:13.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylo004wesqrsi0emlq1","content":"<pre class=\"mermaid\">graph LR\njava --> B(JUC)\nB --> ConcurrentXXX\nB --> AtomicXXX\nB --> Executor\nB --> Caller&&Future\nB --> Queue\nB --> Locks\n\njava --> C(数据类型)\nC --> 空间占用\nC --> 基本数据结构\nC --> 自动转型与强制转型\nC --> 封箱与拆箱\n\njava --> 版本差异新特性\njava --> 动态代理与反射\n\njava --> E(常用集合)\nE --> HashMap\nE --> ConcurrentHashMap\nE --> ArrayList&LinkedList\nE --> HashSet\nE --> TreeMap\n\njava --> F(对象引用)\nF --> 强引用\nF --> 弱引用\nF --> 软引用\nF --> 虚引用\n\njava --> G(扩展知识点)\nG --> SPI机制\nG --> 注解处理机制</pre>\n\n\n\n\n\n","excerpt":"","more":"<pre class=\"mermaid\">graph LR\njava --> B(JUC)\nB --> ConcurrentXXX\nB --> AtomicXXX\nB --> Executor\nB --> Caller&&Future\nB --> Queue\nB --> Locks\n\njava --> C(数据类型)\nC --> 空间占用\nC --> 基本数据结构\nC --> 自动转型与强制转型\nC --> 封箱与拆箱\n\njava --> 版本差异新特性\njava --> 动态代理与反射\n\njava --> E(常用集合)\nE --> HashMap\nE --> ConcurrentHashMap\nE --> ArrayList&LinkedList\nE --> HashSet\nE --> TreeMap\n\njava --> F(对象引用)\nF --> 强引用\nF --> 弱引用\nF --> 软引用\nF --> 虚引用\n\njava --> G(扩展知识点)\nG --> SPI机制\nG --> 注解处理机制</pre>\n\n\n\n\n\n"},{"title":"jenkins 安装","date":"2016-12-21T12:42:02.000Z","description":"jenkins 安装","_content":"安装jenkins稳定版本\n\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo \nsudo rpm --import http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key \nsudo yum install jenkins\n\n\n进入jenkins的系统配置文件并修改相关端口号\nvi /etc/sysconfig/jenkins\njenkins的默认JENKINS_PORT是8080，这同tomcat的默认端口冲突,改为9099。\n\nservice jenkins start\n\n访问地址\n会提示输入密码  copy提示中文件里的密码提交\n安装插件\n\n","source":"_posts/jenkins.md","raw":"---\ntitle: jenkins 安装\ncategories: [CI]\ntags: [CI]\ndate: 2016-12-21 20:42:02\ndescription: jenkins 安装\n---\n安装jenkins稳定版本\n\nsudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo \nsudo rpm --import http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key \nsudo yum install jenkins\n\n\n进入jenkins的系统配置文件并修改相关端口号\nvi /etc/sysconfig/jenkins\njenkins的默认JENKINS_PORT是8080，这同tomcat的默认端口冲突,改为9099。\n\nservice jenkins start\n\n访问地址\n会提示输入密码  copy提示中文件里的密码提交\n安装插件\n\n","slug":"jenkins","published":1,"updated":"2016-12-22T01:39:54.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylr0050esqr3rx31tr3","content":"<p>安装jenkins稳定版本</p>\n<p>sudo wget -O /etc/yum.repos.d/jenkins.repo <a href=\"http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo\" target=\"_blank\" rel=\"external\">http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</a><br>sudo rpm –import <a href=\"http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key\" target=\"_blank\" rel=\"external\">http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key</a><br>sudo yum install jenkins</p>\n<p>进入jenkins的系统配置文件并修改相关端口号<br>vi /etc/sysconfig/jenkins<br>jenkins的默认JENKINS_PORT是8080，这同tomcat的默认端口冲突,改为9099。</p>\n<p>service jenkins start</p>\n<p>访问地址<br>会提示输入密码  copy提示中文件里的密码提交<br>安装插件</p>\n","excerpt":"","more":"<p>安装jenkins稳定版本</p>\n<p>sudo wget -O /etc/yum.repos.d/jenkins.repo <a href=\"http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo\">http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</a><br>sudo rpm –import <a href=\"http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key\">http://pkg.jenkins-ci.org/redhat-stable/jenkins-ci.org.key</a><br>sudo yum install jenkins</p>\n<p>进入jenkins的系统配置文件并修改相关端口号<br>vi /etc/sysconfig/jenkins<br>jenkins的默认JENKINS_PORT是8080，这同tomcat的默认端口冲突,改为9099。</p>\n<p>service jenkins start</p>\n<p>访问地址<br>会提示输入密码  copy提示中文件里的密码提交<br>安装插件</p>\n"},{"title":"jinyan","date":"2016-12-08T02:19:08.000Z","description":null,"_content":"\n1.给所有人参与感","source":"_posts/jinyan.md","raw":"---\ntitle: jinyan\ncategories: [其他]\ntags: [其他]\ndate: 2016-12-08 10:19:08\ndescription:\n---\n\n1.给所有人参与感","slug":"jinyan","published":1,"updated":"2016-12-08T05:29:38.310Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylu0054esqri4anrguk","content":"<p>1.给所有人参与感</p>\n","excerpt":"","more":"<p>1.给所有人参与感</p>\n"},{"title":"js与jQuery 获取父窗、子窗的iframe","date":"2016-11-28T08:48:31.000Z","description":"js与jQuery 获取父窗、子窗的iframe","_content":"\n今天爬取一个页面的时候，chrome开发着工具明明看到了一个input上的id，但是用jQuery 却得不到，仔细观察Dom才发现\n此id是在一个iframe里面，于是查询以些资料总结如下：\n\n## js\n### 在父窗口中获取iframe中的元素\n1、\n格式：window.frames[\"iframe的name值\"].document.getElementByIdx_x(\"iframe中控件的ID\").click();\n实例：window.frames[\"ifm\"].document.getElementByIdx_x(\"btnOk\").click();\n2、\n格式：\nvar obj=document.getElementByIdx_x(\"iframe的name\").contentWindow;\nvar ifmObj=obj.document.getElementByIdx_x(\"iframe中控件的ID\");\nifmObj.click();\n实例：\nvar obj=document.getElementByIdx_x(\"ifm\").contentWindow;\nvar ifmObj=obj.document.getElementByIdx_x(\"btnOk\");\nifmObj.click();\n### 在iframe中获取父窗口的元素\n格式：window.parent.document.getElementByIdx_x(\"父窗口的元素ID\").click();\n实例：window.parent.document.getElementByIdx_x(\"btnOk\").click();\n## jquery\n### 在父窗口中获取iframe中的元素\n1、\n格式：$(\"#iframe的ID\").contents().find(\"#iframe中的控件ID\").click();//jquery 方法1\n实例：$(\"#ifm\").contents().find(\"#btnOk\").click();//jquery 方法1\n2、\n格式：$(\"#iframe中的控件ID\",document.frames(\"frame的name\").document).click();//jquery 方法2\n实例：$(\"#btnOk\",document.frames(\"ifm\").document).click();//jquery 方法2\n### 在iframe中获取父窗口的元素\n格式：$('#父窗口中的元素ID', parent.document).click();\n实例：$('#btnOk', parent.document).click();","source":"_posts/jqiframe.md","raw":"---\ntitle: js与jQuery 获取父窗、子窗的iframe\ncategories: [jQuery]\ntags: [jQuery,iframe]\ndate: 2016-11-28 16:48:31\ndescription: js与jQuery 获取父窗、子窗的iframe\n---\n\n今天爬取一个页面的时候，chrome开发着工具明明看到了一个input上的id，但是用jQuery 却得不到，仔细观察Dom才发现\n此id是在一个iframe里面，于是查询以些资料总结如下：\n\n## js\n### 在父窗口中获取iframe中的元素\n1、\n格式：window.frames[\"iframe的name值\"].document.getElementByIdx_x(\"iframe中控件的ID\").click();\n实例：window.frames[\"ifm\"].document.getElementByIdx_x(\"btnOk\").click();\n2、\n格式：\nvar obj=document.getElementByIdx_x(\"iframe的name\").contentWindow;\nvar ifmObj=obj.document.getElementByIdx_x(\"iframe中控件的ID\");\nifmObj.click();\n实例：\nvar obj=document.getElementByIdx_x(\"ifm\").contentWindow;\nvar ifmObj=obj.document.getElementByIdx_x(\"btnOk\");\nifmObj.click();\n### 在iframe中获取父窗口的元素\n格式：window.parent.document.getElementByIdx_x(\"父窗口的元素ID\").click();\n实例：window.parent.document.getElementByIdx_x(\"btnOk\").click();\n## jquery\n### 在父窗口中获取iframe中的元素\n1、\n格式：$(\"#iframe的ID\").contents().find(\"#iframe中的控件ID\").click();//jquery 方法1\n实例：$(\"#ifm\").contents().find(\"#btnOk\").click();//jquery 方法1\n2、\n格式：$(\"#iframe中的控件ID\",document.frames(\"frame的name\").document).click();//jquery 方法2\n实例：$(\"#btnOk\",document.frames(\"ifm\").document).click();//jquery 方法2\n### 在iframe中获取父窗口的元素\n格式：$('#父窗口中的元素ID', parent.document).click();\n实例：$('#btnOk', parent.document).click();","slug":"jqiframe","published":1,"updated":"2016-11-28T08:57:19.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ylw0057esqrevc12viq","content":"<p>今天爬取一个页面的时候，chrome开发着工具明明看到了一个input上的id，但是用jQuery 却得不到，仔细观察Dom才发现<br>此id是在一个iframe里面，于是查询以些资料总结如下：</p>\n<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><h3 id=\"在父窗口中获取iframe中的元素\"><a href=\"#在父窗口中获取iframe中的元素\" class=\"headerlink\" title=\"在父窗口中获取iframe中的元素\"></a>在父窗口中获取iframe中的元素</h3><p>1、<br>格式：window.frames[“iframe的name值”].document.getElementByIdx_x(“iframe中控件的ID”).click();<br>实例：window.frames[“ifm”].document.getElementByIdx_x(“btnOk”).click();<br>2、<br>格式：<br>var obj=document.getElementByIdx_x(“iframe的name”).contentWindow;<br>var ifmObj=obj.document.getElementByIdx_x(“iframe中控件的ID”);<br>ifmObj.click();<br>实例：<br>var obj=document.getElementByIdx_x(“ifm”).contentWindow;<br>var ifmObj=obj.document.getElementByIdx_x(“btnOk”);<br>ifmObj.click();</p>\n<h3 id=\"在iframe中获取父窗口的元素\"><a href=\"#在iframe中获取父窗口的元素\" class=\"headerlink\" title=\"在iframe中获取父窗口的元素\"></a>在iframe中获取父窗口的元素</h3><p>格式：window.parent.document.getElementByIdx_x(“父窗口的元素ID”).click();<br>实例：window.parent.document.getElementByIdx_x(“btnOk”).click();</p>\n<h2 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h2><h3 id=\"在父窗口中获取iframe中的元素-1\"><a href=\"#在父窗口中获取iframe中的元素-1\" class=\"headerlink\" title=\"在父窗口中获取iframe中的元素\"></a>在父窗口中获取iframe中的元素</h3><p>1、<br>格式：$(“#iframe的ID”).contents().find(“#iframe中的控件ID”).click();//jquery 方法1<br>实例：$(“#ifm”).contents().find(“#btnOk”).click();//jquery 方法1<br>2、<br>格式：$(“#iframe中的控件ID”,document.frames(“frame的name”).document).click();//jquery 方法2<br>实例：$(“#btnOk”,document.frames(“ifm”).document).click();//jquery 方法2</p>\n<h3 id=\"在iframe中获取父窗口的元素-1\"><a href=\"#在iframe中获取父窗口的元素-1\" class=\"headerlink\" title=\"在iframe中获取父窗口的元素\"></a>在iframe中获取父窗口的元素</h3><p>格式：$(‘#父窗口中的元素ID’, parent.document).click();<br>实例：$(‘#btnOk’, parent.document).click();</p>\n","excerpt":"","more":"<p>今天爬取一个页面的时候，chrome开发着工具明明看到了一个input上的id，但是用jQuery 却得不到，仔细观察Dom才发现<br>此id是在一个iframe里面，于是查询以些资料总结如下：</p>\n<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><h3 id=\"在父窗口中获取iframe中的元素\"><a href=\"#在父窗口中获取iframe中的元素\" class=\"headerlink\" title=\"在父窗口中获取iframe中的元素\"></a>在父窗口中获取iframe中的元素</h3><p>1、<br>格式：window.frames[“iframe的name值”].document.getElementByIdx_x(“iframe中控件的ID”).click();<br>实例：window.frames[“ifm”].document.getElementByIdx_x(“btnOk”).click();<br>2、<br>格式：<br>var obj=document.getElementByIdx_x(“iframe的name”).contentWindow;<br>var ifmObj=obj.document.getElementByIdx_x(“iframe中控件的ID”);<br>ifmObj.click();<br>实例：<br>var obj=document.getElementByIdx_x(“ifm”).contentWindow;<br>var ifmObj=obj.document.getElementByIdx_x(“btnOk”);<br>ifmObj.click();</p>\n<h3 id=\"在iframe中获取父窗口的元素\"><a href=\"#在iframe中获取父窗口的元素\" class=\"headerlink\" title=\"在iframe中获取父窗口的元素\"></a>在iframe中获取父窗口的元素</h3><p>格式：window.parent.document.getElementByIdx_x(“父窗口的元素ID”).click();<br>实例：window.parent.document.getElementByIdx_x(“btnOk”).click();</p>\n<h2 id=\"jquery\"><a href=\"#jquery\" class=\"headerlink\" title=\"jquery\"></a>jquery</h2><h3 id=\"在父窗口中获取iframe中的元素-1\"><a href=\"#在父窗口中获取iframe中的元素-1\" class=\"headerlink\" title=\"在父窗口中获取iframe中的元素\"></a>在父窗口中获取iframe中的元素</h3><p>1、<br>格式：$(“#iframe的ID”).contents().find(“#iframe中的控件ID”).click();//jquery 方法1<br>实例：$(“#ifm”).contents().find(“#btnOk”).click();//jquery 方法1<br>2、<br>格式：$(“#iframe中的控件ID”,document.frames(“frame的name”).document).click();//jquery 方法2<br>实例：$(“#btnOk”,document.frames(“ifm”).document).click();//jquery 方法2</p>\n<h3 id=\"在iframe中获取父窗口的元素-1\"><a href=\"#在iframe中获取父窗口的元素-1\" class=\"headerlink\" title=\"在iframe中获取父窗口的元素\"></a>在iframe中获取父窗口的元素</h3><p>格式：$(‘#父窗口中的元素ID’, parent.document).click();<br>实例：$(‘#btnOk’, parent.document).click();</p>\n"},{"title":"java虚拟机性能监控与故障管理工具","date":"2016-10-24T08:52:59.000Z","description":"jps，jstat","_content":"\n### jps：虚拟机进程状况工具\n全称：JVM Process Status Tool\n用途：列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在类）名称以及这些进程的本地\n虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）\n命令格式：*jps [option] [hostid]*\n\n|选项|作用|\n|:-:|:-|\n|-q|只输出省略主类的名称|\n|-m|输出虚拟机进程启动时传递给主类main()函数的参数|\n|-l|输出主类的全名，如果进程执行的是jar包，输出jar路径|\n|-v|输出虚拟机进程启动时JVM参数|\n\n### jstat:虚拟机统计信息监视工具\n全称：JVM Statistics Monitoring Tool\n用途：监视虚拟机各种运行状态信息（显示本地或远程虚拟机进程中的类加载、内存、垃圾收集、JIT编译等运行数据）。\n命令格式：*jstat [option vmid[interval[s|ms][count]]]*\n栗子：jstat -gc 2092 300 10 //每300毫秒查询一次进程2092垃圾收集情况\n\n|选项|作用|\n|:-:|:-|\n|-class|监视类装载、卸载数量、总空间以及类装载所耗费的时间|\n|-gc|监视堆状况，包括Eden区、两个survivor区、老年代、永久代等的容量、已用空间、GC时间合计等信息|\n|-gccapacity|监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间|\n|-gcutil|监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比|\n|-gccause|与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因|\n|-gcnew|监视新生代GC状况|\n|-gcnewcapacity|监视内容与-gcnew基本相同，但输出主要关注使用到的最大、最小空间|\n|-gcold|监视老年代GC状况|\n|-gcoldcapacity|监视内容与-gcold基本相同，但输出主要关注使用到的最大、最小空间|\n|-gcpermcapacity|输出永久代使用到的最大、最小空间|\n|-complier|输出JIT编译器编译过的方法、耗时等信息|\n|-printcompilation|输出已经被JIT编译的方法|\n\n执行结果表头含义\n\n|字母|含义|\n|:-:|:-|\n|E|Eden新生代|\n|S0|Survivor0|\n|S1|Survivor1|\n|O|Old老年代|\n|P|Permanent永久代|\n|YGC|Young GC|\n|FGC|Full GC|\n|YGCT|Young GC Time|\n|FGCT|Full GC Time|\n|GCT|GC Time|\n\n### jinfo：java配置信息工具\n全称：Configuration Info for java \n用途：实时地查看和调整虚拟机各项参数。\n命令格式：*jinfo [option] pid*\n\n### jmap:java内存映像工具\n全称：Memory Map for Java \n用途：生成堆转储快照（heapdump或dump文件）\n命令格式：*jmap [option] vmid*\n\njmap工具主要选项\n\n|选项|作用|\n|:-:|:-|\n|-dump|生成Java堆转储快照。格式为：-dump:[live,] fomat=b,file=<filename>,其中live子参数说明是否只dump出存活的对象|\n|-finalizerinfo|显示子F-Queue中等待Finalizer线程执行finalize方法的对象，只在Linux/Solaris平台下有效|\n|-heap|显示javja堆详细信息，如使用哪种回收器，参考配置，分代状况等，只在Linux/Solaris平台下有效|\n|-histo|显示堆中对象统计信息，包括类、实例数量、合计容量|\n|-permstat|以ClassLoader为统计口径显示永久代内存状态，只在Linux/Solaris平台下有效|\n|-F|当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照，只在Linux/Solaris平台下有效|\n\n\n### jhat：虚拟机堆转储快照分析工具\n\n全称：JVM Heap Analysis Tool\n用途：分析jmap生成的快照\n命令格式：*jhat filename*\n\n\n### jstack：java堆栈跟踪工具\n全称：Stack Trace for Java\n用途：用于生成虚拟机当前时刻的线程快照。\n命令格式：*jstack [option] vmid*\n\njstack工具主要选项\n\n|选项|作用|\n|:-:|:-|\n|-F|当正常输出的请求不被响应是，强制输出线程堆栈|\n|-l|除堆栈外，显示关于锁的附加信息|\n|-m|如果调用到本地方法的话，可以显示c/c++的堆栈|\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/jvm1.md","raw":"---\ntitle: java虚拟机性能监控与故障管理工具\ncategories: [jvm]\ntags: [jvm]\ndate: 2016-10-24 16:52:59\ndescription: jps，jstat\n---\n\n### jps：虚拟机进程状况工具\n全称：JVM Process Status Tool\n用途：列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在类）名称以及这些进程的本地\n虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）\n命令格式：*jps [option] [hostid]*\n\n|选项|作用|\n|:-:|:-|\n|-q|只输出省略主类的名称|\n|-m|输出虚拟机进程启动时传递给主类main()函数的参数|\n|-l|输出主类的全名，如果进程执行的是jar包，输出jar路径|\n|-v|输出虚拟机进程启动时JVM参数|\n\n### jstat:虚拟机统计信息监视工具\n全称：JVM Statistics Monitoring Tool\n用途：监视虚拟机各种运行状态信息（显示本地或远程虚拟机进程中的类加载、内存、垃圾收集、JIT编译等运行数据）。\n命令格式：*jstat [option vmid[interval[s|ms][count]]]*\n栗子：jstat -gc 2092 300 10 //每300毫秒查询一次进程2092垃圾收集情况\n\n|选项|作用|\n|:-:|:-|\n|-class|监视类装载、卸载数量、总空间以及类装载所耗费的时间|\n|-gc|监视堆状况，包括Eden区、两个survivor区、老年代、永久代等的容量、已用空间、GC时间合计等信息|\n|-gccapacity|监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间|\n|-gcutil|监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比|\n|-gccause|与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因|\n|-gcnew|监视新生代GC状况|\n|-gcnewcapacity|监视内容与-gcnew基本相同，但输出主要关注使用到的最大、最小空间|\n|-gcold|监视老年代GC状况|\n|-gcoldcapacity|监视内容与-gcold基本相同，但输出主要关注使用到的最大、最小空间|\n|-gcpermcapacity|输出永久代使用到的最大、最小空间|\n|-complier|输出JIT编译器编译过的方法、耗时等信息|\n|-printcompilation|输出已经被JIT编译的方法|\n\n执行结果表头含义\n\n|字母|含义|\n|:-:|:-|\n|E|Eden新生代|\n|S0|Survivor0|\n|S1|Survivor1|\n|O|Old老年代|\n|P|Permanent永久代|\n|YGC|Young GC|\n|FGC|Full GC|\n|YGCT|Young GC Time|\n|FGCT|Full GC Time|\n|GCT|GC Time|\n\n### jinfo：java配置信息工具\n全称：Configuration Info for java \n用途：实时地查看和调整虚拟机各项参数。\n命令格式：*jinfo [option] pid*\n\n### jmap:java内存映像工具\n全称：Memory Map for Java \n用途：生成堆转储快照（heapdump或dump文件）\n命令格式：*jmap [option] vmid*\n\njmap工具主要选项\n\n|选项|作用|\n|:-:|:-|\n|-dump|生成Java堆转储快照。格式为：-dump:[live,] fomat=b,file=<filename>,其中live子参数说明是否只dump出存活的对象|\n|-finalizerinfo|显示子F-Queue中等待Finalizer线程执行finalize方法的对象，只在Linux/Solaris平台下有效|\n|-heap|显示javja堆详细信息，如使用哪种回收器，参考配置，分代状况等，只在Linux/Solaris平台下有效|\n|-histo|显示堆中对象统计信息，包括类、实例数量、合计容量|\n|-permstat|以ClassLoader为统计口径显示永久代内存状态，只在Linux/Solaris平台下有效|\n|-F|当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照，只在Linux/Solaris平台下有效|\n\n\n### jhat：虚拟机堆转储快照分析工具\n\n全称：JVM Heap Analysis Tool\n用途：分析jmap生成的快照\n命令格式：*jhat filename*\n\n\n### jstack：java堆栈跟踪工具\n全称：Stack Trace for Java\n用途：用于生成虚拟机当前时刻的线程快照。\n命令格式：*jstack [option] vmid*\n\njstack工具主要选项\n\n|选项|作用|\n|:-:|:-|\n|-F|当正常输出的请求不被响应是，强制输出线程堆栈|\n|-l|除堆栈外，显示关于锁的附加信息|\n|-m|如果调用到本地方法的话，可以显示c/c++的堆栈|\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"jvm1","published":1,"updated":"2016-10-25T07:44:30.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yly005besqrvnm7dc43","content":"<h3 id=\"jps：虚拟机进程状况工具\"><a href=\"#jps：虚拟机进程状况工具\" class=\"headerlink\" title=\"jps：虚拟机进程状况工具\"></a>jps：虚拟机进程状况工具</h3><p>全称：JVM Process Status Tool<br>用途：列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在类）名称以及这些进程的本地<br>虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）<br>命令格式：<em>jps [option] [hostid]</em></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-q</td>\n<td style=\"text-align:left\">只输出省略主类的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-m</td>\n<td style=\"text-align:left\">输出虚拟机进程启动时传递给主类main()函数的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:left\">输出主类的全名，如果进程执行的是jar包，输出jar路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:left\">输出虚拟机进程启动时JVM参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jstat-虚拟机统计信息监视工具\"><a href=\"#jstat-虚拟机统计信息监视工具\" class=\"headerlink\" title=\"jstat:虚拟机统计信息监视工具\"></a>jstat:虚拟机统计信息监视工具</h3><p>全称：JVM Statistics Monitoring Tool<br>用途：监视虚拟机各种运行状态信息（显示本地或远程虚拟机进程中的类加载、内存、垃圾收集、JIT编译等运行数据）。<br>命令格式：<em>jstat [option vmid[interval[s|ms][count]]]</em><br>栗子：jstat -gc 2092 300 10 //每300毫秒查询一次进程2092垃圾收集情况</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-class</td>\n<td style=\"text-align:left\">监视类装载、卸载数量、总空间以及类装载所耗费的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gc</td>\n<td style=\"text-align:left\">监视堆状况，包括Eden区、两个survivor区、老年代、永久代等的容量、已用空间、GC时间合计等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gccapacity</td>\n<td style=\"text-align:left\">监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcutil</td>\n<td style=\"text-align:left\">监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gccause</td>\n<td style=\"text-align:left\">与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcnew</td>\n<td style=\"text-align:left\">监视新生代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcnewcapacity</td>\n<td style=\"text-align:left\">监视内容与-gcnew基本相同，但输出主要关注使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcold</td>\n<td style=\"text-align:left\">监视老年代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcoldcapacity</td>\n<td style=\"text-align:left\">监视内容与-gcold基本相同，但输出主要关注使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcpermcapacity</td>\n<td style=\"text-align:left\">输出永久代使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-complier</td>\n<td style=\"text-align:left\">输出JIT编译器编译过的方法、耗时等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-printcompilation</td>\n<td style=\"text-align:left\">输出已经被JIT编译的方法</td>\n</tr>\n</tbody>\n</table>\n<p>执行结果表头含义</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字母</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:left\">Eden新生代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S0</td>\n<td style=\"text-align:left\">Survivor0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S1</td>\n<td style=\"text-align:left\">Survivor1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:left\">Old老年代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P</td>\n<td style=\"text-align:left\">Permanent永久代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">YGC</td>\n<td style=\"text-align:left\">Young GC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FGC</td>\n<td style=\"text-align:left\">Full GC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">YGCT</td>\n<td style=\"text-align:left\">Young GC Time</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FGCT</td>\n<td style=\"text-align:left\">Full GC Time</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GCT</td>\n<td style=\"text-align:left\">GC Time</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jinfo：java配置信息工具\"><a href=\"#jinfo：java配置信息工具\" class=\"headerlink\" title=\"jinfo：java配置信息工具\"></a>jinfo：java配置信息工具</h3><p>全称：Configuration Info for java<br>用途：实时地查看和调整虚拟机各项参数。<br>命令格式：<em>jinfo [option] pid</em></p>\n<h3 id=\"jmap-java内存映像工具\"><a href=\"#jmap-java内存映像工具\" class=\"headerlink\" title=\"jmap:java内存映像工具\"></a>jmap:java内存映像工具</h3><p>全称：Memory Map for Java<br>用途：生成堆转储快照（heapdump或dump文件）<br>命令格式：<em>jmap [option] vmid</em></p>\n<p>jmap工具主要选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-dump</td>\n<td style=\"text-align:left\">生成Java堆转储快照。格式为：-dump:[live,] fomat=b,file=<filename>,其中live子参数说明是否只dump出存活的对象</filename></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-finalizerinfo</td>\n<td style=\"text-align:left\">显示子F-Queue中等待Finalizer线程执行finalize方法的对象，只在Linux/Solaris平台下有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-heap</td>\n<td style=\"text-align:left\">显示javja堆详细信息，如使用哪种回收器，参考配置，分代状况等，只在Linux/Solaris平台下有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-histo</td>\n<td style=\"text-align:left\">显示堆中对象统计信息，包括类、实例数量、合计容量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-permstat</td>\n<td style=\"text-align:left\">以ClassLoader为统计口径显示永久代内存状态，只在Linux/Solaris平台下有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td style=\"text-align:left\">当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照，只在Linux/Solaris平台下有效</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jhat：虚拟机堆转储快照分析工具\"><a href=\"#jhat：虚拟机堆转储快照分析工具\" class=\"headerlink\" title=\"jhat：虚拟机堆转储快照分析工具\"></a>jhat：虚拟机堆转储快照分析工具</h3><p>全称：JVM Heap Analysis Tool<br>用途：分析jmap生成的快照<br>命令格式：<em>jhat filename</em></p>\n<h3 id=\"jstack：java堆栈跟踪工具\"><a href=\"#jstack：java堆栈跟踪工具\" class=\"headerlink\" title=\"jstack：java堆栈跟踪工具\"></a>jstack：java堆栈跟踪工具</h3><p>全称：Stack Trace for Java<br>用途：用于生成虚拟机当前时刻的线程快照。<br>命令格式：<em>jstack [option] vmid</em></p>\n<p>jstack工具主要选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td style=\"text-align:left\">当正常输出的请求不被响应是，强制输出线程堆栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:left\">除堆栈外，显示关于锁的附加信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-m</td>\n<td style=\"text-align:left\">如果调用到本地方法的话，可以显示c/c++的堆栈</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h3 id=\"jps：虚拟机进程状况工具\"><a href=\"#jps：虚拟机进程状况工具\" class=\"headerlink\" title=\"jps：虚拟机进程状况工具\"></a>jps：虚拟机进程状况工具</h3><p>全称：JVM Process Status Tool<br>用途：列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在类）名称以及这些进程的本地<br>虚拟机唯一ID（Local Virtual Machine Identifier,LVMID）<br>命令格式：<em>jps [option] [hostid]</em></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-q</td>\n<td style=\"text-align:left\">只输出省略主类的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-m</td>\n<td style=\"text-align:left\">输出虚拟机进程启动时传递给主类main()函数的参数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:left\">输出主类的全名，如果进程执行的是jar包，输出jar路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:left\">输出虚拟机进程启动时JVM参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jstat-虚拟机统计信息监视工具\"><a href=\"#jstat-虚拟机统计信息监视工具\" class=\"headerlink\" title=\"jstat:虚拟机统计信息监视工具\"></a>jstat:虚拟机统计信息监视工具</h3><p>全称：JVM Statistics Monitoring Tool<br>用途：监视虚拟机各种运行状态信息（显示本地或远程虚拟机进程中的类加载、内存、垃圾收集、JIT编译等运行数据）。<br>命令格式：<em>jstat [option vmid[interval[s|ms][count]]]</em><br>栗子：jstat -gc 2092 300 10 //每300毫秒查询一次进程2092垃圾收集情况</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-class</td>\n<td style=\"text-align:left\">监视类装载、卸载数量、总空间以及类装载所耗费的时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gc</td>\n<td style=\"text-align:left\">监视堆状况，包括Eden区、两个survivor区、老年代、永久代等的容量、已用空间、GC时间合计等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gccapacity</td>\n<td style=\"text-align:left\">监视内容与-gc基本相同，但输出主要关注java堆各个区域使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcutil</td>\n<td style=\"text-align:left\">监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gccause</td>\n<td style=\"text-align:left\">与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcnew</td>\n<td style=\"text-align:left\">监视新生代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcnewcapacity</td>\n<td style=\"text-align:left\">监视内容与-gcnew基本相同，但输出主要关注使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcold</td>\n<td style=\"text-align:left\">监视老年代GC状况</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcoldcapacity</td>\n<td style=\"text-align:left\">监视内容与-gcold基本相同，但输出主要关注使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gcpermcapacity</td>\n<td style=\"text-align:left\">输出永久代使用到的最大、最小空间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-complier</td>\n<td style=\"text-align:left\">输出JIT编译器编译过的方法、耗时等信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-printcompilation</td>\n<td style=\"text-align:left\">输出已经被JIT编译的方法</td>\n</tr>\n</tbody>\n</table>\n<p>执行结果表头含义</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字母</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">E</td>\n<td style=\"text-align:left\">Eden新生代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S0</td>\n<td style=\"text-align:left\">Survivor0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">S1</td>\n<td style=\"text-align:left\">Survivor1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">O</td>\n<td style=\"text-align:left\">Old老年代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">P</td>\n<td style=\"text-align:left\">Permanent永久代</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">YGC</td>\n<td style=\"text-align:left\">Young GC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FGC</td>\n<td style=\"text-align:left\">Full GC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">YGCT</td>\n<td style=\"text-align:left\">Young GC Time</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">FGCT</td>\n<td style=\"text-align:left\">Full GC Time</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">GCT</td>\n<td style=\"text-align:left\">GC Time</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jinfo：java配置信息工具\"><a href=\"#jinfo：java配置信息工具\" class=\"headerlink\" title=\"jinfo：java配置信息工具\"></a>jinfo：java配置信息工具</h3><p>全称：Configuration Info for java<br>用途：实时地查看和调整虚拟机各项参数。<br>命令格式：<em>jinfo [option] pid</em></p>\n<h3 id=\"jmap-java内存映像工具\"><a href=\"#jmap-java内存映像工具\" class=\"headerlink\" title=\"jmap:java内存映像工具\"></a>jmap:java内存映像工具</h3><p>全称：Memory Map for Java<br>用途：生成堆转储快照（heapdump或dump文件）<br>命令格式：<em>jmap [option] vmid</em></p>\n<p>jmap工具主要选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-dump</td>\n<td style=\"text-align:left\">生成Java堆转储快照。格式为：-dump:[live,] fomat=b,file=<filename>,其中live子参数说明是否只dump出存活的对象</filename></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-finalizerinfo</td>\n<td style=\"text-align:left\">显示子F-Queue中等待Finalizer线程执行finalize方法的对象，只在Linux/Solaris平台下有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-heap</td>\n<td style=\"text-align:left\">显示javja堆详细信息，如使用哪种回收器，参考配置，分代状况等，只在Linux/Solaris平台下有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-histo</td>\n<td style=\"text-align:left\">显示堆中对象统计信息，包括类、实例数量、合计容量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-permstat</td>\n<td style=\"text-align:left\">以ClassLoader为统计口径显示永久代内存状态，只在Linux/Solaris平台下有效</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td style=\"text-align:left\">当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照，只在Linux/Solaris平台下有效</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jhat：虚拟机堆转储快照分析工具\"><a href=\"#jhat：虚拟机堆转储快照分析工具\" class=\"headerlink\" title=\"jhat：虚拟机堆转储快照分析工具\"></a>jhat：虚拟机堆转储快照分析工具</h3><p>全称：JVM Heap Analysis Tool<br>用途：分析jmap生成的快照<br>命令格式：<em>jhat filename</em></p>\n<h3 id=\"jstack：java堆栈跟踪工具\"><a href=\"#jstack：java堆栈跟踪工具\" class=\"headerlink\" title=\"jstack：java堆栈跟踪工具\"></a>jstack：java堆栈跟踪工具</h3><p>全称：Stack Trace for Java<br>用途：用于生成虚拟机当前时刻的线程快照。<br>命令格式：<em>jstack [option] vmid</em></p>\n<p>jstack工具主要选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-F</td>\n<td style=\"text-align:left\">当正常输出的请求不被响应是，强制输出线程堆栈</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-l</td>\n<td style=\"text-align:left\">除堆栈外，显示关于锁的附加信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-m</td>\n<td style=\"text-align:left\">如果调用到本地方法的话，可以显示c/c++的堆栈</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"堆分配参数","date":"2016-12-19T07:42:09.000Z","description":"与java程序堆内存相关的jvm参数","_content":"\n- -Xms:设置java应用程序启动时的初始堆大小。\n- -Xmx:设置java应用程序能获得的最大堆大小。\n- -Xss:设置java线程栈大小。\n- -XX:MinHeapFreeRatio:设置堆空间最小空闲比例。JVM在堆空闲内存小于此值时会扩展空间。\n- -XX:MaxHeapFreeRatio:设置堆空间最大空闲比例。JVM在堆空闲内存大于此值时会压缩空间。。\n- -XX:NewSize:设置新生代大小。\n- -XX:NewRatio:设置新生代和老年代的比例，它等于老年代/新生代大小。\n- -XX:SurviorRatio:新生代中eden区与survivior区的比例。\n- -XX:MaxPermSize:设置最大持久区堆大小。\n- -XX:PermSize:设置永久区的初始值。\n- -XX:TargetSurvivorRatio:设置survivior区的可使用率。当survivior区的空间使用率达到这个值是，会将对象送到老年代。\n\n\n","source":"_posts/jvm2.md","raw":"---\ntitle: 堆分配参数\ncategories: [jvm]\ntags: [jvm]\ndate: 2016-12-19 15:42:09\ndescription: 与java程序堆内存相关的jvm参数\n---\n\n- -Xms:设置java应用程序启动时的初始堆大小。\n- -Xmx:设置java应用程序能获得的最大堆大小。\n- -Xss:设置java线程栈大小。\n- -XX:MinHeapFreeRatio:设置堆空间最小空闲比例。JVM在堆空闲内存小于此值时会扩展空间。\n- -XX:MaxHeapFreeRatio:设置堆空间最大空闲比例。JVM在堆空闲内存大于此值时会压缩空间。。\n- -XX:NewSize:设置新生代大小。\n- -XX:NewRatio:设置新生代和老年代的比例，它等于老年代/新生代大小。\n- -XX:SurviorRatio:新生代中eden区与survivior区的比例。\n- -XX:MaxPermSize:设置最大持久区堆大小。\n- -XX:PermSize:设置永久区的初始值。\n- -XX:TargetSurvivorRatio:设置survivior区的可使用率。当survivior区的空间使用率达到这个值是，会将对象送到老年代。\n\n\n","slug":"jvm2","published":1,"updated":"2016-12-19T09:50:39.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ym0005desqr18p5t873","content":"<ul>\n<li>-Xms:设置java应用程序启动时的初始堆大小。</li>\n<li>-Xmx:设置java应用程序能获得的最大堆大小。</li>\n<li>-Xss:设置java线程栈大小。</li>\n<li>-XX:MinHeapFreeRatio:设置堆空间最小空闲比例。JVM在堆空闲内存小于此值时会扩展空间。</li>\n<li>-XX:MaxHeapFreeRatio:设置堆空间最大空闲比例。JVM在堆空闲内存大于此值时会压缩空间。。</li>\n<li>-XX:NewSize:设置新生代大小。</li>\n<li>-XX:NewRatio:设置新生代和老年代的比例，它等于老年代/新生代大小。</li>\n<li>-XX:SurviorRatio:新生代中eden区与survivior区的比例。</li>\n<li>-XX:MaxPermSize:设置最大持久区堆大小。</li>\n<li>-XX:PermSize:设置永久区的初始值。</li>\n<li>-XX:TargetSurvivorRatio:设置survivior区的可使用率。当survivior区的空间使用率达到这个值是，会将对象送到老年代。</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>-Xms:设置java应用程序启动时的初始堆大小。</li>\n<li>-Xmx:设置java应用程序能获得的最大堆大小。</li>\n<li>-Xss:设置java线程栈大小。</li>\n<li>-XX:MinHeapFreeRatio:设置堆空间最小空闲比例。JVM在堆空闲内存小于此值时会扩展空间。</li>\n<li>-XX:MaxHeapFreeRatio:设置堆空间最大空闲比例。JVM在堆空闲内存大于此值时会压缩空间。。</li>\n<li>-XX:NewSize:设置新生代大小。</li>\n<li>-XX:NewRatio:设置新生代和老年代的比例，它等于老年代/新生代大小。</li>\n<li>-XX:SurviorRatio:新生代中eden区与survivior区的比例。</li>\n<li>-XX:MaxPermSize:设置最大持久区堆大小。</li>\n<li>-XX:PermSize:设置永久区的初始值。</li>\n<li>-XX:TargetSurvivorRatio:设置survivior区的可使用率。当survivior区的空间使用率达到这个值是，会将对象送到老年代。</li>\n</ul>\n"},{"title":"恭喜张梦雪夺得里约奥运首金","date":"2016-08-07T14:51:45.000Z","_content":"\n中国队终于取得了里约奥运的首金\n<!-- more -->\n#张梦雪夺得里约奥运首金\n\n![张梦雪首金](http://obc3a6u0s.bkt.clouddn.com/QQ20160807-0@2x.png)\n\n没能看到孙杨夺冠,总算在睡觉前有金牌了。\n\n预赛中， 俄罗斯选手巴特萨拉斯基纳以390环获第一，俄罗斯选手科尔舒诺娃以387环列第二，中国选手张梦雪以384环列第七。中国选手郭文珺发挥失常，打出378环未进决赛。\n\n决赛三枪过后，西班牙选手弗兰克特以30.2环排名第一，埃尔霍霍德以30环排名第二，中国选手张梦雪以28.2环排名第七。第二组三枪过后，西班牙选手弗兰克特以59.8环排名第一，希腊选手克拉卡奇以59.7环排名第二， 中国选手张梦雪以58.5环排名第五。\n\n淘汰赛首轮，希腊选手克拉卡奇以79.0环排名第一，中国选手张梦雪以79.0环并列第一。俄罗斯选手科尔舒诺娃第一个被淘汰，获得该项目第八名。\n\n第二轮，墨西哥选手扎瓦拉以99.1环排名第一，中国选手张梦雪以98.9环排名第二，俄罗斯选手巴特萨拉斯基纳以98.2环排名第三。塞尔维亚的维利克维奇被淘汰，获得第七名。\n\n第三轮，中国选手张梦雪以119.8环排名第一，墨西哥选手扎瓦拉以118.6环排名第二，俄罗斯选手巴特萨拉斯基纳以118.1环排名第三。西班牙选手弗兰克特第三位被淘汰，获得第六名。\n\n第四轮，中国选手张梦雪以138.9环排名第一，希腊选手克拉卡奇以138.1环排名第二，俄罗斯选手巴特萨拉斯基纳以137.9环排名第三。埃及选手埃尔霍霍德第四位被淘汰，获得第五名。\n\n第五轮，中国选手张梦雪以159.1环排名第一，希腊选手克拉卡奇和俄罗斯选手巴特萨拉斯基纳以158.3和157.3环排名二、三位，墨西哥选手扎瓦拉被淘汰，取得第四名。\n\n第六轮，希腊选手克拉卡奇以177.7环的成绩被淘汰，因此获得一枚铜牌。最后两发子弹在中国选手张梦雪和俄罗斯选手巴特萨拉斯基纳之间展开。\n\n最终，中国选手张梦雪以199.4环获得金牌，俄罗斯选手巴特萨拉斯基纳以197.1环夺得银牌，希腊选手克拉卡奇以177.7环摘得铜牌。\n\n","source":"_posts/liyue87.md","raw":"---\ntitle: 恭喜张梦雪夺得里约奥运首金\ndate: 2016-08-07 22:51:45\ncategories: [体育]\ntags: [里约]\n---\n\n中国队终于取得了里约奥运的首金\n<!-- more -->\n#张梦雪夺得里约奥运首金\n\n![张梦雪首金](http://obc3a6u0s.bkt.clouddn.com/QQ20160807-0@2x.png)\n\n没能看到孙杨夺冠,总算在睡觉前有金牌了。\n\n预赛中， 俄罗斯选手巴特萨拉斯基纳以390环获第一，俄罗斯选手科尔舒诺娃以387环列第二，中国选手张梦雪以384环列第七。中国选手郭文珺发挥失常，打出378环未进决赛。\n\n决赛三枪过后，西班牙选手弗兰克特以30.2环排名第一，埃尔霍霍德以30环排名第二，中国选手张梦雪以28.2环排名第七。第二组三枪过后，西班牙选手弗兰克特以59.8环排名第一，希腊选手克拉卡奇以59.7环排名第二， 中国选手张梦雪以58.5环排名第五。\n\n淘汰赛首轮，希腊选手克拉卡奇以79.0环排名第一，中国选手张梦雪以79.0环并列第一。俄罗斯选手科尔舒诺娃第一个被淘汰，获得该项目第八名。\n\n第二轮，墨西哥选手扎瓦拉以99.1环排名第一，中国选手张梦雪以98.9环排名第二，俄罗斯选手巴特萨拉斯基纳以98.2环排名第三。塞尔维亚的维利克维奇被淘汰，获得第七名。\n\n第三轮，中国选手张梦雪以119.8环排名第一，墨西哥选手扎瓦拉以118.6环排名第二，俄罗斯选手巴特萨拉斯基纳以118.1环排名第三。西班牙选手弗兰克特第三位被淘汰，获得第六名。\n\n第四轮，中国选手张梦雪以138.9环排名第一，希腊选手克拉卡奇以138.1环排名第二，俄罗斯选手巴特萨拉斯基纳以137.9环排名第三。埃及选手埃尔霍霍德第四位被淘汰，获得第五名。\n\n第五轮，中国选手张梦雪以159.1环排名第一，希腊选手克拉卡奇和俄罗斯选手巴特萨拉斯基纳以158.3和157.3环排名二、三位，墨西哥选手扎瓦拉被淘汰，取得第四名。\n\n第六轮，希腊选手克拉卡奇以177.7环的成绩被淘汰，因此获得一枚铜牌。最后两发子弹在中国选手张梦雪和俄罗斯选手巴特萨拉斯基纳之间展开。\n\n最终，中国选手张梦雪以199.4环获得金牌，俄罗斯选手巴特萨拉斯基纳以197.1环夺得银牌，希腊选手克拉卡奇以177.7环摘得铜牌。\n\n","slug":"liyue87","published":1,"updated":"2016-09-22T05:47:54.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ym3005hesqrwn5nntaj","content":"<p>中国队终于取得了里约奥运的首金<br><a id=\"more\"></a></p>\n<p>#张梦雪夺得里约奥运首金</p>\n<p><img src=\"http://obc3a6u0s.bkt.clouddn.com/QQ20160807-0@2x.png\" alt=\"张梦雪首金\"></p>\n<p>没能看到孙杨夺冠,总算在睡觉前有金牌了。</p>\n<p>预赛中， 俄罗斯选手巴特萨拉斯基纳以390环获第一，俄罗斯选手科尔舒诺娃以387环列第二，中国选手张梦雪以384环列第七。中国选手郭文珺发挥失常，打出378环未进决赛。</p>\n<p>决赛三枪过后，西班牙选手弗兰克特以30.2环排名第一，埃尔霍霍德以30环排名第二，中国选手张梦雪以28.2环排名第七。第二组三枪过后，西班牙选手弗兰克特以59.8环排名第一，希腊选手克拉卡奇以59.7环排名第二， 中国选手张梦雪以58.5环排名第五。</p>\n<p>淘汰赛首轮，希腊选手克拉卡奇以79.0环排名第一，中国选手张梦雪以79.0环并列第一。俄罗斯选手科尔舒诺娃第一个被淘汰，获得该项目第八名。</p>\n<p>第二轮，墨西哥选手扎瓦拉以99.1环排名第一，中国选手张梦雪以98.9环排名第二，俄罗斯选手巴特萨拉斯基纳以98.2环排名第三。塞尔维亚的维利克维奇被淘汰，获得第七名。</p>\n<p>第三轮，中国选手张梦雪以119.8环排名第一，墨西哥选手扎瓦拉以118.6环排名第二，俄罗斯选手巴特萨拉斯基纳以118.1环排名第三。西班牙选手弗兰克特第三位被淘汰，获得第六名。</p>\n<p>第四轮，中国选手张梦雪以138.9环排名第一，希腊选手克拉卡奇以138.1环排名第二，俄罗斯选手巴特萨拉斯基纳以137.9环排名第三。埃及选手埃尔霍霍德第四位被淘汰，获得第五名。</p>\n<p>第五轮，中国选手张梦雪以159.1环排名第一，希腊选手克拉卡奇和俄罗斯选手巴特萨拉斯基纳以158.3和157.3环排名二、三位，墨西哥选手扎瓦拉被淘汰，取得第四名。</p>\n<p>第六轮，希腊选手克拉卡奇以177.7环的成绩被淘汰，因此获得一枚铜牌。最后两发子弹在中国选手张梦雪和俄罗斯选手巴特萨拉斯基纳之间展开。</p>\n<p>最终，中国选手张梦雪以199.4环获得金牌，俄罗斯选手巴特萨拉斯基纳以197.1环夺得银牌，希腊选手克拉卡奇以177.7环摘得铜牌。</p>\n","excerpt":"<p>中国队终于取得了里约奥运的首金<br></p>","more":"<p></p>\n<p>#张梦雪夺得里约奥运首金</p>\n<p><img src=\"http://obc3a6u0s.bkt.clouddn.com/QQ20160807-0@2x.png\" alt=\"张梦雪首金\"></p>\n<p>没能看到孙杨夺冠,总算在睡觉前有金牌了。</p>\n<p>预赛中， 俄罗斯选手巴特萨拉斯基纳以390环获第一，俄罗斯选手科尔舒诺娃以387环列第二，中国选手张梦雪以384环列第七。中国选手郭文珺发挥失常，打出378环未进决赛。</p>\n<p>决赛三枪过后，西班牙选手弗兰克特以30.2环排名第一，埃尔霍霍德以30环排名第二，中国选手张梦雪以28.2环排名第七。第二组三枪过后，西班牙选手弗兰克特以59.8环排名第一，希腊选手克拉卡奇以59.7环排名第二， 中国选手张梦雪以58.5环排名第五。</p>\n<p>淘汰赛首轮，希腊选手克拉卡奇以79.0环排名第一，中国选手张梦雪以79.0环并列第一。俄罗斯选手科尔舒诺娃第一个被淘汰，获得该项目第八名。</p>\n<p>第二轮，墨西哥选手扎瓦拉以99.1环排名第一，中国选手张梦雪以98.9环排名第二，俄罗斯选手巴特萨拉斯基纳以98.2环排名第三。塞尔维亚的维利克维奇被淘汰，获得第七名。</p>\n<p>第三轮，中国选手张梦雪以119.8环排名第一，墨西哥选手扎瓦拉以118.6环排名第二，俄罗斯选手巴特萨拉斯基纳以118.1环排名第三。西班牙选手弗兰克特第三位被淘汰，获得第六名。</p>\n<p>第四轮，中国选手张梦雪以138.9环排名第一，希腊选手克拉卡奇以138.1环排名第二，俄罗斯选手巴特萨拉斯基纳以137.9环排名第三。埃及选手埃尔霍霍德第四位被淘汰，获得第五名。</p>\n<p>第五轮，中国选手张梦雪以159.1环排名第一，希腊选手克拉卡奇和俄罗斯选手巴特萨拉斯基纳以158.3和157.3环排名二、三位，墨西哥选手扎瓦拉被淘汰，取得第四名。</p>\n<p>第六轮，希腊选手克拉卡奇以177.7环的成绩被淘汰，因此获得一枚铜牌。最后两发子弹在中国选手张梦雪和俄罗斯选手巴特萨拉斯基纳之间展开。</p>\n<p>最终，中国选手张梦雪以199.4环获得金牌，俄罗斯选手巴特萨拉斯基纳以197.1环夺得银牌，希腊选手克拉卡奇以177.7环摘得铜牌。</p>"},{"title":"Lua语言积累","date":"2016-12-05T11:11:25.000Z","description":"lua","_content":"\n学习参考网站：\n\n[http://book.luaer.cn/](http://book.luaer.cn/)\n[http://lua-users.org/wiki/TutorialDirectory](http://lua-users.org/wiki/TutorialDirectory)\n\n","source":"_posts/lua1.md","raw":"---\ntitle: Lua语言积累\ncategories: [Lua]\ntags: [Lua]\ndate: 2016-12-05 19:11:25\ndescription: lua \n---\n\n学习参考网站：\n\n[http://book.luaer.cn/](http://book.luaer.cn/)\n[http://lua-users.org/wiki/TutorialDirectory](http://lua-users.org/wiki/TutorialDirectory)\n\n","slug":"lua1","published":1,"updated":"2016-12-05T11:19:32.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ym5005lesqrfvh20xxa","content":"<p>学习参考网站：</p>\n<p><a href=\"http://book.luaer.cn/\" target=\"_blank\" rel=\"external\">http://book.luaer.cn/</a><br><a href=\"http://lua-users.org/wiki/TutorialDirectory\" target=\"_blank\" rel=\"external\">http://lua-users.org/wiki/TutorialDirectory</a></p>\n","excerpt":"","more":"<p>学习参考网站：</p>\n<p><a href=\"http://book.luaer.cn/\">http://book.luaer.cn/</a><br><a href=\"http://lua-users.org/wiki/TutorialDirectory\">http://lua-users.org/wiki/TutorialDirectory</a></p>\n"},{"title":"linux 端口查看","date":"2016-12-21T05:39:06.000Z","description":"linux 端口查看","_content":"linux开启允许外网访问的端口\n \nLINUX开启允许对外访问的网络端口 \n \nLINUX通过下面的命令可以开启允许对外访问的网络端口： \n \n/sbin/iptables -I INPUT -p tcp --dport 8000 -j ACCEPT #开启8000端口 \n \n/etc/rc.d/init.d/iptables save #保存配置 \n \n/etc/rc.d/init.d/iptables restart #重启服务 \n \n查看端口是否已经开放 \n \n/etc/init.d/iptables status","source":"_posts/linux2.md","raw":"---\ntitle: linux 端口查看\ncategories: [Linux]\ntags: [Linux]\ndate: 2016-12-21 13:39:06\ndescription: linux 端口查看\n---\nlinux开启允许外网访问的端口\n \nLINUX开启允许对外访问的网络端口 \n \nLINUX通过下面的命令可以开启允许对外访问的网络端口： \n \n/sbin/iptables -I INPUT -p tcp --dport 8000 -j ACCEPT #开启8000端口 \n \n/etc/rc.d/init.d/iptables save #保存配置 \n \n/etc/rc.d/init.d/iptables restart #重启服务 \n \n查看端口是否已经开放 \n \n/etc/init.d/iptables status","slug":"linux2","published":1,"updated":"2016-12-22T01:46:00.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ym8005pesqrmaxli9e4","content":"<p>linux开启允许外网访问的端口</p>\n<p>LINUX开启允许对外访问的网络端口 </p>\n<p>LINUX通过下面的命令可以开启允许对外访问的网络端口： </p>\n<p>/sbin/iptables -I INPUT -p tcp –dport 8000 -j ACCEPT #开启8000端口 </p>\n<p>/etc/rc.d/init.d/iptables save #保存配置 </p>\n<p>/etc/rc.d/init.d/iptables restart #重启服务 </p>\n<p>查看端口是否已经开放 </p>\n<p>/etc/init.d/iptables status</p>\n","excerpt":"","more":"<p>linux开启允许外网访问的端口</p>\n<p>LINUX开启允许对外访问的网络端口 </p>\n<p>LINUX通过下面的命令可以开启允许对外访问的网络端口： </p>\n<p>/sbin/iptables -I INPUT -p tcp –dport 8000 -j ACCEPT #开启8000端口 </p>\n<p>/etc/rc.d/init.d/iptables save #保存配置 </p>\n<p>/etc/rc.d/init.d/iptables restart #重启服务 </p>\n<p>查看端口是否已经开放 </p>\n<p>/etc/init.d/iptables status</p>\n"},{"title":"maven","date":"2016-08-20T03:37:33.000Z","_content":"\n\nmvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar\n\n### aliyun阿里云Maven仓库地址——加速你的maven构建\n修改setting.xml\n```XML\n<mirror>\n    <id>nexus-aliyun</id>\n    <mirrorOf>*</mirrorOf>\n    <name>Nexus aliyun</name>\n    <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror> \n```","source":"_posts/maven.md","raw":"---\ntitle: maven\ncategories: [maven]\ntags: [maven]\ndate: 2016-08-20 11:37:33\n---\n\n\nmvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar\n\n### aliyun阿里云Maven仓库地址——加速你的maven构建\n修改setting.xml\n```XML\n<mirror>\n    <id>nexus-aliyun</id>\n    <mirrorOf>*</mirrorOf>\n    <name>Nexus aliyun</name>\n    <url>http://maven.aliyun.com/nexus/content/groups/public</url>\n</mirror> \n```","slug":"maven","published":1,"updated":"2017-01-06T01:55:00.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yma005tesqrhwkdoqeq","content":"<p>mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar</p>\n<h3 id=\"aliyun阿里云Maven仓库地址——加速你的maven构建\"><a href=\"#aliyun阿里云Maven仓库地址——加速你的maven构建\" class=\"headerlink\" title=\"aliyun阿里云Maven仓库地址——加速你的maven构建\"></a>aliyun阿里云Maven仓库地址——加速你的maven构建</h3><p>修改setting.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>mvn install:install-file -Dfile=jar包的位置 -DgroupId=上面的groupId -DartifactId=上面的artifactId -Dversion=上面的version -Dpackaging=jar</p>\n<h3 id=\"aliyun阿里云Maven仓库地址——加速你的maven构建\"><a href=\"#aliyun阿里云Maven仓库地址——加速你的maven构建\" class=\"headerlink\" title=\"aliyun阿里云Maven仓库地址——加速你的maven构建\"></a>aliyun阿里云Maven仓库地址——加速你的maven构建</h3><p>修改setting.xml<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Nexus aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></div></pre></td></tr></table></figure></p>\n"},{"title":"mac按键符号","date":"2017-03-20T03:21:11.000Z","description":null,"_content":"\n# mac按键符号\n\n\n\n符号\t说明\n⌘\tCommand\n⇧\tShift\n⌥\tOption\n⌃\tControl\n↩︎\tReturn/Enter\n⌫\tDelete\n⌦\t向前删除键（Fn+Delete）\n↑\t上箭头\n↓\t下箭头\n→\t右箭头\n←\t左箭头\n⇞\tPage Up（Fn+↑）\n⇟\tPage Down（Fn+↓）\nHome\tFn + ←\nEnd\tFn + →\n⇥\t右制表符（Tab键）\n⇤\t左制表符（Shift+Tab）\n⎋\tEscape (Esc)\n\n## mac输入特殊符号的方法\n\n⚠️ ⌘+⌃+space 可以直接调出输入表情和特殊符号的选框, 开始显示的是emoji表情, 一直往下面拉滑或者点右上角的图标就是各种特殊符号咯.\n","source":"_posts/mac 按键符号.md","raw":"---\ntitle: mac按键符号\ncategories: [mac]\ntags: [mac]\ndate: 2017-03-20 11:21:11\ndescription:\n---\n\n# mac按键符号\n\n\n\n符号\t说明\n⌘\tCommand\n⇧\tShift\n⌥\tOption\n⌃\tControl\n↩︎\tReturn/Enter\n⌫\tDelete\n⌦\t向前删除键（Fn+Delete）\n↑\t上箭头\n↓\t下箭头\n→\t右箭头\n←\t左箭头\n⇞\tPage Up（Fn+↑）\n⇟\tPage Down（Fn+↓）\nHome\tFn + ←\nEnd\tFn + →\n⇥\t右制表符（Tab键）\n⇤\t左制表符（Shift+Tab）\n⎋\tEscape (Esc)\n\n## mac输入特殊符号的方法\n\n⚠️ ⌘+⌃+space 可以直接调出输入表情和特殊符号的选框, 开始显示的是emoji表情, 一直往下面拉滑或者点右上角的图标就是各种特殊符号咯.\n","slug":"mac 按键符号","published":1,"updated":"2020-09-28T10:57:11.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymc005vesqrtkcs67w8","content":"<h1 id=\"mac按键符号\"><a href=\"#mac按键符号\" class=\"headerlink\" title=\"mac按键符号\"></a>mac按键符号</h1><p>符号    说明<br>⌘    Command<br>⇧    Shift<br>⌥    Option<br>⌃    Control<br>↩︎    Return/Enter<br>⌫    Delete<br>⌦    向前删除键（Fn+Delete）<br>↑    上箭头<br>↓    下箭头<br>→    右箭头<br>←    左箭头<br>⇞    Page Up（Fn+↑）<br>⇟    Page Down（Fn+↓）<br>Home    Fn + ←<br>End    Fn + →<br>⇥    右制表符（Tab键）<br>⇤    左制表符（Shift+Tab）<br>⎋    Escape (Esc)</p>\n<h2 id=\"mac输入特殊符号的方法\"><a href=\"#mac输入特殊符号的方法\" class=\"headerlink\" title=\"mac输入特殊符号的方法\"></a>mac输入特殊符号的方法</h2><p>⚠️ ⌘+⌃+space 可以直接调出输入表情和特殊符号的选框, 开始显示的是emoji表情, 一直往下面拉滑或者点右上角的图标就是各种特殊符号咯.</p>\n","excerpt":"","more":"<h1 id=\"mac按键符号\"><a href=\"#mac按键符号\" class=\"headerlink\" title=\"mac按键符号\"></a>mac按键符号</h1><p>符号    说明<br>⌘    Command<br>⇧    Shift<br>⌥    Option<br>⌃    Control<br>↩︎    Return/Enter<br>⌫    Delete<br>⌦    向前删除键（Fn+Delete）<br>↑    上箭头<br>↓    下箭头<br>→    右箭头<br>←    左箭头<br>⇞    Page Up（Fn+↑）<br>⇟    Page Down（Fn+↓）<br>Home    Fn + ←<br>End    Fn + →<br>⇥    右制表符（Tab键）<br>⇤    左制表符（Shift+Tab）<br>⎋    Escape (Esc)</p>\n<h2 id=\"mac输入特殊符号的方法\"><a href=\"#mac输入特殊符号的方法\" class=\"headerlink\" title=\"mac输入特殊符号的方法\"></a>mac输入特殊符号的方法</h2><p>⚠️ ⌘+⌃+space 可以直接调出输入表情和特殊符号的选框, 开始显示的是emoji表情, 一直往下面拉滑或者点右上角的图标就是各种特殊符号咯.</p>\n"},{"title":"markdown语法积累","date":"2016-08-15T03:24:11.000Z","_content":"markdown\n<!-- more -->\n### markdown 序号\n\n在数字和“.”号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。\n1. 把冰箱门打开\n    1. 抬手\n    2. 抓把手\n        1. 再细化\n        2. 在细化二\n2. 把大象装进去\n3. 把冰箱门带上\n\n在‘-’号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。\n- 苹果\n    - 红富士\n        - 外地的\n            - 再往下\n    - 黄元帅\n- 梨\n- 桃子\n\n### 链接\n    [显示](链接)\n### 图片\n    ![](/node4.jpg)\n    \n[参考网址](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)","source":"_posts/markdown.md","raw":"---\ntitle: markdown语法积累\ndate: 2016-08-15 11:24:11\ncategories: [markdown]\ntags: [markdown]\n---\nmarkdown\n<!-- more -->\n### markdown 序号\n\n在数字和“.”号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。\n1. 把冰箱门打开\n    1. 抬手\n    2. 抓把手\n        1. 再细化\n        2. 在细化二\n2. 把大象装进去\n3. 把冰箱门带上\n\n在‘-’号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。\n- 苹果\n    - 红富士\n        - 外地的\n            - 再往下\n    - 黄元帅\n- 梨\n- 桃子\n\n### 链接\n    [显示](链接)\n### 图片\n    ![](/node4.jpg)\n    \n[参考网址](https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown)","slug":"markdown","published":1,"updated":"2016-10-19T01:44:42.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yme005zesqrfdik4rmz","content":"<p>markdown<br><a id=\"more\"></a></p>\n<h3 id=\"markdown-序号\"><a href=\"#markdown-序号\" class=\"headerlink\" title=\"markdown 序号\"></a>markdown 序号</h3><p>在数字和“.”号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。</p>\n<ol>\n<li>把冰箱门打开<ol>\n<li>抬手</li>\n<li>抓把手<ol>\n<li>再细化</li>\n<li>在细化二</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>把大象装进去</li>\n<li>把冰箱门带上</li>\n</ol>\n<p>在‘-’号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。</p>\n<ul>\n<li>苹果<ul>\n<li>红富士<ul>\n<li>外地的<ul>\n<li>再往下</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>黄元帅</li>\n</ul>\n</li>\n<li>梨</li>\n<li>桃子</li>\n</ul>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><pre><code>[显示](链接)\n</code></pre><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><pre><code>![](/node4.jpg)\n</code></pre><p><a href=\"https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown\" target=\"_blank\" rel=\"external\">参考网址</a></p>\n","excerpt":"<p>markdown<br></p>","more":"<p></p>\n<h3 id=\"markdown-序号\"><a href=\"#markdown-序号\" class=\"headerlink\" title=\"markdown 序号\"></a>markdown 序号</h3><p>在数字和“.”号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。</p>\n<ol>\n<li>把冰箱门打开<ol>\n<li>抬手</li>\n<li>抓把手<ol>\n<li>再细化</li>\n<li>在细化二</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>把大象装进去</li>\n<li>把冰箱门带上</li>\n</ol>\n<p>在‘-’号之后加一个空格，再跟列表项的内容。也可以使用多级无序列表，只需要在低层列表符号之前再加一个空格。</p>\n<ul>\n<li>苹果<ul>\n<li>红富士<ul>\n<li>外地的<ul>\n<li>再往下</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>黄元帅</li>\n</ul>\n</li>\n<li>梨</li>\n<li>桃子</li>\n</ul>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><pre><code>[显示](链接)\n</code></pre><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><pre><code>![](/node4.jpg)\n</code></pre><p><a href=\"https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown\">参考网址</a></p>"},{"title":"mongodb","date":"2016-10-09T08:28:41.000Z","description":"MongoDB 积累","_content":"\n<!-- more -->\n将MongoDB服务器设置成Windows启动服务（win10）\nmongod.exe --logpath \"D:\\data\\dbConf\\mongodb.log\" --logappend --dbpath \"D:\\data\\db\" --serviceName \"MongoDB\" \n--serviceDisplayName \"MongoDB\" --install\n\n|SQL术语/概念|MongoDB术语/概念|解释说明|\n|:----:|:----:|:---:|\n|database|\tdatabase|\t数据库|\n|table\t|collection\t|数据库表/集合|\n|row\t|document\t|数据记录行/文档|\n|column|\tfield\t|数据字段/域|\n|index|\tindex\t|索引|\n|table |joins\t| \t表连接,MongoDB不支持|\n|primary key|\tprimary key\t|主键,MongoDB自动将_id字段设置为主键|\n","source":"_posts/mongodb.md","raw":"---\ntitle: mongodb\ncategories: [mongodb]\ntags: [mongodb]\ndate: 2016-10-09 16:28:41\ndescription: MongoDB 积累\n---\n\n<!-- more -->\n将MongoDB服务器设置成Windows启动服务（win10）\nmongod.exe --logpath \"D:\\data\\dbConf\\mongodb.log\" --logappend --dbpath \"D:\\data\\db\" --serviceName \"MongoDB\" \n--serviceDisplayName \"MongoDB\" --install\n\n|SQL术语/概念|MongoDB术语/概念|解释说明|\n|:----:|:----:|:---:|\n|database|\tdatabase|\t数据库|\n|table\t|collection\t|数据库表/集合|\n|row\t|document\t|数据记录行/文档|\n|column|\tfield\t|数据字段/域|\n|index|\tindex\t|索引|\n|table |joins\t| \t表连接,MongoDB不支持|\n|primary key|\tprimary key\t|主键,MongoDB自动将_id字段设置为主键|\n","slug":"mongodb","published":1,"updated":"2016-10-09T08:42:23.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymh0061esqr4r9sz0us","content":"<a id=\"more\"></a>\n<p>将MongoDB服务器设置成Windows启动服务（win10）<br>mongod.exe –logpath “D:\\data\\dbConf\\mongodb.log” –logappend –dbpath “D:\\data\\db” –serviceName “MongoDB”<br>–serviceDisplayName “MongoDB” –install</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">SQL术语/概念</th>\n<th style=\"text-align:center\">MongoDB术语/概念</th>\n<th style=\"text-align:center\">解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:center\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">collection</td>\n<td style=\"text-align:center\">数据库表/集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">row</td>\n<td style=\"text-align:center\">document</td>\n<td style=\"text-align:center\">数据记录行/文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">column</td>\n<td style=\"text-align:center\">field</td>\n<td style=\"text-align:center\">数据字段/域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">joins</td>\n<td style=\"text-align:center\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:center\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>将MongoDB服务器设置成Windows启动服务（win10）<br>mongod.exe –logpath “D:\\data\\dbConf\\mongodb.log” –logappend –dbpath “D:\\data\\db” –serviceName “MongoDB”<br>–serviceDisplayName “MongoDB” –install</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">SQL术语/概念</th>\n<th style=\"text-align:center\">MongoDB术语/概念</th>\n<th style=\"text-align:center\">解释说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:center\">database</td>\n<td style=\"text-align:center\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">collection</td>\n<td style=\"text-align:center\">数据库表/集合</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">row</td>\n<td style=\"text-align:center\">document</td>\n<td style=\"text-align:center\">数据记录行/文档</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">column</td>\n<td style=\"text-align:center\">field</td>\n<td style=\"text-align:center\">数据字段/域</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">joins</td>\n<td style=\"text-align:center\">表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:center\">primary key</td>\n<td style=\"text-align:center\">主键,MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody>\n</table>"},{"title":"10家慕课网站","date":"2016-08-02T10:14:39.000Z","_content":"\n收集的10个网站,蹭课\n<!-- more -->\n## 地址\n\n   [MOOC中国 http://www.mooc.cn/](http://www.mooc.cn)\n   [慕课网 http://www.imooc.com](http://www.imooc.com)\n   [爱课程 http://www.icourses.cn](http://www.icourses.cn)\n   [中国大学Mooc http://www.icourse163.org](http://www.icourse163.org)\n   [好大学在线 http://www.cnmooc.org](http://www.cnmooc.org)\n   [学堂在线 http://www.xuetangx.com](http://www.xuetangx.com)\n   [天天象上 http://www.daydays.com](http://www.daydays.com)\n   [咪咕学堂 http://www.miguxue.com](http://www.miguxue.com)\n   [万门大学 http://www.wanmen.org](http://www.wanmen.org)\n   [顶你学堂 http://www.topu.com](http://www.topu.com)\n","source":"_posts/mooc10.md","raw":"---\ntitle: 10家慕课网站\ndate: 2016-08-02 18:14:39\ncategories: [其他]\ntags: 网站\n---\n\n收集的10个网站,蹭课\n<!-- more -->\n## 地址\n\n   [MOOC中国 http://www.mooc.cn/](http://www.mooc.cn)\n   [慕课网 http://www.imooc.com](http://www.imooc.com)\n   [爱课程 http://www.icourses.cn](http://www.icourses.cn)\n   [中国大学Mooc http://www.icourse163.org](http://www.icourse163.org)\n   [好大学在线 http://www.cnmooc.org](http://www.cnmooc.org)\n   [学堂在线 http://www.xuetangx.com](http://www.xuetangx.com)\n   [天天象上 http://www.daydays.com](http://www.daydays.com)\n   [咪咕学堂 http://www.miguxue.com](http://www.miguxue.com)\n   [万门大学 http://www.wanmen.org](http://www.wanmen.org)\n   [顶你学堂 http://www.topu.com](http://www.topu.com)\n","slug":"mooc10","published":1,"updated":"2016-09-22T05:42:39.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymk0065esqrti9e3bfw","content":"<p>收集的10个网站,蹭课<br><a id=\"more\"></a></p>\n<h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2><p>   <a href=\"http://www.mooc.cn\" target=\"_blank\" rel=\"external\">MOOC中国 http://www.mooc.cn/</a><br>   <a href=\"http://www.imooc.com\" target=\"_blank\" rel=\"external\">慕课网 http://www.imooc.com</a><br>   <a href=\"http://www.icourses.cn\" target=\"_blank\" rel=\"external\">爱课程 http://www.icourses.cn</a><br>   <a href=\"http://www.icourse163.org\" target=\"_blank\" rel=\"external\">中国大学Mooc http://www.icourse163.org</a><br>   <a href=\"http://www.cnmooc.org\" target=\"_blank\" rel=\"external\">好大学在线 http://www.cnmooc.org</a><br>   <a href=\"http://www.xuetangx.com\" target=\"_blank\" rel=\"external\">学堂在线 http://www.xuetangx.com</a><br>   <a href=\"http://www.daydays.com\" target=\"_blank\" rel=\"external\">天天象上 http://www.daydays.com</a><br>   <a href=\"http://www.miguxue.com\" target=\"_blank\" rel=\"external\">咪咕学堂 http://www.miguxue.com</a><br>   <a href=\"http://www.wanmen.org\" target=\"_blank\" rel=\"external\">万门大学 http://www.wanmen.org</a><br>   <a href=\"http://www.topu.com\" target=\"_blank\" rel=\"external\">顶你学堂 http://www.topu.com</a></p>\n","excerpt":"<p>收集的10个网站,蹭课<br></p>","more":"<p></p>\n<h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2><p>   <a href=\"http://www.mooc.cn\">MOOC中国 http://www.mooc.cn/</a><br>   <a href=\"http://www.imooc.com\">慕课网 http://www.imooc.com</a><br>   <a href=\"http://www.icourses.cn\">爱课程 http://www.icourses.cn</a><br>   <a href=\"http://www.icourse163.org\">中国大学Mooc http://www.icourse163.org</a><br>   <a href=\"http://www.cnmooc.org\">好大学在线 http://www.cnmooc.org</a><br>   <a href=\"http://www.xuetangx.com\">学堂在线 http://www.xuetangx.com</a><br>   <a href=\"http://www.daydays.com\">天天象上 http://www.daydays.com</a><br>   <a href=\"http://www.miguxue.com\">咪咕学堂 http://www.miguxue.com</a><br>   <a href=\"http://www.wanmen.org\">万门大学 http://www.wanmen.org</a><br>   <a href=\"http://www.topu.com\">顶你学堂 http://www.topu.com</a></p>"},{"title":"面试题","date":"2020-05-28T12:10:32.000Z","_content":"\n<!-- more -->\n\n### 如何判断链表有环\n第一种方法是比较笨的方法，那就是依次遍历链表，直到遇到和之前遍历的节点一样的节点，则认为有环。\n\n### 为啥要覆盖hashcode\n\n### 如何解决hash冲突\n\n### https与http区别\n\n1. https协议需要到CA  （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。)\n2. http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n3. http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4. http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)\n   \n\n\n### mysql数据库默认的数据隔离级别\n\n","source":"_posts/mst.md","raw":"---\ntitle: 面试题\ndate: 2020-05-28 20:10:32\ncategories: [java]\ntags: [java]\n---\n\n<!-- more -->\n\n### 如何判断链表有环\n第一种方法是比较笨的方法，那就是依次遍历链表，直到遇到和之前遍历的节点一样的节点，则认为有环。\n\n### 为啥要覆盖hashcode\n\n### 如何解决hash冲突\n\n### https与http区别\n\n1. https协议需要到CA  （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。)\n2. http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。\n3. http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。\n\n4. http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)\n   \n\n\n### mysql数据库默认的数据隔离级别\n\n","slug":"mst","published":1,"updated":"2020-08-04T04:57:28.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yml0066esqrxk7nplpr","content":"<a id=\"more\"></a>\n<h3 id=\"如何判断链表有环\"><a href=\"#如何判断链表有环\" class=\"headerlink\" title=\"如何判断链表有环\"></a>如何判断链表有环</h3><p>第一种方法是比较笨的方法，那就是依次遍历链表，直到遇到和之前遍历的节点一样的节点，则认为有环。</p>\n<h3 id=\"为啥要覆盖hashcode\"><a href=\"#为啥要覆盖hashcode\" class=\"headerlink\" title=\"为啥要覆盖hashcode\"></a>为啥要覆盖hashcode</h3><h3 id=\"如何解决hash冲突\"><a href=\"#如何解决hash冲突\" class=\"headerlink\" title=\"如何解决hash冲突\"></a>如何解决hash冲突</h3><h3 id=\"https与http区别\"><a href=\"#https与http区别\" class=\"headerlink\" title=\"https与http区别\"></a>https与http区别</h3><ol>\n<li>https协议需要到CA  （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。)</li>\n<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li>\n<li><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n</li>\n<li><p>http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p>\n</li>\n</ol>\n<h3 id=\"mysql数据库默认的数据隔离级别\"><a href=\"#mysql数据库默认的数据隔离级别\" class=\"headerlink\" title=\"mysql数据库默认的数据隔离级别\"></a>mysql数据库默认的数据隔离级别</h3>","excerpt":"","more":"<h3 id=\"如何判断链表有环\"><a href=\"#如何判断链表有环\" class=\"headerlink\" title=\"如何判断链表有环\"></a>如何判断链表有环</h3><p>第一种方法是比较笨的方法，那就是依次遍历链表，直到遇到和之前遍历的节点一样的节点，则认为有环。</p>\n<h3 id=\"为啥要覆盖hashcode\"><a href=\"#为啥要覆盖hashcode\" class=\"headerlink\" title=\"为啥要覆盖hashcode\"></a>为啥要覆盖hashcode</h3><h3 id=\"如何解决hash冲突\"><a href=\"#如何解决hash冲突\" class=\"headerlink\" title=\"如何解决hash冲突\"></a>如何解决hash冲突</h3><h3 id=\"https与http区别\"><a href=\"#https与http区别\" class=\"headerlink\" title=\"https与http区别\"></a>https与http区别</h3><ol>\n<li>https协议需要到CA  （Certificate Authority，证书颁发机构）申请证书，一般免费证书较少，因而需要一定费用。(原来网易官网是http，而网易邮箱是https。)</li>\n<li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li>\n<li><p>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>\n</li>\n<li><p>http的连接很简单，是无状态的。Https协议是由SSL+Http协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。(无状态的意思是其数据包的发送、传输和接收都是相互独立的。无连接的意思是指通信双方都不长久的维持对方的任何信息。)</p>\n</li>\n</ol>\n<h3 id=\"mysql数据库默认的数据隔离级别\"><a href=\"#mysql数据库默认的数据隔离级别\" class=\"headerlink\" title=\"mysql数据库默认的数据隔离级别\"></a>mysql数据库默认的数据隔离级别</h3>"},{"title":"创建自己maven archetype","date":"2016-10-11T04:43:48.000Z","description":"创建自己maven archetype","_content":"创建自己maven archetype\n\nmaven archetype  是一个原型构建框架，这样可以把一些重复性的配置代码放到archetype里，就不用每次都从头去搭建项目。\n\n1.创建一个maven项目mvn-archetyp-demo，添加自己想要重复利用的元素，如一些配置，通用代码等\n\n2.在工程下执行：\nmvn-archetyp-demo> mvn clean\nmvn-archetyp-demo> mvn archetype:create-from-project\nmvn-archetyp-demo> cd target/generated-sources/archetype\nmvn-archetyp-demo/target/generated-sources/archetype> mvn clean install\n\n这样通过IDE就可以选择自己生成的archetype了。","source":"_posts/mvnarchetype.md","raw":"---\ntitle: 创建自己maven archetype\ncategories: [maven]\ntags: [maven]\ndate: 2016-10-11 12:43:48\ndescription: 创建自己maven archetype\n---\n创建自己maven archetype\n\nmaven archetype  是一个原型构建框架，这样可以把一些重复性的配置代码放到archetype里，就不用每次都从头去搭建项目。\n\n1.创建一个maven项目mvn-archetyp-demo，添加自己想要重复利用的元素，如一些配置，通用代码等\n\n2.在工程下执行：\nmvn-archetyp-demo> mvn clean\nmvn-archetyp-demo> mvn archetype:create-from-project\nmvn-archetyp-demo> cd target/generated-sources/archetype\nmvn-archetyp-demo/target/generated-sources/archetype> mvn clean install\n\n这样通过IDE就可以选择自己生成的archetype了。","slug":"mvnarchetype","published":1,"updated":"2016-10-11T04:46:14.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymo006aesqrhpc3swae","content":"<p>创建自己maven archetype</p>\n<p>maven archetype  是一个原型构建框架，这样可以把一些重复性的配置代码放到archetype里，就不用每次都从头去搭建项目。</p>\n<p>1.创建一个maven项目mvn-archetyp-demo，添加自己想要重复利用的元素，如一些配置，通用代码等</p>\n<p>2.在工程下执行：<br>mvn-archetyp-demo&gt; mvn clean<br>mvn-archetyp-demo&gt; mvn archetype:create-from-project<br>mvn-archetyp-demo&gt; cd target/generated-sources/archetype<br>mvn-archetyp-demo/target/generated-sources/archetype&gt; mvn clean install</p>\n<p>这样通过IDE就可以选择自己生成的archetype了。</p>\n","excerpt":"","more":"<p>创建自己maven archetype</p>\n<p>maven archetype  是一个原型构建框架，这样可以把一些重复性的配置代码放到archetype里，就不用每次都从头去搭建项目。</p>\n<p>1.创建一个maven项目mvn-archetyp-demo，添加自己想要重复利用的元素，如一些配置，通用代码等</p>\n<p>2.在工程下执行：<br>mvn-archetyp-demo&gt; mvn clean<br>mvn-archetyp-demo&gt; mvn archetype:create-from-project<br>mvn-archetyp-demo&gt; cd target/generated-sources/archetype<br>mvn-archetyp-demo/target/generated-sources/archetype&gt; mvn clean install</p>\n<p>这样通过IDE就可以选择自己生成的archetype了。</p>\n"},{"title":"Maven 打包实现环境配置分离","date":"2016-10-21T02:16:09.000Z","description":"使用maven实现环境配置分离","_content":"\n主要是通过打包时传递不同的参数来实现不同的环境产生不同的配置文件（如数据库连接等），从而实现同一版本代码不同部署环境。\n\n废话不多说，直接上干货，进行以下步骤就可以改造你的工程了\n\n### 先修改pom.xml\nbuild下配置\n```xml\n<resources>\n    <resource>\n        <directory>${basedir}/src/main/resources</directory>\n        <includes>\n            <include>**/*</include>\n        </includes>\n    </resource>\n    <!--设置自动替换-->\n    <resource>\n        <directory>${basedir}/src/main/resources</directory>\n        <includes>\n            <include>conf/config.properties</include>\n        </includes>\n        <!--也可以用排除标签-->\n        <!--<excludes></excludes>-->\n        <!--开启过滤-->\n        <filtering>true</filtering>\n    </resource>\n</resources>\n   ```\nprofiles配置\n```xml\n<profiles>\n   <profile>\n       <id>product</id>\n       <build>\n           <filters>\n               <filter>${basedir}/src/main/resources/environments/config-product.properties</filter>\n           </filters>\n       </build>\n   </profile>\n   <profile>\n       <id>test</id>\n       <build>\n           <filters>\n               <filter>${basedir}/src/main/resources/environments/config-test.properties</filter>\n           </filters>\n       </build>\n   </profile>\n   <profile>\n       <id>dev</id>\n       <activation>\n           <activeByDefault>true</activeByDefault>\n       </activation>\n       <build>\n           <filters>\n               <filter>${basedir}/src/main/resources/environments/config-dev.properties</filter>\n           </filters>\n       </build>\n   </profile>\n</profiles>\n```\n\n### 修改配置文件config.properties\n```properties\njdbc.driver=${db.driver}\njdbc.url=${db.url}\njdbc.username=${db.username}\njdbc.password=${db.password}\n```\n添加特定环境的配置文件\n开发环境config-dev.properties\n```properties\ndb.driver=com.mysql.jdbc.Driver\ndb.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;characterEncoding=utf-8\ndb.username=root\ndb.password=root\n```\n测试环境config-test.properties\n```properties\ndb.driver=com.mysql.jdbc.Driver\ndb.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;characterEncoding=utf-8\ndb.username=root\ndb.password=root\n```\n\n其他环境的文件（略）\n*<font color=\"red\">注意</font>*：\n- 配置文件名称与pom.xml中profiles节点中一致\n- 文件的key（如db.driver）与config.properties中的${db.driver}对应\n\n### maven打包命令\nmvn clean install -Pdev\nmvn clean install -product\nmvn clean install -Ptest\n\nIntellij IDEA  maven打包设置\n![](maven2.jpg)\n\n### 部署war包\n\n代码地址：https://github.com/beijinguang/ssm \n欢迎大家fork，star\n\n安利下微信公众号:\n![](code.jpg)\n\n\n\n","source":"_posts/mvnenvironmentseparate.md","raw":"---\ntitle: Maven 打包实现环境配置分离\ncategories: [maven]\ntags: [maven]\ndate: 2016-10-21 10:16:09\ndescription: 使用maven实现环境配置分离\n---\n\n主要是通过打包时传递不同的参数来实现不同的环境产生不同的配置文件（如数据库连接等），从而实现同一版本代码不同部署环境。\n\n废话不多说，直接上干货，进行以下步骤就可以改造你的工程了\n\n### 先修改pom.xml\nbuild下配置\n```xml\n<resources>\n    <resource>\n        <directory>${basedir}/src/main/resources</directory>\n        <includes>\n            <include>**/*</include>\n        </includes>\n    </resource>\n    <!--设置自动替换-->\n    <resource>\n        <directory>${basedir}/src/main/resources</directory>\n        <includes>\n            <include>conf/config.properties</include>\n        </includes>\n        <!--也可以用排除标签-->\n        <!--<excludes></excludes>-->\n        <!--开启过滤-->\n        <filtering>true</filtering>\n    </resource>\n</resources>\n   ```\nprofiles配置\n```xml\n<profiles>\n   <profile>\n       <id>product</id>\n       <build>\n           <filters>\n               <filter>${basedir}/src/main/resources/environments/config-product.properties</filter>\n           </filters>\n       </build>\n   </profile>\n   <profile>\n       <id>test</id>\n       <build>\n           <filters>\n               <filter>${basedir}/src/main/resources/environments/config-test.properties</filter>\n           </filters>\n       </build>\n   </profile>\n   <profile>\n       <id>dev</id>\n       <activation>\n           <activeByDefault>true</activeByDefault>\n       </activation>\n       <build>\n           <filters>\n               <filter>${basedir}/src/main/resources/environments/config-dev.properties</filter>\n           </filters>\n       </build>\n   </profile>\n</profiles>\n```\n\n### 修改配置文件config.properties\n```properties\njdbc.driver=${db.driver}\njdbc.url=${db.url}\njdbc.username=${db.username}\njdbc.password=${db.password}\n```\n添加特定环境的配置文件\n开发环境config-dev.properties\n```properties\ndb.driver=com.mysql.jdbc.Driver\ndb.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;characterEncoding=utf-8\ndb.username=root\ndb.password=root\n```\n测试环境config-test.properties\n```properties\ndb.driver=com.mysql.jdbc.Driver\ndb.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;characterEncoding=utf-8\ndb.username=root\ndb.password=root\n```\n\n其他环境的文件（略）\n*<font color=\"red\">注意</font>*：\n- 配置文件名称与pom.xml中profiles节点中一致\n- 文件的key（如db.driver）与config.properties中的${db.driver}对应\n\n### maven打包命令\nmvn clean install -Pdev\nmvn clean install -product\nmvn clean install -Ptest\n\nIntellij IDEA  maven打包设置\n![](maven2.jpg)\n\n### 部署war包\n\n代码地址：https://github.com/beijinguang/ssm \n欢迎大家fork，star\n\n安利下微信公众号:\n![](code.jpg)\n\n\n\n","slug":"mvnenvironmentseparate","published":1,"updated":"2016-10-21T03:28:11.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymq006cesqr7kcmu5kt","content":"<p>主要是通过打包时传递不同的参数来实现不同的环境产生不同的配置文件（如数据库连接等），从而实现同一版本代码不同部署环境。</p>\n<p>废话不多说，直接上干货，进行以下步骤就可以改造你的工程了</p>\n<h3 id=\"先修改pom-xml\"><a href=\"#先修改pom-xml\" class=\"headerlink\" title=\"先修改pom.xml\"></a>先修改pom.xml</h3><p>build下配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置自动替换--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>conf/config.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--也可以用排除标签--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;excludes&gt;&lt;/excludes&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--开启过滤--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>profiles配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/environments/config-product.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/environments/config-test.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/environments/config-dev.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"修改配置文件config-properties\"><a href=\"#修改配置文件config-properties\" class=\"headerlink\" title=\"修改配置文件config.properties\"></a>修改配置文件config.properties</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.driver=$&#123;db.driver&#125;</div><div class=\"line\">jdbc.url=$&#123;db.url&#125;</div><div class=\"line\">jdbc.username=$&#123;db.username&#125;</div><div class=\"line\">jdbc.password=$&#123;db.password&#125;</div></pre></td></tr></table></figure>\n<p>添加特定环境的配置文件<br>开发环境config-dev.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.driver=com.mysql.jdbc.Driver</div><div class=\"line\">db.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;amp;characterEncoding=utf-8</div><div class=\"line\">db.username=root</div><div class=\"line\">db.password=root</div></pre></td></tr></table></figure></p>\n<p>测试环境config-test.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.driver=com.mysql.jdbc.Driver</div><div class=\"line\">db.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;amp;characterEncoding=utf-8</div><div class=\"line\">db.username=root</div><div class=\"line\">db.password=root</div></pre></td></tr></table></figure></p>\n<p>其他环境的文件（略）<br><em><font color=\"red\">注意</font></em>：</p>\n<ul>\n<li>配置文件名称与pom.xml中profiles节点中一致</li>\n<li>文件的key（如db.driver）与config.properties中的${db.driver}对应</li>\n</ul>\n<h3 id=\"maven打包命令\"><a href=\"#maven打包命令\" class=\"headerlink\" title=\"maven打包命令\"></a>maven打包命令</h3><p>mvn clean install -Pdev<br>mvn clean install -product<br>mvn clean install -Ptest</p>\n<p>Intellij IDEA  maven打包设置<br><img src=\"/2016/10/21/mvnenvironmentseparate/maven2.jpg\" alt=\"\"></p>\n<h3 id=\"部署war包\"><a href=\"#部署war包\" class=\"headerlink\" title=\"部署war包\"></a>部署war包</h3><p>代码地址：<a href=\"https://github.com/beijinguang/ssm\" target=\"_blank\" rel=\"external\">https://github.com/beijinguang/ssm</a><br>欢迎大家fork，star</p>\n<p>安利下微信公众号:<br><img src=\"/2016/10/21/mvnenvironmentseparate/code.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>主要是通过打包时传递不同的参数来实现不同的环境产生不同的配置文件（如数据库连接等），从而实现同一版本代码不同部署环境。</p>\n<p>废话不多说，直接上干货，进行以下步骤就可以改造你的工程了</p>\n<h3 id=\"先修改pom-xml\"><a href=\"#先修改pom-xml\" class=\"headerlink\" title=\"先修改pom.xml\"></a>先修改pom.xml</h3><p>build下配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!--设置自动替换--&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;basedir&#125;/src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>conf/config.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--也可以用排除标签--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--&lt;excludes&gt;&lt;/excludes&gt;--&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!--开启过滤--&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>profiles配置<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>product<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/environments/config-product.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/environments/config-test.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>$&#123;basedir&#125;/src/main/resources/environments/config-dev.properties<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></div><div class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">filters</span>&gt;</span></div><div class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"修改配置文件config-properties\"><a href=\"#修改配置文件config-properties\" class=\"headerlink\" title=\"修改配置文件config.properties\"></a>修改配置文件config.properties</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">jdbc.driver=$&#123;db.driver&#125;</div><div class=\"line\">jdbc.url=$&#123;db.url&#125;</div><div class=\"line\">jdbc.username=$&#123;db.username&#125;</div><div class=\"line\">jdbc.password=$&#123;db.password&#125;</div></pre></td></tr></table></figure>\n<p>添加特定环境的配置文件<br>开发环境config-dev.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.driver=com.mysql.jdbc.Driver</div><div class=\"line\">db.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;amp;characterEncoding=utf-8</div><div class=\"line\">db.username=root</div><div class=\"line\">db.password=root</div></pre></td></tr></table></figure></p>\n<p>测试环境config-test.properties<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.driver=com.mysql.jdbc.Driver</div><div class=\"line\">db.url=jdbc:mysql://127.0.0.1:3306/blog?useUnicode=true&amp;amp;characterEncoding=utf-8</div><div class=\"line\">db.username=root</div><div class=\"line\">db.password=root</div></pre></td></tr></table></figure></p>\n<p>其他环境的文件（略）<br><em><font color=\"red\">注意</font></em>：</p>\n<ul>\n<li>配置文件名称与pom.xml中profiles节点中一致</li>\n<li>文件的key（如db.driver）与config.properties中的${db.driver}对应</li>\n</ul>\n<h3 id=\"maven打包命令\"><a href=\"#maven打包命令\" class=\"headerlink\" title=\"maven打包命令\"></a>maven打包命令</h3><p>mvn clean install -Pdev<br>mvn clean install -product<br>mvn clean install -Ptest</p>\n<p>Intellij IDEA  maven打包设置<br><img src=\"/2016/10/21/mvnenvironmentseparate/maven2.jpg\" alt=\"\"></p>\n<h3 id=\"部署war包\"><a href=\"#部署war包\" class=\"headerlink\" title=\"部署war包\"></a>部署war包</h3><p>代码地址：<a href=\"https://github.com/beijinguang/ssm\">https://github.com/beijinguang/ssm</a><br>欢迎大家fork，star</p>\n<p>安利下微信公众号:<br><img src=\"/2016/10/21/mvnenvironmentseparate/code.jpg\" alt=\"\"></p>\n"},{"title":"mybatis generator 配置文件","date":"2016-12-12T09:04:37.000Z","description":"mybatis generator xml详解","_content":"```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" \n\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" >  \n<generatorConfiguration>  \n    <!-- 引入配置文件 -->  \n    <properties resource=\"init.properties\"/>  \n      \n    <!-- 指定数据连接驱动jar地址 -->  \n    <classPathEntry location=\"${classPath}\" />  \n      \n    <!-- 一个数据库一个context -->  \n    <context id=\"infoGuardian\">  \n        <!-- 注释 -->  \n        <commentGenerator >  \n            <property name=\"suppressAllComments\" value=\"false\"/><!-- 是否取消注释 -->  \n            <property name=\"suppressDate\" value=\"true\" /> <!-- 是否生成注释代时间戳-->  \n        </commentGenerator>  \n          \n        <!-- jdbc连接 -->  \n        <jdbcConnection driverClass=\"${jdbc_driver}\"  \n            connectionURL=\"${jdbc_url}\" userId=\"${jdbc_user}\"  \n            password=\"${jdbc_password}\" />  \n          \n        <!-- 类型转换 -->  \n        <javaTypeResolver>  \n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->  \n            <property name=\"forceBigDecimals\" value=\"false\"/>  \n        </javaTypeResolver>  \n          \n        <!-- 生成实体类地址 -->    \n        <javaModelGenerator targetPackage=\"com.oop.eksp.user.model\"  \n            targetProject=\"${project}\" >  \n            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->  \n            <property name=\"enableSubPackages\" value=\"false\"/>  \n            <!-- 是否针对string类型的字段在set的时候进行trim调用 -->  \n            <property name=\"trimStrings\" value=\"true\"/>  \n        </javaModelGenerator>  \n          \n        <!-- 生成mapxml文件 -->  \n        <sqlMapGenerator targetPackage=\"com.oop.eksp.user.data\"  \n            targetProject=\"${project}\" >  \n            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->  \n            <property name=\"enableSubPackages\" value=\"false\" />  \n        </sqlMapGenerator>  \n          \n        <!-- 生成mapxml对应client，也就是接口dao -->      \n        <javaClientGenerator targetPackage=\"com.oop.eksp.user.data\"  \n            targetProject=\"${project}\" type=\"XMLMAPPER\" >  \n            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->  \n            <property name=\"enableSubPackages\" value=\"false\" />  \n        </javaClientGenerator>  \n          \n        <!-- 配置表信息 -->      \n        <table schema=\"${jdbc_user}\" tableName=\"s_user\"  \n            domainObjectName=\"UserEntity\" enableCountByExample=\"false\"  \n            enableDeleteByExample=\"false\" enableSelectByExample=\"false\"  \n            enableUpdateByExample=\"false\">  \n            <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample   \n                是否生成 example类   -->  \n              \n            <!-- 忽略列，不生成bean 字段 -->  \n            <ignoreColumn column=\"FRED\" />  \n            <!-- 指定列的java数据类型 -->  \n            <columnOverride column=\"LONG_VARCHAR_FIELD\" jdbcType=\"VARCHAR\" />  \n        </table>  \n  \n    </context>  \n</generatorConfiguration>  \n```","source":"_posts/mybatis1.md","raw":"---\ntitle: mybatis generator 配置文件\ncategories: [mybatis]\ntags: [mybatis]\ndate: 2016-12-12 17:04:37\ndescription: mybatis generator xml详解\n---\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" \n\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" >  \n<generatorConfiguration>  \n    <!-- 引入配置文件 -->  \n    <properties resource=\"init.properties\"/>  \n      \n    <!-- 指定数据连接驱动jar地址 -->  \n    <classPathEntry location=\"${classPath}\" />  \n      \n    <!-- 一个数据库一个context -->  \n    <context id=\"infoGuardian\">  \n        <!-- 注释 -->  \n        <commentGenerator >  \n            <property name=\"suppressAllComments\" value=\"false\"/><!-- 是否取消注释 -->  \n            <property name=\"suppressDate\" value=\"true\" /> <!-- 是否生成注释代时间戳-->  \n        </commentGenerator>  \n          \n        <!-- jdbc连接 -->  \n        <jdbcConnection driverClass=\"${jdbc_driver}\"  \n            connectionURL=\"${jdbc_url}\" userId=\"${jdbc_user}\"  \n            password=\"${jdbc_password}\" />  \n          \n        <!-- 类型转换 -->  \n        <javaTypeResolver>  \n            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->  \n            <property name=\"forceBigDecimals\" value=\"false\"/>  \n        </javaTypeResolver>  \n          \n        <!-- 生成实体类地址 -->    \n        <javaModelGenerator targetPackage=\"com.oop.eksp.user.model\"  \n            targetProject=\"${project}\" >  \n            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->  \n            <property name=\"enableSubPackages\" value=\"false\"/>  \n            <!-- 是否针对string类型的字段在set的时候进行trim调用 -->  \n            <property name=\"trimStrings\" value=\"true\"/>  \n        </javaModelGenerator>  \n          \n        <!-- 生成mapxml文件 -->  \n        <sqlMapGenerator targetPackage=\"com.oop.eksp.user.data\"  \n            targetProject=\"${project}\" >  \n            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->  \n            <property name=\"enableSubPackages\" value=\"false\" />  \n        </sqlMapGenerator>  \n          \n        <!-- 生成mapxml对应client，也就是接口dao -->      \n        <javaClientGenerator targetPackage=\"com.oop.eksp.user.data\"  \n            targetProject=\"${project}\" type=\"XMLMAPPER\" >  \n            <!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->  \n            <property name=\"enableSubPackages\" value=\"false\" />  \n        </javaClientGenerator>  \n          \n        <!-- 配置表信息 -->      \n        <table schema=\"${jdbc_user}\" tableName=\"s_user\"  \n            domainObjectName=\"UserEntity\" enableCountByExample=\"false\"  \n            enableDeleteByExample=\"false\" enableSelectByExample=\"false\"  \n            enableUpdateByExample=\"false\">  \n            <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample   \n                是否生成 example类   -->  \n              \n            <!-- 忽略列，不生成bean 字段 -->  \n            <ignoreColumn column=\"FRED\" />  \n            <!-- 指定列的java数据类型 -->  \n            <columnOverride column=\"LONG_VARCHAR_FIELD\" jdbcType=\"VARCHAR\" />  \n        </table>  \n  \n    </context>  \n</generatorConfiguration>  \n```","slug":"mybatis1","published":1,"updated":"2016-12-16T03:31:42.127Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymt006gesqr1nub6pie","content":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;  </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" </span></div><div class=\"line\">\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" &gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 引入配置文件 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"init.properties\"</span>/&gt;</span>  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 指定数据连接驱动jar地址 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">\"$&#123;classPath&#125;\"</span> /&gt;</span>  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 一个数据库一个context --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"infoGuardian\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 注释 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span> &gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span><span class=\"comment\">&lt;!-- 是否取消注释 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 是否生成注释代时间戳--&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;jdbc_driver&#125;\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;jdbc_url&#125;\"</span> <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;jdbc_user&#125;\"</span>  </div><div class=\"line\">            <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;jdbc_password&#125;\"</span> /&gt;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 类型转换 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 生成实体类地址 --&gt;</span>    </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.oop.eksp.user.model\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;project&#125;\"</span> &gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否针对string类型的字段在set的时候进行trim调用 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 生成mapxml文件 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.oop.eksp.user.data\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;project&#125;\"</span> &gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 生成mapxml对应client，也就是接口dao --&gt;</span>      </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.oop.eksp.user.data\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;project&#125;\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> &gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 配置表信息 --&gt;</span>      </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"$&#123;jdbc_user&#125;\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"s_user\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"UserEntity\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span>  </div><div class=\"line\">            <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span>  </div><div class=\"line\">            <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>&gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample   </span></div><div class=\"line\">                是否生成 example类   --&gt;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 忽略列，不生成bean 字段 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 指定列的java数据类型 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"LONG_VARCHAR_FIELD\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;  </div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE generatorConfiguration PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\" </span></div><div class=\"line\">\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\" &gt;  </div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">generatorConfiguration</span>&gt;</span>  </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 引入配置文件 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"init.properties\"</span>/&gt;</span>  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 指定数据连接驱动jar地址 --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">classPathEntry</span> <span class=\"attr\">location</span>=<span class=\"string\">\"$&#123;classPath&#125;\"</span> /&gt;</span>  </div><div class=\"line\">      </div><div class=\"line\">    <span class=\"comment\">&lt;!-- 一个数据库一个context --&gt;</span>  </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"infoGuardian\"</span>&gt;</span>  </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 注释 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span> &gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressAllComments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span><span class=\"comment\">&lt;!-- 是否取消注释 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span> <span class=\"comment\">&lt;!-- 是否生成注释代时间戳--&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- jdbc连接 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"$&#123;jdbc_driver&#125;\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"$&#123;jdbc_url&#125;\"</span> <span class=\"attr\">userId</span>=<span class=\"string\">\"$&#123;jdbc_user&#125;\"</span>  </div><div class=\"line\">            <span class=\"attr\">password</span>=<span class=\"string\">\"$&#123;jdbc_password&#125;\"</span> /&gt;  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 类型转换 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 生成实体类地址 --&gt;</span>    </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.oop.eksp.user.model\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;project&#125;\"</span> &gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>/&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否针对string类型的字段在set的时候进行trim调用 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 生成mapxml文件 --&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.oop.eksp.user.data\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;project&#125;\"</span> &gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 生成mapxml对应client，也就是接口dao --&gt;</span>      </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"com.oop.eksp.user.data\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">targetProject</span>=<span class=\"string\">\"$&#123;project&#125;\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span> &gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span>  </div><div class=\"line\">          </div><div class=\"line\">        <span class=\"comment\">&lt;!-- 配置表信息 --&gt;</span>      </div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"$&#123;jdbc_user&#125;\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"s_user\"</span>  </span></div><div class=\"line\">            <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"UserEntity\"</span> <span class=\"attr\">enableCountByExample</span>=<span class=\"string\">\"false\"</span>  </div><div class=\"line\">            <span class=\"attr\">enableDeleteByExample</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">enableSelectByExample</span>=<span class=\"string\">\"false\"</span>  </div><div class=\"line\">            <span class=\"attr\">enableUpdateByExample</span>=<span class=\"string\">\"false\"</span>&gt;  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample   </span></div><div class=\"line\">                是否生成 example类   --&gt;  </div><div class=\"line\">              </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 忽略列，不生成bean 字段 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span>  </div><div class=\"line\">            <span class=\"comment\">&lt;!-- 指定列的java数据类型 --&gt;</span>  </div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"LONG_VARCHAR_FIELD\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span>  </div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span>  </div><div class=\"line\">  </div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span>  </div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"MyBatis Generator配置文件详解","date":"2016-12-28T07:30:03.000Z","description":"MyBatis Generator配置文件的标签","_content":"\n## &lt;classPathEntry&gt;\n驱动文件指定配置项\n\n<classPathEntry location=\"/Program Files/IBM/SQLLIB/java/db2java.zip\" />\n\n## &lt;columnOverride&gt;\n将数据库中的字段重命名为实体类的属性\n\ncolumn 数据库中字段名\n\nproperty POJO属性名\n\njavaType POJO类型\n\njdbcType 数据库字段类型\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <property name=\"useActualColumnNames\" value=\"true\"/>\n  <generatedKey column=\"ID\" sqlStatement=\"DB2\" identity=\"true\" />\n  <columnOverride column=\"DATE_FIELD\" property=\"startDate\" />\n  <ignoreColumn column=\"FRED\" />\n  <columnOverride column=\"LONG_VARCHAR_FIELD\" jdbcType=\"VARCHAR\" />\n</table>\n```\n \n\n##  &lt;columnRenamingRule&gt;\n按规则将数据库中的字段重命名为实体类的属性\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <columnRenamingRule searchString=\"^CUST_\" replaceString=\"\" />\n  ..\n</table>\n```\n## &lt;commentGenerator&gt;\n代码上面的注释规则\n\n子属性：property\nporperties：\nsuppressAllComments  false时打开注释，true时关闭注释\nsuppressDate  false时打开时间标志，true时关闭...真是反人类啊\n```xml\n<commentGenerator>\n  <property name=\"suppressDate\" value=\"true\" />\n</commentGenerator>\n```\n## &lt;context&gt;\n这个实在不知道怎么解释，反正就是大环境\n\ntargetRuntime 可选项，可填值为MyBatis3，MyBatis3Simple（默认的），Ibatis2Java2，Ibatis2Java5\n```xml\n<context id=\"DB2Tables\" targetRuntime=\"MyBatis3\">\n    ...\n</context>\n```\n## &lt;generatedKey&gt;\n指定自增加以及Id\ncolumn 字段\nsqlStatement 数据库语句，可以为MySql，DB2,SqlServer,SyBase等http://mybatis.github.io/generator/configreference/generatedKey.html\nidentity true为id，false不为id\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <property name=\"useActualColumnNames\" value=\"true\"/>\n  <generatedKey column=\"ID\" sqlStatement=\"DB2\" identity=\"true\" />\n  <columnOverride column=\"DATE_FIELD\" property=\"startDate\" />\n  <ignoreColumn column=\"FRED\" />\n  <columnOverride column=\"LONG_VARCHAR_FIELD\" jdbcType=\"VARCHAR\" />\n</table>\n```\n\n## &lt;ignoreColumn&gt;\n忽略字段\n\ncolumn 字段名\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <ignoreColumn column=\"FRED\" />\n  ..\n</table>\n```\n## &lt;javaClientGenerator&gt;\nMapper生成配置\n\ntype XMLMAPPER配置文件方式，ANNOTATEDMAPPER注解方式\n\nhttp://mybatis.github.io/generator/configreference/javaClientGenerator.html\n```xml\n<javaClientGenerator type=\"XMLMAPPER\"\n    targetPackage=\"dao.mapper\" targetProject=\"app\">\n    <property name=\"enableSubPackages\" value=\"true\" />\n</javaClientGenerator>\n```\n## &lt;javaModelGenerator&gt;\n实体类生成配置\n\nhttp://mybatis.github.io/generator/configreference/javaModelGenerator.html\n```xml\n<javaModelGenerator targetPackage=\"domain\"\n    targetProject=\"app\">\n    <property name=\"enableSubPackages\" value=\"true\" />\n    <property name=\"trimStrings\" value=\"false\" />\n</javaModelGenerator>\n```\n## &lt;javaTypeResolver&gt;\nmybatis里专门用来处理NUMERIC和DECIMAL类型的策略\n```xml\n<javaTypeResolver>\n  <property name=\"forceBigDecimals\" value=\"true\" />\n</javaTypeResolver>\n```\n\n## &lt;jdbcConnection&gt;\njdbc配置，不解释了哈\n```xml\n<jdbcConnection driverClass=\"COM.ibm.db2.jdbc.app.DB2Driver\"\n    connectionURL=\"jdbc:db2:MBGTEST\"\n    userId=\"db2admin\"\n    password=\"db2admin\">\n</jdbcConnection>\n```\n## &lt;sqlMapGenerator&gt;\n生成sql语句的xml文件\n在mybatis2里是必须的，在mybatis3中，只有用XML方式的时候才是需要的。\n```xml\n<sqlMapGenerator targetPackage=\"test.model\"\n     targetProject=\"\\MyProject\\src\">\n  <property name=\"enableSubPackages\" value=\"true\" />\n</sqlMapGenerator>\n```","source":"_posts/mybatis2.md","raw":"---\ntitle: MyBatis Generator配置文件详解\ncategories: [mybatis]\ntags: [mybatis]\ndate: 2016-12-28 15:30:03\ndescription: MyBatis Generator配置文件的标签\n---\n\n## &lt;classPathEntry&gt;\n驱动文件指定配置项\n\n<classPathEntry location=\"/Program Files/IBM/SQLLIB/java/db2java.zip\" />\n\n## &lt;columnOverride&gt;\n将数据库中的字段重命名为实体类的属性\n\ncolumn 数据库中字段名\n\nproperty POJO属性名\n\njavaType POJO类型\n\njdbcType 数据库字段类型\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <property name=\"useActualColumnNames\" value=\"true\"/>\n  <generatedKey column=\"ID\" sqlStatement=\"DB2\" identity=\"true\" />\n  <columnOverride column=\"DATE_FIELD\" property=\"startDate\" />\n  <ignoreColumn column=\"FRED\" />\n  <columnOverride column=\"LONG_VARCHAR_FIELD\" jdbcType=\"VARCHAR\" />\n</table>\n```\n \n\n##  &lt;columnRenamingRule&gt;\n按规则将数据库中的字段重命名为实体类的属性\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <columnRenamingRule searchString=\"^CUST_\" replaceString=\"\" />\n  ..\n</table>\n```\n## &lt;commentGenerator&gt;\n代码上面的注释规则\n\n子属性：property\nporperties：\nsuppressAllComments  false时打开注释，true时关闭注释\nsuppressDate  false时打开时间标志，true时关闭...真是反人类啊\n```xml\n<commentGenerator>\n  <property name=\"suppressDate\" value=\"true\" />\n</commentGenerator>\n```\n## &lt;context&gt;\n这个实在不知道怎么解释，反正就是大环境\n\ntargetRuntime 可选项，可填值为MyBatis3，MyBatis3Simple（默认的），Ibatis2Java2，Ibatis2Java5\n```xml\n<context id=\"DB2Tables\" targetRuntime=\"MyBatis3\">\n    ...\n</context>\n```\n## &lt;generatedKey&gt;\n指定自增加以及Id\ncolumn 字段\nsqlStatement 数据库语句，可以为MySql，DB2,SqlServer,SyBase等http://mybatis.github.io/generator/configreference/generatedKey.html\nidentity true为id，false不为id\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <property name=\"useActualColumnNames\" value=\"true\"/>\n  <generatedKey column=\"ID\" sqlStatement=\"DB2\" identity=\"true\" />\n  <columnOverride column=\"DATE_FIELD\" property=\"startDate\" />\n  <ignoreColumn column=\"FRED\" />\n  <columnOverride column=\"LONG_VARCHAR_FIELD\" jdbcType=\"VARCHAR\" />\n</table>\n```\n\n## &lt;ignoreColumn&gt;\n忽略字段\n\ncolumn 字段名\n```xml\n<table schema=\"DB2ADMIN\" tableName=\"ALLTYPES\" domainObjectName=\"Customer\" >\n  <ignoreColumn column=\"FRED\" />\n  ..\n</table>\n```\n## &lt;javaClientGenerator&gt;\nMapper生成配置\n\ntype XMLMAPPER配置文件方式，ANNOTATEDMAPPER注解方式\n\nhttp://mybatis.github.io/generator/configreference/javaClientGenerator.html\n```xml\n<javaClientGenerator type=\"XMLMAPPER\"\n    targetPackage=\"dao.mapper\" targetProject=\"app\">\n    <property name=\"enableSubPackages\" value=\"true\" />\n</javaClientGenerator>\n```\n## &lt;javaModelGenerator&gt;\n实体类生成配置\n\nhttp://mybatis.github.io/generator/configreference/javaModelGenerator.html\n```xml\n<javaModelGenerator targetPackage=\"domain\"\n    targetProject=\"app\">\n    <property name=\"enableSubPackages\" value=\"true\" />\n    <property name=\"trimStrings\" value=\"false\" />\n</javaModelGenerator>\n```\n## &lt;javaTypeResolver&gt;\nmybatis里专门用来处理NUMERIC和DECIMAL类型的策略\n```xml\n<javaTypeResolver>\n  <property name=\"forceBigDecimals\" value=\"true\" />\n</javaTypeResolver>\n```\n\n## &lt;jdbcConnection&gt;\njdbc配置，不解释了哈\n```xml\n<jdbcConnection driverClass=\"COM.ibm.db2.jdbc.app.DB2Driver\"\n    connectionURL=\"jdbc:db2:MBGTEST\"\n    userId=\"db2admin\"\n    password=\"db2admin\">\n</jdbcConnection>\n```\n## &lt;sqlMapGenerator&gt;\n生成sql语句的xml文件\n在mybatis2里是必须的，在mybatis3中，只有用XML方式的时候才是需要的。\n```xml\n<sqlMapGenerator targetPackage=\"test.model\"\n     targetProject=\"\\MyProject\\src\">\n  <property name=\"enableSubPackages\" value=\"true\" />\n</sqlMapGenerator>\n```","slug":"mybatis2","published":1,"updated":"2016-12-28T10:37:10.510Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymv006jesqrs1hnm1zc","content":"<h2 id=\"lt-classPathEntry-gt\"><a href=\"#lt-classPathEntry-gt\" class=\"headerlink\" title=\"&lt;classPathEntry&gt;\"></a>&lt;classPathEntry&gt;</h2><p>驱动文件指定配置项</p>\n<classpathentry location=\"/Program Files/IBM/SQLLIB/java/db2java.zip\">\n\n<h2 id=\"lt-columnOverride-gt\"><a href=\"#lt-columnOverride-gt\" class=\"headerlink\" title=\"&lt;columnOverride&gt;\"></a>&lt;columnOverride&gt;</h2><p>将数据库中的字段重命名为实体类的属性</p>\n<p>column 数据库中字段名</p>\n<p>property POJO属性名</p>\n<p>javaType POJO类型</p>\n<p>jdbcType 数据库字段类型<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"ID\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"DB2\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"DATE_FIELD\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"startDate\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"LONG_VARCHAR_FIELD\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-columnRenamingRule-gt\"><a href=\"#lt-columnRenamingRule-gt\" class=\"headerlink\" title=\"&lt;columnRenamingRule&gt;\"></a>&lt;columnRenamingRule&gt;</h2><p>按规则将数据库中的字段重命名为实体类的属性<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnRenamingRule</span> <span class=\"attr\">searchString</span>=<span class=\"string\">\"^CUST_\"</span> <span class=\"attr\">replaceString</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">  ..</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-commentGenerator-gt\"><a href=\"#lt-commentGenerator-gt\" class=\"headerlink\" title=\"&lt;commentGenerator&gt;\"></a>&lt;commentGenerator&gt;</h2><p>代码上面的注释规则</p>\n<p>子属性：property<br>porperties：<br>suppressAllComments  false时打开注释，true时关闭注释<br>suppressDate  false时打开时间标志，true时关闭…真是反人类啊<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-context-gt\"><a href=\"#lt-context-gt\" class=\"headerlink\" title=\"&lt;context&gt;\"></a>&lt;context&gt;</h2><p>这个实在不知道怎么解释，反正就是大环境</p>\n<p>targetRuntime 可选项，可填值为MyBatis3，MyBatis3Simple（默认的），Ibatis2Java2，Ibatis2Java5<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"DB2Tables\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-generatedKey-gt\"><a href=\"#lt-generatedKey-gt\" class=\"headerlink\" title=\"&lt;generatedKey&gt;\"></a>&lt;generatedKey&gt;</h2><p>指定自增加以及Id<br>column 字段<br>sqlStatement 数据库语句，可以为MySql，DB2,SqlServer,SyBase等<a href=\"http://mybatis.github.io/generator/configreference/generatedKey.html\" target=\"_blank\" rel=\"external\">http://mybatis.github.io/generator/configreference/generatedKey.html</a><br>identity true为id，false不为id<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"ID\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"DB2\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"DATE_FIELD\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"startDate\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"LONG_VARCHAR_FIELD\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-ignoreColumn-gt\"><a href=\"#lt-ignoreColumn-gt\" class=\"headerlink\" title=\"&lt;ignoreColumn&gt;\"></a>&lt;ignoreColumn&gt;</h2><p>忽略字段</p>\n<p>column 字段名<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span></div><div class=\"line\">  ..</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-javaClientGenerator-gt\"><a href=\"#lt-javaClientGenerator-gt\" class=\"headerlink\" title=\"&lt;javaClientGenerator&gt;\"></a>&lt;javaClientGenerator&gt;</h2><p>Mapper生成配置</p>\n<p>type XMLMAPPER配置文件方式，ANNOTATEDMAPPER注解方式</p>\n<p><a href=\"http://mybatis.github.io/generator/configreference/javaClientGenerator.html\" target=\"_blank\" rel=\"external\">http://mybatis.github.io/generator/configreference/javaClientGenerator.html</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span></span></div><div class=\"line\">    <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"dao.mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-javaModelGenerator-gt\"><a href=\"#lt-javaModelGenerator-gt\" class=\"headerlink\" title=\"&lt;javaModelGenerator&gt;\"></a>&lt;javaModelGenerator&gt;</h2><p>实体类生成配置</p>\n<p><a href=\"http://mybatis.github.io/generator/configreference/javaModelGenerator.html\" target=\"_blank\" rel=\"external\">http://mybatis.github.io/generator/configreference/javaModelGenerator.html</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"domain\"</span></span></div><div class=\"line\">    <span class=\"attr\">targetProject</span>=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-javaTypeResolver-gt\"><a href=\"#lt-javaTypeResolver-gt\" class=\"headerlink\" title=\"&lt;javaTypeResolver&gt;\"></a>&lt;javaTypeResolver&gt;</h2><p>mybatis里专门用来处理NUMERIC和DECIMAL类型的策略<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-jdbcConnection-gt\"><a href=\"#lt-jdbcConnection-gt\" class=\"headerlink\" title=\"&lt;jdbcConnection&gt;\"></a>&lt;jdbcConnection&gt;</h2><p>jdbc配置，不解释了哈<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"COM.ibm.db2.jdbc.app.DB2Driver\"</span></span></div><div class=\"line\">    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:db2:MBGTEST\"</span></div><div class=\"line\">    <span class=\"attr\">userId</span>=<span class=\"string\">\"db2admin\"</span></div><div class=\"line\">    <span class=\"attr\">password</span>=<span class=\"string\">\"db2admin\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-sqlMapGenerator-gt\"><a href=\"#lt-sqlMapGenerator-gt\" class=\"headerlink\" title=\"&lt;sqlMapGenerator&gt;\"></a>&lt;sqlMapGenerator&gt;</h2><p>生成sql语句的xml文件<br>在mybatis2里是必须的，在mybatis3中，只有用XML方式的时候才是需要的。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"test.model\"</span></span></div><div class=\"line\">     <span class=\"attr\">targetProject</span>=<span class=\"string\">\"\\MyProject\\src\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</classpathentry>","excerpt":"","more":"<h2 id=\"lt-classPathEntry-gt\"><a href=\"#lt-classPathEntry-gt\" class=\"headerlink\" title=\"&lt;classPathEntry&gt;\"></a>&lt;classPathEntry&gt;</h2><p>驱动文件指定配置项</p>\n<classPathEntry location=\"/Program Files/IBM/SQLLIB/java/db2java.zip\">\n\n<h2 id=\"lt-columnOverride-gt\"><a href=\"#lt-columnOverride-gt\" class=\"headerlink\" title=\"&lt;columnOverride&gt;\"></a>&lt;columnOverride&gt;</h2><p>将数据库中的字段重命名为实体类的属性</p>\n<p>column 数据库中字段名</p>\n<p>property POJO属性名</p>\n<p>javaType POJO类型</p>\n<p>jdbcType 数据库字段类型<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"ID\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"DB2\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"DATE_FIELD\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"startDate\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"LONG_VARCHAR_FIELD\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-columnRenamingRule-gt\"><a href=\"#lt-columnRenamingRule-gt\" class=\"headerlink\" title=\"&lt;columnRenamingRule&gt;\"></a>&lt;columnRenamingRule&gt;</h2><p>按规则将数据库中的字段重命名为实体类的属性<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnRenamingRule</span> <span class=\"attr\">searchString</span>=<span class=\"string\">\"^CUST_\"</span> <span class=\"attr\">replaceString</span>=<span class=\"string\">\"\"</span> /&gt;</span></div><div class=\"line\">  ..</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-commentGenerator-gt\"><a href=\"#lt-commentGenerator-gt\" class=\"headerlink\" title=\"&lt;commentGenerator&gt;\"></a>&lt;commentGenerator&gt;</h2><p>代码上面的注释规则</p>\n<p>子属性：property<br>porperties：<br>suppressAllComments  false时打开注释，true时关闭注释<br>suppressDate  false时打开时间标志，true时关闭…真是反人类啊<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">commentGenerator</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suppressDate\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">commentGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-context-gt\"><a href=\"#lt-context-gt\" class=\"headerlink\" title=\"&lt;context&gt;\"></a>&lt;context&gt;</h2><p>这个实在不知道怎么解释，反正就是大环境</p>\n<p>targetRuntime 可选项，可填值为MyBatis3，MyBatis3Simple（默认的），Ibatis2Java2，Ibatis2Java5<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context</span> <span class=\"attr\">id</span>=<span class=\"string\">\"DB2Tables\"</span> <span class=\"attr\">targetRuntime</span>=<span class=\"string\">\"MyBatis3\"</span>&gt;</span></div><div class=\"line\">    ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-generatedKey-gt\"><a href=\"#lt-generatedKey-gt\" class=\"headerlink\" title=\"&lt;generatedKey&gt;\"></a>&lt;generatedKey&gt;</h2><p>指定自增加以及Id<br>column 字段<br>sqlStatement 数据库语句，可以为MySql，DB2,SqlServer,SyBase等<a href=\"http://mybatis.github.io/generator/configreference/generatedKey.html\">http://mybatis.github.io/generator/configreference/generatedKey.html</a><br>identity true为id，false不为id<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"useActualColumnNames\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">generatedKey</span> <span class=\"attr\">column</span>=<span class=\"string\">\"ID\"</span> <span class=\"attr\">sqlStatement</span>=<span class=\"string\">\"DB2\"</span> <span class=\"attr\">identity</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"DATE_FIELD\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"startDate\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">columnOverride</span> <span class=\"attr\">column</span>=<span class=\"string\">\"LONG_VARCHAR_FIELD\"</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">\"VARCHAR\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-ignoreColumn-gt\"><a href=\"#lt-ignoreColumn-gt\" class=\"headerlink\" title=\"&lt;ignoreColumn&gt;\"></a>&lt;ignoreColumn&gt;</h2><p>忽略字段</p>\n<p>column 字段名<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">schema</span>=<span class=\"string\">\"DB2ADMIN\"</span> <span class=\"attr\">tableName</span>=<span class=\"string\">\"ALLTYPES\"</span> <span class=\"attr\">domainObjectName</span>=<span class=\"string\">\"Customer\"</span> &gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ignoreColumn</span> <span class=\"attr\">column</span>=<span class=\"string\">\"FRED\"</span> /&gt;</span></div><div class=\"line\">  ..</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-javaClientGenerator-gt\"><a href=\"#lt-javaClientGenerator-gt\" class=\"headerlink\" title=\"&lt;javaClientGenerator&gt;\"></a>&lt;javaClientGenerator&gt;</h2><p>Mapper生成配置</p>\n<p>type XMLMAPPER配置文件方式，ANNOTATEDMAPPER注解方式</p>\n<p><a href=\"http://mybatis.github.io/generator/configreference/javaClientGenerator.html\">http://mybatis.github.io/generator/configreference/javaClientGenerator.html</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">javaClientGenerator</span> <span class=\"attr\">type</span>=<span class=\"string\">\"XMLMAPPER\"</span></span></div><div class=\"line\">    <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"dao.mapper\"</span> <span class=\"attr\">targetProject</span>=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">javaClientGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-javaModelGenerator-gt\"><a href=\"#lt-javaModelGenerator-gt\" class=\"headerlink\" title=\"&lt;javaModelGenerator&gt;\"></a>&lt;javaModelGenerator&gt;</h2><p>实体类生成配置</p>\n<p><a href=\"http://mybatis.github.io/generator/configreference/javaModelGenerator.html\">http://mybatis.github.io/generator/configreference/javaModelGenerator.html</a><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">javaModelGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"domain\"</span></span></div><div class=\"line\">    <span class=\"attr\">targetProject</span>=<span class=\"string\">\"app\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"trimStrings\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">javaModelGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-javaTypeResolver-gt\"><a href=\"#lt-javaTypeResolver-gt\" class=\"headerlink\" title=\"&lt;javaTypeResolver&gt;\"></a>&lt;javaTypeResolver&gt;</h2><p>mybatis里专门用来处理NUMERIC和DECIMAL类型的策略<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">javaTypeResolver</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"forceBigDecimals\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">javaTypeResolver</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-jdbcConnection-gt\"><a href=\"#lt-jdbcConnection-gt\" class=\"headerlink\" title=\"&lt;jdbcConnection&gt;\"></a>&lt;jdbcConnection&gt;</h2><p>jdbc配置，不解释了哈<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jdbcConnection</span> <span class=\"attr\">driverClass</span>=<span class=\"string\">\"COM.ibm.db2.jdbc.app.DB2Driver\"</span></span></div><div class=\"line\">    <span class=\"attr\">connectionURL</span>=<span class=\"string\">\"jdbc:db2:MBGTEST\"</span></div><div class=\"line\">    <span class=\"attr\">userId</span>=<span class=\"string\">\"db2admin\"</span></div><div class=\"line\">    <span class=\"attr\">password</span>=<span class=\"string\">\"db2admin\"</span>&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jdbcConnection</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"lt-sqlMapGenerator-gt\"><a href=\"#lt-sqlMapGenerator-gt\" class=\"headerlink\" title=\"&lt;sqlMapGenerator&gt;\"></a>&lt;sqlMapGenerator&gt;</h2><p>生成sql语句的xml文件<br>在mybatis2里是必须的，在mybatis3中，只有用XML方式的时候才是需要的。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sqlMapGenerator</span> <span class=\"attr\">targetPackage</span>=<span class=\"string\">\"test.model\"</span></span></div><div class=\"line\">     <span class=\"attr\">targetProject</span>=<span class=\"string\">\"\\MyProject\\src\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSubPackages\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sqlMapGenerator</span>&gt;</span></div></pre></td></tr></table></figure></p>\n</classPathEntry>"},{"title":"mysql哪些情况不适合建索引","date":"2018-05-19T13:21:11.000Z","description":null,"_content":"\n<!-- more -->\n\n### mysql哪些情况不适合建索引\n\n1. 记录太少\n2. 经常增删改的表\n3. 数据重复且分布平均的表字段：如性别等状态值\n\n","source":"_posts/mysql哪些情况不适合建索引.md","raw":"---\ntitle: mysql哪些情况不适合建索引\ncategories: [mysql]\ntags: [mysql,索引]\ndate: 2018-05-19 21:21:11\ndescription:\n---\n\n<!-- more -->\n\n### mysql哪些情况不适合建索引\n\n1. 记录太少\n2. 经常增删改的表\n3. 数据重复且分布平均的表字段：如性别等状态值\n\n","slug":"mysql哪些情况不适合建索引","published":1,"updated":"2020-08-04T04:57:28.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ymy006nesqrrsszgqmi","content":"<a id=\"more\"></a>\n<h3 id=\"mysql哪些情况不适合建索引\"><a href=\"#mysql哪些情况不适合建索引\" class=\"headerlink\" title=\"mysql哪些情况不适合建索引\"></a>mysql哪些情况不适合建索引</h3><ol>\n<li>记录太少</li>\n<li>经常增删改的表</li>\n<li>数据重复且分布平均的表字段：如性别等状态值</li>\n</ol>\n","excerpt":"","more":"<h3 id=\"mysql哪些情况不适合建索引\"><a href=\"#mysql哪些情况不适合建索引\" class=\"headerlink\" title=\"mysql哪些情况不适合建索引\"></a>mysql哪些情况不适合建索引</h3><ol>\n<li>记录太少</li>\n<li>经常增删改的表</li>\n<li>数据重复且分布平均的表字段：如性别等状态值</li>\n</ol>"},{"title":"喜欢的NBA海报","date":"2016-08-03T13:01:24.000Z","_content":"\n腾讯直播中的海报~\n<!-- more -->\n# NBA直播海报\n\n![让我照耀这个时代](http://obc3a6u0s.bkt.clouddn.com/10.pic.jpg)\n![影响联盟格局的男人](http://obc3a6u0s.bkt.clouddn.com/9.pic.jpg)\n![73-9](http://obc3a6u0s.bkt.clouddn.com/6.pic.jpg)\n![3分之神](http://obc3a6u0s.bkt.clouddn.com/8.pic.jpg)\n![30-23](http://obc3a6u0s.bkt.clouddn.com/4.pic.jpg)\n![30-24](http://obc3a6u0s.bkt.clouddn.com/3.pic.jpg)\n![如果当年我们没有各奔东西](http://obc3a6u0s.bkt.clouddn.com/7.pic.jpg)\n![硬汉](http://obc3a6u0s.bkt.clouddn.com/5.pic.jpg)\n\n### 好吧,我承认我喜欢库里\n库里集锦：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XMTU5NjU4ODA4NA==\" frameborder=0 allowfullscreen></iframe>\n\n[库里单赛季402记三分全记录(1)](http://v.qq.com/cover/7/7kxz9octhcmo01t.html?vid=h0020hfumc3)\n[库里单赛季402记三分全记录(2)](http://v.qq.com/cover/6/6fp1b9m6nttqy0p.html?vid=i0020rjlj6t)\n[库里单赛季402记三分全记录(3)](http://v.qq.com/cover/1/16857d5zainor08.html?vid=o0020yrgd8p)\n[库里单赛季402记三分全记录(4)](http://v.qq.com/cover/r/roghcf5e4j44o31.html?vid=v0020t6dy77)","source":"_posts/nba1.md","raw":"---\ntitle: 喜欢的NBA海报\ndate: 2016-08-03 21:01:24\ncategories: [NBA]\ntags: NBA\n---\n\n腾讯直播中的海报~\n<!-- more -->\n# NBA直播海报\n\n![让我照耀这个时代](http://obc3a6u0s.bkt.clouddn.com/10.pic.jpg)\n![影响联盟格局的男人](http://obc3a6u0s.bkt.clouddn.com/9.pic.jpg)\n![73-9](http://obc3a6u0s.bkt.clouddn.com/6.pic.jpg)\n![3分之神](http://obc3a6u0s.bkt.clouddn.com/8.pic.jpg)\n![30-23](http://obc3a6u0s.bkt.clouddn.com/4.pic.jpg)\n![30-24](http://obc3a6u0s.bkt.clouddn.com/3.pic.jpg)\n![如果当年我们没有各奔东西](http://obc3a6u0s.bkt.clouddn.com/7.pic.jpg)\n![硬汉](http://obc3a6u0s.bkt.clouddn.com/5.pic.jpg)\n\n### 好吧,我承认我喜欢库里\n库里集锦：\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XMTU5NjU4ODA4NA==\" frameborder=0 allowfullscreen></iframe>\n\n[库里单赛季402记三分全记录(1)](http://v.qq.com/cover/7/7kxz9octhcmo01t.html?vid=h0020hfumc3)\n[库里单赛季402记三分全记录(2)](http://v.qq.com/cover/6/6fp1b9m6nttqy0p.html?vid=i0020rjlj6t)\n[库里单赛季402记三分全记录(3)](http://v.qq.com/cover/1/16857d5zainor08.html?vid=o0020yrgd8p)\n[库里单赛季402记三分全记录(4)](http://v.qq.com/cover/r/roghcf5e4j44o31.html?vid=v0020t6dy77)","slug":"nba1","published":1,"updated":"2016-09-22T05:42:39.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yn1006qesqrqp0stfnm","content":"<p>腾讯直播中的海报~<br><a id=\"more\"></a></p>\n<h1 id=\"NBA直播海报\"><a href=\"#NBA直播海报\" class=\"headerlink\" title=\"NBA直播海报\"></a>NBA直播海报</h1><p><img src=\"http://obc3a6u0s.bkt.clouddn.com/10.pic.jpg\" alt=\"让我照耀这个时代\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/9.pic.jpg\" alt=\"影响联盟格局的男人\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/6.pic.jpg\" alt=\"73-9\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/8.pic.jpg\" alt=\"3分之神\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/4.pic.jpg\" alt=\"30-23\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/3.pic.jpg\" alt=\"30-24\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/7.pic.jpg\" alt=\"如果当年我们没有各奔东西\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/5.pic.jpg\" alt=\"硬汉\"></p>\n<h3 id=\"好吧-我承认我喜欢库里\"><a href=\"#好吧-我承认我喜欢库里\" class=\"headerlink\" title=\"好吧,我承认我喜欢库里\"></a>好吧,我承认我喜欢库里</h3><p>库里集锦：</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XMTU5NjU4ODA4NA==\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"http://v.qq.com/cover/7/7kxz9octhcmo01t.html?vid=h0020hfumc3\" target=\"_blank\" rel=\"external\">库里单赛季402记三分全记录(1)</a><br><a href=\"http://v.qq.com/cover/6/6fp1b9m6nttqy0p.html?vid=i0020rjlj6t\" target=\"_blank\" rel=\"external\">库里单赛季402记三分全记录(2)</a><br><a href=\"http://v.qq.com/cover/1/16857d5zainor08.html?vid=o0020yrgd8p\" target=\"_blank\" rel=\"external\">库里单赛季402记三分全记录(3)</a><br><a href=\"http://v.qq.com/cover/r/roghcf5e4j44o31.html?vid=v0020t6dy77\" target=\"_blank\" rel=\"external\">库里单赛季402记三分全记录(4)</a></p>\n","excerpt":"<p>腾讯直播中的海报~<br></p>","more":"<p></p>\n<h1 id=\"NBA直播海报\"><a href=\"#NBA直播海报\" class=\"headerlink\" title=\"NBA直播海报\"></a>NBA直播海报</h1><p><img src=\"http://obc3a6u0s.bkt.clouddn.com/10.pic.jpg\" alt=\"让我照耀这个时代\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/9.pic.jpg\" alt=\"影响联盟格局的男人\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/6.pic.jpg\" alt=\"73-9\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/8.pic.jpg\" alt=\"3分之神\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/4.pic.jpg\" alt=\"30-23\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/3.pic.jpg\" alt=\"30-24\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/7.pic.jpg\" alt=\"如果当年我们没有各奔东西\"><br><img src=\"http://obc3a6u0s.bkt.clouddn.com/5.pic.jpg\" alt=\"硬汉\"></p>\n<h3 id=\"好吧-我承认我喜欢库里\"><a href=\"#好吧-我承认我喜欢库里\" class=\"headerlink\" title=\"好吧,我承认我喜欢库里\"></a>好吧,我承认我喜欢库里</h3><p>库里集锦：</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XMTU5NjU4ODA4NA==\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p><a href=\"http://v.qq.com/cover/7/7kxz9octhcmo01t.html?vid=h0020hfumc3\">库里单赛季402记三分全记录(1)</a><br><a href=\"http://v.qq.com/cover/6/6fp1b9m6nttqy0p.html?vid=i0020rjlj6t\">库里单赛季402记三分全记录(2)</a><br><a href=\"http://v.qq.com/cover/1/16857d5zainor08.html?vid=o0020yrgd8p\">库里单赛季402记三分全记录(3)</a><br><a href=\"http://v.qq.com/cover/r/roghcf5e4j44o31.html?vid=v0020t6dy77\">库里单赛季402记三分全记录(4)</a></p>"},{"title":"更改MySQL的默认事务隔离级别","date":"2016-10-13T05:19:03.000Z","description":"事务隔离级别","_content":"\n## MySQL的事务隔离级别\n|隔离级别|脏读|不可重复读|幻读|\n|:-|:-|:-|:-|\n|读未提交 Read uncommitted|O|O|O|\n|读已提交 Read committed|X|O|O|\n|可重复读 Repeatableread|X|X|O|\n|可串行化 Serializable |X|X|X|\n\n大多数的数据库系统的默认事务隔离级别都是：Read committed\n而MySQL的默认事务隔离级别是：Repeatable Read\n\n### READ UNCOMMITTED(未提交读)\n这个级别事务中的修改，即使没有提交，对其他事务也都是可见的，事务可以读取未提交的数据，\n这也被称为**脏读**,这个级别会导致许多问题，从性能上来说，READ UNCOMMITTED 级别不会比其他级别好太多，但却缺乏其他级别\n的很多优点，除非真的非常有必要，在实际中一般很少使用。\n\n### READ COMMITTED(提交读)\n大多数数据库默认隔离级别都是READ COMMITTED（MySQL不是）。一个事务开始时，只能“看见”已经提交的事务所做的修改。就是\n说，一个事务从开始到提交之前，所做的任何事，对其他事务都是不可见的。这个级别有时也叫*不可重复读*，因为两次查询执行的结\n果可能是不一致的。\n\n### REPEATABLE READ(可重复读)\n可重复读解决了脏读的问题。它保证了同一个事务中多次读取同样的记录的结果是一致的。但是理论上却无法解决幻读的问题。所谓\n**幻读**，指的是当某个事物在读取某个范围的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的\n记录时，会产生幻行。\n\n### SERIALIZABLE(可串行化)\n通过事务强制串行执行，避免幻读问题。会在读取的每一行数据上加锁，可能导致大量的超时和锁争用的问题。只有在非常需要保证\n数据一致性而且可以接受没有并发的情况下，才考虑使用。\n\n\n\n## 查询\nSELECT @@global.tx_isolation; \nSELECT @@session.tx_isolation; \nSELECT @@tx_isolation;// 缺省是session\n\n## 修改\n用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：\n*SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}*\n例如：\n```sql\nSET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;\n```\n```sql\nset tx_isolation='read-committed';\n```\n\n*注意*：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局\n对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为\n将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一\n个事务设置隔离级别。","source":"_posts/mysqlTransaction.md","raw":"---\ntitle: 更改MySQL的默认事务隔离级别\ncategories: [mysql]\ntags: [mysql,Transaction]\ndate: 2016-10-13 13:19:03\ndescription: 事务隔离级别\n---\n\n## MySQL的事务隔离级别\n|隔离级别|脏读|不可重复读|幻读|\n|:-|:-|:-|:-|\n|读未提交 Read uncommitted|O|O|O|\n|读已提交 Read committed|X|O|O|\n|可重复读 Repeatableread|X|X|O|\n|可串行化 Serializable |X|X|X|\n\n大多数的数据库系统的默认事务隔离级别都是：Read committed\n而MySQL的默认事务隔离级别是：Repeatable Read\n\n### READ UNCOMMITTED(未提交读)\n这个级别事务中的修改，即使没有提交，对其他事务也都是可见的，事务可以读取未提交的数据，\n这也被称为**脏读**,这个级别会导致许多问题，从性能上来说，READ UNCOMMITTED 级别不会比其他级别好太多，但却缺乏其他级别\n的很多优点，除非真的非常有必要，在实际中一般很少使用。\n\n### READ COMMITTED(提交读)\n大多数数据库默认隔离级别都是READ COMMITTED（MySQL不是）。一个事务开始时，只能“看见”已经提交的事务所做的修改。就是\n说，一个事务从开始到提交之前，所做的任何事，对其他事务都是不可见的。这个级别有时也叫*不可重复读*，因为两次查询执行的结\n果可能是不一致的。\n\n### REPEATABLE READ(可重复读)\n可重复读解决了脏读的问题。它保证了同一个事务中多次读取同样的记录的结果是一致的。但是理论上却无法解决幻读的问题。所谓\n**幻读**，指的是当某个事物在读取某个范围的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的\n记录时，会产生幻行。\n\n### SERIALIZABLE(可串行化)\n通过事务强制串行执行，避免幻读问题。会在读取的每一行数据上加锁，可能导致大量的超时和锁争用的问题。只有在非常需要保证\n数据一致性而且可以接受没有并发的情况下，才考虑使用。\n\n\n\n## 查询\nSELECT @@global.tx_isolation; \nSELECT @@session.tx_isolation; \nSELECT @@tx_isolation;// 缺省是session\n\n## 修改\n用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：\n*SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}*\n例如：\n```sql\nSET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;\n```\n```sql\nset tx_isolation='read-committed';\n```\n\n*注意*：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局\n对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为\n将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一\n个事务设置隔离级别。","slug":"mysqlTransaction","published":1,"updated":"2016-11-03T03:36:44.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yn3006tesqro9lv14tn","content":"<h2 id=\"MySQL的事务隔离级别\"><a href=\"#MySQL的事务隔离级别\" class=\"headerlink\" title=\"MySQL的事务隔离级别\"></a>MySQL的事务隔离级别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">隔离级别</th>\n<th style=\"text-align:left\">脏读</th>\n<th style=\"text-align:left\">不可重复读</th>\n<th style=\"text-align:left\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">读未提交 Read uncommitted</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">读已提交 Read committed</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可重复读 Repeatableread</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可串行化 Serializable</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">X</td>\n</tr>\n</tbody>\n</table>\n<p>大多数的数据库系统的默认事务隔离级别都是：Read committed<br>而MySQL的默认事务隔离级别是：Repeatable Read</p>\n<h3 id=\"READ-UNCOMMITTED-未提交读\"><a href=\"#READ-UNCOMMITTED-未提交读\" class=\"headerlink\" title=\"READ UNCOMMITTED(未提交读)\"></a>READ UNCOMMITTED(未提交读)</h3><p>这个级别事务中的修改，即使没有提交，对其他事务也都是可见的，事务可以读取未提交的数据，<br>这也被称为<strong>脏读</strong>,这个级别会导致许多问题，从性能上来说，READ UNCOMMITTED 级别不会比其他级别好太多，但却缺乏其他级别<br>的很多优点，除非真的非常有必要，在实际中一般很少使用。</p>\n<h3 id=\"READ-COMMITTED-提交读\"><a href=\"#READ-COMMITTED-提交读\" class=\"headerlink\" title=\"READ COMMITTED(提交读)\"></a>READ COMMITTED(提交读)</h3><p>大多数数据库默认隔离级别都是READ COMMITTED（MySQL不是）。一个事务开始时，只能“看见”已经提交的事务所做的修改。就是<br>说，一个事务从开始到提交之前，所做的任何事，对其他事务都是不可见的。这个级别有时也叫<em>不可重复读</em>，因为两次查询执行的结<br>果可能是不一致的。</p>\n<h3 id=\"REPEATABLE-READ-可重复读\"><a href=\"#REPEATABLE-READ-可重复读\" class=\"headerlink\" title=\"REPEATABLE READ(可重复读)\"></a>REPEATABLE READ(可重复读)</h3><p>可重复读解决了脏读的问题。它保证了同一个事务中多次读取同样的记录的结果是一致的。但是理论上却无法解决幻读的问题。所谓<br><strong>幻读</strong>，指的是当某个事物在读取某个范围的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的<br>记录时，会产生幻行。</p>\n<h3 id=\"SERIALIZABLE-可串行化\"><a href=\"#SERIALIZABLE-可串行化\" class=\"headerlink\" title=\"SERIALIZABLE(可串行化)\"></a>SERIALIZABLE(可串行化)</h3><p>通过事务强制串行执行，避免幻读问题。会在读取的每一行数据上加锁，可能导致大量的超时和锁争用的问题。只有在非常需要保证<br>数据一致性而且可以接受没有并发的情况下，才考虑使用。</p>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>SELECT @@global.tx_isolation;<br>SELECT @@session.tx_isolation;<br>SELECT @@tx_isolation;// 缺省是session</p>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><p>用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：<br><em>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</em><br>例如：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> <span class=\"keyword\">TRANSACTION</span> <span class=\"keyword\">ISOLATION</span> <span class=\"keyword\">LEVEL</span> <span class=\"keyword\">READ</span> COMMITTED;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> tx_isolation=<span class=\"string\">'read-committed'</span>;</div></pre></td></tr></table></figure>\n<p><em>注意</em>：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局<br>对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为<br>将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一<br>个事务设置隔离级别。</p>\n","excerpt":"","more":"<h2 id=\"MySQL的事务隔离级别\"><a href=\"#MySQL的事务隔离级别\" class=\"headerlink\" title=\"MySQL的事务隔离级别\"></a>MySQL的事务隔离级别</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">隔离级别</th>\n<th style=\"text-align:left\">脏读</th>\n<th style=\"text-align:left\">不可重复读</th>\n<th style=\"text-align:left\">幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">读未提交 Read uncommitted</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">读已提交 Read committed</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">O</td>\n<td style=\"text-align:left\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可重复读 Repeatableread</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">O</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可串行化 Serializable</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">X</td>\n<td style=\"text-align:left\">X</td>\n</tr>\n</tbody>\n</table>\n<p>大多数的数据库系统的默认事务隔离级别都是：Read committed<br>而MySQL的默认事务隔离级别是：Repeatable Read</p>\n<h3 id=\"READ-UNCOMMITTED-未提交读\"><a href=\"#READ-UNCOMMITTED-未提交读\" class=\"headerlink\" title=\"READ UNCOMMITTED(未提交读)\"></a>READ UNCOMMITTED(未提交读)</h3><p>这个级别事务中的修改，即使没有提交，对其他事务也都是可见的，事务可以读取未提交的数据，<br>这也被称为<strong>脏读</strong>,这个级别会导致许多问题，从性能上来说，READ UNCOMMITTED 级别不会比其他级别好太多，但却缺乏其他级别<br>的很多优点，除非真的非常有必要，在实际中一般很少使用。</p>\n<h3 id=\"READ-COMMITTED-提交读\"><a href=\"#READ-COMMITTED-提交读\" class=\"headerlink\" title=\"READ COMMITTED(提交读)\"></a>READ COMMITTED(提交读)</h3><p>大多数数据库默认隔离级别都是READ COMMITTED（MySQL不是）。一个事务开始时，只能“看见”已经提交的事务所做的修改。就是<br>说，一个事务从开始到提交之前，所做的任何事，对其他事务都是不可见的。这个级别有时也叫<em>不可重复读</em>，因为两次查询执行的结<br>果可能是不一致的。</p>\n<h3 id=\"REPEATABLE-READ-可重复读\"><a href=\"#REPEATABLE-READ-可重复读\" class=\"headerlink\" title=\"REPEATABLE READ(可重复读)\"></a>REPEATABLE READ(可重复读)</h3><p>可重复读解决了脏读的问题。它保证了同一个事务中多次读取同样的记录的结果是一致的。但是理论上却无法解决幻读的问题。所谓<br><strong>幻读</strong>，指的是当某个事物在读取某个范围的记录时，另外一个事务又在该范围内插入了新的记录，当之前的事务再次读取该范围的<br>记录时，会产生幻行。</p>\n<h3 id=\"SERIALIZABLE-可串行化\"><a href=\"#SERIALIZABLE-可串行化\" class=\"headerlink\" title=\"SERIALIZABLE(可串行化)\"></a>SERIALIZABLE(可串行化)</h3><p>通过事务强制串行执行，避免幻读问题。会在读取的每一行数据上加锁，可能导致大量的超时和锁争用的问题。只有在非常需要保证<br>数据一致性而且可以接受没有并发的情况下，才考虑使用。</p>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><p>SELECT @@global.tx_isolation;<br>SELECT @@session.tx_isolation;<br>SELECT @@tx_isolation;// 缺省是session</p>\n<h2 id=\"修改\"><a href=\"#修改\" class=\"headerlink\" title=\"修改\"></a>修改</h2><p>用户可以用SET TRANSACTION语句改变单个会话或者所有新进连接的隔离级别。它的语法如下：<br><em>SET [SESSION | GLOBAL] TRANSACTION ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</em><br>例如：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> <span class=\"keyword\">TRANSACTION</span> <span class=\"keyword\">ISOLATION</span> <span class=\"keyword\">LEVEL</span> <span class=\"keyword\">READ</span> COMMITTED;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> tx_isolation=<span class=\"string\">'read-committed'</span>;</div></pre></td></tr></table></figure>\n<p><em>注意</em>：默认的行为（不带session和global）是为下一个（未开始）事务设置隔离级别。如果你使用GLOBAL关键字，语句在全局<br>对从那点开始创建的所有新连接（除了不存在的连接）设置默认事务级别。你需要SUPER权限来做这个。使用SESSION 关键字为<br>将来在当前连接上执行的事务设置默认事务级别。 任何客户端都能自由改变会话隔离级别（甚至在事务的中间），或者为下一<br>个事务设置隔离级别。</p>\n"},{"title":"mylife170320","date":"2017-03-20T03:21:11.000Z","description":null,"_content":"  又是周一，和以往的周一样被闹铃叫醒，依旧在床上赖了一会儿才战胜疲惫挣扎着起了床。洗漱后出门，锁门的时候口里小声地默念着\n：“锁了，锁了，锁了……”，这样给自己一个暗示，确定门锁了这个事实已经发生了，以免到了楼下甚至更远突然忘记是否锁门使得自己\n还得回了再确认一遍。\n\n  空白地步行5分钟左右后就到了地铁站，地铁入口早就排起了长龙等待安检。宋家庄这个地方有个无包通道，这里\n不带包就无需安检直接通过，为了节约上班时间，我基本上就不带包。刷卡进了站就往5号线的楼梯走，上班高峰期的自动扶梯是不运行的\n楼梯上已经熙熙攘攘的挤满了人，一步一个台阶地下了楼梯，就看到一班地铁刚刚关了门，这是个好兆头，因为这代表下一班地铁我应该可以\n上去。早上由于上班高峰，地铁几乎不得1分钟就会有一班。今天比较顺利，进门的时候关门的铃声还没响。5号线宋家庄是始发站，为了\n给下几个站留位置，开门时间很短，在排队的人刚一半的时候就会关门，所以人们听到铃声会瞬间往车里挤。正是这个原因，几乎每天\n都能听见吵架声，所幸今天我这个车厢没有。\n  \n  \n\n  ","source":"_posts/mylife170320.md","raw":"---\ntitle: mylife170320\ncategories: [随笔]\ntags: [随笔]\ndate: 2017-03-20 11:21:11\ndescription:\n---\n  又是周一，和以往的周一样被闹铃叫醒，依旧在床上赖了一会儿才战胜疲惫挣扎着起了床。洗漱后出门，锁门的时候口里小声地默念着\n：“锁了，锁了，锁了……”，这样给自己一个暗示，确定门锁了这个事实已经发生了，以免到了楼下甚至更远突然忘记是否锁门使得自己\n还得回了再确认一遍。\n\n  空白地步行5分钟左右后就到了地铁站，地铁入口早就排起了长龙等待安检。宋家庄这个地方有个无包通道，这里\n不带包就无需安检直接通过，为了节约上班时间，我基本上就不带包。刷卡进了站就往5号线的楼梯走，上班高峰期的自动扶梯是不运行的\n楼梯上已经熙熙攘攘的挤满了人，一步一个台阶地下了楼梯，就看到一班地铁刚刚关了门，这是个好兆头，因为这代表下一班地铁我应该可以\n上去。早上由于上班高峰，地铁几乎不得1分钟就会有一班。今天比较顺利，进门的时候关门的铃声还没响。5号线宋家庄是始发站，为了\n给下几个站留位置，开门时间很短，在排队的人刚一半的时候就会关门，所以人们听到铃声会瞬间往车里挤。正是这个原因，几乎每天\n都能听见吵架声，所幸今天我这个车厢没有。\n  \n  \n\n  ","slug":"mylife170320","published":1,"updated":"2017-03-20T05:50:09.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yn5006xesqringnaza1","content":"<p>  又是周一，和以往的周一样被闹铃叫醒，依旧在床上赖了一会儿才战胜疲惫挣扎着起了床。洗漱后出门，锁门的时候口里小声地默念着<br>：“锁了，锁了，锁了……”，这样给自己一个暗示，确定门锁了这个事实已经发生了，以免到了楼下甚至更远突然忘记是否锁门使得自己<br>还得回了再确认一遍。</p>\n<p>  空白地步行5分钟左右后就到了地铁站，地铁入口早就排起了长龙等待安检。宋家庄这个地方有个无包通道，这里<br>不带包就无需安检直接通过，为了节约上班时间，我基本上就不带包。刷卡进了站就往5号线的楼梯走，上班高峰期的自动扶梯是不运行的<br>楼梯上已经熙熙攘攘的挤满了人，一步一个台阶地下了楼梯，就看到一班地铁刚刚关了门，这是个好兆头，因为这代表下一班地铁我应该可以<br>上去。早上由于上班高峰，地铁几乎不得1分钟就会有一班。今天比较顺利，进门的时候关门的铃声还没响。5号线宋家庄是始发站，为了<br>给下几个站留位置，开门时间很短，在排队的人刚一半的时候就会关门，所以人们听到铃声会瞬间往车里挤。正是这个原因，几乎每天<br>都能听见吵架声，所幸今天我这个车厢没有。</p>\n","excerpt":"","more":"<p>  又是周一，和以往的周一样被闹铃叫醒，依旧在床上赖了一会儿才战胜疲惫挣扎着起了床。洗漱后出门，锁门的时候口里小声地默念着<br>：“锁了，锁了，锁了……”，这样给自己一个暗示，确定门锁了这个事实已经发生了，以免到了楼下甚至更远突然忘记是否锁门使得自己<br>还得回了再确认一遍。</p>\n<p>  空白地步行5分钟左右后就到了地铁站，地铁入口早就排起了长龙等待安检。宋家庄这个地方有个无包通道，这里<br>不带包就无需安检直接通过，为了节约上班时间，我基本上就不带包。刷卡进了站就往5号线的楼梯走，上班高峰期的自动扶梯是不运行的<br>楼梯上已经熙熙攘攘的挤满了人，一步一个台阶地下了楼梯，就看到一班地铁刚刚关了门，这是个好兆头，因为这代表下一班地铁我应该可以<br>上去。早上由于上班高峰，地铁几乎不得1分钟就会有一班。今天比较顺利，进门的时候关门的铃声还没响。5号线宋家庄是始发站，为了<br>给下几个站留位置，开门时间很短，在排队的人刚一半的时候就会关门，所以人们听到铃声会瞬间往车里挤。正是这个原因，几乎每天<br>都能听见吵架声，所幸今天我这个车厢没有。</p>\n"},{"title":"Node.js 创建第一个应用","date":"2016-08-14T09:21:33.000Z","_content":"node第一个应用\n<!-- more -->\n## 步骤一、引入 required 模块\n使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:\n```javascript\nvar http = require(\"http\");\n```\n## 步骤二、创建服务器\n使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。\n```javascript\nvar http = require(\"http\");\n\nhttp.createServer(function(request,response) {\n    response.writeHead(200,{'Content-Type':'text/plain'});\n    response.end('Hello World\\n');\n  \n}).listen(8888);\nconsole.log(\"Server running at http://localhost:8888/\");\n```\n使用 node 命令执行以上的代码：\n```\nnode server.js\n```\n## gif实例\n\n![node1实例](node1.gif)","source":"_posts/node1.md","raw":"---\ntitle: Node.js 创建第一个应用\ndate: 2016-08-14 17:21:33\ncategories: [node]\ntags: [node]\n---\nnode第一个应用\n<!-- more -->\n## 步骤一、引入 required 模块\n使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:\n```javascript\nvar http = require(\"http\");\n```\n## 步骤二、创建服务器\n使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。\n```javascript\nvar http = require(\"http\");\n\nhttp.createServer(function(request,response) {\n    response.writeHead(200,{'Content-Type':'text/plain'});\n    response.end('Hello World\\n');\n  \n}).listen(8888);\nconsole.log(\"Server running at http://localhost:8888/\");\n```\n使用 node 命令执行以上的代码：\n```\nnode server.js\n```\n## gif实例\n\n![node1实例](node1.gif)","slug":"node1","published":1,"updated":"2016-09-27T10:07:52.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yn7006yesqrcmeot0rk","content":"<p>node第一个应用<br><a id=\"more\"></a></p>\n<h2 id=\"步骤一、引入-required-模块\"><a href=\"#步骤一、引入-required-模块\" class=\"headerlink\" title=\"步骤一、引入 required 模块\"></a>步骤一、引入 required 模块</h2><p>使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"步骤二、创建服务器\"><a href=\"#步骤二、创建服务器\" class=\"headerlink\" title=\"步骤二、创建服务器\"></a>步骤二、创建服务器</h2><p>使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">    response.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">  </div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server running at http://localhost:8888/\"</span>);</div></pre></td></tr></table></figure></p>\n<p>使用 node 命令执行以上的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div></pre></td></tr></table></figure></p>\n<h2 id=\"gif实例\"><a href=\"#gif实例\" class=\"headerlink\" title=\"gif实例\"></a>gif实例</h2><p><img src=\"/2016/08/14/node1/node1.gif\" alt=\"node1实例\"></p>\n","excerpt":"<p>node第一个应用<br></p>","more":"<p></p>\n<h2 id=\"步骤一、引入-required-模块\"><a href=\"#步骤一、引入-required-模块\" class=\"headerlink\" title=\"步骤一、引入 required 模块\"></a>步骤一、引入 required 模块</h2><p>使用 require 指令来载入 http 模块，并将实例化的 HTTP 赋值给变量 http，实例如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div></pre></td></tr></table></figure></p>\n<h2 id=\"步骤二、创建服务器\"><a href=\"#步骤二、创建服务器\" class=\"headerlink\" title=\"步骤二、创建服务器\"></a>步骤二、创建服务器</h2><p>使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request,response</span>) </span>&#123;</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">    response.end(<span class=\"string\">'Hello World\\n'</span>);</div><div class=\"line\">  </div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server running at http://localhost:8888/\"</span>);</div></pre></td></tr></table></figure></p>\n<p>使用 node 命令执行以上的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node server.js</div></pre></td></tr></table></figure></p>\n<h2 id=\"gif实例\"><a href=\"#gif实例\" class=\"headerlink\" title=\"gif实例\"></a>gif实例</h2><p><img src=\"/2016/08/14/node1/node1.gif\" alt=\"node1实例\"></p>"},{"title":"Node.js 全局对象","date":"2016-08-19T02:27:33.000Z","_content":"\nJavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。\n在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以\n外）都是 global 对象的属性。在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。\n<!-- more -->\n\n### 全局对象与全局变量\nglobal 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：\n- 在最外层定义的变量；\n- 全局对象的属性；\n- 隐式定义的变量（未定义直接赋值的变量）。\n当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注意的是，在 Node.js 中你不可能在最外层定\n义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。\n*注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。*\n\n#### __filename\n__filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。\n如果在模块中，返回的值是模块文件的路径。\n#### 实例\n创建文件 filename.js ，代码如下所示：\n```js\nconsole.log(__filename);// 打印出全路径文件名\n```\n\n#### __dirname\n__dirname 表示当前执行脚本所在的目录。\n\n#### setTimeout(cb, ms)\nsetTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。\n返回一个代表定时器的句柄值。\n#### 实例\n创建文件 settimeout.js ，代码如下所示：\n```js\nfunction bomb(){\n   console.log( \"bomb\");\n}\n// 两秒后执行以上函数\nsetTimeout(bomb, 2000);\n```\n#### clearTimeout(t)\nclearTimeout( t ) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。\n#### 实例\n创建文件 cleartimeout.js ，代码如下所示：\n```js\nfunction bomb(){\n   console.log( \"bomb!\");\n}\n// 两秒后执行以上函数\nvar t = setTimeout(bomb, 2000);\n\n// 清除定时器\nclearTimeout(t);\n```\n#### setInterval(cb, ms)\nsetInterval(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。\n返回一个代表定时器的句柄值。可以使用 clearInterval(t) 函数来清除定时器。\nsetInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。\n#### 实例\n创建文件 setinterval.js ，代码如下所示：\n```js\nfunction bomb(){\n   console.log( \"bomb\");\n}\n// 两秒后执行以上函数\nsetInterval(bomb, 2000);\n```\n","source":"_posts/node10.md","raw":"---\ntitle: Node.js 全局对象\ncategories: [node]\ntags: [node]\ndate: 2016-08-19 10:27:33\n---\n\nJavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。\n在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以\n外）都是 global 对象的属性。在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。\n<!-- more -->\n\n### 全局对象与全局变量\nglobal 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：\n- 在最外层定义的变量；\n- 全局对象的属性；\n- 隐式定义的变量（未定义直接赋值的变量）。\n当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注意的是，在 Node.js 中你不可能在最外层定\n义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。\n*注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。*\n\n#### __filename\n__filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。\n如果在模块中，返回的值是模块文件的路径。\n#### 实例\n创建文件 filename.js ，代码如下所示：\n```js\nconsole.log(__filename);// 打印出全路径文件名\n```\n\n#### __dirname\n__dirname 表示当前执行脚本所在的目录。\n\n#### setTimeout(cb, ms)\nsetTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。\n返回一个代表定时器的句柄值。\n#### 实例\n创建文件 settimeout.js ，代码如下所示：\n```js\nfunction bomb(){\n   console.log( \"bomb\");\n}\n// 两秒后执行以上函数\nsetTimeout(bomb, 2000);\n```\n#### clearTimeout(t)\nclearTimeout( t ) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。\n#### 实例\n创建文件 cleartimeout.js ，代码如下所示：\n```js\nfunction bomb(){\n   console.log( \"bomb!\");\n}\n// 两秒后执行以上函数\nvar t = setTimeout(bomb, 2000);\n\n// 清除定时器\nclearTimeout(t);\n```\n#### setInterval(cb, ms)\nsetInterval(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。\n返回一个代表定时器的句柄值。可以使用 clearInterval(t) 函数来清除定时器。\nsetInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。\n#### 实例\n创建文件 setinterval.js ，代码如下所示：\n```js\nfunction bomb(){\n   console.log( \"bomb\");\n}\n// 两秒后执行以上函数\nsetInterval(bomb, 2000);\n```\n","slug":"node10","published":1,"updated":"2016-10-08T03:14:11.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yn90073esqrwza4t2is","content":"<p>JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。<br>在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以<br>外）都是 global 对象的属性。在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。<br><a id=\"more\"></a></p>\n<h3 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h3><p>global 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：</p>\n<ul>\n<li>在最外层定义的变量；</li>\n<li>全局对象的属性；</li>\n<li>隐式定义的变量（未定义直接赋值的变量）。<br>当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注意的是，在 Node.js 中你不可能在最外层定<br>义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。<br><em>注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。</em></li>\n</ul>\n<h4 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"__filename\"></a>__filename</h4><p>__filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。<br>如果在模块中，返回的值是模块文件的路径。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 filename.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(__filename);<span class=\"comment\">// 打印出全路径文件名</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"dirname\"><a href=\"#dirname\" class=\"headerlink\" title=\"__dirname\"></a>__dirname</h4><p>__dirname 表示当前执行脚本所在的目录。</p>\n<h4 id=\"setTimeout-cb-ms\"><a href=\"#setTimeout-cb-ms\" class=\"headerlink\" title=\"setTimeout(cb, ms)\"></a>setTimeout(cb, ms)</h4><p>setTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。<br>返回一个代表定时器的句柄值。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 settimeout.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bomb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bomb\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 两秒后执行以上函数</span></div><div class=\"line\">setTimeout(bomb, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"clearTimeout-t\"><a href=\"#clearTimeout-t\" class=\"headerlink\" title=\"clearTimeout(t)\"></a>clearTimeout(t)</h4><p>clearTimeout( t ) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。</p>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 cleartimeout.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bomb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bomb!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 两秒后执行以上函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> t = setTimeout(bomb, <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 清除定时器</span></div><div class=\"line\">clearTimeout(t);</div></pre></td></tr></table></figure></p>\n<h4 id=\"setInterval-cb-ms\"><a href=\"#setInterval-cb-ms\" class=\"headerlink\" title=\"setInterval(cb, ms)\"></a>setInterval(cb, ms)</h4><p>setInterval(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。<br>返回一个代表定时器的句柄值。可以使用 clearInterval(t) 函数来清除定时器。<br>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。</p>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 setinterval.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bomb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bomb\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 两秒后执行以上函数</span></div><div class=\"line\">setInterval(bomb, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。<br>在浏览器 JavaScript 中，通常 window 是全局对象， 而 Node.js 中的全局对象是 global，所有全局变量（除了 global 本身以<br>外）都是 global 对象的属性。在 Node.js 我们可以直接访问到 global 的属性，而不需要在应用中包含它。<br></p>","more":"<p></p>\n<h3 id=\"全局对象与全局变量\"><a href=\"#全局对象与全局变量\" class=\"headerlink\" title=\"全局对象与全局变量\"></a>全局对象与全局变量</h3><p>global 最根本的作用是作为全局变量的宿主。按照 ECMAScript 的定义，满足以下条 件的变量是全局变量：</p>\n<ul>\n<li>在最外层定义的变量；</li>\n<li>全局对象的属性；</li>\n<li>隐式定义的变量（未定义直接赋值的变量）。<br>当你定义一个全局变量时，这个变量同时也会成为全局对象的属性，反之亦然。需要注意的是，在 Node.js 中你不可能在最外层定<br>义变量，因为所有用户代码都是属于当前模块的， 而模块本身不是最外层上下文。<br><em>注意： 永远使用 var 定义变量以避免引入全局变量，因为全局变量会污染 命名空间，提高代码的耦合风险。</em></li>\n</ul>\n<h4 id=\"filename\"><a href=\"#filename\" class=\"headerlink\" title=\"__filename\"></a>__filename</h4><p>__filename 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。<br>如果在模块中，返回的值是模块文件的路径。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 filename.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(__filename);<span class=\"comment\">// 打印出全路径文件名</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"dirname\"><a href=\"#dirname\" class=\"headerlink\" title=\"__dirname\"></a>__dirname</h4><p>__dirname 表示当前执行脚本所在的目录。</p>\n<h4 id=\"setTimeout-cb-ms\"><a href=\"#setTimeout-cb-ms\" class=\"headerlink\" title=\"setTimeout(cb, ms)\"></a>setTimeout(cb, ms)</h4><p>setTimeout(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。：setTimeout() 只执行一次指定函数。<br>返回一个代表定时器的句柄值。</p>\n<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 settimeout.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bomb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bomb\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 两秒后执行以上函数</span></div><div class=\"line\">setTimeout(bomb, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>\n<h4 id=\"clearTimeout-t\"><a href=\"#clearTimeout-t\" class=\"headerlink\" title=\"clearTimeout(t)\"></a>clearTimeout(t)</h4><p>clearTimeout( t ) 全局函数用于停止一个之前通过 setTimeout() 创建的定时器。 参数 t 是通过 setTimeout() 函数创建的计算器。</p>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 cleartimeout.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bomb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bomb!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 两秒后执行以上函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> t = setTimeout(bomb, <span class=\"number\">2000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 清除定时器</span></div><div class=\"line\">clearTimeout(t);</div></pre></td></tr></table></figure></p>\n<h4 id=\"setInterval-cb-ms\"><a href=\"#setInterval-cb-ms\" class=\"headerlink\" title=\"setInterval(cb, ms)\"></a>setInterval(cb, ms)</h4><p>setInterval(cb, ms) 全局函数在指定的毫秒(ms)数后执行指定函数(cb)。<br>返回一个代表定时器的句柄值。可以使用 clearInterval(t) 函数来清除定时器。<br>setInterval() 方法会不停地调用函数，直到 clearInterval() 被调用或窗口被关闭。</p>\n<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建文件 setinterval.js ，代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bomb</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log( <span class=\"string\">\"bomb\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 两秒后执行以上函数</span></div><div class=\"line\">setInterval(bomb, <span class=\"number\">2000</span>);</div></pre></td></tr></table></figure></p>"},{"title":"Node.js 常用工具","date":"2016-08-20T02:19:13.000Z","_content":"util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。\n<!-- more -->\n\n### util.inherits\nutil.inherits(constructor, superConstructor)是一个实现对象间原型继承的函数。\nJavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原\n型复制来实现的。\n在这里我们只介绍util.inherits 的用法，示例如下：\n```js\nvar util = require('util');\nfunction Base() {\n    this.name = 'base';\n    this.base = 1986;\n    this.sayHi = function() {\n        console.log('Hello' + this.name);  \n    };\n}\nBase.prototype.showName = function() {\n  console.log(this.name);\n};\nfunction Sub() {\n    this.name = 'sub';\n}\nutil.inherits(Sub,Base);\nvar objBase = new Base();\nobjBase.showName();\nobjBase.sayHi();\nconsole.log(objBase);\nvar objSub = new Sub();\nobjSub.showName();\n//objSub.sayHi();\nconsole.log(objSub);\n```\n注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。\n同时，在原型中定义的属性不会被console.log 作 为对象的属性输出。\n\n### util.inspect\nutil.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。\n它至少接受一个参数 object，即要转换的对象。showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。\ndepth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指\n定为 null 表示将不限递归层数完整遍历对象。 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更\n漂亮的效果。特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。\n\n```js\nvar util = require('util');\nfunction Person() {\n    this.name = 'byvoid';\n    this.toString = function() {\n        return this.name;\n    };\n}\nvar obj = new Person(); \nconsole.log(util.inspect(obj)); \nconsole.log(util.inspect(obj, true));\n```\n#### util.isArray(object)\n如果给定的参数 \"object\" 是一个数组返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isArray([])\n  // true\nutil.isArray(new Array)\n  // true\nutil.isArray({})\n  // false\n```\n#### util.isRegExp(object)\n如果给定的参数 \"object\" 是一个正则表达式返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isRegExp(/some regexp/)\n  // true\nutil.isRegExp(new RegExp('another regexp'))\n  // true\nutil.isRegExp({})\n  // false\n```\n#### util.isDate(object)\n如果给定的参数 \"object\" 是一个日期返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isDate(new Date())\n  // true\nutil.isDate(Date())\n  // false (without 'new' returns a String)\nutil.isDate({})\n  // false\n```\n#### util.isError(object)\n如果给定的参数 \"object\" 是一个错误对象返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isError(new Error())\n  // true\nutil.isError(new TypeError())\n  // true\nutil.isError({ name: 'Error', message: 'an error occurred' })\n  // false\n```\n\n### Node.js 工具模块\n|名称||\n|------:|:------|\n|OS模块|提供基本的系统操作函数。|\n|path模块|提供了处理和转换文件路的工具。|\n|net模块|用于底层的网络通信。提供了服务端和客户端的的操作。|\n|Domain模块|简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。|\n|DNS模块|用于解析域名。|","source":"_posts/node11.md","raw":"---\ntitle: Node.js 常用工具\ncategories: [node]\ntags: [node]\ndate: 2016-08-20 10:19:13\n---\nutil 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。\n<!-- more -->\n\n### util.inherits\nutil.inherits(constructor, superConstructor)是一个实现对象间原型继承的函数。\nJavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原\n型复制来实现的。\n在这里我们只介绍util.inherits 的用法，示例如下：\n```js\nvar util = require('util');\nfunction Base() {\n    this.name = 'base';\n    this.base = 1986;\n    this.sayHi = function() {\n        console.log('Hello' + this.name);  \n    };\n}\nBase.prototype.showName = function() {\n  console.log(this.name);\n};\nfunction Sub() {\n    this.name = 'sub';\n}\nutil.inherits(Sub,Base);\nvar objBase = new Base();\nobjBase.showName();\nobjBase.sayHi();\nconsole.log(objBase);\nvar objSub = new Sub();\nobjSub.showName();\n//objSub.sayHi();\nconsole.log(objSub);\n```\n注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。\n同时，在原型中定义的属性不会被console.log 作 为对象的属性输出。\n\n### util.inspect\nutil.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。\n它至少接受一个参数 object，即要转换的对象。showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。\ndepth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指\n定为 null 表示将不限递归层数完整遍历对象。 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更\n漂亮的效果。特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。\n\n```js\nvar util = require('util');\nfunction Person() {\n    this.name = 'byvoid';\n    this.toString = function() {\n        return this.name;\n    };\n}\nvar obj = new Person(); \nconsole.log(util.inspect(obj)); \nconsole.log(util.inspect(obj, true));\n```\n#### util.isArray(object)\n如果给定的参数 \"object\" 是一个数组返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isArray([])\n  // true\nutil.isArray(new Array)\n  // true\nutil.isArray({})\n  // false\n```\n#### util.isRegExp(object)\n如果给定的参数 \"object\" 是一个正则表达式返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isRegExp(/some regexp/)\n  // true\nutil.isRegExp(new RegExp('another regexp'))\n  // true\nutil.isRegExp({})\n  // false\n```\n#### util.isDate(object)\n如果给定的参数 \"object\" 是一个日期返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isDate(new Date())\n  // true\nutil.isDate(Date())\n  // false (without 'new' returns a String)\nutil.isDate({})\n  // false\n```\n#### util.isError(object)\n如果给定的参数 \"object\" 是一个错误对象返回true，否则返回false。\n```js\nvar util = require('util');\n\nutil.isError(new Error())\n  // true\nutil.isError(new TypeError())\n  // true\nutil.isError({ name: 'Error', message: 'an error occurred' })\n  // false\n```\n\n### Node.js 工具模块\n|名称||\n|------:|:------|\n|OS模块|提供基本的系统操作函数。|\n|path模块|提供了处理和转换文件路的工具。|\n|net模块|用于底层的网络通信。提供了服务端和客户端的的操作。|\n|Domain模块|简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。|\n|DNS模块|用于解析域名。|","slug":"node11","published":1,"updated":"2016-10-08T07:10:27.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ync0076esqrma72ntmw","content":"<p>util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。<br><a id=\"more\"></a></p>\n<h3 id=\"util-inherits\"><a href=\"#util-inherits\" class=\"headerlink\" title=\"util.inherits\"></a>util.inherits</h3><p>util.inherits(constructor, superConstructor)是一个实现对象间原型继承的函数。<br>JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原<br>型复制来实现的。<br>在这里我们只介绍util.inherits 的用法，示例如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Base</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'base'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.base = <span class=\"number\">1986</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span> + <span class=\"keyword\">this</span>.name);  </div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Base.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'sub'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">util.inherits(Sub,Base);</div><div class=\"line\"><span class=\"keyword\">var</span> objBase = <span class=\"keyword\">new</span> Base();</div><div class=\"line\">objBase.showName();</div><div class=\"line\">objBase.sayHi();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(objBase);</div><div class=\"line\"><span class=\"keyword\">var</span> objSub = <span class=\"keyword\">new</span> Sub();</div><div class=\"line\">objSub.showName();</div><div class=\"line\"><span class=\"comment\">//objSub.sayHi();</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(objSub);</div></pre></td></tr></table></figure></p>\n<p>注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。<br>同时，在原型中定义的属性不会被console.log 作 为对象的属性输出。</p>\n<h3 id=\"util-inspect\"><a href=\"#util-inspect\" class=\"headerlink\" title=\"util.inspect\"></a>util.inspect</h3><p>util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。<br>它至少接受一个参数 object，即要转换的对象。showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。<br>depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指<br>定为 null 表示将不限递归层数完整遍历对象。 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更<br>漂亮的效果。特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'byvoid'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Person(); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj)); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj, <span class=\"literal\">true</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"util-isArray-object\"><a href=\"#util-isArray-object\" class=\"headerlink\" title=\"util.isArray(object)\"></a>util.isArray(object)</h4><p>如果给定的参数 “object” 是一个数组返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isArray([])</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>)</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(&#123;&#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isRegExp-object\"><a href=\"#util-isRegExp-object\" class=\"headerlink\" title=\"util.isRegExp(object)\"></a>util.isRegExp(object)</h4><p>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isRegExp(<span class=\"regexp\">/some regexp/</span>)</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'another regexp'</span>))</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(&#123;&#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isDate-object\"><a href=\"#util-isDate-object\" class=\"headerlink\" title=\"util.isDate(object)\"></a>util.isDate(object)</h4><p>如果给定的参数 “object” 是一个日期返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isDate(<span class=\"built_in\">Date</span>())</div><div class=\"line\">  <span class=\"comment\">// false (without 'new' returns a String)</span></div><div class=\"line\">util.isDate(&#123;&#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isError-object\"><a href=\"#util-isError-object\" class=\"headerlink\" title=\"util.isError(object)\"></a>util.isError(object)</h4><p>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>())</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>())</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isError(&#123; name: <span class=\"string\">'Error'</span>, message: <span class=\"string\">'an error occurred'</span> &#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Node-js-工具模块\"><a href=\"#Node-js-工具模块\" class=\"headerlink\" title=\"Node.js 工具模块\"></a>Node.js 工具模块</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:right\">名称</th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">OS模块</td>\n<td style=\"text-align:left\">提供基本的系统操作函数。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">path模块</td>\n<td style=\"text-align:left\">提供了处理和转换文件路的工具。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">net模块</td>\n<td style=\"text-align:left\">用于底层的网络通信。提供了服务端和客户端的的操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">Domain模块</td>\n<td style=\"text-align:left\">简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">DNS模块</td>\n<td style=\"text-align:left\">用于解析域名。</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"<p>util 是一个Node.js 核心模块，提供常用函数的集合，用于弥补核心JavaScript 的功能 过于精简的不足。<br></p>","more":"<p></p>\n<h3 id=\"util-inherits\"><a href=\"#util-inherits\" class=\"headerlink\" title=\"util.inherits\"></a>util.inherits</h3><p>util.inherits(constructor, superConstructor)是一个实现对象间原型继承的函数。<br>JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原<br>型复制来实现的。<br>在这里我们只介绍util.inherits 的用法，示例如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Base</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'base'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.base = <span class=\"number\">1986</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello'</span> + <span class=\"keyword\">this</span>.name);  </div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Base.prototype.showName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Sub</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'sub'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">util.inherits(Sub,Base);</div><div class=\"line\"><span class=\"keyword\">var</span> objBase = <span class=\"keyword\">new</span> Base();</div><div class=\"line\">objBase.showName();</div><div class=\"line\">objBase.sayHi();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(objBase);</div><div class=\"line\"><span class=\"keyword\">var</span> objSub = <span class=\"keyword\">new</span> Sub();</div><div class=\"line\">objSub.showName();</div><div class=\"line\"><span class=\"comment\">//objSub.sayHi();</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(objSub);</div></pre></td></tr></table></figure></p>\n<p>注意：Sub 仅仅继承了Base 在原型中定义的函数，而构造函数内部创造的 base 属 性和 sayHello 函数都没有被 Sub 继承。<br>同时，在原型中定义的属性不会被console.log 作 为对象的属性输出。</p>\n<h3 id=\"util-inspect\"><a href=\"#util-inspect\" class=\"headerlink\" title=\"util.inspect\"></a>util.inspect</h3><p>util.inspect(object,[showHidden],[depth],[colors])是一个将任意对象转换 为字符串的方法，通常用于调试和错误输出。<br>它至少接受一个参数 object，即要转换的对象。showHidden 是一个可选参数，如果值为 true，将会输出更多隐藏信息。<br>depth 表示最大递归的层数，如果对象很复杂，你可以指定层数以控制输出信息的多 少。如果不指定depth，默认会递归2层，指<br>定为 null 表示将不限递归层数完整遍历对象。 如果color 值为 true，输出格式将会以ANSI 颜色编码，通常用于在终端显示更<br>漂亮的效果。特别要指出的是，util.inspect 并不会简单地直接把对象转换为字符串，即使该对 象定义了toString 方法也不会调用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'byvoid'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> Person(); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj)); </div><div class=\"line\"><span class=\"built_in\">console</span>.log(util.inspect(obj, <span class=\"literal\">true</span>));</div></pre></td></tr></table></figure>\n<h4 id=\"util-isArray-object\"><a href=\"#util-isArray-object\" class=\"headerlink\" title=\"util.isArray(object)\"></a>util.isArray(object)</h4><p>如果给定的参数 “object” 是一个数组返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isArray([])</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>)</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isArray(&#123;&#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isRegExp-object\"><a href=\"#util-isRegExp-object\" class=\"headerlink\" title=\"util.isRegExp(object)\"></a>util.isRegExp(object)</h4><p>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isRegExp(<span class=\"regexp\">/some regexp/</span>)</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'another regexp'</span>))</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isRegExp(&#123;&#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isDate-object\"><a href=\"#util-isDate-object\" class=\"headerlink\" title=\"util.isDate(object)\"></a>util.isDate(object)</h4><p>如果给定的参数 “object” 是一个日期返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isDate(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isDate(<span class=\"built_in\">Date</span>())</div><div class=\"line\">  <span class=\"comment\">// false (without 'new' returns a String)</span></div><div class=\"line\">util.isDate(&#123;&#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"util-isError-object\"><a href=\"#util-isError-object\" class=\"headerlink\" title=\"util.isError(object)\"></a>util.isError(object)</h4><p>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>())</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isError(<span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>())</div><div class=\"line\">  <span class=\"comment\">// true</span></div><div class=\"line\">util.isError(&#123; name: <span class=\"string\">'Error'</span>, message: <span class=\"string\">'an error occurred'</span> &#125;)</div><div class=\"line\">  <span class=\"comment\">// false</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"Node-js-工具模块\"><a href=\"#Node-js-工具模块\" class=\"headerlink\" title=\"Node.js 工具模块\"></a>Node.js 工具模块</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:right\">名称</th>\n<th style=\"text-align:left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">OS模块</td>\n<td style=\"text-align:left\">提供基本的系统操作函数。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">path模块</td>\n<td style=\"text-align:left\">提供了处理和转换文件路的工具。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">net模块</td>\n<td style=\"text-align:left\">用于底层的网络通信。提供了服务端和客户端的的操作。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">Domain模块</td>\n<td style=\"text-align:left\">简化异步代码的异常处理，可以捕捉处理try catch无法捕捉的。</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">DNS模块</td>\n<td style=\"text-align:left\">用于解析域名。</td>\n</tr>\n</tbody>\n</table>"},{"title":"Node.js GET/POST请求","date":"2016-08-22T00:36:08.000Z","_content":"node get/post demo\n<!-- more -->\n### 获取GET请求内容\n由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。\nnode.js中url模块中的parse函数提供了这个功能。\n```js\nvar http = require('http');\nvar url = require('url');\nvar util = require('util');\n\nhttp.createServer(function(req, res){\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n```\n### 获取POST请求内容\nPOST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时\n的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js\n默认是不会解析请求体的， 当你需要的时候，需要手动来做。\n```js\nvar http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\n\nhttp.createServer(function(req, res){\n    var post = '';     //定义了一个post变量，用于暂存请求体的信息\n\n    req.on('data', function(chunk){    //通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中\n        post += chunk;\n    });\n\n    req.on('end', function(){    //在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。\n        post = querystring.parse(post);\n        res.end(util.inspect(post));\n    });\n}).listen(3000);\n```\n","source":"_posts/node13.md","raw":"---\ntitle: Node.js GET/POST请求\ncategories: [node]\ntags: [node]\ndate: 2016-08-22 08:36:08\n---\nnode get/post demo\n<!-- more -->\n### 获取GET请求内容\n由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。\nnode.js中url模块中的parse函数提供了这个功能。\n```js\nvar http = require('http');\nvar url = require('url');\nvar util = require('util');\n\nhttp.createServer(function(req, res){\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n```\n### 获取POST请求内容\nPOST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时\n的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js\n默认是不会解析请求体的， 当你需要的时候，需要手动来做。\n```js\nvar http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\n\nhttp.createServer(function(req, res){\n    var post = '';     //定义了一个post变量，用于暂存请求体的信息\n\n    req.on('data', function(chunk){    //通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中\n        post += chunk;\n    });\n\n    req.on('end', function(){    //在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。\n        post = querystring.parse(post);\n        res.end(util.inspect(post));\n    });\n}).listen(3000);\n```\n","slug":"node13","published":1,"updated":"2016-10-08T06:47:14.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynf007aesqrdzxq4j5q","content":"<p>node get/post demo<br><a id=\"more\"></a></p>\n<h3 id=\"获取GET请求内容\"><a href=\"#获取GET请求内容\" class=\"headerlink\" title=\"获取GET请求内容\"></a>获取GET请求内容</h3><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。<br>node.js中url模块中的parse函数提供了这个功能。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">    res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"获取POST请求内容\"><a href=\"#获取POST请求内容\" class=\"headerlink\" title=\"获取POST请求内容\"></a>获取POST请求内容</h3><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时<br>的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js<br>默认是不会解析请求体的， 当你需要的时候，需要手动来做。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;     <span class=\"comment\">//定义了一个post变量，用于暂存请求体的信息</span></div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;    <span class=\"comment\">//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></div><div class=\"line\">        post += chunk;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;    <span class=\"comment\">//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></div><div class=\"line\">        post = querystring.parse(post);</div><div class=\"line\">        res.end(util.inspect(post));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>node get/post demo<br></p>","more":"<p></p>\n<h3 id=\"获取GET请求内容\"><a href=\"#获取GET请求内容\" class=\"headerlink\" title=\"获取GET请求内容\"></a>获取GET请求内容</h3><p>由于GET请求直接被嵌入在路径中，URL是完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET请求的参数。<br>node.js中url模块中的parse函数提供了这个功能。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">    res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"获取POST请求内容\"><a href=\"#获取POST请求内容\" class=\"headerlink\" title=\"获取POST请求内容\"></a>获取POST请求内容</h3><p>POST请求的内容全部的都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时<br>的工作。比如上传文件，而很多时候我们可能并不需要理会请求体的内容，恶意的POST请求会大大消耗服务器的资源，所有node.js<br>默认是不会解析请求体的， 当你需要的时候，需要手动来做。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"></div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;     <span class=\"comment\">//定义了一个post变量，用于暂存请求体的信息</span></div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;    <span class=\"comment\">//通过req的data事件监听函数，每当接受到请求体的数据，就累加到post变量中</span></div><div class=\"line\">        post += chunk;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;    <span class=\"comment\">//在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回。</span></div><div class=\"line\">        post = querystring.parse(post);</div><div class=\"line\">        res.end(util.inspect(post));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>"},{"title":"Node.js 文件系统","date":"2016-08-20T05:15:53.000Z","_content":"<!-- more -->\nNode.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：\n```js\nvar fs = require(\"fs\")\n```\n---------------\n\n### 异步和同步\nNode.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的\n fs.readFileSync()。\n异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。\n建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。\n#### 实例\n创建 input.txt 文件，内容如下：\n```txt\nNode.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的\n fs.readFileSync()。\n```\n创建 file.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\n\n// 异步读取\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n       return console.error(err);\n   }\n   console.log(\"异步读取: \" + data.toString());\n});\n\n// 同步读取\nvar data = fs.readFileSync('input.txt');\nconsole.log(\"同步读取: \" + data.toString());\n\nconsole.log(\"程序执行完毕。\");\n```","source":"_posts/node12.md","raw":"---\ntitle: Node.js 文件系统\ncategories: [node]\ntags: [node]\ndate: 2016-08-20 13:15:53\n---\n<!-- more -->\nNode.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：\n```js\nvar fs = require(\"fs\")\n```\n---------------\n\n### 异步和同步\nNode.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的\n fs.readFileSync()。\n异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。\n建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。\n#### 实例\n创建 input.txt 文件，内容如下：\n```txt\nNode.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的\n fs.readFileSync()。\n```\n创建 file.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\n\n// 异步读取\nfs.readFile('input.txt', function (err, data) {\n   if (err) {\n       return console.error(err);\n   }\n   console.log(\"异步读取: \" + data.toString());\n});\n\n// 同步读取\nvar data = fs.readFileSync('input.txt');\nconsole.log(\"同步读取: \" + data.toString());\n\nconsole.log(\"程序执行完毕。\");\n```","slug":"node12","published":1,"updated":"2016-10-08T05:27:24.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynh007desqr1k93cdc5","content":"<a id=\"more\"></a>\n<p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"异步和同步\"><a href=\"#异步和同步\" class=\"headerlink\" title=\"异步和同步\"></a>异步和同步</h3><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的<br> fs.readFileSync()。<br>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。<br>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建 input.txt 文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的</div><div class=\"line\"> fs.readFileSync()。</div></pre></td></tr></table></figure></p>\n<p>创建 file.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 异步读取</span></div><div class=\"line\">fs.readFile(<span class=\"string\">'input.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步读取: \"</span> + data.toString());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 同步读取</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"同步读取: \"</span> + data.toString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>)</div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"异步和同步\"><a href=\"#异步和同步\" class=\"headerlink\" title=\"异步和同步\"></a>异步和同步</h3><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的<br> fs.readFileSync()。<br>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。<br>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>创建 input.txt 文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的</div><div class=\"line\"> fs.readFileSync()。</div></pre></td></tr></table></figure></p>\n<p>创建 file.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 异步读取</span></div><div class=\"line\">fs.readFile(<span class=\"string\">'input.txt'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"异步读取: \"</span> + data.toString());</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 同步读取</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"同步读取: \"</span> + data.toString());</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure></p>"},{"title":"使用 Node 创建 Web 服务器和客户端","date":"2016-08-23T02:43:09.000Z","_content":"node web demo\n<!-- more -->\n```js\nvar http = require('http');\nvar fs = require('fs');\nvar url = require('url');\n\n\n// 创建服务器\nhttp.createServer( function (request, response) {  \n   // 解析请求，包括文件名\n   var pathname = url.parse(request.url).pathname;\n   \n   // 输出请求的文件名\n   console.log(\"Request for \" + pathname + \" received.\");\n   \n   // 从文件系统中读取请求的文件内容\n   fs.readFile(pathname.substr(1), function (err, data) {\n      if (err) {\n         console.log(err);\n         // HTTP 状态码: 404 : NOT FOUND\n         // Content Type: text/plain\n         response.writeHead(404, {'Content-Type': 'text/html'});\n      }else{\t         \n         // HTTP 状态码: 200 : OK\n         // Content Type: text/plain\n         response.writeHead(200, {'Content-Type': 'text/html'});\t\n         \n         // 响应文件内容\n         response.write(data.toString());\t\t\n      }\n      //  发送响应数据\n      response.end();\n   });   \n}).listen(8081);\n\n// 控制台会输出以下信息\nconsole.log('Server running at http://127.0.0.1:8081/');\n```\n\n使用 Node 创建 Web 客户端\n```js\nvar http = require('http');\n// 用于请求的选项\nvar options = {\n   host: 'localhost',\n   port: '8081',\n   path: '/index.htm'  \n};\n\n// 处理响应的回调函数\nvar callback = function(response){\n   // 不断更新数据\n   var body = '';\n   response.on('data', function(data) {\n      body += data;\n   });\n   \n   response.on('end', function() {\n      // 数据接收完成\n      console.log(body);\n   });\n}\n// 向服务端发送请求\nvar req = http.request(options, callback);\nreq.end();\n```","source":"_posts/node14.md","raw":"---\ntitle: 使用 Node 创建 Web 服务器和客户端\ncategories: [node]\ntags: [node]\ndate: 2016-08-23 10:43:09\n---\nnode web demo\n<!-- more -->\n```js\nvar http = require('http');\nvar fs = require('fs');\nvar url = require('url');\n\n\n// 创建服务器\nhttp.createServer( function (request, response) {  \n   // 解析请求，包括文件名\n   var pathname = url.parse(request.url).pathname;\n   \n   // 输出请求的文件名\n   console.log(\"Request for \" + pathname + \" received.\");\n   \n   // 从文件系统中读取请求的文件内容\n   fs.readFile(pathname.substr(1), function (err, data) {\n      if (err) {\n         console.log(err);\n         // HTTP 状态码: 404 : NOT FOUND\n         // Content Type: text/plain\n         response.writeHead(404, {'Content-Type': 'text/html'});\n      }else{\t         \n         // HTTP 状态码: 200 : OK\n         // Content Type: text/plain\n         response.writeHead(200, {'Content-Type': 'text/html'});\t\n         \n         // 响应文件内容\n         response.write(data.toString());\t\t\n      }\n      //  发送响应数据\n      response.end();\n   });   \n}).listen(8081);\n\n// 控制台会输出以下信息\nconsole.log('Server running at http://127.0.0.1:8081/');\n```\n\n使用 Node 创建 Web 客户端\n```js\nvar http = require('http');\n// 用于请求的选项\nvar options = {\n   host: 'localhost',\n   port: '8081',\n   path: '/index.htm'  \n};\n\n// 处理响应的回调函数\nvar callback = function(response){\n   // 不断更新数据\n   var body = '';\n   response.on('data', function(data) {\n      body += data;\n   });\n   \n   response.on('end', function() {\n      // 数据接收完成\n      console.log(body);\n   });\n}\n// 向服务端发送请求\nvar req = http.request(options, callback);\nreq.end();\n```","slug":"node14","published":1,"updated":"2016-10-08T06:51:58.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yni007gesqrawgl0f5a","content":"<p>node web demo<br><a id=\"more\"></a><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建服务器</span></div><div class=\"line\">http.createServer( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;  </div><div class=\"line\">   <span class=\"comment\">// 解析请求，包括文件名</span></div><div class=\"line\">   <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 输出请求的文件名</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 从文件系统中读取请求的文件内容</span></div><div class=\"line\">   fs.readFile(pathname.substr(<span class=\"number\">1</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">         <span class=\"comment\">// HTTP 状态码: 404 : NOT FOUND</span></div><div class=\"line\">         <span class=\"comment\">// Content Type: text/plain</span></div><div class=\"line\">         response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;\t         </div><div class=\"line\">         <span class=\"comment\">// HTTP 状态码: 200 : OK</span></div><div class=\"line\">         <span class=\"comment\">// Content Type: text/plain</span></div><div class=\"line\">         response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);\t</div><div class=\"line\">         </div><div class=\"line\">         <span class=\"comment\">// 响应文件内容</span></div><div class=\"line\">         response.write(data.toString());\t\t</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//  发送响应数据</span></div><div class=\"line\">      response.end();</div><div class=\"line\">   &#125;);   </div><div class=\"line\">&#125;).listen(<span class=\"number\">8081</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 控制台会输出以下信息</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure></p>\n<p>使用 Node 创建 Web 客户端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"comment\">// 用于请求的选项</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">   host: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">   port: <span class=\"string\">'8081'</span>,</div><div class=\"line\">   path: <span class=\"string\">'/index.htm'</span>  </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理响应的回调函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 不断更新数据</span></div><div class=\"line\">   <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;</div><div class=\"line\">   response.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      body += data;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   </div><div class=\"line\">   response.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 数据接收完成</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(body);</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 向服务端发送请求</span></div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, callback);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>node web demo<br></p>","more":"<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建服务器</span></div><div class=\"line\">http.createServer( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">request, response</span>) </span>&#123;  </div><div class=\"line\">   <span class=\"comment\">// 解析请求，包括文件名</span></div><div class=\"line\">   <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 输出请求的文件名</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">   </div><div class=\"line\">   <span class=\"comment\">// 从文件系统中读取请求的文件内容</span></div><div class=\"line\">   fs.readFile(pathname.substr(<span class=\"number\">1</span>), <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">         <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">         <span class=\"comment\">// HTTP 状态码: 404 : NOT FOUND</span></div><div class=\"line\">         <span class=\"comment\">// Content Type: text/plain</span></div><div class=\"line\">         response.writeHead(<span class=\"number\">404</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);</div><div class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;\t         </div><div class=\"line\">         <span class=\"comment\">// HTTP 状态码: 200 : OK</span></div><div class=\"line\">         <span class=\"comment\">// Content Type: text/plain</span></div><div class=\"line\">         response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;);\t</div><div class=\"line\">         </div><div class=\"line\">         <span class=\"comment\">// 响应文件内容</span></div><div class=\"line\">         response.write(data.toString());\t\t</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">//  发送响应数据</span></div><div class=\"line\">      response.end();</div><div class=\"line\">   &#125;);   </div><div class=\"line\">&#125;).listen(<span class=\"number\">8081</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 控制台会输出以下信息</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Server running at http://127.0.0.1:8081/'</span>);</div></pre></td></tr></table></figure><p></p>\n<p>使用 Node 创建 Web 客户端<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"comment\">// 用于请求的选项</span></div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">   host: <span class=\"string\">'localhost'</span>,</div><div class=\"line\">   port: <span class=\"string\">'8081'</span>,</div><div class=\"line\">   path: <span class=\"string\">'/index.htm'</span>  </div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理响应的回调函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> callback = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 不断更新数据</span></div><div class=\"line\">   <span class=\"keyword\">var</span> body = <span class=\"string\">''</span>;</div><div class=\"line\">   response.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">      body += data;</div><div class=\"line\">   &#125;);</div><div class=\"line\">   </div><div class=\"line\">   response.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 数据接收完成</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(body);</div><div class=\"line\">   &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 向服务端发送请求</span></div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options, callback);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure></p>"},{"title":"Express 框架","date":"2016-08-24T02:17:50.000Z","_content":"### Express 简介\nExpress 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。\n<!-- more -->\n使用 Express 可以快速地搭建一个完整功能的网站。\nExpress 框架核心特性：\n- 可以设置中间件来响应 HTTP 请求。\n- 定义了路由表用于执行不同的 HTTP 请求动作。\n- 可以通过向模板传递参数来动态渲染 HTML 页面。\n\n### 请求和响应\nExpress 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。\n```js\napp.get('/', function (req, res) {\n   // --\n})\n```\nrequest 和 response 对象的具体介绍：\nRequest 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：\nreq.app：当callback为外部文件时，用req.app访问express的实例\nreq.baseUrl：获取路由当前安装的URL路径\nreq.body / req.cookies：获得「请求主体」/ Cookies\nreq.fresh / req.stale：判断请求是否还「新鲜」\nreq.hostname / req.ip：获取主机名和IP地址\nreq.originalUrl：获取原始请求URL\nreq.params：获取路由的parameters\nreq.path：获取请求路径\nreq.protocol：获取协议类型\nreq.query：获取URL的查询参数串\nreq.route：获取当前匹配的路由\nreq.subdomains：获取子域名\nreq.accpets（）：检查请求的Accept头的请求类型\nreq.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages\nreq.get（）：获取指定的HTTP请求头\nreq.is（）：判断请求头Content-Type的MIME类型\nResponse 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：\nres.app：同req.app一样\nres.append（）：追加指定HTTP头\nres.set（）在res.append（）后将重置之前设置的头\nres.cookie（name，value [，option]）：设置Cookie\nopition: domain / expires / httpOnly / maxAge / path / secure / signed\nres.clearCookie（）：清除Cookie\nres.download（）：传送指定路径的文件\nres.get（）：返回指定的HTTP头\nres.json（）：传送JSON响应\nres.jsonp（）：传送JSONP响应\nres.location（）：只设置响应的Location HTTP头，不设置状态码或者close response\nres.redirect（）：设置响应的Location HTTP头，并且设置状态码302\nres.send（）：传送HTTP响应\nres.sendFile（path [，options] [，fn]）：传送指定路径的文件 -会自动根据文件extension设定Content-Type\nres.set（）：设置HTTP头，传入object可以一次设置多个头\nres.status（）：设置HTTP状态码\nres.type（）：设置Content-Type的MIME类型\n\n### 路由\n```js\nvar express = require('express');\nvar app = express();\n//  主页输出 \"Hello World\"\napp.get('/', function (req, res) {\n   console.log(\"主页 GET 请求\");\n   res.send('Hello GET');\n})\n//  POST 请求\napp.post('/', function (req, res) {\n   console.log(\"主页 POST 请求\");\n   res.send('Hello POST');\n})\n//  /del_user 页面响应\napp.get('/del_user', function (req, res) {\n   console.log(\"/del_user 响应 DELETE 请求\");\n   res.send('删除页面');\n})\n//  /list_user 页面 GET 请求\napp.get('/list_user', function (req, res) {\n   console.log(\"/list_user GET 请求\");\n   res.send('用户列表页面');\n})\n// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求\napp.get('/ab*cd', function(req, res) {   \n   console.log(\"/ab*cd GET 请求\");\n   res.send('正则匹配');\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n### 静态文件\nExpress 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。\n你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：\napp.use(express.static('public'));\n我们可以到 public/images 目录下放些图片,如下所示：\nnode_modules\nserver.js\npublic/\npublic/images\npublic/images/logo.png\n\n代码如下所示：\n```js\nvar express = require('express');\nvar app = express();\napp.use(express.static('public'));\napp.get('/', function (req, res) {\n   res.send('Hello World');\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n### GET 方法\n```js\nvar express = require('express');\nvar app = express();\napp.use(express.static('public'));\napp.get('/index.htm', function (req, res) {\n   res.sendFile( __dirname + \"/\" + \"index.htm\" );\n})\napp.get('/process_get', function (req, res) {\n   // 输出 JSON 格式\n   response = {\n       first_name:req.query.first_name,\n       last_name:req.query.last_name\n   };\n   console.log(response);\n   res.end(JSON.stringify(response));\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n### POST 方法\n```js\nvar express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\n// 创建 application/x-www-form-urlencoded 编码解析\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\napp.use(express.static('public'));\napp.get('/index.htm', function (req, res) {\n   res.sendFile( __dirname + \"/\" + \"index.htm\" );\n})\napp.post('/process_post', urlencodedParser, function (req, res) {\n   // 输出 JSON 格式\n   response = {\n       first_name:req.body.first_name,\n       last_name:req.body.last_name\n   };\n   console.log(response);\n   res.end(JSON.stringify(response));\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n\n参考：[http://expressjs.com/](http://expressjs.com/)\n","source":"_posts/node15.md","raw":"---\ntitle: Express 框架\ncategories: [node]\ntags: [node,Express]\ndate: 2016-08-24 10:17:50\n---\n### Express 简介\nExpress 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。\n<!-- more -->\n使用 Express 可以快速地搭建一个完整功能的网站。\nExpress 框架核心特性：\n- 可以设置中间件来响应 HTTP 请求。\n- 定义了路由表用于执行不同的 HTTP 请求动作。\n- 可以通过向模板传递参数来动态渲染 HTML 页面。\n\n### 请求和响应\nExpress 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。\n```js\napp.get('/', function (req, res) {\n   // --\n})\n```\nrequest 和 response 对象的具体介绍：\nRequest 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：\nreq.app：当callback为外部文件时，用req.app访问express的实例\nreq.baseUrl：获取路由当前安装的URL路径\nreq.body / req.cookies：获得「请求主体」/ Cookies\nreq.fresh / req.stale：判断请求是否还「新鲜」\nreq.hostname / req.ip：获取主机名和IP地址\nreq.originalUrl：获取原始请求URL\nreq.params：获取路由的parameters\nreq.path：获取请求路径\nreq.protocol：获取协议类型\nreq.query：获取URL的查询参数串\nreq.route：获取当前匹配的路由\nreq.subdomains：获取子域名\nreq.accpets（）：检查请求的Accept头的请求类型\nreq.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages\nreq.get（）：获取指定的HTTP请求头\nreq.is（）：判断请求头Content-Type的MIME类型\nResponse 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：\nres.app：同req.app一样\nres.append（）：追加指定HTTP头\nres.set（）在res.append（）后将重置之前设置的头\nres.cookie（name，value [，option]）：设置Cookie\nopition: domain / expires / httpOnly / maxAge / path / secure / signed\nres.clearCookie（）：清除Cookie\nres.download（）：传送指定路径的文件\nres.get（）：返回指定的HTTP头\nres.json（）：传送JSON响应\nres.jsonp（）：传送JSONP响应\nres.location（）：只设置响应的Location HTTP头，不设置状态码或者close response\nres.redirect（）：设置响应的Location HTTP头，并且设置状态码302\nres.send（）：传送HTTP响应\nres.sendFile（path [，options] [，fn]）：传送指定路径的文件 -会自动根据文件extension设定Content-Type\nres.set（）：设置HTTP头，传入object可以一次设置多个头\nres.status（）：设置HTTP状态码\nres.type（）：设置Content-Type的MIME类型\n\n### 路由\n```js\nvar express = require('express');\nvar app = express();\n//  主页输出 \"Hello World\"\napp.get('/', function (req, res) {\n   console.log(\"主页 GET 请求\");\n   res.send('Hello GET');\n})\n//  POST 请求\napp.post('/', function (req, res) {\n   console.log(\"主页 POST 请求\");\n   res.send('Hello POST');\n})\n//  /del_user 页面响应\napp.get('/del_user', function (req, res) {\n   console.log(\"/del_user 响应 DELETE 请求\");\n   res.send('删除页面');\n})\n//  /list_user 页面 GET 请求\napp.get('/list_user', function (req, res) {\n   console.log(\"/list_user GET 请求\");\n   res.send('用户列表页面');\n})\n// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求\napp.get('/ab*cd', function(req, res) {   \n   console.log(\"/ab*cd GET 请求\");\n   res.send('正则匹配');\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n### 静态文件\nExpress 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。\n你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：\napp.use(express.static('public'));\n我们可以到 public/images 目录下放些图片,如下所示：\nnode_modules\nserver.js\npublic/\npublic/images\npublic/images/logo.png\n\n代码如下所示：\n```js\nvar express = require('express');\nvar app = express();\napp.use(express.static('public'));\napp.get('/', function (req, res) {\n   res.send('Hello World');\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n### GET 方法\n```js\nvar express = require('express');\nvar app = express();\napp.use(express.static('public'));\napp.get('/index.htm', function (req, res) {\n   res.sendFile( __dirname + \"/\" + \"index.htm\" );\n})\napp.get('/process_get', function (req, res) {\n   // 输出 JSON 格式\n   response = {\n       first_name:req.query.first_name,\n       last_name:req.query.last_name\n   };\n   console.log(response);\n   res.end(JSON.stringify(response));\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n### POST 方法\n```js\nvar express = require('express');\nvar app = express();\nvar bodyParser = require('body-parser');\n// 创建 application/x-www-form-urlencoded 编码解析\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\napp.use(express.static('public'));\napp.get('/index.htm', function (req, res) {\n   res.sendFile( __dirname + \"/\" + \"index.htm\" );\n})\napp.post('/process_post', urlencodedParser, function (req, res) {\n   // 输出 JSON 格式\n   response = {\n       first_name:req.body.first_name,\n       last_name:req.body.last_name\n   };\n   console.log(response);\n   res.end(JSON.stringify(response));\n})\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"应用实例，访问地址为 http://%s:%s\", host, port)\n})\n```\n\n参考：[http://expressjs.com/](http://expressjs.com/)\n","slug":"node15","published":1,"updated":"2016-10-08T09:08:03.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynk007jesqrsaoiselh","content":"<h3 id=\"Express-简介\"><a href=\"#Express-简介\" class=\"headerlink\" title=\"Express 简介\"></a>Express 简介</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br><a id=\"more\"></a><br>使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：</p>\n<ul>\n<li>可以设置中间件来响应 HTTP 请求。</li>\n<li>定义了路由表用于执行不同的 HTTP 请求动作。</li>\n<li>可以通过向模板传递参数来动态渲染 HTML 页面。</li>\n</ul>\n<h3 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h3><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// --</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>request 和 response 对象的具体介绍：<br>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br>req.app：当callback为外部文件时，用req.app访问express的实例<br>req.baseUrl：获取路由当前安装的URL路径<br>req.body / req.cookies：获得「请求主体」/ Cookies<br>req.fresh / req.stale：判断请求是否还「新鲜」<br>req.hostname / req.ip：获取主机名和IP地址<br>req.originalUrl：获取原始请求URL<br>req.params：获取路由的parameters<br>req.path：获取请求路径<br>req.protocol：获取协议类型<br>req.query：获取URL的查询参数串<br>req.route：获取当前匹配的路由<br>req.subdomains：获取子域名<br>req.accpets（）：检查请求的Accept头的请求类型<br>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages<br>req.get（）：获取指定的HTTP请求头<br>req.is（）：判断请求头Content-Type的MIME类型<br>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br>res.app：同req.app一样<br>res.append（）：追加指定HTTP头<br>res.set（）在res.append（）后将重置之前设置的头<br>res.cookie（name，value [，option]）：设置Cookie<br>opition: domain / expires / httpOnly / maxAge / path / secure / signed<br>res.clearCookie（）：清除Cookie<br>res.download（）：传送指定路径的文件<br>res.get（）：返回指定的HTTP头<br>res.json（）：传送JSON响应<br>res.jsonp（）：传送JSONP响应<br>res.location（）：只设置响应的Location HTTP头，不设置状态码或者close response<br>res.redirect（）：设置响应的Location HTTP头，并且设置状态码302<br>res.send（）：传送HTTP响应<br>res.sendFile（path [，options] [，fn]）：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br>res.set（）：设置HTTP头，传入object可以一次设置多个头<br>res.status（）：设置HTTP状态码<br>res.type（）：设置Content-Type的MIME类型</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//  主页输出 \"Hello World\"</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页 GET 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'Hello GET'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  POST 请求</span></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页 POST 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'Hello POST'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  /del_user 页面响应</span></div><div class=\"line\">app.get(<span class=\"string\">'/del_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/del_user 响应 DELETE 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'删除页面'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  /list_user 页面 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/list_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/list_user GET 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'用户列表页面'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;   </div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/ab*cd GET 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'正则匹配'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h3><p>Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。<br>你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：<br>app.use(express.static(‘public’));<br>我们可以到 public/images 目录下放些图片,如下所示：<br>node_modules<br>server.js<br>public/<br>public/images<br>public/images/logo.png</p>\n<p>代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.send(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"GET-方法\"><a href=\"#GET-方法\" class=\"headerlink\" title=\"GET 方法\"></a>GET 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.sendFile( __dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span> );</div><div class=\"line\">&#125;)</div><div class=\"line\">app.get(<span class=\"string\">'/process_get'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 输出 JSON 格式</span></div><div class=\"line\">   response = &#123;</div><div class=\"line\">       first_name:req.query.first_name,</div><div class=\"line\">       last_name:req.query.last_name</div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">   res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"POST-方法\"><a href=\"#POST-方法\" class=\"headerlink\" title=\"POST 方法\"></a>POST 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"comment\">// 创建 application/x-www-form-urlencoded 编码解析</span></div><div class=\"line\"><span class=\"keyword\">var</span> urlencodedParser = bodyParser.urlencoded(&#123; extended: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.sendFile( __dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span> );</div><div class=\"line\">&#125;)</div><div class=\"line\">app.post(<span class=\"string\">'/process_post'</span>, urlencodedParser, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 输出 JSON 格式</span></div><div class=\"line\">   response = &#123;</div><div class=\"line\">       first_name:req.body.first_name,</div><div class=\"line\">       last_name:req.body.last_name</div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">   res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"external\">http://expressjs.com/</a></p>\n","excerpt":"<h3 id=\"Express-简介\"><a href=\"#Express-简介\" class=\"headerlink\" title=\"Express 简介\"></a>Express 简介</h3><p>Express 是一个简洁而灵活的 node.js Web应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。<br></p>","more":"<br>使用 Express 可以快速地搭建一个完整功能的网站。<br>Express 框架核心特性：<p></p>\n<ul>\n<li>可以设置中间件来响应 HTTP 请求。</li>\n<li>定义了路由表用于执行不同的 HTTP 请求动作。</li>\n<li>可以通过向模板传递参数来动态渲染 HTML 页面。</li>\n</ul>\n<h3 id=\"请求和响应\"><a href=\"#请求和响应\" class=\"headerlink\" title=\"请求和响应\"></a>请求和响应</h3><p>Express 应用使用回调函数的参数： request 和 response 对象来处理请求和响应的数据。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// --</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>request 和 response 对象的具体介绍：<br>Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：<br>req.app：当callback为外部文件时，用req.app访问express的实例<br>req.baseUrl：获取路由当前安装的URL路径<br>req.body / req.cookies：获得「请求主体」/ Cookies<br>req.fresh / req.stale：判断请求是否还「新鲜」<br>req.hostname / req.ip：获取主机名和IP地址<br>req.originalUrl：获取原始请求URL<br>req.params：获取路由的parameters<br>req.path：获取请求路径<br>req.protocol：获取协议类型<br>req.query：获取URL的查询参数串<br>req.route：获取当前匹配的路由<br>req.subdomains：获取子域名<br>req.accpets（）：检查请求的Accept头的请求类型<br>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages<br>req.get（）：获取指定的HTTP请求头<br>req.is（）：判断请求头Content-Type的MIME类型<br>Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：<br>res.app：同req.app一样<br>res.append（）：追加指定HTTP头<br>res.set（）在res.append（）后将重置之前设置的头<br>res.cookie（name，value [，option]）：设置Cookie<br>opition: domain / expires / httpOnly / maxAge / path / secure / signed<br>res.clearCookie（）：清除Cookie<br>res.download（）：传送指定路径的文件<br>res.get（）：返回指定的HTTP头<br>res.json（）：传送JSON响应<br>res.jsonp（）：传送JSONP响应<br>res.location（）：只设置响应的Location HTTP头，不设置状态码或者close response<br>res.redirect（）：设置响应的Location HTTP头，并且设置状态码302<br>res.send（）：传送HTTP响应<br>res.sendFile（path [，options] [，fn]）：传送指定路径的文件 -会自动根据文件extension设定Content-Type<br>res.set（）：设置HTTP头，传入object可以一次设置多个头<br>res.status（）：设置HTTP状态码<br>res.type（）：设置Content-Type的MIME类型</p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"comment\">//  主页输出 \"Hello World\"</span></div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页 GET 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'Hello GET'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  POST 请求</span></div><div class=\"line\">app.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"主页 POST 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'Hello POST'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  /del_user 页面响应</span></div><div class=\"line\">app.get(<span class=\"string\">'/del_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/del_user 响应 DELETE 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'删除页面'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//  /list_user 页面 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/list_user'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/list_user GET 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'用户列表页面'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">// 对页面 abcd, abxcd, ab123cd, 等响应 GET 请求</span></div><div class=\"line\">app.get(<span class=\"string\">'/ab*cd'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;   </div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">\"/ab*cd GET 请求\"</span>);</div><div class=\"line\">   res.send(<span class=\"string\">'正则匹配'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h3><p>Express 提供了内置的中间件 express.static 来设置静态文件如：图片， CSS, JavaScript 等。<br>你可以使用 express.static 中间件来设置静态文件路径。例如，如果你将图片， CSS, JavaScript 文件放在 public 目录下，你可以这么写：<br>app.use(express.static(‘public’));<br>我们可以到 public/images 目录下放些图片,如下所示：<br>node_modules<br>server.js<br>public/<br>public/images<br>public/images/logo.png</p>\n<p>代码如下所示：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.send(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"GET-方法\"><a href=\"#GET-方法\" class=\"headerlink\" title=\"GET 方法\"></a>GET 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.sendFile( __dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span> );</div><div class=\"line\">&#125;)</div><div class=\"line\">app.get(<span class=\"string\">'/process_get'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 输出 JSON 格式</span></div><div class=\"line\">   response = &#123;</div><div class=\"line\">       first_name:req.query.first_name,</div><div class=\"line\">       last_name:req.query.last_name</div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">   res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"POST-方法\"><a href=\"#POST-方法\" class=\"headerlink\" title=\"POST 方法\"></a>POST 方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</div><div class=\"line\"><span class=\"comment\">// 创建 application/x-www-form-urlencoded 编码解析</span></div><div class=\"line\"><span class=\"keyword\">var</span> urlencodedParser = bodyParser.urlencoded(&#123; extended: <span class=\"literal\">false</span> &#125;)</div><div class=\"line\">app.use(express.static(<span class=\"string\">'public'</span>));</div><div class=\"line\">app.get(<span class=\"string\">'/index.htm'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   res.sendFile( __dirname + <span class=\"string\">\"/\"</span> + <span class=\"string\">\"index.htm\"</span> );</div><div class=\"line\">&#125;)</div><div class=\"line\">app.post(<span class=\"string\">'/process_post'</span>, urlencodedParser, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 输出 JSON 格式</span></div><div class=\"line\">   response = &#123;</div><div class=\"line\">       first_name:req.body.first_name,</div><div class=\"line\">       last_name:req.body.last_name</div><div class=\"line\">   &#125;;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">   res.end(<span class=\"built_in\">JSON</span>.stringify(response));</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">var</span> server = app.listen(<span class=\"number\">8081</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> host = server.address().address</div><div class=\"line\">  <span class=\"keyword\">var</span> port = server.address().port</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"应用实例，访问地址为 http://%s:%s\"</span>, host, port)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>参考：<a href=\"http://expressjs.com/\">http://expressjs.com/</a></p>"},{"title":"Node.js 回调函数","date":"2016-08-15T05:07:52.000Z","_content":"\nNode.js 异步编程的直接体现就是回调。\n<!-- more -->\n### 回调函数\n异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。\n回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。\n例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行\n代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。\n","source":"_posts/node3.md","raw":"---\ntitle: Node.js 回调函数\ndate: 2016-08-15 13:07:52\ncategories: [node]\ntags: [node]\n---\n\nNode.js 异步编程的直接体现就是回调。\n<!-- more -->\n### 回调函数\n异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。\n回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。\n例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行\n代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。\n","slug":"node3","published":1,"updated":"2016-09-28T05:35:37.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynm007mesqrj6ie6hbo","content":"<p>Node.js 异步编程的直接体现就是回调。<br><a id=\"more\"></a></p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。<br>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。<br>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行<br>代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>\n","excerpt":"<p>Node.js 异步编程的直接体现就是回调。<br></p>","more":"<p></p>\n<h3 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h3><p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。<br>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。<br>例如，我们可以一边读取文件，一边执行其他命令，在文件读取完成后，我们将文件内容作为回调函数的参数返回。这样在执行<br>代码时就没有阻塞或等待文件 I/O 操作。这就大大提高了 Node.js 的性能，可以处理大量的并发请求。</p>"},{"title":"NPM 使用介绍","date":"2016-08-15T03:20:29.000Z","_content":"NPM 使用介绍\n<!-- more -->\n\nNPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n- 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n- 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n- 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 \"npm -v\" 来测试是否成功安装。命令如下，\n出现版本提示表示安装成功:\n```sh\nnpm -v\n//3.10.3\n```\n### 使用 npm 命令安装模块\n语法格式：npm install \"Module Name\"\n安装好之后，模块包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('Module Name') 的方式\n就好，无需指定第三方包路径。\n\n### 全局安装与本地安装\nnpm 的包安装分为本地安装（local）、全局安装（global）两种\n```sh\nnpm install express          # 本地安装\nnpm install express -g       # 全局安装\n```\n#### 本地安装\n1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令\n的目录下生成 node_modules 目录。\n2. 可以通过 require() 来引入本地安装的包。\n#### 全局安装\n1. 将安装包放在 /usr/local 下或者你 node 的安装目录。\n2. 可以直接在命令行里使用。\n\n\n*如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。\n\n你可以使用以下命令来查看所有全局安装的模块：\n```sh\nnpm ls -g\n```\n\n### 使用 package.json\npackage.json 位于模块的目录下，用于定义包的属性。\n#### Package.json 属性说明\n- name - 包名。\n- version - 包的版本号。\n- description - 包的描述。\n- homepage - 包的官网 url 。\n- author - 包的作者姓名。\n- contributors - 包的其他贡献者姓名。\n- dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n- repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n- main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(\"express\")。 \n- keywords - 关键字\n\n### 卸载模块\n可以使用以下命令来卸载 Node.js 模块。\n```\nnpm uninstall express\n```\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\n```\nnpm ls\n```\n### 更新模块\n```\nnpm update \"Module Name\"\n```\n### 搜索模块\n```\nnpm search \"Module Name\"\n```\n### 创建模块\n创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。\n```\nnpm init\n```\n\n### 版本号\n使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。\n语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。\n如果只是修复bug，需要更新Z位。\n如果是新增了功能，但是向下兼容，需要更新Y位。\n如果有大变动，向下不兼容，需要更新X位。\n版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如\"argv\": \"0.0.x\"表示依赖于0.0.x系列的最新版argv。\nNPM支持的所有版本号范围指定方式可以查看[官方文档](https://docs.npmjs.com/files/package.json#dependencies)。\n\n### NPM 常用命令\n除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。\n除了可以在[npmjs.org/doc/](npmjs.org/doc/)查看官方文档外，这里再介绍一些NPM常用命令。\nNPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。\n- 使用npm help <command>可查看某条命令的详细帮助，例如npm help install。\n- 在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。\n- 使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。\n- 使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。\n- 使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。\n- 使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。\n\n### 使用淘宝 NPM 镜像\n大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。\n淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n这样就可以使用 cnpm 命令来安装模块了：\n```\ncnpm install \"name\"\n```\n[http://npm.taobao.org/](http://npm.taobao.org/)","source":"_posts/node2.md","raw":"---\ntitle: NPM 使用介绍\ndate: 2016-08-15 11:20:29\ncategories: [node]\ntags: [node]\n---\nNPM 使用介绍\n<!-- more -->\n\nNPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n- 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n- 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n- 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 \"npm -v\" 来测试是否成功安装。命令如下，\n出现版本提示表示安装成功:\n```sh\nnpm -v\n//3.10.3\n```\n### 使用 npm 命令安装模块\n语法格式：npm install \"Module Name\"\n安装好之后，模块包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require('Module Name') 的方式\n就好，无需指定第三方包路径。\n\n### 全局安装与本地安装\nnpm 的包安装分为本地安装（local）、全局安装（global）两种\n```sh\nnpm install express          # 本地安装\nnpm install express -g       # 全局安装\n```\n#### 本地安装\n1. 将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令\n的目录下生成 node_modules 目录。\n2. 可以通过 require() 来引入本地安装的包。\n#### 全局安装\n1. 将安装包放在 /usr/local 下或者你 node 的安装目录。\n2. 可以直接在命令行里使用。\n\n\n*如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。\n\n你可以使用以下命令来查看所有全局安装的模块：\n```sh\nnpm ls -g\n```\n\n### 使用 package.json\npackage.json 位于模块的目录下，用于定义包的属性。\n#### Package.json 属性说明\n- name - 包名。\n- version - 包的版本号。\n- description - 包的描述。\n- homepage - 包的官网 url 。\n- author - 包的作者姓名。\n- contributors - 包的其他贡献者姓名。\n- dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。\n- repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。\n- main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(\"express\")。 \n- keywords - 关键字\n\n### 卸载模块\n可以使用以下命令来卸载 Node.js 模块。\n```\nnpm uninstall express\n```\n卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：\n```\nnpm ls\n```\n### 更新模块\n```\nnpm update \"Module Name\"\n```\n### 搜索模块\n```\nnpm search \"Module Name\"\n```\n### 创建模块\n创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。\n```\nnpm init\n```\n\n### 版本号\n使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。\n语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。\n如果只是修复bug，需要更新Z位。\n如果是新增了功能，但是向下兼容，需要更新Y位。\n如果有大变动，向下不兼容，需要更新X位。\n版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如\"argv\": \"0.0.x\"表示依赖于0.0.x系列的最新版argv。\nNPM支持的所有版本号范围指定方式可以查看[官方文档](https://docs.npmjs.com/files/package.json#dependencies)。\n\n### NPM 常用命令\n除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。\n除了可以在[npmjs.org/doc/](npmjs.org/doc/)查看官方文档外，这里再介绍一些NPM常用命令。\nNPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。\n- 使用npm help <command>可查看某条命令的详细帮助，例如npm help install。\n- 在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。\n- 使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。\n- 使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。\n- 使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。\n- 使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。\n\n### 使用淘宝 NPM 镜像\n大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。\n淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n这样就可以使用 cnpm 命令来安装模块了：\n```\ncnpm install \"name\"\n```\n[http://npm.taobao.org/](http://npm.taobao.org/)","slug":"node2","published":1,"updated":"2016-09-28T05:01:39.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yno007pesqr2yo3ges6","content":"<p>NPM 使用介绍<br><a id=\"more\"></a></p>\n<p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ul>\n<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。<br>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，<br>出现版本提示表示安装成功:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v</div><div class=\"line\">//3.10.3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用-npm-命令安装模块\"><a href=\"#使用-npm-命令安装模块\" class=\"headerlink\" title=\"使用 npm 命令安装模块\"></a>使用 npm 命令安装模块</h3><p>语法格式：npm install “Module Name”<br>安装好之后，模块包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘Module Name’) 的方式<br>就好，无需指定第三方包路径。</p>\n<h3 id=\"全局安装与本地安装\"><a href=\"#全局安装与本地安装\" class=\"headerlink\" title=\"全局安装与本地安装\"></a>全局安装与本地安装</h3><p>npm 的包安装分为本地安装（local）、全局安装（global）两种<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express          <span class=\"comment\"># 本地安装</span></div><div class=\"line\">npm install express -g       <span class=\"comment\"># 全局安装</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h4><ol>\n<li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令<br>的目录下生成 node_modules 目录。</li>\n<li>可以通过 require() 来引入本地安装的包。<h4 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h4></li>\n<li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li>\n<li>可以直接在命令行里使用。</li>\n</ol>\n<p>*如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。</p>\n<p>你可以使用以下命令来查看所有全局安装的模块：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ls -g</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用-package-json\"><a href=\"#使用-package-json\" class=\"headerlink\" title=\"使用 package.json\"></a>使用 package.json</h3><p>package.json 位于模块的目录下，用于定义包的属性。</p>\n<h4 id=\"Package-json-属性说明\"><a href=\"#Package-json-属性说明\" class=\"headerlink\" title=\"Package.json 属性说明\"></a>Package.json 属性说明</h4><ul>\n<li>name - 包名。</li>\n<li>version - 包的版本号。</li>\n<li>description - 包的描述。</li>\n<li>homepage - 包的官网 url 。</li>\n<li>author - 包的作者姓名。</li>\n<li>contributors - 包的其他贡献者姓名。</li>\n<li>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li>\n<li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li>\n<li>main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(“express”)。 </li>\n<li>keywords - 关键字</li>\n</ul>\n<h3 id=\"卸载模块\"><a href=\"#卸载模块\" class=\"headerlink\" title=\"卸载模块\"></a>卸载模块</h3><p>可以使用以下命令来卸载 Node.js 模块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall express</div></pre></td></tr></table></figure></p>\n<p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ls</div></pre></td></tr></table></figure></p>\n<h3 id=\"更新模块\"><a href=\"#更新模块\" class=\"headerlink\" title=\"更新模块\"></a>更新模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update &quot;Module Name&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"搜索模块\"><a href=\"#搜索模块\" class=\"headerlink\" title=\"搜索模块\"></a>搜索模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm search &quot;Module Name&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h3><p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure></p>\n<h3 id=\"版本号\"><a href=\"#版本号\" class=\"headerlink\" title=\"版本号\"></a>版本号</h3><p>使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。<br>语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。<br>如果只是修复bug，需要更新Z位。<br>如果是新增了功能，但是向下兼容，需要更新Y位。<br>如果有大变动，向下不兼容，需要更新X位。<br>版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如”argv”: “0.0.x”表示依赖于0.0.x系列的最新版argv。<br>NPM支持的所有版本号范围指定方式可以查看<a href=\"https://docs.npmjs.com/files/package.json#dependencies\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h3 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h3><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在<a href=\"npmjs.org/doc/\">npmjs.org/doc/</a>查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。</p>\n<ul>\n<li>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。</li>\n<li>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。</li>\n<li>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。</package></li>\n<li>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。</package></li>\n<li>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</li>\n<li>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></li>\n</ul>\n<h3 id=\"使用淘宝-NPM-镜像\"><a href=\"#使用淘宝-NPM-镜像\" class=\"headerlink\" title=\"使用淘宝 NPM 镜像\"></a>使用淘宝 NPM 镜像</h3><p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。<br>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>这样就可以使用 cnpm 命令来安装模块了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install &quot;name&quot;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"external\">http://npm.taobao.org/</a></p>\n","excerpt":"<p>NPM 使用介绍<br></p>","more":"<p></p>\n<p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ul>\n<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。<br>由于新版的nodejs已经集成了npm，所以之前npm也一并安装好了。同样可以通过输入 “npm -v” 来测试是否成功安装。命令如下，<br>出现版本提示表示安装成功:<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm -v</div><div class=\"line\">//3.10.3</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"使用-npm-命令安装模块\"><a href=\"#使用-npm-命令安装模块\" class=\"headerlink\" title=\"使用 npm 命令安装模块\"></a>使用 npm 命令安装模块</h3><p>语法格式：npm install “Module Name”<br>安装好之后，模块包就放在了工程目录下的 node_modules 目录中，因此在代码中只需要通过 require(‘Module Name’) 的方式<br>就好，无需指定第三方包路径。</p>\n<h3 id=\"全局安装与本地安装\"><a href=\"#全局安装与本地安装\" class=\"headerlink\" title=\"全局安装与本地安装\"></a>全局安装与本地安装</h3><p>npm 的包安装分为本地安装（local）、全局安装（global）两种<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express          <span class=\"comment\"># 本地安装</span></div><div class=\"line\">npm install express -g       <span class=\"comment\"># 全局安装</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h4><ol>\n<li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令<br>的目录下生成 node_modules 目录。</li>\n<li>可以通过 require() 来引入本地安装的包。<h4 id=\"全局安装\"><a href=\"#全局安装\" class=\"headerlink\" title=\"全局安装\"></a>全局安装</h4></li>\n<li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li>\n<li>可以直接在命令行里使用。</li>\n</ol>\n<p>*如果你希望具备两者功能，则需要在两个地方安装它或使用 npm link。</p>\n<p>你可以使用以下命令来查看所有全局安装的模块：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ls -g</div></pre></td></tr></table></figure></p>\n<h3 id=\"使用-package-json\"><a href=\"#使用-package-json\" class=\"headerlink\" title=\"使用 package.json\"></a>使用 package.json</h3><p>package.json 位于模块的目录下，用于定义包的属性。</p>\n<h4 id=\"Package-json-属性说明\"><a href=\"#Package-json-属性说明\" class=\"headerlink\" title=\"Package.json 属性说明\"></a>Package.json 属性说明</h4><ul>\n<li>name - 包名。</li>\n<li>version - 包的版本号。</li>\n<li>description - 包的描述。</li>\n<li>homepage - 包的官网 url 。</li>\n<li>author - 包的作者姓名。</li>\n<li>contributors - 包的其他贡献者姓名。</li>\n<li>dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。</li>\n<li>repository - 包代码存放的地方的类型，可以是 git 或 svn，git 可在 Github 上。</li>\n<li>main - main 字段是一个模块ID，它是一个指向你程序的主要项目。就是说，如果你包的名字叫 express，然后用户安装它，然后require(“express”)。 </li>\n<li>keywords - 关键字</li>\n</ul>\n<h3 id=\"卸载模块\"><a href=\"#卸载模块\" class=\"headerlink\" title=\"卸载模块\"></a>卸载模块</h3><p>可以使用以下命令来卸载 Node.js 模块。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall express</div></pre></td></tr></table></figure></p>\n<p>卸载后，你可以到 /node_modules/ 目录下查看包是否还存在，或者使用以下命令查看：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm ls</div></pre></td></tr></table></figure></p>\n<h3 id=\"更新模块\"><a href=\"#更新模块\" class=\"headerlink\" title=\"更新模块\"></a>更新模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update &quot;Module Name&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"搜索模块\"><a href=\"#搜索模块\" class=\"headerlink\" title=\"搜索模块\"></a>搜索模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm search &quot;Module Name&quot;</div></pre></td></tr></table></figure>\n<h3 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h3><p>创建模块，package.json 文件是必不可少的。我们可以使用 NPM 生成 package.json 文件，生成的文件包含了基本的结果。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure></p>\n<h3 id=\"版本号\"><a href=\"#版本号\" class=\"headerlink\" title=\"版本号\"></a>版本号</h3><p>使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。<br>语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。<br>如果只是修复bug，需要更新Z位。<br>如果是新增了功能，但是向下兼容，需要更新Y位。<br>如果有大变动，向下不兼容，需要更新X位。<br>版本号有了这个保证后，在申明第三方包依赖时，除了可依赖于一个固定版本号外，还可依赖于某个范围的版本号。例如”argv”: “0.0.x”表示依赖于0.0.x系列的最新版argv。<br>NPM支持的所有版本号范围指定方式可以查看<a href=\"https://docs.npmjs.com/files/package.json#dependencies\">官方文档</a>。</p>\n<h3 id=\"NPM-常用命令\"><a href=\"#NPM-常用命令\" class=\"headerlink\" title=\"NPM 常用命令\"></a>NPM 常用命令</h3><p>除了本章介绍的部分外，NPM还提供了很多功能，package.json里也有很多其它有用的字段。<br>除了可以在<a href=\"npmjs.org/doc/\">npmjs.org/doc/</a>查看官方文档外，这里再介绍一些NPM常用命令。<br>NPM提供了很多命令，例如install和publish，使用npm help可查看所有命令。</p>\n<ul>\n<li>使用npm help <command>可查看某条命令的详细帮助，例如npm help install。</li>\n<li>在package.json所在目录下使用npm install . -g可先在本地安装当前命令行程序，可用于发布前的本地测试。</li>\n<li>使用npm update <package>可以把当前目录下node_modules子目录里边的对应模块更新至最新版本。</package></li>\n<li>使用npm update <package> -g可以把全局安装的对应命令行程序更新至最新版。</package></li>\n<li>使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</li>\n<li>使用npm unpublish <package>@<version>可以撤销发布自己发布过的某个版本代码。</version></package></li>\n</ul>\n<h3 id=\"使用淘宝-NPM-镜像\"><a href=\"#使用淘宝-NPM-镜像\" class=\"headerlink\" title=\"使用淘宝 NPM 镜像\"></a>使用淘宝 NPM 镜像</h3><p>大家都知道国内直接使用 npm 的官方镜像是非常慢的，这里推荐使用淘宝 NPM 镜像。<br>淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>\n<p>这样就可以使用 cnpm 命令来安装模块了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cnpm install &quot;name&quot;</div></pre></td></tr></table></figure></p>\n<p><a href=\"http://npm.taobao.org/\">http://npm.taobao.org/</a></p>"},{"title":"Node.js 事件循环","date":"2016-08-15T05:08:41.000Z","_content":"\n事件循环和事件驱动程序\n<!-- more -->\n### Node.js 事件循环\nNode.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。\nNode.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。\nNode.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\nNode.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有\n事件发生就调用该回调函数.\n\n### 事件驱动程序\nNode.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。\n当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。\n这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）\n在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。\n![](/node4.jpg)\n整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上\n的处理函数相当于观察者(Observer)。\nNode.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：\n\n```js\nvar events = require('event');\n// create eventEmitter\nvar eventEmitter = new events.EventEmitter();\n\n// bind events and event handlers\neventEmitter.on('eventName',eventHandler);\n\n//trigger event \neventEmitter.emit('eventName');\n```\n","source":"_posts/node4.md","raw":"---\ntitle: Node.js 事件循环\ndate: 2016-08-15 13:08:41\ncategories: [node]\ntags: [node]\n---\n\n事件循环和事件驱动程序\n<!-- more -->\n### Node.js 事件循环\nNode.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。\nNode.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。\nNode.js 基本上所有的事件机制都是用设计模式中观察者模式实现。\nNode.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有\n事件发生就调用该回调函数.\n\n### 事件驱动程序\nNode.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。\n当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。\n这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）\n在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。\n![](/node4.jpg)\n整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上\n的处理函数相当于观察者(Observer)。\nNode.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：\n\n```js\nvar events = require('event');\n// create eventEmitter\nvar eventEmitter = new events.EventEmitter();\n\n// bind events and event handlers\neventEmitter.on('eventName',eventHandler);\n\n//trigger event \neventEmitter.emit('eventName');\n```\n","slug":"node4","published":1,"updated":"2016-09-28T05:35:27.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynp007qesqratv2bwva","content":"<p>事件循环和事件驱动程序<br><a id=\"more\"></a></p>\n<h3 id=\"Node-js-事件循环\"><a href=\"#Node-js-事件循环\" class=\"headerlink\" title=\"Node.js 事件循环\"></a>Node.js 事件循环</h3><p>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。<br>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。<br>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。<br>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有<br>事件发生就调用该回调函数.</p>\n<h3 id=\"事件驱动程序\"><a href=\"#事件驱动程序\" class=\"headerlink\" title=\"事件驱动程序\"></a>事件驱动程序</h3><p>Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。<br>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。<br>这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）<br>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。<br><img src=\"/2016/08/15/node4/node4.jpg\" alt=\"\"><br>整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上<br>的处理函数相当于观察者(Observer)。<br>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'event'</span>);</div><div class=\"line\"><span class=\"comment\">// create eventEmitter</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bind events and event handlers</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'eventName'</span>,eventHandler);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//trigger event </span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'eventName'</span>);</div></pre></td></tr></table></figure>\n","excerpt":"<p>事件循环和事件驱动程序<br></p>","more":"<p></p>\n<h3 id=\"Node-js-事件循环\"><a href=\"#Node-js-事件循环\" class=\"headerlink\" title=\"Node.js 事件循环\"></a>Node.js 事件循环</h3><p>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。<br>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。<br>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。<br>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有<br>事件发生就调用该回调函数.</p>\n<h3 id=\"事件驱动程序\"><a href=\"#事件驱动程序\" class=\"headerlink\" title=\"事件驱动程序\"></a>事件驱动程序</h3><p>Node.js 使用事件驱动模型，当web server接收到请求，就把它关闭然后进行处理，然后去服务下一个web请求。<br>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。<br>这个模型非常高效可扩展性非常强，因为webserver一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式IO或者事件驱动IO）<br>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数。<br><img src=\"/2016/08/15/node4/node4.jpg\" alt=\"\"><br>整个事件驱动的流程就是这么实现的，非常简洁。有点类似于观察者模式，事件相当于一个主题(Subject)，而所有注册到这个事件上<br>的处理函数相当于观察者(Observer)。<br>Node.js 有多个内置的事件，我们可以通过引入 events 模块，并通过实例化 EventEmitter 类来绑定和监听事件，如下实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'event'</span>);</div><div class=\"line\"><span class=\"comment\">// create eventEmitter</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// bind events and event handlers</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'eventName'</span>,eventHandler);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//trigger event </span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'eventName'</span>);</div></pre></td></tr></table></figure>"},{"title":"Node.js Buffer(缓冲区)","date":"2016-08-16T06:14:45.000Z","_content":"JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。\n但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放\n二进制数据的缓存区。\n<!-- more -->\n在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 \nNode.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer\n类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。\n\n### 创建Buffer 类\nNode Buffer 类可以通过多种方式来创建。\n1. 创建长度为 10 字节的 Buffer 实例：\n```js\nvar buf = new Buffer(10);\n```\n2. 通过给定的数组创建 Buffer 实例：\n```js\nvar buf = new Buffer([10, 20, 30, 40, 50]);\n```\n3. 通过一个字符串来创建 Buffer 实例：\n```js\nvar buf = new Buffer(\"www.baidu.com\", \"utf-8\");\n```\n\nutf-8 是默认的编码方式，此外它同样支持以下编码：\"ascii\", \"utf8\", \"utf16le\", \"ucs2\", \"base64\" 和 \"hex\"。\n\n### 写入缓冲区\n#### 语法\n```js\nbuf.write(string[, offset[, length]][, encoding])\n```\n#### 参数\n- string 写入缓冲区的字符串\n- offset 缓冲区开始写入的索引值，默认为 0 \n- length 写入的字节数，默认为 buffer.length\n- encoding 使用的编码。默认为 'utf8' 。\n\n#### 返回值\n返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。\n\n#### 实例\n```js\nbuf = new Buffer(256);\nlen =  buf.write(\"www.baidu.com\");\nconsole.log(\"写入的字节数:\"+len);//13\n```\n\n### 从缓冲区读取数据\n#### 语法\n```js\nbuf.toString([encoding[, start[, end]]])\n```\n#### 参数\n- encoding - 使用的编码。默认为 'utf8' 。\n- start - 指定开始读取的索引位置，默认为 0。\n- end - 结束位置，默认为缓冲区的末尾。\n#### 返回值\n解码缓冲区数据并使用指定的编码返回字符串。\n#### 实例\n```js\nbuf = new Buffer(26);\nfor (var i = 0; i < 26 ; i++){\n    buf[i] = i + 97;\n}\n\nconsole.log(buf.toString('ascii'));//abcdefghijklmnopqrstuvwxyz\nconsole.log(buf.toString('ascii',0,5));//abcde\nconsole.log(buf.toString('utf8',0,5));//abcde\nconsole.log(buf.toString(undefined,0,5));//abcde\n```\n### 将 Buffer 转换为 JSON 对象\n#### 语法\n```js\nbuf.toJSON()\n```\n#### 返回值\n返回 JSON 对象。\n#### 实例\n```js\nvar buf = new Buffer('www.baidu.com');\nvar json = buf.toJSON(buf);\n\nconsole.log(json);\n```\n结果：\n```json\n{ type: 'Buffer',\n  data: [ 119, 119, 119, 46, 98, 97, 105, 100, 117, 46, 99, 111, 109 ] }\n```\n### 缓冲区合并\n#### 语法\n```js\nBuffer.concat(list[, totalLength])\n```\n#### 参数\n- list - 用于合并的 Buffer 对象数组列表。\n- totalLength - 指定合并后Buffer对象的总长度。\n#### 返回值\n返回一个多个成员合并的新 Buffer 对象。\n#### 实例\n```js\nvar buffer1 = new Buffer('百度');\nvar buffer2 = new Buffer('www.baidu.com');\nvar buffer3 = Buffer.concat([buffer1,buffer2]);\nconsole.log(\"buffer3 内容: \" + buffer3.toString());//buffer3 内容: 百度www.baidu.com\n```\n\n\n","source":"_posts/node6.md","raw":"---\ntitle: Node.js Buffer(缓冲区)\ncategories: [node]\ntags: [node]\ndate: 2016-08-16 14:14:45\n---\nJavaScript 语言自身只有字符串数据类型，没有二进制数据类型。\n但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放\n二进制数据的缓存区。\n<!-- more -->\n在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 \nNode.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer\n类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。\n\n### 创建Buffer 类\nNode Buffer 类可以通过多种方式来创建。\n1. 创建长度为 10 字节的 Buffer 实例：\n```js\nvar buf = new Buffer(10);\n```\n2. 通过给定的数组创建 Buffer 实例：\n```js\nvar buf = new Buffer([10, 20, 30, 40, 50]);\n```\n3. 通过一个字符串来创建 Buffer 实例：\n```js\nvar buf = new Buffer(\"www.baidu.com\", \"utf-8\");\n```\n\nutf-8 是默认的编码方式，此外它同样支持以下编码：\"ascii\", \"utf8\", \"utf16le\", \"ucs2\", \"base64\" 和 \"hex\"。\n\n### 写入缓冲区\n#### 语法\n```js\nbuf.write(string[, offset[, length]][, encoding])\n```\n#### 参数\n- string 写入缓冲区的字符串\n- offset 缓冲区开始写入的索引值，默认为 0 \n- length 写入的字节数，默认为 buffer.length\n- encoding 使用的编码。默认为 'utf8' 。\n\n#### 返回值\n返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。\n\n#### 实例\n```js\nbuf = new Buffer(256);\nlen =  buf.write(\"www.baidu.com\");\nconsole.log(\"写入的字节数:\"+len);//13\n```\n\n### 从缓冲区读取数据\n#### 语法\n```js\nbuf.toString([encoding[, start[, end]]])\n```\n#### 参数\n- encoding - 使用的编码。默认为 'utf8' 。\n- start - 指定开始读取的索引位置，默认为 0。\n- end - 结束位置，默认为缓冲区的末尾。\n#### 返回值\n解码缓冲区数据并使用指定的编码返回字符串。\n#### 实例\n```js\nbuf = new Buffer(26);\nfor (var i = 0; i < 26 ; i++){\n    buf[i] = i + 97;\n}\n\nconsole.log(buf.toString('ascii'));//abcdefghijklmnopqrstuvwxyz\nconsole.log(buf.toString('ascii',0,5));//abcde\nconsole.log(buf.toString('utf8',0,5));//abcde\nconsole.log(buf.toString(undefined,0,5));//abcde\n```\n### 将 Buffer 转换为 JSON 对象\n#### 语法\n```js\nbuf.toJSON()\n```\n#### 返回值\n返回 JSON 对象。\n#### 实例\n```js\nvar buf = new Buffer('www.baidu.com');\nvar json = buf.toJSON(buf);\n\nconsole.log(json);\n```\n结果：\n```json\n{ type: 'Buffer',\n  data: [ 119, 119, 119, 46, 98, 97, 105, 100, 117, 46, 99, 111, 109 ] }\n```\n### 缓冲区合并\n#### 语法\n```js\nBuffer.concat(list[, totalLength])\n```\n#### 参数\n- list - 用于合并的 Buffer 对象数组列表。\n- totalLength - 指定合并后Buffer对象的总长度。\n#### 返回值\n返回一个多个成员合并的新 Buffer 对象。\n#### 实例\n```js\nvar buffer1 = new Buffer('百度');\nvar buffer2 = new Buffer('www.baidu.com');\nvar buffer3 = Buffer.concat([buffer1,buffer2]);\nconsole.log(\"buffer3 内容: \" + buffer3.toString());//buffer3 内容: 百度www.baidu.com\n```\n\n\n","slug":"node6","published":1,"updated":"2016-09-29T08:03:10.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynt007vesqrrb4rhuzk","content":"<p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。<br>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放<br>二进制数据的缓存区。<br><a id=\"more\"></a><br>在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让<br>Node.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer<br>类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。</p>\n<h3 id=\"创建Buffer-类\"><a href=\"#创建Buffer-类\" class=\"headerlink\" title=\"创建Buffer 类\"></a>创建Buffer 类</h3><p>Node Buffer 类可以通过多种方式来创建。</p>\n<ol>\n<li><p>创建长度为 10 字节的 Buffer 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过给定的数组创建 Buffer 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过一个字符串来创建 Buffer 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"www.baidu.com\"</span>, <span class=\"string\">\"utf-8\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>utf-8 是默认的编码方式，此外它同样支持以下编码：”ascii”, “utf8”, “utf16le”, “ucs2”, “base64” 和 “hex”。</p>\n<h3 id=\"写入缓冲区\"><a href=\"#写入缓冲区\" class=\"headerlink\" title=\"写入缓冲区\"></a>写入缓冲区</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.write(string[, offset[, length]][, encoding])</div></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>string 写入缓冲区的字符串</li>\n<li>offset 缓冲区开始写入的索引值，默认为 0 </li>\n<li>length 写入的字节数，默认为 buffer.length</li>\n<li>encoding 使用的编码。默认为 ‘utf8’ 。</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">256</span>);</div><div class=\"line\">len =  buf.write(<span class=\"string\">\"www.baidu.com\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入的字节数:\"</span>+len);<span class=\"comment\">//13</span></div></pre></td></tr></table></figure>\n<h3 id=\"从缓冲区读取数据\"><a href=\"#从缓冲区读取数据\" class=\"headerlink\" title=\"从缓冲区读取数据\"></a>从缓冲区读取数据</h3><h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toString([encoding[, start[, end]]])</div></pre></td></tr></table></figure>\n<h4 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>encoding - 使用的编码。默认为 ‘utf8’ 。</li>\n<li>start - 指定开始读取的索引位置，默认为 0。</li>\n<li>end - 结束位置，默认为缓冲区的末尾。<h4 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4>解码缓冲区数据并使用指定的编码返回字符串。<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">26</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span> ; i++)&#123;</div><div class=\"line\">    buf[i] = i + <span class=\"number\">97</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"string\">'ascii'</span>));<span class=\"comment\">//abcdefghijklmnopqrstuvwxyz</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"string\">'ascii'</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//abcde</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"string\">'utf8'</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//abcde</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"literal\">undefined</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//abcde</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"将-Buffer-转换为-JSON-对象\"><a href=\"#将-Buffer-转换为-JSON-对象\" class=\"headerlink\" title=\"将 Buffer 转换为 JSON 对象\"></a>将 Buffer 转换为 JSON 对象</h3><h4 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toJSON()</div></pre></td></tr></table></figure>\n<h4 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>返回 JSON 对象。</p>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'www.baidu.com'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> json = buf.toJSON(buf);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(json);</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; type: 'Buffer',</div><div class=\"line\">  data: [ 119, 119, 119, 46, 98, 97, 105, 100, 117, 46, 99, 111, 109 ] &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"缓冲区合并\"><a href=\"#缓冲区合并\" class=\"headerlink\" title=\"缓冲区合并\"></a>缓冲区合并</h3><h4 id=\"语法-3\"><a href=\"#语法-3\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Buffer.concat(list[, totalLength])</div></pre></td></tr></table></figure>\n<h4 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>list - 用于合并的 Buffer 对象数组列表。</li>\n<li>totalLength - 指定合并后Buffer对象的总长度。<h4 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4>返回一个多个成员合并的新 Buffer 对象。<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buffer1 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'百度'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buffer2 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'www.baidu.com'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buffer3 = Buffer.concat([buffer1,buffer2]);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"buffer3 内容: \"</span> + buffer3.toString());<span class=\"comment\">//buffer3 内容: 百度www.baidu.com</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n","excerpt":"<p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。<br>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放<br>二进制数据的缓存区。<br></p>","more":"<br>在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让<br>Node.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer<br>类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。<p></p>\n<h3 id=\"创建Buffer-类\"><a href=\"#创建Buffer-类\" class=\"headerlink\" title=\"创建Buffer 类\"></a>创建Buffer 类</h3><p>Node Buffer 类可以通过多种方式来创建。</p>\n<ol>\n<li><p>创建长度为 10 字节的 Buffer 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过给定的数组创建 Buffer 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer([<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>]);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通过一个字符串来创建 Buffer 实例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">\"www.baidu.com\"</span>, <span class=\"string\">\"utf-8\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>utf-8 是默认的编码方式，此外它同样支持以下编码：”ascii”, “utf8”, “utf16le”, “ucs2”, “base64” 和 “hex”。</p>\n<h3 id=\"写入缓冲区\"><a href=\"#写入缓冲区\" class=\"headerlink\" title=\"写入缓冲区\"></a>写入缓冲区</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.write(string[, offset[, length]][, encoding])</div></pre></td></tr></table></figure>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>string 写入缓冲区的字符串</li>\n<li>offset 缓冲区开始写入的索引值，默认为 0 </li>\n<li>length 写入的字节数，默认为 buffer.length</li>\n<li>encoding 使用的编码。默认为 ‘utf8’ 。</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p>\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">256</span>);</div><div class=\"line\">len =  buf.write(<span class=\"string\">\"www.baidu.com\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入的字节数:\"</span>+len);<span class=\"comment\">//13</span></div></pre></td></tr></table></figure>\n<h3 id=\"从缓冲区读取数据\"><a href=\"#从缓冲区读取数据\" class=\"headerlink\" title=\"从缓冲区读取数据\"></a>从缓冲区读取数据</h3><h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toString([encoding[, start[, end]]])</div></pre></td></tr></table></figure>\n<h4 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>encoding - 使用的编码。默认为 ‘utf8’ 。</li>\n<li>start - 指定开始读取的索引位置，默认为 0。</li>\n<li>end - 结束位置，默认为缓冲区的末尾。<h4 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4>解码缓冲区数据并使用指定的编码返回字符串。<h4 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">26</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span> ; i++)&#123;</div><div class=\"line\">    buf[i] = i + <span class=\"number\">97</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"string\">'ascii'</span>));<span class=\"comment\">//abcdefghijklmnopqrstuvwxyz</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"string\">'ascii'</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//abcde</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"string\">'utf8'</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//abcde</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(buf.toString(<span class=\"literal\">undefined</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//abcde</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"将-Buffer-转换为-JSON-对象\"><a href=\"#将-Buffer-转换为-JSON-对象\" class=\"headerlink\" title=\"将 Buffer 转换为 JSON 对象\"></a>将 Buffer 转换为 JSON 对象</h3><h4 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">buf.toJSON()</div></pre></td></tr></table></figure>\n<h4 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>返回 JSON 对象。</p>\n<h4 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'www.baidu.com'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> json = buf.toJSON(buf);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(json);</div></pre></td></tr></table></figure>\n<p>结果：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123; type: 'Buffer',</div><div class=\"line\">  data: [ 119, 119, 119, 46, 98, 97, 105, 100, 117, 46, 99, 111, 109 ] &#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"缓冲区合并\"><a href=\"#缓冲区合并\" class=\"headerlink\" title=\"缓冲区合并\"></a>缓冲区合并</h3><h4 id=\"语法-3\"><a href=\"#语法-3\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Buffer.concat(list[, totalLength])</div></pre></td></tr></table></figure>\n<h4 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>list - 用于合并的 Buffer 对象数组列表。</li>\n<li>totalLength - 指定合并后Buffer对象的总长度。<h4 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4>返回一个多个成员合并的新 Buffer 对象。<h4 id=\"实例-3\"><a href=\"#实例-3\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> buffer1 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'百度'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buffer2 = <span class=\"keyword\">new</span> Buffer(<span class=\"string\">'www.baidu.com'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> buffer3 = Buffer.concat([buffer1,buffer2]);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"buffer3 内容: \"</span> + buffer3.toString());<span class=\"comment\">//buffer3 内容: 百度www.baidu.com</span></div></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Node.js EventEmitter","date":"2016-08-15T06:03:52.000Z","_content":"Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。\nNode.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文\n件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。\n<!-- more -->\n\n### EventEmitter 类\nevents 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。\n你可以通过require(\"events\");来访问该模块。\n```js\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```\nEventEmitter 对象如果在实例化时发生错误，会触发 'error' 事件。当添加新的监听器时，'newListener' 事件会触发，当监听器\n被移除时，'removeListener' 事件被触发。\n下面我们用一个简单的例子说明 EventEmitter 的用法：\n```js\n//event.js 文件\nvar EventEmitter = require('events').EventEmitter; \nvar event = new EventEmitter(); \nevent.on('some_event', function() { \n\tconsole.log('some_event work..'); \n}); \nsetTimeout(function() { \n\tevent.emit('some_event'); \n}, 1000); \n```\n执行结果如下：\n运行这段代码，1 秒后控制台输出了 'some_event 事件触发'。其原理是 event 对象注册了事件 some_event 的一个监听器，然后\n我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。\n```\nnode event.js\n// some_event work..\n```\nEventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，\nEventEmitter 支持 若干个事件监听器。\n当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n让我们以下面的例子解释这个过程：\n\n```js\nvar events = require('events');//events 有 ‘s’的\nvar emitter = new events.EventEmitter();\nemitter.on('someEvent',function(arg1,arg2) {\n    console.log('listener1',arg1,arg2);\n});\n\nemitter.on('someEvent',function(arg1,arg2) {\n    console.log('listener2',arg1,arg2);\n  \n});\nemitter.emit('someEvent','arg1','arg2');\n```\n执行以上代码，运行的结果如下：\n```\nlistener1 arg1 arg2\nlistener2 arg1 arg2\n```\n以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。\n运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。\nEventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下\nEventEmitter 的属性介绍。\n\n\n- 方法：\n - addListener(event, listener) ：  为指定事件添加一个监听器到监听器数组的尾部。\n - on(event, listener) ：为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。 \n - once(event, listener)：  为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。 \n - removeListener(event, listener)：  移除指定事件的某个监听器，监听器 必须是该事件已经注册过的监听器。  \n - setMaxListeners(n)：  默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 \n - listeners(event)：返回指定事件的监听器数组。\n - emit(event, [arg1], [arg2], [...])：按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。 \n- 类方法\n - \tlistenerCount(emitter, event)：返回指定事件的监听器数量。\n- 事件\n -\tnewListener\n   - event - 字符串，事件名称\n   - listener - 处理事件函数\n 该事件在添加新监听器时被触发。\n - removeListener\n   - event - 字符串，事件名称\n   - listener - 处理事件函数\n 从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。\n \n### 实例\n\n```js\nvar events = require('events');\nvar eventEmitter = new events.EventEmitter();\n// 监听器 #1\nvar listener1 = function listener1() {\n   console.log('监听器 listener1 执行。');\n}\n// 监听器 #2\nvar listener2 = function listener2() {\n  console.log('监听器 listener2 执行。');\n}\n// 绑定 post 事件，处理函数为 listener1 \neventEmitter.addListener('post', listener1);\n// 绑定 post 事件，处理函数为 listener2\neventEmitter.on('post', listener2);\nvar eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'post');\nconsole.log(eventListeners + \" 个监听器监听post事件。\");\n// 处理 post 事件 \neventEmitter.emit('post');\n// 移除监绑定的 listener1 函数\neventEmitter.removeListener('post', listener1);\nconsole.log(\"listener1 不再受监听。\");\n// 触发连接事件\neventEmitter.emit('post');\neventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'post');\nconsole.log(eventListeners + \" 个监听器监听post事件。\");\nconsole.log(\"程序执行完毕。\");\n```\n\n### error 事件\nEventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。\n当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。\n我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。例如：\n```js\nvar events = require('events'); \nvar emitter = new events.EventEmitter(); \nemitter.emit('error');\n```\n### 继承 EventEmitter\n大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。\n为什么要这样做呢？原因有两点：\n首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。\n其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。","source":"_posts/node5.md","raw":"---\ntitle: Node.js EventEmitter\ncategories: [node]\ntags: [node]\ndate: 2016-08-15 14:03:52\n---\nNode.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。\nNode.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文\n件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。\n<!-- more -->\n\n### EventEmitter 类\nevents 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。\n你可以通过require(\"events\");来访问该模块。\n```js\n// 引入 events 模块\nvar events = require('events');\n// 创建 eventEmitter 对象\nvar eventEmitter = new events.EventEmitter();\n```\nEventEmitter 对象如果在实例化时发生错误，会触发 'error' 事件。当添加新的监听器时，'newListener' 事件会触发，当监听器\n被移除时，'removeListener' 事件被触发。\n下面我们用一个简单的例子说明 EventEmitter 的用法：\n```js\n//event.js 文件\nvar EventEmitter = require('events').EventEmitter; \nvar event = new EventEmitter(); \nevent.on('some_event', function() { \n\tconsole.log('some_event work..'); \n}); \nsetTimeout(function() { \n\tevent.emit('some_event'); \n}, 1000); \n```\n执行结果如下：\n运行这段代码，1 秒后控制台输出了 'some_event 事件触发'。其原理是 event 对象注册了事件 some_event 的一个监听器，然后\n我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。\n```\nnode event.js\n// some_event work..\n```\nEventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，\nEventEmitter 支持 若干个事件监听器。\n当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。\n让我们以下面的例子解释这个过程：\n\n```js\nvar events = require('events');//events 有 ‘s’的\nvar emitter = new events.EventEmitter();\nemitter.on('someEvent',function(arg1,arg2) {\n    console.log('listener1',arg1,arg2);\n});\n\nemitter.on('someEvent',function(arg1,arg2) {\n    console.log('listener2',arg1,arg2);\n  \n});\nemitter.emit('someEvent','arg1','arg2');\n```\n执行以上代码，运行的结果如下：\n```\nlistener1 arg1 arg2\nlistener2 arg1 arg2\n```\n以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。\n运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。\nEventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下\nEventEmitter 的属性介绍。\n\n\n- 方法：\n - addListener(event, listener) ：  为指定事件添加一个监听器到监听器数组的尾部。\n - on(event, listener) ：为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。 \n - once(event, listener)：  为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。 \n - removeListener(event, listener)：  移除指定事件的某个监听器，监听器 必须是该事件已经注册过的监听器。  \n - setMaxListeners(n)：  默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 \n - listeners(event)：返回指定事件的监听器数组。\n - emit(event, [arg1], [arg2], [...])：按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。 \n- 类方法\n - \tlistenerCount(emitter, event)：返回指定事件的监听器数量。\n- 事件\n -\tnewListener\n   - event - 字符串，事件名称\n   - listener - 处理事件函数\n 该事件在添加新监听器时被触发。\n - removeListener\n   - event - 字符串，事件名称\n   - listener - 处理事件函数\n 从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。\n \n### 实例\n\n```js\nvar events = require('events');\nvar eventEmitter = new events.EventEmitter();\n// 监听器 #1\nvar listener1 = function listener1() {\n   console.log('监听器 listener1 执行。');\n}\n// 监听器 #2\nvar listener2 = function listener2() {\n  console.log('监听器 listener2 执行。');\n}\n// 绑定 post 事件，处理函数为 listener1 \neventEmitter.addListener('post', listener1);\n// 绑定 post 事件，处理函数为 listener2\neventEmitter.on('post', listener2);\nvar eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'post');\nconsole.log(eventListeners + \" 个监听器监听post事件。\");\n// 处理 post 事件 \neventEmitter.emit('post');\n// 移除监绑定的 listener1 函数\neventEmitter.removeListener('post', listener1);\nconsole.log(\"listener1 不再受监听。\");\n// 触发连接事件\neventEmitter.emit('post');\neventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'post');\nconsole.log(eventListeners + \" 个监听器监听post事件。\");\nconsole.log(\"程序执行完毕。\");\n```\n\n### error 事件\nEventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。\n当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。\n我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。例如：\n```js\nvar events = require('events'); \nvar emitter = new events.EventEmitter(); \nemitter.emit('error');\n```\n### 继承 EventEmitter\n大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。\n为什么要这样做呢？原因有两点：\n首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。\n其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。","slug":"node5","published":1,"updated":"2016-09-28T10:00:28.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynu007wesqrklj4mgv5","content":"<p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。<br>Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文<br>件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。<br><a id=\"more\"></a></p>\n<h3 id=\"EventEmitter-类\"><a href=\"#EventEmitter-类\" class=\"headerlink\" title=\"EventEmitter 类\"></a>EventEmitter 类</h3><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。<br>你可以通过require(“events”);来访问该模块。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入 events 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"comment\">// 创建 eventEmitter 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div></pre></td></tr></table></figure></p>\n<p>EventEmitter 对象如果在实例化时发生错误，会触发 ‘error’ 事件。当添加新的监听器时，’newListener’ 事件会触发，当监听器<br>被移除时，’removeListener’ 事件被触发。<br>下面我们用一个简单的例子说明 EventEmitter 的用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//event.js 文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter; </div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter(); </div><div class=\"line\">event.on(<span class=\"string\">'some_event'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'some_event work..'</span>); </div><div class=\"line\">&#125;); </div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\tevent.emit(<span class=\"string\">'some_event'</span>); </div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>执行结果如下：<br>运行这段代码，1 秒后控制台输出了 ‘some_event 事件触发’。其原理是 event 对象注册了事件 some_event 的一个监听器，然后<br>我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node event.js</div><div class=\"line\">// some_event work..</div></pre></td></tr></table></figure></p>\n<p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，<br>EventEmitter 支持 若干个事件监听器。<br>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br>让我们以下面的例子解释这个过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);<span class=\"comment\">//events 有 ‘s’的</span></div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1,arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener1'</span>,arg1,arg2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1,arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener2'</span>,arg1,arg2);</div><div class=\"line\">  </div><div class=\"line\">&#125;);</div><div class=\"line\">emitter.emit(<span class=\"string\">'someEvent'</span>,<span class=\"string\">'arg1'</span>,<span class=\"string\">'arg2'</span>);</div></pre></td></tr></table></figure>\n<p>执行以上代码，运行的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">listener1 arg1 arg2</div><div class=\"line\">listener2 arg1 arg2</div></pre></td></tr></table></figure></p>\n<p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。<br>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。<br>EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下<br>EventEmitter 的属性介绍。</p>\n<ul>\n<li>方法：<ul>\n<li>addListener(event, listener) ：  为指定事件添加一个监听器到监听器数组的尾部。</li>\n<li>on(event, listener) ：为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。 </li>\n<li>once(event, listener)：  为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。 </li>\n<li>removeListener(event, listener)：  移除指定事件的某个监听器，监听器 必须是该事件已经注册过的监听器。  </li>\n<li>setMaxListeners(n)：  默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 </li>\n<li>listeners(event)：返回指定事件的监听器数组。</li>\n<li>emit(event, [arg1], [arg2], […])：按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。 </li>\n</ul>\n</li>\n<li>类方法<ul>\n<li>listenerCount(emitter, event)：返回指定事件的监听器数量。</li>\n</ul>\n</li>\n<li>事件<ul>\n<li>newListener<ul>\n<li>event - 字符串，事件名称</li>\n<li>listener - 处理事件函数<br>该事件在添加新监听器时被触发。</li>\n</ul>\n</li>\n<li>removeListener<ul>\n<li>event - 字符串，事件名称</li>\n<li>listener - 处理事件函数<br>从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"><span class=\"comment\">// 监听器 #1</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener1 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener1 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 监听器 #2</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener2 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener2 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 绑定 post 事件，处理函数为 listener1 </span></div><div class=\"line\">eventEmitter.addListener(<span class=\"string\">'post'</span>, listener1);</div><div class=\"line\"><span class=\"comment\">// 绑定 post 事件，处理函数为 listener2</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'post'</span>, listener2);</div><div class=\"line\"><span class=\"keyword\">var</span> eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'post'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\" 个监听器监听post事件。\"</span>);</div><div class=\"line\"><span class=\"comment\">// 处理 post 事件 </span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'post'</span>);</div><div class=\"line\"><span class=\"comment\">// 移除监绑定的 listener1 函数</span></div><div class=\"line\">eventEmitter.removeListener(<span class=\"string\">'post'</span>, listener1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"listener1 不再受监听。\"</span>);</div><div class=\"line\"><span class=\"comment\">// 触发连接事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'post'</span>);</div><div class=\"line\">eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'post'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\" 个监听器监听post事件。\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"error-事件\"><a href=\"#error-事件\" class=\"headerlink\" title=\"error 事件\"></a>error 事件</h3><p>EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。<br>当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。<br>我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter(); </div><div class=\"line\">emitter.emit(<span class=\"string\">'error'</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"继承-EventEmitter\"><a href=\"#继承-EventEmitter\" class=\"headerlink\" title=\"继承 EventEmitter\"></a>继承 EventEmitter</h3><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。<br>为什么要这样做呢？原因有两点：<br>首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。<br>其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。</p>\n","excerpt":"<p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。<br>Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文<br>件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。<br></p>","more":"<p></p>\n<h3 id=\"EventEmitter-类\"><a href=\"#EventEmitter-类\" class=\"headerlink\" title=\"EventEmitter 类\"></a>EventEmitter 类</h3><p>events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。<br>你可以通过require(“events”);来访问该模块。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入 events 模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"comment\">// 创建 eventEmitter 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div></pre></td></tr></table></figure></p>\n<p>EventEmitter 对象如果在实例化时发生错误，会触发 ‘error’ 事件。当添加新的监听器时，’newListener’ 事件会触发，当监听器<br>被移除时，’removeListener’ 事件被触发。<br>下面我们用一个简单的例子说明 EventEmitter 的用法：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//event.js 文件</span></div><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter; </div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter(); </div><div class=\"line\">event.on(<span class=\"string\">'some_event'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'some_event work..'</span>); </div><div class=\"line\">&#125;); </div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\tevent.emit(<span class=\"string\">'some_event'</span>); </div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure></p>\n<p>执行结果如下：<br>运行这段代码，1 秒后控制台输出了 ‘some_event 事件触发’。其原理是 event 对象注册了事件 some_event 的一个监听器，然后<br>我们通过 setTimeout 在 1000 毫秒以后向 event 对象发送事件 some_event，此时会调用some_event 的监听器。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node event.js</div><div class=\"line\">// some_event work..</div></pre></td></tr></table></figure></p>\n<p>EventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，<br>EventEmitter 支持 若干个事件监听器。<br>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br>让我们以下面的例子解释这个过程：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);<span class=\"comment\">//events 有 ‘s’的</span></div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1,arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener1'</span>,arg1,arg2);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'someEvent'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1,arg2</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'listener2'</span>,arg1,arg2);</div><div class=\"line\">  </div><div class=\"line\">&#125;);</div><div class=\"line\">emitter.emit(<span class=\"string\">'someEvent'</span>,<span class=\"string\">'arg1'</span>,<span class=\"string\">'arg2'</span>);</div></pre></td></tr></table></figure>\n<p>执行以上代码，运行的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">listener1 arg1 arg2</div><div class=\"line\">listener2 arg1 arg2</div></pre></td></tr></table></figure></p>\n<p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。<br>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。<br>EventEmitter 提供了多个属性，如 on 和 emit。on 函数用于绑定事件函数，emit 属性用于触发一个事件。接下来我们来具体看下<br>EventEmitter 的属性介绍。</p>\n<ul>\n<li>方法：<ul>\n<li>addListener(event, listener) ：  为指定事件添加一个监听器到监听器数组的尾部。</li>\n<li>on(event, listener) ：为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。 </li>\n<li>once(event, listener)：  为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。 </li>\n<li>removeListener(event, listener)：  移除指定事件的某个监听器，监听器 必须是该事件已经注册过的监听器。  </li>\n<li>setMaxListeners(n)：  默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 </li>\n<li>listeners(event)：返回指定事件的监听器数组。</li>\n<li>emit(event, [arg1], [arg2], […])：按参数的顺序执行每个监听器，如果事件有注册监听返回 true，否则返回 false。 </li>\n</ul>\n</li>\n<li>类方法<ul>\n<li>listenerCount(emitter, event)：返回指定事件的监听器数量。</li>\n</ul>\n</li>\n<li>事件<ul>\n<li>newListener<ul>\n<li>event - 字符串，事件名称</li>\n<li>listener - 处理事件函数<br>该事件在添加新监听器时被触发。</li>\n</ul>\n</li>\n<li>removeListener<ul>\n<li>event - 字符串，事件名称</li>\n<li>listener - 处理事件函数<br>从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> eventEmitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\"><span class=\"comment\">// 监听器 #1</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener1 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener1 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 监听器 #2</span></div><div class=\"line\"><span class=\"keyword\">var</span> listener2 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listener2</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'监听器 listener2 执行。'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 绑定 post 事件，处理函数为 listener1 </span></div><div class=\"line\">eventEmitter.addListener(<span class=\"string\">'post'</span>, listener1);</div><div class=\"line\"><span class=\"comment\">// 绑定 post 事件，处理函数为 listener2</span></div><div class=\"line\">eventEmitter.on(<span class=\"string\">'post'</span>, listener2);</div><div class=\"line\"><span class=\"keyword\">var</span> eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'post'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\" 个监听器监听post事件。\"</span>);</div><div class=\"line\"><span class=\"comment\">// 处理 post 事件 </span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'post'</span>);</div><div class=\"line\"><span class=\"comment\">// 移除监绑定的 listener1 函数</span></div><div class=\"line\">eventEmitter.removeListener(<span class=\"string\">'post'</span>, listener1);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"listener1 不再受监听。\"</span>);</div><div class=\"line\"><span class=\"comment\">// 触发连接事件</span></div><div class=\"line\">eventEmitter.emit(<span class=\"string\">'post'</span>);</div><div class=\"line\">eventListeners = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter.listenerCount(eventEmitter,<span class=\"string\">'post'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(eventListeners + <span class=\"string\">\" 个监听器监听post事件。\"</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕。\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"error-事件\"><a href=\"#error-事件\" class=\"headerlink\" title=\"error 事件\"></a>error 事件</h3><p>EventEmitter 定义了一个特殊的事件 error，它包含了错误的语义，我们在遇到 异常的时候通常会触发 error 事件。<br>当 error 被触发时，EventEmitter 规定如果没有响 应的监听器，Node.js 会把它当作异常，退出程序并输出错误信息。<br>我们一般要为会触发 error 事件的对象设置监听器，避免遇到错误后整个程序崩溃。例如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter(); </div><div class=\"line\">emitter.emit(<span class=\"string\">'error'</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"继承-EventEmitter\"><a href=\"#继承-EventEmitter\" class=\"headerlink\" title=\"继承 EventEmitter\"></a>继承 EventEmitter</h3><p>大多数时候我们不会直接使用 EventEmitter，而是在对象中继承它。包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的子类。<br>为什么要这样做呢？原因有两点：<br>首先，具有某个实体功能的对象实现事件符合语义， 事件的监听和发射应该是一个对象的方法。<br>其次 JavaScript 的对象机制是基于原型的，支持 部分多重继承，继承 EventEmitter 不会打乱对象原有的继承关系。</p>"},{"title":"Node.js Stream(流)","date":"2016-08-16T07:27:14.000Z","_content":"Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个Stream，\n还有stdout（标准输出）。\n<!-- more -->\n\n### Node.js，Stream 有四种流类型：\n- Readable - 可读操作。\n- Writable - 可写操作。\n- Duplex - 可读可写操作.\n- Transform - 操作被写入数据，然后读出结果。\n***所有的 Stream 对象都是 EventEmitter 的实例*** .常用的事件有：\n- data - 当有数据可读时触发。\n- end - 没有更多的数据可读时触发。\n- error - 在接收和写入过程中发生错误时触发。\n- finish - 所有数据已被写入到底层系统时触发。\n\n### 从流中读取数据\n创建 input.txt 文件，内容如下：\n```\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其\n轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n```\n创建 stream1.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\nvar data = '';\n\n// 创建可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 设置编码为 utf8。\nreaderStream.setEncoding('UTF8');\n\n// 处理流事件 --> data, end, and error\nreaderStream.on('data', function(chunk) {\n   data += chunk;\n});\n\nreaderStream.on('end',function(){\n   console.log(data);\n});\n\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"end\");\n```\n\n以上代码执行结果如下：\n```\nend\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其\n轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n```\n### 写入流\n创建 stream2.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\nvar data = 'hello out';\n\n// 创建一个可以写入的流，写入到文件 output.txt 中\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 使用 utf8 编码写入数据\nwriterStream.write(data,'UTF8');\n\n// 标记文件末尾\nwriterStream.end();\n\n// 处理流事件 --> data, end, and error\nwriterStream.on('finish', function() {\n    console.log(\"写入完成。\");\n});\n\nwriterStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"end\");\n```\n\n以上程序会将 data 变量的数据写入到 output.txt 文件中。代码执行结果如下：\n```\nnode stream2.js\nend\n写入完成。\n```\n查看 output.txt 文件的内容：\n```\ncat output.txt \nhello out\n```\n\n### 管道流\n管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。\n\n我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢\n的实现了大文件的复制过程。以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。\n设置 input.txt 文件内容如下：\n```\nwhat is 管道流\n```\n#### 管道流操作实例\n创建 stream3.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\n\n// 创建一个可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 创建一个可写流\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 管道读写操作\n// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中\nreaderStream.pipe(writerStream);\n\nconsole.log(\"程序执行完毕\");\n```\n代码执行结果如下：\n```\n程序执行完毕\n```\n查看 output.txt 文件的内容：\n```\nwhat is 管道流\n```\n管道流操作实例\n### 链式流\n链式是通过连接输出流到另外一个流并创建多个对个流操作链的机制。链式流一般用于管道操作。\n接下来我们就是用管道和链式来压缩和解压文件。\n创建 compress.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 压缩 input.txt 文件为 input.txt.gz\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'));\n  \nconsole.log(\"文件压缩完成。\");\n```\n代码执行结果如下：\n```\n文件压缩完成。\n```\n\n执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。\n接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：\n```js\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 解压 input.txt.gz 文件为 input.txt\nfs.createReadStream('input.txt.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(fs.createWriteStream('input.txt'));\n  \nconsole.log(\"文件解压完成。\");\n```\n代码执行结果如下：\n```\n文件解压完成。\n```","source":"_posts/node7.md","raw":"---\ntitle: Node.js Stream(流)\ncategories: [node]\ntags: [node]\ndate: 2016-08-16 15:27:14\n---\nStream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个Stream，\n还有stdout（标准输出）。\n<!-- more -->\n\n### Node.js，Stream 有四种流类型：\n- Readable - 可读操作。\n- Writable - 可写操作。\n- Duplex - 可读可写操作.\n- Transform - 操作被写入数据，然后读出结果。\n***所有的 Stream 对象都是 EventEmitter 的实例*** .常用的事件有：\n- data - 当有数据可读时触发。\n- end - 没有更多的数据可读时触发。\n- error - 在接收和写入过程中发生错误时触发。\n- finish - 所有数据已被写入到底层系统时触发。\n\n### 从流中读取数据\n创建 input.txt 文件，内容如下：\n```\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其\n轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n```\n创建 stream1.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\nvar data = '';\n\n// 创建可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 设置编码为 utf8。\nreaderStream.setEncoding('UTF8');\n\n// 处理流事件 --> data, end, and error\nreaderStream.on('data', function(chunk) {\n   data += chunk;\n});\n\nreaderStream.on('end',function(){\n   console.log(data);\n});\n\nreaderStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"end\");\n```\n\n以上代码执行结果如下：\n```\nend\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其\n轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。\n```\n### 写入流\n创建 stream2.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\nvar data = 'hello out';\n\n// 创建一个可以写入的流，写入到文件 output.txt 中\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 使用 utf8 编码写入数据\nwriterStream.write(data,'UTF8');\n\n// 标记文件末尾\nwriterStream.end();\n\n// 处理流事件 --> data, end, and error\nwriterStream.on('finish', function() {\n    console.log(\"写入完成。\");\n});\n\nwriterStream.on('error', function(err){\n   console.log(err.stack);\n});\n\nconsole.log(\"end\");\n```\n\n以上程序会将 data 变量的数据写入到 output.txt 文件中。代码执行结果如下：\n```\nnode stream2.js\nend\n写入完成。\n```\n查看 output.txt 文件的内容：\n```\ncat output.txt \nhello out\n```\n\n### 管道流\n管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。\n\n我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢\n的实现了大文件的复制过程。以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。\n设置 input.txt 文件内容如下：\n```\nwhat is 管道流\n```\n#### 管道流操作实例\n创建 stream3.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\n\n// 创建一个可读流\nvar readerStream = fs.createReadStream('input.txt');\n\n// 创建一个可写流\nvar writerStream = fs.createWriteStream('output.txt');\n\n// 管道读写操作\n// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中\nreaderStream.pipe(writerStream);\n\nconsole.log(\"程序执行完毕\");\n```\n代码执行结果如下：\n```\n程序执行完毕\n```\n查看 output.txt 文件的内容：\n```\nwhat is 管道流\n```\n管道流操作实例\n### 链式流\n链式是通过连接输出流到另外一个流并创建多个对个流操作链的机制。链式流一般用于管道操作。\n接下来我们就是用管道和链式来压缩和解压文件。\n创建 compress.js 文件, 代码如下：\n```js\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 压缩 input.txt 文件为 input.txt.gz\nfs.createReadStream('input.txt')\n  .pipe(zlib.createGzip())\n  .pipe(fs.createWriteStream('input.txt.gz'));\n  \nconsole.log(\"文件压缩完成。\");\n```\n代码执行结果如下：\n```\n文件压缩完成。\n```\n\n执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。\n接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：\n```js\nvar fs = require(\"fs\");\nvar zlib = require('zlib');\n\n// 解压 input.txt.gz 文件为 input.txt\nfs.createReadStream('input.txt.gz')\n  .pipe(zlib.createGunzip())\n  .pipe(fs.createWriteStream('input.txt'));\n  \nconsole.log(\"文件解压完成。\");\n```\n代码执行结果如下：\n```\n文件解压完成。\n```","slug":"node7","published":1,"updated":"2016-09-29T08:03:10.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ynx0080esqrrxzw3xxj","content":"<p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个Stream，<br>还有stdout（标准输出）。<br><a id=\"more\"></a></p>\n<h3 id=\"Node-js，Stream-有四种流类型：\"><a href=\"#Node-js，Stream-有四种流类型：\" class=\"headerlink\" title=\"Node.js，Stream 有四种流类型：\"></a>Node.js，Stream 有四种流类型：</h3><ul>\n<li>Readable - 可读操作。</li>\n<li>Writable - 可写操作。</li>\n<li>Duplex - 可读可写操作.</li>\n<li>Transform - 操作被写入数据，然后读出结果。<br><strong><em>所有的 Stream 对象都是 EventEmitter 的实例</em></strong> .常用的事件有：</li>\n<li>data - 当有数据可读时触发。</li>\n<li>end - 没有更多的数据可读时触发。</li>\n<li>error - 在接收和写入过程中发生错误时触发。</li>\n<li>finish - 所有数据已被写入到底层系统时触发。</li>\n</ul>\n<h3 id=\"从流中读取数据\"><a href=\"#从流中读取数据\" class=\"headerlink\" title=\"从流中读取数据\"></a>从流中读取数据</h3><p>创建 input.txt 文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其</div><div class=\"line\">轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</div></pre></td></tr></table></figure></p>\n<p>创建 stream1.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置编码为 utf8。</span></div><div class=\"line\">readerStream.setEncoding(<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理流事件 --&gt; data, end, and error</span></div><div class=\"line\">readerStream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">   data += chunk;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">readerStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">readerStream.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">end</div><div class=\"line\">Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其</div><div class=\"line\">轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</div></pre></td></tr></table></figure></p>\n<h3 id=\"写入流\"><a href=\"#写入流\" class=\"headerlink\" title=\"写入流\"></a>写入流</h3><p>创建 stream2.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">'hello out'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个可以写入的流，写入到文件 output.txt 中</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 utf8 编码写入数据</span></div><div class=\"line\">writerStream.write(data,<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 标记文件末尾</span></div><div class=\"line\">writerStream.end();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理流事件 --&gt; data, end, and error</span></div><div class=\"line\">writerStream.on(<span class=\"string\">'finish'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入完成。\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">writerStream.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上程序会将 data 变量的数据写入到 output.txt 文件中。代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node stream2.js</div><div class=\"line\">end</div><div class=\"line\">写入完成。</div></pre></td></tr></table></figure></p>\n<p>查看 output.txt 文件的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat output.txt </div><div class=\"line\">hello out</div></pre></td></tr></table></figure></p>\n<h3 id=\"管道流\"><a href=\"#管道流\" class=\"headerlink\" title=\"管道流\"></a>管道流</h3><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p>\n<p>我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢<br>的实现了大文件的复制过程。以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。<br>设置 input.txt 文件内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">what is 管道流</div></pre></td></tr></table></figure></p>\n<h4 id=\"管道流操作实例\"><a href=\"#管道流操作实例\" class=\"headerlink\" title=\"管道流操作实例\"></a>管道流操作实例</h4><p>创建 stream3.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个可写流</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 管道读写操作</span></div><div class=\"line\"><span class=\"comment\">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span></div><div class=\"line\">readerStream.pipe(writerStream);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序执行完毕</div></pre></td></tr></table></figure></p>\n<p>查看 output.txt 文件的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">what is 管道流</div></pre></td></tr></table></figure></p>\n<p>管道流操作实例</p>\n<h3 id=\"链式流\"><a href=\"#链式流\" class=\"headerlink\" title=\"链式流\"></a>链式流</h3><p>链式是通过连接输出流到另外一个流并创建多个对个流操作链的机制。链式流一般用于管道操作。<br>接下来我们就是用管道和链式来压缩和解压文件。<br>创建 compress.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 input.txt 文件为 input.txt.gz</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt'</span>)</div><div class=\"line\">  .pipe(zlib.createGzip())</div><div class=\"line\">  .pipe(fs.createWriteStream(<span class=\"string\">'input.txt.gz'</span>));</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件压缩完成。\"</span>);</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">文件压缩完成。</div></pre></td></tr></table></figure></p>\n<p>执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。<br>接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 解压 input.txt.gz 文件为 input.txt</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt.gz'</span>)</div><div class=\"line\">  .pipe(zlib.createGunzip())</div><div class=\"line\">  .pipe(fs.createWriteStream(<span class=\"string\">'input.txt'</span>));</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件解压完成。\"</span>);</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">文件解压完成。</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个Stream，<br>还有stdout（标准输出）。<br></p>","more":"<p></p>\n<h3 id=\"Node-js，Stream-有四种流类型：\"><a href=\"#Node-js，Stream-有四种流类型：\" class=\"headerlink\" title=\"Node.js，Stream 有四种流类型：\"></a>Node.js，Stream 有四种流类型：</h3><ul>\n<li>Readable - 可读操作。</li>\n<li>Writable - 可写操作。</li>\n<li>Duplex - 可读可写操作.</li>\n<li>Transform - 操作被写入数据，然后读出结果。<br><strong><em>所有的 Stream 对象都是 EventEmitter 的实例</em></strong> .常用的事件有：</li>\n<li>data - 当有数据可读时触发。</li>\n<li>end - 没有更多的数据可读时触发。</li>\n<li>error - 在接收和写入过程中发生错误时触发。</li>\n<li>finish - 所有数据已被写入到底层系统时触发。</li>\n</ul>\n<h3 id=\"从流中读取数据\"><a href=\"#从流中读取数据\" class=\"headerlink\" title=\"从流中读取数据\"></a>从流中读取数据</h3><p>创建 input.txt 文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其</div><div class=\"line\">轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</div></pre></td></tr></table></figure></p>\n<p>创建 stream1.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 设置编码为 utf8。</span></div><div class=\"line\">readerStream.setEncoding(<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理流事件 --&gt; data, end, and error</span></div><div class=\"line\">readerStream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">   data += chunk;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">readerStream.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">readerStream.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">end</div><div class=\"line\">Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其</div><div class=\"line\">轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</div></pre></td></tr></table></figure></p>\n<h3 id=\"写入流\"><a href=\"#写入流\" class=\"headerlink\" title=\"写入流\"></a>写入流</h3><p>创建 stream2.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = <span class=\"string\">'hello out'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个可以写入的流，写入到文件 output.txt 中</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用 utf8 编码写入数据</span></div><div class=\"line\">writerStream.write(data,<span class=\"string\">'UTF8'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 标记文件末尾</span></div><div class=\"line\">writerStream.end();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 处理流事件 --&gt; data, end, and error</span></div><div class=\"line\">writerStream.on(<span class=\"string\">'finish'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"写入完成。\"</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">writerStream.on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(err.stack);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"end\"</span>);</div></pre></td></tr></table></figure></p>\n<p>以上程序会将 data 变量的数据写入到 output.txt 文件中。代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">node stream2.js</div><div class=\"line\">end</div><div class=\"line\">写入完成。</div></pre></td></tr></table></figure></p>\n<p>查看 output.txt 文件的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat output.txt </div><div class=\"line\">hello out</div></pre></td></tr></table></figure></p>\n<h3 id=\"管道流\"><a href=\"#管道流\" class=\"headerlink\" title=\"管道流\"></a>管道流</h3><p>管道提供了一个输出流到输入流的机制。通常我们用于从一个流中获取数据并将数据传递到另外一个流中。</p>\n<p>我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢<br>的实现了大文件的复制过程。以下实例我们通过读取一个文件内容并将内容写入到另外一个文件中。<br>设置 input.txt 文件内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">what is 管道流</div></pre></td></tr></table></figure></p>\n<h4 id=\"管道流操作实例\"><a href=\"#管道流操作实例\" class=\"headerlink\" title=\"管道流操作实例\"></a>管道流操作实例</h4><p>创建 stream3.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个可读流</span></div><div class=\"line\"><span class=\"keyword\">var</span> readerStream = fs.createReadStream(<span class=\"string\">'input.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建一个可写流</span></div><div class=\"line\"><span class=\"keyword\">var</span> writerStream = fs.createWriteStream(<span class=\"string\">'output.txt'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 管道读写操作</span></div><div class=\"line\"><span class=\"comment\">// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中</span></div><div class=\"line\">readerStream.pipe(writerStream);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"程序执行完毕\"</span>);</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">程序执行完毕</div></pre></td></tr></table></figure></p>\n<p>查看 output.txt 文件的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">what is 管道流</div></pre></td></tr></table></figure></p>\n<p>管道流操作实例</p>\n<h3 id=\"链式流\"><a href=\"#链式流\" class=\"headerlink\" title=\"链式流\"></a>链式流</h3><p>链式是通过连接输出流到另外一个流并创建多个对个流操作链的机制。链式流一般用于管道操作。<br>接下来我们就是用管道和链式来压缩和解压文件。<br>创建 compress.js 文件, 代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 压缩 input.txt 文件为 input.txt.gz</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt'</span>)</div><div class=\"line\">  .pipe(zlib.createGzip())</div><div class=\"line\">  .pipe(fs.createWriteStream(<span class=\"string\">'input.txt.gz'</span>));</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件压缩完成。\"</span>);</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">文件压缩完成。</div></pre></td></tr></table></figure></p>\n<p>执行完以上操作后，我们可以看到当前目录下生成了 input.txt 的压缩文件 input.txt.gz。<br>接下来，让我们来解压该文件，创建 decompress.js 文件，代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> zlib = <span class=\"built_in\">require</span>(<span class=\"string\">'zlib'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 解压 input.txt.gz 文件为 input.txt</span></div><div class=\"line\">fs.createReadStream(<span class=\"string\">'input.txt.gz'</span>)</div><div class=\"line\">  .pipe(zlib.createGunzip())</div><div class=\"line\">  .pipe(fs.createWriteStream(<span class=\"string\">'input.txt'</span>));</div><div class=\"line\">  </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件解压完成。\"</span>);</div></pre></td></tr></table></figure></p>\n<p>代码执行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">文件解压完成。</div></pre></td></tr></table></figure></p>"},{"title":"Node.js模块系统","date":"2016-08-16T09:23:32.000Z","_content":"为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。\n模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能\n是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。\n<!-- more -->\n### 创建模块\n在 Node.js 中，创建一个模块非常简单，如下我们创建一个 'module1.js' 文件，代码如下:\n```js\nvar hello = require('./hello')\nhello.world();\n```\n以上实例中，代码 require('./hello') 引入了当前目录下的hello.js文件（./ 为当前目录，node.js默认后缀为js）。\nNode.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所\n获取模块的 exports 对象。接下来我们就来创建hello.js文件，代码如下：\n```js\nexports.world = function() {\n  console.log('Hello World');\n}\n```\n在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require('./hello') 加载这个模\n块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。\n有时候我们只是想把一个对象封装到模块中，格式如下：\n**module.exports = function(){}**\n```js\n//hello.js \nfunction Hello() { \n\tvar name; \n\tthis.setName = function(thyName) { \n\t\tname = thyName; \n\t}; \n\tthis.sayHello = function() { \n\t\tconsole.log('Hello ' + name); \n\t}; \n}; \nmodule.exports = Hello;\n```\n这样就可以直接获得这个对象了：\n```js\n//module1.js \nvar Hello = require('./hello'); \nhello = new Hello(); \nhello.setName('BYVoid'); \nhello.sayHello(); \n```\n模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象\n就是要输出的 Hello 对象本身，而不是原先的 exports.\n\n### 服务端的模块放在哪里\nNode.js中自带了一个叫做\"http\"的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。\n这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。\nNode.js 的 require方法中的文件查找策略如下：\n由于Node.js中存在4类模块（原生模块和3种文件模块），尽管require方法极其简单，但是内部的加载却是十分复杂的，其加载优先\n级也各自不同。如下图所示：\n![](node8.jpg)\n\n#### 从文件模块缓存中加载\n尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。\n#### 从原生模块加载\n原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模\n块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(\"http\")都不会从这些文件中加载，而是从原生\n模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行\n加载和执行。\n#### 从文件加载\n当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，\n加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。\nrequire方法接受以下几种参数的传递：\n- http、fs、path等，原生模块。\n- ./mod或../mod，相对路径的文件模块。\n- /pathtomodule/mod，绝对路径的文件模块。\n- mod，非原生模块的文件模块。","source":"_posts/node8.md","raw":"---\ntitle: Node.js模块系统\ncategories: [node]\ntags: [node]\ndate: 2016-08-16 17:23:32\n---\n为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。\n模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能\n是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。\n<!-- more -->\n### 创建模块\n在 Node.js 中，创建一个模块非常简单，如下我们创建一个 'module1.js' 文件，代码如下:\n```js\nvar hello = require('./hello')\nhello.world();\n```\n以上实例中，代码 require('./hello') 引入了当前目录下的hello.js文件（./ 为当前目录，node.js默认后缀为js）。\nNode.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所\n获取模块的 exports 对象。接下来我们就来创建hello.js文件，代码如下：\n```js\nexports.world = function() {\n  console.log('Hello World');\n}\n```\n在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require('./hello') 加载这个模\n块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。\n有时候我们只是想把一个对象封装到模块中，格式如下：\n**module.exports = function(){}**\n```js\n//hello.js \nfunction Hello() { \n\tvar name; \n\tthis.setName = function(thyName) { \n\t\tname = thyName; \n\t}; \n\tthis.sayHello = function() { \n\t\tconsole.log('Hello ' + name); \n\t}; \n}; \nmodule.exports = Hello;\n```\n这样就可以直接获得这个对象了：\n```js\n//module1.js \nvar Hello = require('./hello'); \nhello = new Hello(); \nhello.setName('BYVoid'); \nhello.sayHello(); \n```\n模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象\n就是要输出的 Hello 对象本身，而不是原先的 exports.\n\n### 服务端的模块放在哪里\nNode.js中自带了一个叫做\"http\"的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。\n这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。\nNode.js 的 require方法中的文件查找策略如下：\n由于Node.js中存在4类模块（原生模块和3种文件模块），尽管require方法极其简单，但是内部的加载却是十分复杂的，其加载优先\n级也各自不同。如下图所示：\n![](node8.jpg)\n\n#### 从文件模块缓存中加载\n尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。\n#### 从原生模块加载\n原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模\n块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(\"http\")都不会从这些文件中加载，而是从原生\n模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行\n加载和执行。\n#### 从文件加载\n当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，\n加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。\nrequire方法接受以下几种参数的传递：\n- http、fs、path等，原生模块。\n- ./mod或../mod，相对路径的文件模块。\n- /pathtomodule/mod，绝对路径的文件模块。\n- mod，非原生模块的文件模块。","slug":"node8","published":1,"updated":"2016-09-30T02:51:07.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yny0082esqriw18ju1i","content":"<p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。<br>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能<br>是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。<br><a id=\"more\"></a></p>\n<h3 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，如下我们创建一个 ‘module1.js’ 文件，代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>)</div><div class=\"line\">hello.world();</div></pre></td></tr></table></figure></p>\n<p>以上实例中，代码 require(‘./hello’) 引入了当前目录下的hello.js文件（./ 为当前目录，node.js默认后缀为js）。<br>Node.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所<br>获取模块的 exports 对象。接下来我们就来创建hello.js文件，代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.world = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require(‘./hello’) 加载这个模<br>块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。<br>有时候我们只是想把一个对象封装到模块中，格式如下：<br><strong>module.exports = function(){}</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//hello.js </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\t<span class=\"keyword\">var</span> name; </div><div class=\"line\">\t<span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>) </span>&#123; </div><div class=\"line\">\t\tname = thyName; </div><div class=\"line\">\t&#125;; </div><div class=\"line\">\t<span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name); </div><div class=\"line\">\t&#125;; </div><div class=\"line\">&#125;; </div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Hello;</div></pre></td></tr></table></figure></p>\n<p>这样就可以直接获得这个对象了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//module1.js </span></div><div class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>); </div><div class=\"line\">hello = <span class=\"keyword\">new</span> Hello(); </div><div class=\"line\">hello.setName(<span class=\"string\">'BYVoid'</span>); </div><div class=\"line\">hello.sayHello();</div></pre></td></tr></table></figure></p>\n<p>模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象<br>就是要输出的 Hello 对象本身，而不是原先的 exports.</p>\n<h3 id=\"服务端的模块放在哪里\"><a href=\"#服务端的模块放在哪里\" class=\"headerlink\" title=\"服务端的模块放在哪里\"></a>服务端的模块放在哪里</h3><p>Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。<br>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。<br>Node.js 的 require方法中的文件查找策略如下：<br>由于Node.js中存在4类模块（原生模块和3种文件模块），尽管require方法极其简单，但是内部的加载却是十分复杂的，其加载优先<br>级也各自不同。如下图所示：<br><img src=\"/2016/08/16/node8/node8.jpg\" alt=\"\"></p>\n<h4 id=\"从文件模块缓存中加载\"><a href=\"#从文件模块缓存中加载\" class=\"headerlink\" title=\"从文件模块缓存中加载\"></a>从文件模块缓存中加载</h4><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>\n<h4 id=\"从原生模块加载\"><a href=\"#从原生模块加载\" class=\"headerlink\" title=\"从原生模块加载\"></a>从原生模块加载</h4><p>原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模<br>块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(“http”)都不会从这些文件中加载，而是从原生<br>模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行<br>加载和执行。</p>\n<h4 id=\"从文件加载\"><a href=\"#从文件加载\" class=\"headerlink\" title=\"从文件加载\"></a>从文件加载</h4><p>当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，<br>加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br>require方法接受以下几种参数的传递：</p>\n<ul>\n<li>http、fs、path等，原生模块。</li>\n<li>./mod或../mod，相对路径的文件模块。</li>\n<li>/pathtomodule/mod，绝对路径的文件模块。</li>\n<li>mod，非原生模块的文件模块。</li>\n</ul>\n","excerpt":"<p>为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。<br>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能<br>是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。<br></p>","more":"<p></p>\n<h3 id=\"创建模块\"><a href=\"#创建模块\" class=\"headerlink\" title=\"创建模块\"></a>创建模块</h3><p>在 Node.js 中，创建一个模块非常简单，如下我们创建一个 ‘module1.js’ 文件，代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>)</div><div class=\"line\">hello.world();</div></pre></td></tr></table></figure></p>\n<p>以上实例中，代码 require(‘./hello’) 引入了当前目录下的hello.js文件（./ 为当前目录，node.js默认后缀为js）。<br>Node.js 提供了exports 和 require 两个对象，其中 exports 是模块公开的接口，require 用于从外部获取一个模块的接口，即所<br>获取模块的 exports 对象。接下来我们就来创建hello.js文件，代码如下：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.world = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在以上示例中，hello.js 通过 exports 对象把 world 作为模块的访问接口，在 main.js 中通过 require(‘./hello’) 加载这个模<br>块，然后就可以直接访 问 hello.js 中 exports 对象的成员函数了。<br>有时候我们只是想把一个对象封装到模块中，格式如下：<br><strong>module.exports = function(){}</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//hello.js </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Hello</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\t<span class=\"keyword\">var</span> name; </div><div class=\"line\">\t<span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thyName</span>) </span>&#123; </div><div class=\"line\">\t\tname = thyName; </div><div class=\"line\">\t&#125;; </div><div class=\"line\">\t<span class=\"keyword\">this</span>.sayHello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello '</span> + name); </div><div class=\"line\">\t&#125;; </div><div class=\"line\">&#125;; </div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Hello;</div></pre></td></tr></table></figure></p>\n<p>这样就可以直接获得这个对象了：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//module1.js </span></div><div class=\"line\"><span class=\"keyword\">var</span> Hello = <span class=\"built_in\">require</span>(<span class=\"string\">'./hello'</span>); </div><div class=\"line\">hello = <span class=\"keyword\">new</span> Hello(); </div><div class=\"line\">hello.setName(<span class=\"string\">'BYVoid'</span>); </div><div class=\"line\">hello.sayHello();</div></pre></td></tr></table></figure></p>\n<p>模块接口的唯一变化是使用 module.exports = Hello 代替了exports.world = function(){}。 在外部引用该模块时，其接口对象<br>就是要输出的 Hello 对象本身，而不是原先的 exports.</p>\n<h3 id=\"服务端的模块放在哪里\"><a href=\"#服务端的模块放在哪里\" class=\"headerlink\" title=\"服务端的模块放在哪里\"></a>服务端的模块放在哪里</h3><p>Node.js中自带了一个叫做”http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。<br>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。<br>Node.js 的 require方法中的文件查找策略如下：<br>由于Node.js中存在4类模块（原生模块和3种文件模块），尽管require方法极其简单，但是内部的加载却是十分复杂的，其加载优先<br>级也各自不同。如下图所示：<br><img src=\"/2016/08/16/node8/node8.jpg\" alt=\"\"></p>\n<h4 id=\"从文件模块缓存中加载\"><a href=\"#从文件模块缓存中加载\" class=\"headerlink\" title=\"从文件模块缓存中加载\"></a>从文件模块缓存中加载</h4><p>尽管原生模块与文件模块的优先级不同，但是都不会优先于从文件模块的缓存中加载已经存在的模块。</p>\n<h4 id=\"从原生模块加载\"><a href=\"#从原生模块加载\" class=\"headerlink\" title=\"从原生模块加载\"></a>从原生模块加载</h4><p>原生模块的优先级仅次于文件模块缓存的优先级。require方法在解析文件名之后，优先检查模块是否在原生模块列表中。以http模<br>块为例，尽管在目录下存在一个http/http.js/http.node/http.json文件，require(“http”)都不会从这些文件中加载，而是从原生<br>模块中加载。原生模块也有一个缓存区，同样也是优先从缓存区加载。如果缓存区没有被加载过，则调用原生模块的加载方式进行<br>加载和执行。</p>\n<h4 id=\"从文件加载\"><a href=\"#从文件加载\" class=\"headerlink\" title=\"从文件加载\"></a>从文件加载</h4><p>当文件模块缓存中不存在，而且不是原生模块的时候，Node.js会解析require方法传入的参数，并从文件系统中加载实际的文件，<br>加载过程中的包装和编译细节在前一节中已经介绍过，这里我们将详细描述查找文件模块的过程，其中，也有一些细节值得知晓。<br>require方法接受以下几种参数的传递：</p>\n<ul>\n<li>http、fs、path等，原生模块。</li>\n<li>./mod或../mod，相对路径的文件模块。</li>\n<li>/pathtomodule/mod，绝对路径的文件模块。</li>\n<li>mod，非原生模块的文件模块。</li>\n</ul>"},{"title":"Node.js 路由","date":"2016-08-17T02:59:38.000Z","_content":"我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码。\n<!-- more -->\n因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块\n自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。我们需要的所有数据都会包含在request对象中，该对象\n作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是url和\nquerystring模块。\n\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction start() {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n```\n好了，我们的应用现在可以通过请求的URL路径来区别不同请求了--这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。\n在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。\n现在我们可以来编写路由了，建立一个名为 router.js 的文件，添加以下内容：\n```js\nfunction route(pathname) {\n  console.log(\"About to route a request for \" + pathname);\n}\nexports.route = route;\n```\n如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。\n我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的\n编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块。\n首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去，server.js 文件代码如下\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction start(route) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(pathname);\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n```\n同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：\n```js\nvar server = require(\"./server\");\nvar router = require(\"./router\");\nserver.start(router.route);\n```\n在这里，我们传递的函数依旧什么也没做。\n如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我\n们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：\n```\nnode index.js\nServer has started\n```\n","source":"_posts/node9.md","raw":"---\ntitle: Node.js 路由\ncategories: [node]\ntags: [node]\ndate: 2016-08-17 10:59:38\n---\n我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码。\n<!-- more -->\n因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块\n自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。我们需要的所有数据都会包含在request对象中，该对象\n作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是url和\nquerystring模块。\n\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction start() {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n```\n好了，我们的应用现在可以通过请求的URL路径来区别不同请求了--这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。\n在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。\n现在我们可以来编写路由了，建立一个名为 router.js 的文件，添加以下内容：\n```js\nfunction route(pathname) {\n  console.log(\"About to route a request for \" + pathname);\n}\nexports.route = route;\n```\n如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。\n我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的\n编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块。\n首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去，server.js 文件代码如下\n```js\nvar http = require(\"http\");\nvar url = require(\"url\");\nfunction start(route) {\n  function onRequest(request, response) {\n    var pathname = url.parse(request.url).pathname;\n    console.log(\"Request for \" + pathname + \" received.\");\n\n    route(pathname);\n\n    response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n    response.write(\"Hello World\");\n    response.end();\n  }\n\n  http.createServer(onRequest).listen(8888);\n  console.log(\"Server has started.\");\n}\n\nexports.start = start;\n```\n同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：\n```js\nvar server = require(\"./server\");\nvar router = require(\"./router\");\nserver.start(router.route);\n```\n在这里，我们传递的函数依旧什么也没做。\n如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我\n们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：\n```\nnode index.js\nServer has started\n```\n","slug":"node9","published":1,"updated":"2016-09-30T04:16:39.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yo10085esqryaih8t1a","content":"<p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码。<br><a id=\"more\"></a><br>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块<br>自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。我们需要的所有数据都会包含在request对象中，该对象<br>作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是url和<br>querystring模块。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>好了，我们的应用现在可以通过请求的URL路径来区别不同请求了–这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。<br>在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。<br>现在我们可以来编写路由了，建立一个名为 router.js 的文件，添加以下内容：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure></p>\n<p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。<br>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的<br>编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块。<br>首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去，server.js 文件代码如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(pathname);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p>同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\">server.start(router.route);</div></pre></td></tr></table></figure></p>\n<p>在这里，我们传递的函数依旧什么也没做。<br>如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我<br>们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js</div><div class=\"line\">Server has started</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码。<br></p>","more":"<br>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块<br>自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。我们需要的所有数据都会包含在request对象中，该对象<br>作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是url和<br>querystring模块。<p></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure>\n<p>好了，我们的应用现在可以通过请求的URL路径来区别不同请求了–这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。<br>在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。<br>现在我们可以来编写路由了，建立一个名为 router.js 的文件，添加以下内容：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">route</span>(<span class=\"params\">pathname</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"About to route a request for \"</span> + pathname);</div><div class=\"line\">&#125;</div><div class=\"line\">exports.route = route;</div></pre></td></tr></table></figure></p>\n<p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。<br>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的<br>编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块。<br>首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去，server.js 文件代码如下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">\"url\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\">route</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onRequest</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(request.url).pathname;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Request for \"</span> + pathname + <span class=\"string\">\" received.\"</span>);</div><div class=\"line\"></div><div class=\"line\">    route(pathname);</div><div class=\"line\"></div><div class=\"line\">    response.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/plain\"</span>&#125;);</div><div class=\"line\">    response.write(<span class=\"string\">\"Hello World\"</span>);</div><div class=\"line\">    response.end();</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  http.createServer(onRequest).listen(<span class=\"number\">8888</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server has started.\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">exports.start = start;</div></pre></td></tr></table></figure></p>\n<p>同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">\"./server\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">\"./router\"</span>);</div><div class=\"line\">server.start(router.route);</div></pre></td></tr></table></figure></p>\n<p>在这里，我们传递的函数依旧什么也没做。<br>如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我<br>们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">node index.js</div><div class=\"line\">Server has started</div></pre></td></tr></table></figure></p>"},{"title":"开发中遇到的异常","date":"2016-12-16T03:04:21.000Z","description":"开发中遇到的异常","_content":"\n1.异常中出现Mapped Statements collection does not contain value for\nmybatis mapper.xml 和 实体Mapper (即Dao) 不对应 ，检查namespace是否对应\n\n2.svnserve.conf:12: Option expected的问题解决方法\nsubversion读取配置文件svnserve.conf时，无法识别有前置空格的配置文件\n\n3.Error assembling WAR:webxml attribute is required\n原因：maven的web项目默认的webroot是在src\\main\\webapp。如果在此目录下找不到web.xml就抛出以上的异常。\n","source":"_posts/questions.md","raw":"---\ntitle: 开发中遇到的异常\ncategories: [异常]\ntags: [异常]\ndate: 2016-12-16 11:04:21\ndescription: 开发中遇到的异常\n---\n\n1.异常中出现Mapped Statements collection does not contain value for\nmybatis mapper.xml 和 实体Mapper (即Dao) 不对应 ，检查namespace是否对应\n\n2.svnserve.conf:12: Option expected的问题解决方法\nsubversion读取配置文件svnserve.conf时，无法识别有前置空格的配置文件\n\n3.Error assembling WAR:webxml attribute is required\n原因：maven的web项目默认的webroot是在src\\main\\webapp。如果在此目录下找不到web.xml就抛出以上的异常。\n","slug":"questions","published":1,"updated":"2017-01-03T03:38:22.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yo30088esqr5zjpuytk","content":"<p>1.异常中出现Mapped Statements collection does not contain value for<br>mybatis mapper.xml 和 实体Mapper (即Dao) 不对应 ，检查namespace是否对应</p>\n<p>2.svnserve.conf:12: Option expected的问题解决方法<br>subversion读取配置文件svnserve.conf时，无法识别有前置空格的配置文件</p>\n<p>3.Error assembling WAR:webxml attribute is required<br>原因：maven的web项目默认的webroot是在src\\main\\webapp。如果在此目录下找不到web.xml就抛出以上的异常。</p>\n","excerpt":"","more":"<p>1.异常中出现Mapped Statements collection does not contain value for<br>mybatis mapper.xml 和 实体Mapper (即Dao) 不对应 ，检查namespace是否对应</p>\n<p>2.svnserve.conf:12: Option expected的问题解决方法<br>subversion读取配置文件svnserve.conf时，无法识别有前置空格的配置文件</p>\n<p>3.Error assembling WAR:webxml attribute is required<br>原因：maven的web项目默认的webroot是在src\\main\\webapp。如果在此目录下找不到web.xml就抛出以上的异常。</p>\n"},{"title":"使用maxwell","date":"2020-07-27T03:02:09.000Z","description":null,"_content":"\n\n### Download\n***\n- Download binary distro: [https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz](https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz)\n- Sources and bug tracking is available on github: [https://github.com/zendesk/maxwell](https://github.com/zendesk/maxwell)\n- Obligatory copy/paste to terminal:\n\n```\ncurl -sLo - https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz \\\n       | tar zxvf -\ncd maxwell-1.26.3\n```\n\nor get the docker image:\n\n```\ndocker pull zendesk/maxwell\n```\n\nor on Mac OS X with homebrew installed:\n\n```\nbrew install maxwell\n```\n\n### Configure Mysql\n***\n\n*Server Config:* Ensure your server_id is configured, and that row-based replication is turned on.\n\n```\n$ vi my.cnf\n\n[mysqld]\nserver_id=1\nlog-bin=master\nbinlog_format=row\n```\n\n\nOr on a running server:\n\n```\nmysql> set global binlog_format=ROW;\nmysql> set global binlog_row_image=FULL;\n```\n\nnote: `binlog_format` is a session-based property.  You will need to shutdown all active connections to fully convert\nto row-based replication.\n\n*Permissions:* Maxwell needs permissions to store state in the database specified by the `schema_database` option (default `maxwell`).\n```\nmysql> CREATE USER 'maxwell'@'%' IDENTIFIED BY 'XXXXXX';\nmysql> GRANT ALL ON maxwell.* TO 'maxwell'@'%';\nmysql> GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO 'maxwell'@'%';\n\n# or for running maxwell locally:\n\nmysql> CREATE USER 'maxwell'@'localhost' IDENTIFIED BY 'XXXXXX';\nmysql> GRANT ALL ON maxwell.* TO 'maxwell'@'localhost';\nmysql> GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO 'maxwell'@'localhost';\n```\n\n### Run Maxwell\n***\n\n#### Command line\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' --producer=stdout\n```\n\n#### Docker\n```\ndocker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\\n    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=stdout\n```\n\n#### Kafka\n\nBoot kafka as described here:  [http://kafka.apache.org/documentation.html#quickstart](http://kafka.apache.org/documentation.html#quickstart), then:\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n   --producer=kafka --kafka.bootstrap.servers=localhost:9092 --kafka_topic=maxwell\n```\n\n(or docker):\n\n```\ndocker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\\n    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kafka \\\n    --kafka.bootstrap.servers=$KAFKA_HOST:$KAFKA_PORT --kafka_topic=maxwell\n```\n\n#### Kinesis\n\n```\ndocker run -it --rm --name maxwell -v `cd && pwd`/.aws:/root/.aws zendesk/maxwell sh -c 'cp /app/kinesis-producer-library.properties.example /app/kinesis-producer-library.properties && echo \"Region=$AWS_DEFAULT_REGION\" >> /app/kinesis-producer-library.properties && bin/maxwell --user=$MYSQL_USERNAME --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kinesis --kinesis_stream=$KINESIS_STREAM'\n```\n\n#### Google Cloud Pub/Sub\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n  --producer=pubsub --pubsub_project_id='$PUBSUB_PROJECT_ID' \\\n  --pubsub_topic='maxwell'\n```\n\n#### RabbitMQ\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n    --producer=rabbitmq --rabbitmq_host='rabbitmq.hostname'\n```\n\n#### Redis\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n    --producer=redis --redis_host=redis.hostname\n```\n","source":"_posts/quickstart.md","raw":"\n---\ntitle: 使用maxwell\ncategories: [maxwell]\ntags: [maxwell,mysql]\ndate: 2020-07-27 11:02:09\ndescription:\n---\n\n\n### Download\n***\n- Download binary distro: [https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz](https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz)\n- Sources and bug tracking is available on github: [https://github.com/zendesk/maxwell](https://github.com/zendesk/maxwell)\n- Obligatory copy/paste to terminal:\n\n```\ncurl -sLo - https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz \\\n       | tar zxvf -\ncd maxwell-1.26.3\n```\n\nor get the docker image:\n\n```\ndocker pull zendesk/maxwell\n```\n\nor on Mac OS X with homebrew installed:\n\n```\nbrew install maxwell\n```\n\n### Configure Mysql\n***\n\n*Server Config:* Ensure your server_id is configured, and that row-based replication is turned on.\n\n```\n$ vi my.cnf\n\n[mysqld]\nserver_id=1\nlog-bin=master\nbinlog_format=row\n```\n\n\nOr on a running server:\n\n```\nmysql> set global binlog_format=ROW;\nmysql> set global binlog_row_image=FULL;\n```\n\nnote: `binlog_format` is a session-based property.  You will need to shutdown all active connections to fully convert\nto row-based replication.\n\n*Permissions:* Maxwell needs permissions to store state in the database specified by the `schema_database` option (default `maxwell`).\n```\nmysql> CREATE USER 'maxwell'@'%' IDENTIFIED BY 'XXXXXX';\nmysql> GRANT ALL ON maxwell.* TO 'maxwell'@'%';\nmysql> GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO 'maxwell'@'%';\n\n# or for running maxwell locally:\n\nmysql> CREATE USER 'maxwell'@'localhost' IDENTIFIED BY 'XXXXXX';\nmysql> GRANT ALL ON maxwell.* TO 'maxwell'@'localhost';\nmysql> GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO 'maxwell'@'localhost';\n```\n\n### Run Maxwell\n***\n\n#### Command line\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' --producer=stdout\n```\n\n#### Docker\n```\ndocker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\\n    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=stdout\n```\n\n#### Kafka\n\nBoot kafka as described here:  [http://kafka.apache.org/documentation.html#quickstart](http://kafka.apache.org/documentation.html#quickstart), then:\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n   --producer=kafka --kafka.bootstrap.servers=localhost:9092 --kafka_topic=maxwell\n```\n\n(or docker):\n\n```\ndocker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\\n    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kafka \\\n    --kafka.bootstrap.servers=$KAFKA_HOST:$KAFKA_PORT --kafka_topic=maxwell\n```\n\n#### Kinesis\n\n```\ndocker run -it --rm --name maxwell -v `cd && pwd`/.aws:/root/.aws zendesk/maxwell sh -c 'cp /app/kinesis-producer-library.properties.example /app/kinesis-producer-library.properties && echo \"Region=$AWS_DEFAULT_REGION\" >> /app/kinesis-producer-library.properties && bin/maxwell --user=$MYSQL_USERNAME --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kinesis --kinesis_stream=$KINESIS_STREAM'\n```\n\n#### Google Cloud Pub/Sub\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n  --producer=pubsub --pubsub_project_id='$PUBSUB_PROJECT_ID' \\\n  --pubsub_topic='maxwell'\n```\n\n#### RabbitMQ\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n    --producer=rabbitmq --rabbitmq_host='rabbitmq.hostname'\n```\n\n#### Redis\n\n```\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n    --producer=redis --redis_host=redis.hostname\n```\n","slug":"quickstart","published":1,"updated":"2020-08-04T05:00:30.629Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yo5008besqrec7yykpi","content":"<h3 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download\"></a>Download</h3><hr>\n<ul>\n<li>Download binary distro: <a href=\"https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz\" target=\"_blank\" rel=\"external\">https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz</a></li>\n<li>Sources and bug tracking is available on github: <a href=\"https://github.com/zendesk/maxwell\" target=\"_blank\" rel=\"external\">https://github.com/zendesk/maxwell</a></li>\n<li>Obligatory copy/paste to terminal:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -sLo - https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz \\</div><div class=\"line\">       | tar zxvf -</div><div class=\"line\">cd maxwell-1.26.3</div></pre></td></tr></table></figure>\n<p>or get the docker image:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull zendesk/maxwell</div></pre></td></tr></table></figure>\n<p>or on Mac OS X with homebrew installed:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install maxwell</div></pre></td></tr></table></figure>\n<h3 id=\"Configure-Mysql\"><a href=\"#Configure-Mysql\" class=\"headerlink\" title=\"Configure Mysql\"></a>Configure Mysql</h3><hr>\n<p><em>Server Config:</em> Ensure your server_id is configured, and that row-based replication is turned on.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vi my.cnf</div><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\">server_id=1</div><div class=\"line\">log-bin=master</div><div class=\"line\">binlog_format=row</div></pre></td></tr></table></figure>\n<p>Or on a running server:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; set global binlog_format=ROW;</div><div class=\"line\">mysql&gt; set global binlog_row_image=FULL;</div></pre></td></tr></table></figure>\n<p>note: <code>binlog_format</code> is a session-based property.  You will need to shutdown all active connections to fully convert<br>to row-based replication.</p>\n<p><em>Permissions:</em> Maxwell needs permissions to store state in the database specified by the <code>schema_database</code> option (default <code>maxwell</code>).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; CREATE USER &apos;maxwell&apos;@&apos;%&apos; IDENTIFIED BY &apos;XXXXXX&apos;;</div><div class=\"line\">mysql&gt; GRANT ALL ON maxwell.* TO &apos;maxwell&apos;@&apos;%&apos;;</div><div class=\"line\">mysql&gt; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &apos;maxwell&apos;@&apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\"># or for running maxwell locally:</div><div class=\"line\"></div><div class=\"line\">mysql&gt; CREATE USER &apos;maxwell&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;XXXXXX&apos;;</div><div class=\"line\">mysql&gt; GRANT ALL ON maxwell.* TO &apos;maxwell&apos;@&apos;localhost&apos;;</div><div class=\"line\">mysql&gt; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &apos;maxwell&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Run-Maxwell\"><a href=\"#Run-Maxwell\" class=\"headerlink\" title=\"Run Maxwell\"></a>Run Maxwell</h3><hr>\n<h4 id=\"Command-line\"><a href=\"#Command-line\" class=\"headerlink\" title=\"Command line\"></a>Command line</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; --producer=stdout</div></pre></td></tr></table></figure>\n<h4 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\</div><div class=\"line\">    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=stdout</div></pre></td></tr></table></figure>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><p>Boot kafka as described here:  <a href=\"http://kafka.apache.org/documentation.html#quickstart\" target=\"_blank\" rel=\"external\">http://kafka.apache.org/documentation.html#quickstart</a>, then:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">   --producer=kafka --kafka.bootstrap.servers=localhost:9092 --kafka_topic=maxwell</div></pre></td></tr></table></figure>\n<p>(or docker):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\</div><div class=\"line\">    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kafka \\</div><div class=\"line\">    --kafka.bootstrap.servers=$KAFKA_HOST:$KAFKA_PORT --kafka_topic=maxwell</div></pre></td></tr></table></figure>\n<h4 id=\"Kinesis\"><a href=\"#Kinesis\" class=\"headerlink\" title=\"Kinesis\"></a>Kinesis</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it --rm --name maxwell -v `cd &amp;&amp; pwd`/.aws:/root/.aws zendesk/maxwell sh -c &apos;cp /app/kinesis-producer-library.properties.example /app/kinesis-producer-library.properties &amp;&amp; echo &quot;Region=$AWS_DEFAULT_REGION&quot; &gt;&gt; /app/kinesis-producer-library.properties &amp;&amp; bin/maxwell --user=$MYSQL_USERNAME --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kinesis --kinesis_stream=$KINESIS_STREAM&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"Google-Cloud-Pub-Sub\"><a href=\"#Google-Cloud-Pub-Sub\" class=\"headerlink\" title=\"Google Cloud Pub/Sub\"></a>Google Cloud Pub/Sub</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">  --producer=pubsub --pubsub_project_id=&apos;$PUBSUB_PROJECT_ID&apos; \\</div><div class=\"line\">  --pubsub_topic=&apos;maxwell&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">    --producer=rabbitmq --rabbitmq_host=&apos;rabbitmq.hostname&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">    --producer=redis --redis_host=redis.hostname</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download\"></a>Download</h3><hr>\n<ul>\n<li>Download binary distro: <a href=\"https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz\">https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz</a></li>\n<li>Sources and bug tracking is available on github: <a href=\"https://github.com/zendesk/maxwell\">https://github.com/zendesk/maxwell</a></li>\n<li>Obligatory copy/paste to terminal:</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl -sLo - https://github.com/zendesk/maxwell/releases/download/v1.26.3/maxwell-1.26.3.tar.gz \\</div><div class=\"line\">       | tar zxvf -</div><div class=\"line\">cd maxwell-1.26.3</div></pre></td></tr></table></figure>\n<p>or get the docker image:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker pull zendesk/maxwell</div></pre></td></tr></table></figure>\n<p>or on Mac OS X with homebrew installed:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew install maxwell</div></pre></td></tr></table></figure>\n<h3 id=\"Configure-Mysql\"><a href=\"#Configure-Mysql\" class=\"headerlink\" title=\"Configure Mysql\"></a>Configure Mysql</h3><hr>\n<p><em>Server Config:</em> Ensure your server_id is configured, and that row-based replication is turned on.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vi my.cnf</div><div class=\"line\"></div><div class=\"line\">[mysqld]</div><div class=\"line\">server_id=1</div><div class=\"line\">log-bin=master</div><div class=\"line\">binlog_format=row</div></pre></td></tr></table></figure>\n<p>Or on a running server:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; set global binlog_format=ROW;</div><div class=\"line\">mysql&gt; set global binlog_row_image=FULL;</div></pre></td></tr></table></figure>\n<p>note: <code>binlog_format</code> is a session-based property.  You will need to shutdown all active connections to fully convert<br>to row-based replication.</p>\n<p><em>Permissions:</em> Maxwell needs permissions to store state in the database specified by the <code>schema_database</code> option (default <code>maxwell</code>).<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; CREATE USER &apos;maxwell&apos;@&apos;%&apos; IDENTIFIED BY &apos;XXXXXX&apos;;</div><div class=\"line\">mysql&gt; GRANT ALL ON maxwell.* TO &apos;maxwell&apos;@&apos;%&apos;;</div><div class=\"line\">mysql&gt; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &apos;maxwell&apos;@&apos;%&apos;;</div><div class=\"line\"></div><div class=\"line\"># or for running maxwell locally:</div><div class=\"line\"></div><div class=\"line\">mysql&gt; CREATE USER &apos;maxwell&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;XXXXXX&apos;;</div><div class=\"line\">mysql&gt; GRANT ALL ON maxwell.* TO &apos;maxwell&apos;@&apos;localhost&apos;;</div><div class=\"line\">mysql&gt; GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE ON *.* TO &apos;maxwell&apos;@&apos;localhost&apos;;</div></pre></td></tr></table></figure></p>\n<h3 id=\"Run-Maxwell\"><a href=\"#Run-Maxwell\" class=\"headerlink\" title=\"Run Maxwell\"></a>Run Maxwell</h3><hr>\n<h4 id=\"Command-line\"><a href=\"#Command-line\" class=\"headerlink\" title=\"Command line\"></a>Command line</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; --producer=stdout</div></pre></td></tr></table></figure>\n<h4 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\</div><div class=\"line\">    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=stdout</div></pre></td></tr></table></figure>\n<h4 id=\"Kafka\"><a href=\"#Kafka\" class=\"headerlink\" title=\"Kafka\"></a>Kafka</h4><p>Boot kafka as described here:  <a href=\"http://kafka.apache.org/documentation.html#quickstart\">http://kafka.apache.org/documentation.html#quickstart</a>, then:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">   --producer=kafka --kafka.bootstrap.servers=localhost:9092 --kafka_topic=maxwell</div></pre></td></tr></table></figure>\n<p>(or docker):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it --rm zendesk/maxwell bin/maxwell --user=$MYSQL_USERNAME \\</div><div class=\"line\">    --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kafka \\</div><div class=\"line\">    --kafka.bootstrap.servers=$KAFKA_HOST:$KAFKA_PORT --kafka_topic=maxwell</div></pre></td></tr></table></figure>\n<h4 id=\"Kinesis\"><a href=\"#Kinesis\" class=\"headerlink\" title=\"Kinesis\"></a>Kinesis</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">docker run -it --rm --name maxwell -v `cd &amp;&amp; pwd`/.aws:/root/.aws zendesk/maxwell sh -c &apos;cp /app/kinesis-producer-library.properties.example /app/kinesis-producer-library.properties &amp;&amp; echo &quot;Region=$AWS_DEFAULT_REGION&quot; &gt;&gt; /app/kinesis-producer-library.properties &amp;&amp; bin/maxwell --user=$MYSQL_USERNAME --password=$MYSQL_PASSWORD --host=$MYSQL_HOST --producer=kinesis --kinesis_stream=$KINESIS_STREAM&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"Google-Cloud-Pub-Sub\"><a href=\"#Google-Cloud-Pub-Sub\" class=\"headerlink\" title=\"Google Cloud Pub/Sub\"></a>Google Cloud Pub/Sub</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">  --producer=pubsub --pubsub_project_id=&apos;$PUBSUB_PROJECT_ID&apos; \\</div><div class=\"line\">  --pubsub_topic=&apos;maxwell&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">    --producer=rabbitmq --rabbitmq_host=&apos;rabbitmq.hostname&apos;</div></pre></td></tr></table></figure>\n<h4 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/maxwell --user=&apos;maxwell&apos; --password=&apos;XXXXXX&apos; --host=&apos;127.0.0.1&apos; \\</div><div class=\"line\">    --producer=redis --redis_host=redis.hostname</div></pre></td></tr></table></figure>\n"},{"title":"神舟飞船系列","date":"2016-10-17T02:06:45.000Z","description":"神舟飞船系列","_content":"\n神舟十一号载人飞船于今早7：30发射，于是整理了下神舟系列飞船的信息，如下：\n\n|飞船名称 |发射时间|航天员|\n|:----:|:--:|:--|\n|神舟一号 |1999-11-20 06:00|无|\n|神舟二号 |2001-01-10 01:00|无|\n|神舟三号 |2002-03-25 22:15|无|\n|神舟四号 |2002-12-30 00:40|无|\n|神舟五号 |2003-10-15 09:00|杨利伟|\n|神舟六号 |2005-10-12 09:00|费俊龙，聂海胜|\n|神舟七号 |2008-09-25 21:10|翟志刚，刘伯明，景海鹏|\n|神舟八号 |2011-11-01 05:58|无|\n|神舟九号 |2012-06-16 18:37|景海鹏，刘旺，刘洋|\n|神舟十号 |2013-06-11 17:38|聂海胜，张晓光，刘亚平|\n|神舟十一号 |2016-10-17 07:30|景海鹏，陈冬|","source":"_posts/shenzhou.md","raw":"---\ntitle: 神舟飞船系列\ncategories: [神舟飞船]\ntags: [神舟飞船]\ndate: 2016-10-17 10:06:45\ndescription: 神舟飞船系列\n---\n\n神舟十一号载人飞船于今早7：30发射，于是整理了下神舟系列飞船的信息，如下：\n\n|飞船名称 |发射时间|航天员|\n|:----:|:--:|:--|\n|神舟一号 |1999-11-20 06:00|无|\n|神舟二号 |2001-01-10 01:00|无|\n|神舟三号 |2002-03-25 22:15|无|\n|神舟四号 |2002-12-30 00:40|无|\n|神舟五号 |2003-10-15 09:00|杨利伟|\n|神舟六号 |2005-10-12 09:00|费俊龙，聂海胜|\n|神舟七号 |2008-09-25 21:10|翟志刚，刘伯明，景海鹏|\n|神舟八号 |2011-11-01 05:58|无|\n|神舟九号 |2012-06-16 18:37|景海鹏，刘旺，刘洋|\n|神舟十号 |2013-06-11 17:38|聂海胜，张晓光，刘亚平|\n|神舟十一号 |2016-10-17 07:30|景海鹏，陈冬|","slug":"shenzhou","published":1,"updated":"2016-10-17T02:23:43.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yo7008eesqrmvsaerov","content":"<p>神舟十一号载人飞船于今早7：30发射，于是整理了下神舟系列飞船的信息，如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">飞船名称</th>\n<th style=\"text-align:center\">发射时间</th>\n<th style=\"text-align:left\">航天员</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">神舟一号</td>\n<td style=\"text-align:center\">1999-11-20 06:00</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟二号</td>\n<td style=\"text-align:center\">2001-01-10 01:00</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟三号</td>\n<td style=\"text-align:center\">2002-03-25 22:15</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟四号</td>\n<td style=\"text-align:center\">2002-12-30 00:40</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟五号</td>\n<td style=\"text-align:center\">2003-10-15 09:00</td>\n<td style=\"text-align:left\">杨利伟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟六号</td>\n<td style=\"text-align:center\">2005-10-12 09:00</td>\n<td style=\"text-align:left\">费俊龙，聂海胜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟七号</td>\n<td style=\"text-align:center\">2008-09-25 21:10</td>\n<td style=\"text-align:left\">翟志刚，刘伯明，景海鹏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟八号</td>\n<td style=\"text-align:center\">2011-11-01 05:58</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟九号</td>\n<td style=\"text-align:center\">2012-06-16 18:37</td>\n<td style=\"text-align:left\">景海鹏，刘旺，刘洋</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟十号</td>\n<td style=\"text-align:center\">2013-06-11 17:38</td>\n<td style=\"text-align:left\">聂海胜，张晓光，刘亚平</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟十一号</td>\n<td style=\"text-align:center\">2016-10-17 07:30</td>\n<td style=\"text-align:left\">景海鹏，陈冬</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>神舟十一号载人飞船于今早7：30发射，于是整理了下神舟系列飞船的信息，如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">飞船名称</th>\n<th style=\"text-align:center\">发射时间</th>\n<th style=\"text-align:left\">航天员</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">神舟一号</td>\n<td style=\"text-align:center\">1999-11-20 06:00</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟二号</td>\n<td style=\"text-align:center\">2001-01-10 01:00</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟三号</td>\n<td style=\"text-align:center\">2002-03-25 22:15</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟四号</td>\n<td style=\"text-align:center\">2002-12-30 00:40</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟五号</td>\n<td style=\"text-align:center\">2003-10-15 09:00</td>\n<td style=\"text-align:left\">杨利伟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟六号</td>\n<td style=\"text-align:center\">2005-10-12 09:00</td>\n<td style=\"text-align:left\">费俊龙，聂海胜</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟七号</td>\n<td style=\"text-align:center\">2008-09-25 21:10</td>\n<td style=\"text-align:left\">翟志刚，刘伯明，景海鹏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟八号</td>\n<td style=\"text-align:center\">2011-11-01 05:58</td>\n<td style=\"text-align:left\">无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟九号</td>\n<td style=\"text-align:center\">2012-06-16 18:37</td>\n<td style=\"text-align:left\">景海鹏，刘旺，刘洋</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟十号</td>\n<td style=\"text-align:center\">2013-06-11 17:38</td>\n<td style=\"text-align:left\">聂海胜，张晓光，刘亚平</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">神舟十一号</td>\n<td style=\"text-align:center\">2016-10-17 07:30</td>\n<td style=\"text-align:left\">景海鹏，陈冬</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"一行配置文件引发的“血案”","date":"2016-11-02T09:14:32.000Z","description":"servlet3.0 的metadata-complete 属性","_content":"\n有点空闲看了看servlet3.0规范，就想着要不来个“hello world”玩玩。\n马上开干，首先maven生成工程的文件结构。然后找个3.0的web.xml，记得tomcat7下有这样的文件，于是找到tomcat7下的manager复制\n了一下，去掉中间部分结果如下：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\"\n         metadata-complete=\"true\">\n    <display-name>idea4j</display-name>\n    <description></description>\n</web-app>\n```\nnew 一个servlet，代码自动加入了doGet，doPost方法，并且智能的加上了@WebServlet注解(窃喜中，可以不要在web.xml添加\nservlet的配置了)，再添加代码如下:\n```java\n@WebServlet(\"/hello\")\npublic class Servlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setAttribute(\"now\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n        request.getRequestDispatcher(\"/WEB-INF/jsp/hello.jsp\").forward(request,response);\n    }\n}\n```\nnew hello.jsp\n```html\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n<h1>hello</h1>\n<h2>当前时间：${now}</h2>\n</body>\n</html>\n```  \n部署启动tomcat，浏览器输入localhost:8080/hello/ ,nonono！不是我希望的页面啊，什么情况？竟然是404？\n不是应用名的问题，也不是编译目录的问题，不是maven的tomcat插件问题...\n额，我想静静！\n。。。。。。。。\n还是给我找到了web.xml，有这么一个属性metadata-complete=\"true\"，貌似没怎么见过啊，我去掉它试试呢？\n终于出现了我要的hello页面。\n\n于是，查到了如下解释：\nmetadata-complete 属性，该属性指定当前的部署描述文件是否是完全的。如果设置为 true，则容器在部署时将只依赖部署描述文件，\n*忽略所有的注解*（同时也会跳过 web-fragment.xml 的扫描）；如果不配置该属性，或者将其设置为 false，则表示启用注解支持。\n\n忽略所有注解，忽略所有... \n\nok，that's all\n","source":"_posts/servlet3.md","raw":"---\ntitle: 一行配置文件引发的“血案”\ncategories: [java]\ntags: [java,servlet]\ndate: 2016-11-02 17:14:32\ndescription: servlet3.0 的metadata-complete 属性\n---\n\n有点空闲看了看servlet3.0规范，就想着要不来个“hello world”玩玩。\n马上开干，首先maven生成工程的文件结构。然后找个3.0的web.xml，记得tomcat7下有这样的文件，于是找到tomcat7下的manager复制\n了一下，去掉中间部分结果如下：\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n         version=\"3.0\"\n         metadata-complete=\"true\">\n    <display-name>idea4j</display-name>\n    <description></description>\n</web-app>\n```\nnew 一个servlet，代码自动加入了doGet，doPost方法，并且智能的加上了@WebServlet注解(窃喜中，可以不要在web.xml添加\nservlet的配置了)，再添加代码如下:\n```java\n@WebServlet(\"/hello\")\npublic class Servlet extends HttpServlet {\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n    }\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        request.setAttribute(\"now\", new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n        request.getRequestDispatcher(\"/WEB-INF/jsp/hello.jsp\").forward(request,response);\n    }\n}\n```\nnew hello.jsp\n```html\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<html>\n<head>\n    <title>Title</title>\n</head>\n<body>\n<h1>hello</h1>\n<h2>当前时间：${now}</h2>\n</body>\n</html>\n```  \n部署启动tomcat，浏览器输入localhost:8080/hello/ ,nonono！不是我希望的页面啊，什么情况？竟然是404？\n不是应用名的问题，也不是编译目录的问题，不是maven的tomcat插件问题...\n额，我想静静！\n。。。。。。。。\n还是给我找到了web.xml，有这么一个属性metadata-complete=\"true\"，貌似没怎么见过啊，我去掉它试试呢？\n终于出现了我要的hello页面。\n\n于是，查到了如下解释：\nmetadata-complete 属性，该属性指定当前的部署描述文件是否是完全的。如果设置为 true，则容器在部署时将只依赖部署描述文件，\n*忽略所有的注解*（同时也会跳过 web-fragment.xml 的扫描）；如果不配置该属性，或者将其设置为 false，则表示启用注解支持。\n\n忽略所有注解，忽略所有... \n\nok，that's all\n","slug":"servlet3","published":1,"updated":"2016-11-02T10:00:14.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yoa008hesqr02we3x44","content":"<p>有点空闲看了看servlet3.0规范，就想着要不来个“hello world”玩玩。<br>马上开干，首先maven生成工程的文件结构。然后找个3.0的web.xml，记得tomcat7下有这样的文件，于是找到tomcat7下的manager复制<br>了一下，去掉中间部分结果如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee</span></div><div class=\"line\">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span></div><div class=\"line\">         <span class=\"attr\">metadata-complete</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>idea4j<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>new 一个servlet，代码自动加入了doGet，doPost方法，并且智能的加上了@WebServlet注解(窃喜中，可以不要在web.xml添加<br>servlet的配置了)，再添加代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/hello\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\">        request.setAttribute(<span class=\"string\">\"now\"</span>, <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));</div><div class=\"line\">        request.getRequestDispatcher(<span class=\"string\">\"/WEB-INF/jsp/hello.jsp\"</span>).forward(request,response);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>new hello.jsp</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>当前时间：${now}<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>部署启动tomcat，浏览器输入localhost:8080/hello/ ,nonono！不是我希望的页面啊，什么情况？竟然是404？<br>不是应用名的问题，也不是编译目录的问题，不是maven的tomcat插件问题…<br>额，我想静静！<br>。。。。。。。。<br>还是给我找到了web.xml，有这么一个属性metadata-complete=”true”，貌似没怎么见过啊，我去掉它试试呢？<br>终于出现了我要的hello页面。</p>\n<p>于是，查到了如下解释：<br>metadata-complete 属性，该属性指定当前的部署描述文件是否是完全的。如果设置为 true，则容器在部署时将只依赖部署描述文件，<br><em>忽略所有的注解</em>（同时也会跳过 web-fragment.xml 的扫描）；如果不配置该属性，或者将其设置为 false，则表示启用注解支持。</p>\n<p>忽略所有注解，忽略所有… </p>\n<p>ok，that’s all</p>\n","excerpt":"","more":"<p>有点空闲看了看servlet3.0规范，就想着要不来个“hello world”玩玩。<br>马上开干，首先maven生成工程的文件结构。然后找个3.0的web.xml，记得tomcat7下有这样的文件，于是找到tomcat7下的manager复制<br>了一下，去掉中间部分结果如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></span></div><div class=\"line\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></div><div class=\"line\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee</span></div><div class=\"line\">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</div><div class=\"line\">         <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span></div><div class=\"line\">         <span class=\"attr\">metadata-complete</span>=<span class=\"string\">\"true\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>idea4j<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>new 一个servlet，代码自动加入了doGet，doPost方法，并且智能的加上了@WebServlet注解(窃喜中，可以不要在web.xml添加<br>servlet的配置了)，再添加代码如下:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/hello\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</div><div class=\"line\">        request.setAttribute(<span class=\"string\">\"now\"</span>, <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date()));</div><div class=\"line\">        request.getRequestDispatcher(<span class=\"string\">\"/WEB-INF/jsp/hello.jsp\"</span>).forward(request,response);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>new hello.jsp</p>\n<pre><code class=\"html\"><span class=\"tag\">&lt;<span class=\"name\">%@</span> <span class=\"attr\">page</span> <span class=\"attr\">contentType</span>=<span class=\"string\">\"text/html;charset=UTF-8\"</span> <span class=\"attr\">language</span>=<span class=\"string\">\"java\"</span> %&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Title<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>当前时间：${now}<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>部署启动tomcat，浏览器输入localhost:8080/hello/ ,nonono！不是我希望的页面啊，什么情况？竟然是404？<br>不是应用名的问题，也不是编译目录的问题，不是maven的tomcat插件问题…<br>额，我想静静！<br>。。。。。。。。<br>还是给我找到了web.xml，有这么一个属性metadata-complete=”true”，貌似没怎么见过啊，我去掉它试试呢？<br>终于出现了我要的hello页面。</p>\n<p>于是，查到了如下解释：<br>metadata-complete 属性，该属性指定当前的部署描述文件是否是完全的。如果设置为 true，则容器在部署时将只依赖部署描述文件，<br><em>忽略所有的注解</em>（同时也会跳过 web-fragment.xml 的扫描）；如果不配置该属性，或者将其设置为 false，则表示启用注解支持。</p>\n<p>忽略所有注解，忽略所有… </p>\n<p>ok，that’s all</p>\n"},{"title":"房地产资本主义时代","date":"2016-09-29T08:27:22.000Z","_content":"\n以前地主霸占着地，现在房东霸占着房\n旧社会我们当佃户，新社会我们做房奴","source":"_posts/society.md","raw":"---\ntitle: 房地产资本主义时代\ncategories: [社会]\ntags: [社会]\ndate: 2016-09-29 16:27:22\n---\n\n以前地主霸占着地，现在房东霸占着房\n旧社会我们当佃户，新社会我们做房奴","slug":"society","published":1,"updated":"2016-09-29T08:35:40.693Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yoc008kesqr80xr4an1","content":"<p>以前地主霸占着地，现在房东霸占着房<br>旧社会我们当佃户，新社会我们做房奴</p>\n","excerpt":"","more":"<p>以前地主霸占着地，现在房东霸占着房<br>旧社会我们当佃户，新社会我们做房奴</p>\n"},{"title":"springbatch","date":"2016-12-27T06:29:23.000Z","description":"springbatch","_content":"\nspring batch是用来处理大量数据操作的一个框架，主要用来读取大量数据，然后进行一定处理后的指定形式。\n\n主要有以下7个部分组成\n\n|名称|用途|\n|:-|:-|\n|JobReository|用来注册Job的容器|\n|JobLauncher|用来启动Job的接口|\n|Job|我们要实际执行的任务，包含一个或多个Step|\n|Step|Step-步骤包含ItemReader,ItemProcessor和ItemWriter|\n|ItemReader|用来读取数据的接口|\n|ItemProcessor|用来处理数据的接口|\n|ItemWriter|用来输出数据的接口|\n","source":"_posts/springbatch.md","raw":"---\ntitle: springbatch\ncategories: [spring]\ntags: [spring batch]\ndate: 2016-12-27 14:29:23\ndescription: springbatch\n---\n\nspring batch是用来处理大量数据操作的一个框架，主要用来读取大量数据，然后进行一定处理后的指定形式。\n\n主要有以下7个部分组成\n\n|名称|用途|\n|:-|:-|\n|JobReository|用来注册Job的容器|\n|JobLauncher|用来启动Job的接口|\n|Job|我们要实际执行的任务，包含一个或多个Step|\n|Step|Step-步骤包含ItemReader,ItemProcessor和ItemWriter|\n|ItemReader|用来读取数据的接口|\n|ItemProcessor|用来处理数据的接口|\n|ItemWriter|用来输出数据的接口|\n","slug":"springbatch","published":1,"updated":"2017-01-09T03:59:48.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yoe008nesqr0kd91xsu","content":"<p>spring batch是用来处理大量数据操作的一个框架，主要用来读取大量数据，然后进行一定处理后的指定形式。</p>\n<p>主要有以下7个部分组成</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JobReository</td>\n<td style=\"text-align:left\">用来注册Job的容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JobLauncher</td>\n<td style=\"text-align:left\">用来启动Job的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Job</td>\n<td style=\"text-align:left\">我们要实际执行的任务，包含一个或多个Step</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Step</td>\n<td style=\"text-align:left\">Step-步骤包含ItemReader,ItemProcessor和ItemWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ItemReader</td>\n<td style=\"text-align:left\">用来读取数据的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ItemProcessor</td>\n<td style=\"text-align:left\">用来处理数据的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ItemWriter</td>\n<td style=\"text-align:left\">用来输出数据的接口</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<p>spring batch是用来处理大量数据操作的一个框架，主要用来读取大量数据，然后进行一定处理后的指定形式。</p>\n<p>主要有以下7个部分组成</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">JobReository</td>\n<td style=\"text-align:left\">用来注册Job的容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JobLauncher</td>\n<td style=\"text-align:left\">用来启动Job的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Job</td>\n<td style=\"text-align:left\">我们要实际执行的任务，包含一个或多个Step</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Step</td>\n<td style=\"text-align:left\">Step-步骤包含ItemReader,ItemProcessor和ItemWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ItemReader</td>\n<td style=\"text-align:left\">用来读取数据的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ItemProcessor</td>\n<td style=\"text-align:left\">用来处理数据的接口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ItemWriter</td>\n<td style=\"text-align:left\">用来输出数据的接口</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"sql语句：根据身份证得到省份、生日、性别","date":"2016-11-30T08:08:54.000Z","description":"根据身份证得到省份、生日、性别","_content":"\n### 根据身份证得到省份\nCASE \nWHEN SUBSTRING(id_card_no,1,2)=11  THEN  '北京市'\t      \nWHEN SUBSTRING(id_card_no,1,2)=12  THEN  '天津市'\t      \nWHEN SUBSTRING(id_card_no,1,2)=13  THEN  '河北省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=14  THEN  '山西省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=15  THEN  '内蒙古自治区'     \nWHEN SUBSTRING(id_card_no,1,2)=21  THEN  '辽宁省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=22  THEN  '吉林省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=23  THEN  '黑龙江省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=31  THEN  '上海市'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=32  THEN  '江苏省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=33  THEN  '浙江省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=34  THEN  '安徽省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=35  THEN  '福建省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=36  THEN  '江西省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=37  THEN  '山东省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=41  THEN  '河南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=42  THEN  '湖北省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=43  THEN  '湖南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=44  THEN  '广东省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=45  THEN  '广西壮族自治区'  \nWHEN SUBSTRING(id_card_no,1,2)=46  THEN  '海南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=50  THEN  '重庆市'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=51  THEN  '四川省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=52  THEN  '贵州省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=53  THEN  '云南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=54  THEN  '西藏自治区'       \nWHEN SUBSTRING(id_card_no,1,2)=61  THEN  '陕西省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=62  THEN  '甘肃省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=63  THEN  '青海省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=64  THEN  '宁夏回族自治区'  \nWHEN SUBSTRING(id_card_no,1,2)=65  THEN  '新疆维吾尔自治区' \nWHEN SUBSTRING(id_card_no,1,2)=71  THEN  '台湾省'\t      \nWHEN SUBSTRING(id_card_no,1,2)=81  THEN  '香港特别行政区'   \nWHEN SUBSTRING(id_card_no,1,2)=91  THEN  '澳门特别行政区'  \nEND AS '省份',\n\n### 生日\nSUBSTRING(id_card_no,7,8) AS '生日'\n\n### 性别\nCASE WHEN (SUBSTRING(u.id_card_no,LENGTH(u.id_card_no)-1,1)%2=0) THEN '女' ELSE '男' END","source":"_posts/sqljl.md","raw":"---\ntitle: sql语句：根据身份证得到省份、生日、性别\ncategories: [mysql]\ntags: [mysql]\ndate: 2016-11-30 16:08:54\ndescription: 根据身份证得到省份、生日、性别\n---\n\n### 根据身份证得到省份\nCASE \nWHEN SUBSTRING(id_card_no,1,2)=11  THEN  '北京市'\t      \nWHEN SUBSTRING(id_card_no,1,2)=12  THEN  '天津市'\t      \nWHEN SUBSTRING(id_card_no,1,2)=13  THEN  '河北省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=14  THEN  '山西省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=15  THEN  '内蒙古自治区'     \nWHEN SUBSTRING(id_card_no,1,2)=21  THEN  '辽宁省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=22  THEN  '吉林省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=23  THEN  '黑龙江省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=31  THEN  '上海市'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=32  THEN  '江苏省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=33  THEN  '浙江省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=34  THEN  '安徽省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=35  THEN  '福建省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=36  THEN  '江西省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=37  THEN  '山东省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=41  THEN  '河南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=42  THEN  '湖北省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=43  THEN  '湖南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=44  THEN  '广东省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=45  THEN  '广西壮族自治区'  \nWHEN SUBSTRING(id_card_no,1,2)=46  THEN  '海南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=50  THEN  '重庆市'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=51  THEN  '四川省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=52  THEN  '贵州省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=53  THEN  '云南省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=54  THEN  '西藏自治区'       \nWHEN SUBSTRING(id_card_no,1,2)=61  THEN  '陕西省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=62  THEN  '甘肃省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=63  THEN  '青海省'  \t      \nWHEN SUBSTRING(id_card_no,1,2)=64  THEN  '宁夏回族自治区'  \nWHEN SUBSTRING(id_card_no,1,2)=65  THEN  '新疆维吾尔自治区' \nWHEN SUBSTRING(id_card_no,1,2)=71  THEN  '台湾省'\t      \nWHEN SUBSTRING(id_card_no,1,2)=81  THEN  '香港特别行政区'   \nWHEN SUBSTRING(id_card_no,1,2)=91  THEN  '澳门特别行政区'  \nEND AS '省份',\n\n### 生日\nSUBSTRING(id_card_no,7,8) AS '生日'\n\n### 性别\nCASE WHEN (SUBSTRING(u.id_card_no,LENGTH(u.id_card_no)-1,1)%2=0) THEN '女' ELSE '男' END","slug":"sqljl","published":1,"updated":"2016-11-30T08:18:05.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yog008resqrlxmycvqr","content":"<h3 id=\"根据身份证得到省份\"><a href=\"#根据身份证得到省份\" class=\"headerlink\" title=\"根据身份证得到省份\"></a>根据身份证得到省份</h3><p>CASE<br>WHEN SUBSTRING(id_card_no,1,2)=11  THEN  ‘北京市’<br>WHEN SUBSTRING(id_card_no,1,2)=12  THEN  ‘天津市’<br>WHEN SUBSTRING(id_card_no,1,2)=13  THEN  ‘河北省’<br>WHEN SUBSTRING(id_card_no,1,2)=14  THEN  ‘山西省’<br>WHEN SUBSTRING(id_card_no,1,2)=15  THEN  ‘内蒙古自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=21  THEN  ‘辽宁省’<br>WHEN SUBSTRING(id_card_no,1,2)=22  THEN  ‘吉林省’<br>WHEN SUBSTRING(id_card_no,1,2)=23  THEN  ‘黑龙江省’<br>WHEN SUBSTRING(id_card_no,1,2)=31  THEN  ‘上海市’<br>WHEN SUBSTRING(id_card_no,1,2)=32  THEN  ‘江苏省’<br>WHEN SUBSTRING(id_card_no,1,2)=33  THEN  ‘浙江省’<br>WHEN SUBSTRING(id_card_no,1,2)=34  THEN  ‘安徽省’<br>WHEN SUBSTRING(id_card_no,1,2)=35  THEN  ‘福建省’<br>WHEN SUBSTRING(id_card_no,1,2)=36  THEN  ‘江西省’<br>WHEN SUBSTRING(id_card_no,1,2)=37  THEN  ‘山东省’<br>WHEN SUBSTRING(id_card_no,1,2)=41  THEN  ‘河南省’<br>WHEN SUBSTRING(id_card_no,1,2)=42  THEN  ‘湖北省’<br>WHEN SUBSTRING(id_card_no,1,2)=43  THEN  ‘湖南省’<br>WHEN SUBSTRING(id_card_no,1,2)=44  THEN  ‘广东省’<br>WHEN SUBSTRING(id_card_no,1,2)=45  THEN  ‘广西壮族自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=46  THEN  ‘海南省’<br>WHEN SUBSTRING(id_card_no,1,2)=50  THEN  ‘重庆市’<br>WHEN SUBSTRING(id_card_no,1,2)=51  THEN  ‘四川省’<br>WHEN SUBSTRING(id_card_no,1,2)=52  THEN  ‘贵州省’<br>WHEN SUBSTRING(id_card_no,1,2)=53  THEN  ‘云南省’<br>WHEN SUBSTRING(id_card_no,1,2)=54  THEN  ‘西藏自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=61  THEN  ‘陕西省’<br>WHEN SUBSTRING(id_card_no,1,2)=62  THEN  ‘甘肃省’<br>WHEN SUBSTRING(id_card_no,1,2)=63  THEN  ‘青海省’<br>WHEN SUBSTRING(id_card_no,1,2)=64  THEN  ‘宁夏回族自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=65  THEN  ‘新疆维吾尔自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=71  THEN  ‘台湾省’<br>WHEN SUBSTRING(id_card_no,1,2)=81  THEN  ‘香港特别行政区’<br>WHEN SUBSTRING(id_card_no,1,2)=91  THEN  ‘澳门特别行政区’<br>END AS ‘省份’,</p>\n<h3 id=\"生日\"><a href=\"#生日\" class=\"headerlink\" title=\"生日\"></a>生日</h3><p>SUBSTRING(id_card_no,7,8) AS ‘生日’</p>\n<h3 id=\"性别\"><a href=\"#性别\" class=\"headerlink\" title=\"性别\"></a>性别</h3><p>CASE WHEN (SUBSTRING(u.id_card_no,LENGTH(u.id_card_no)-1,1)%2=0) THEN ‘女’ ELSE ‘男’ END</p>\n","excerpt":"","more":"<h3 id=\"根据身份证得到省份\"><a href=\"#根据身份证得到省份\" class=\"headerlink\" title=\"根据身份证得到省份\"></a>根据身份证得到省份</h3><p>CASE<br>WHEN SUBSTRING(id_card_no,1,2)=11  THEN  ‘北京市’<br>WHEN SUBSTRING(id_card_no,1,2)=12  THEN  ‘天津市’<br>WHEN SUBSTRING(id_card_no,1,2)=13  THEN  ‘河北省’<br>WHEN SUBSTRING(id_card_no,1,2)=14  THEN  ‘山西省’<br>WHEN SUBSTRING(id_card_no,1,2)=15  THEN  ‘内蒙古自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=21  THEN  ‘辽宁省’<br>WHEN SUBSTRING(id_card_no,1,2)=22  THEN  ‘吉林省’<br>WHEN SUBSTRING(id_card_no,1,2)=23  THEN  ‘黑龙江省’<br>WHEN SUBSTRING(id_card_no,1,2)=31  THEN  ‘上海市’<br>WHEN SUBSTRING(id_card_no,1,2)=32  THEN  ‘江苏省’<br>WHEN SUBSTRING(id_card_no,1,2)=33  THEN  ‘浙江省’<br>WHEN SUBSTRING(id_card_no,1,2)=34  THEN  ‘安徽省’<br>WHEN SUBSTRING(id_card_no,1,2)=35  THEN  ‘福建省’<br>WHEN SUBSTRING(id_card_no,1,2)=36  THEN  ‘江西省’<br>WHEN SUBSTRING(id_card_no,1,2)=37  THEN  ‘山东省’<br>WHEN SUBSTRING(id_card_no,1,2)=41  THEN  ‘河南省’<br>WHEN SUBSTRING(id_card_no,1,2)=42  THEN  ‘湖北省’<br>WHEN SUBSTRING(id_card_no,1,2)=43  THEN  ‘湖南省’<br>WHEN SUBSTRING(id_card_no,1,2)=44  THEN  ‘广东省’<br>WHEN SUBSTRING(id_card_no,1,2)=45  THEN  ‘广西壮族自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=46  THEN  ‘海南省’<br>WHEN SUBSTRING(id_card_no,1,2)=50  THEN  ‘重庆市’<br>WHEN SUBSTRING(id_card_no,1,2)=51  THEN  ‘四川省’<br>WHEN SUBSTRING(id_card_no,1,2)=52  THEN  ‘贵州省’<br>WHEN SUBSTRING(id_card_no,1,2)=53  THEN  ‘云南省’<br>WHEN SUBSTRING(id_card_no,1,2)=54  THEN  ‘西藏自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=61  THEN  ‘陕西省’<br>WHEN SUBSTRING(id_card_no,1,2)=62  THEN  ‘甘肃省’<br>WHEN SUBSTRING(id_card_no,1,2)=63  THEN  ‘青海省’<br>WHEN SUBSTRING(id_card_no,1,2)=64  THEN  ‘宁夏回族自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=65  THEN  ‘新疆维吾尔自治区’<br>WHEN SUBSTRING(id_card_no,1,2)=71  THEN  ‘台湾省’<br>WHEN SUBSTRING(id_card_no,1,2)=81  THEN  ‘香港特别行政区’<br>WHEN SUBSTRING(id_card_no,1,2)=91  THEN  ‘澳门特别行政区’<br>END AS ‘省份’,</p>\n<h3 id=\"生日\"><a href=\"#生日\" class=\"headerlink\" title=\"生日\"></a>生日</h3><p>SUBSTRING(id_card_no,7,8) AS ‘生日’</p>\n<h3 id=\"性别\"><a href=\"#性别\" class=\"headerlink\" title=\"性别\"></a>性别</h3><p>CASE WHEN (SUBSTRING(u.id_card_no,LENGTH(u.id_card_no)-1,1)%2=0) THEN ‘女’ ELSE ‘男’ END</p>\n"},{"title":"sql优化","date":"2016-11-14T06:24:28.000Z","description":"mysql查询语句优化方法","_content":"1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n2. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n3. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\nselect id from t where num is null\n可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\nselect id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n5. 下面的查询也将导致全表扫描：\nselect id from t where name like '%abc%'\n若要提高效率，可以考虑全文检索。\n6. in 和 not in 也要慎用，否则会导致全表扫描，如：\nselect id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n7. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时;它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\nselect id from t where num=@num\n可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n8. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\nselect id from t where num/2=100\n应改为:\nselect id from t where num=100*2\n9. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\nselect id from t where substring(name,1,3)='abc'--name以abc开头的id\nselect id from t where datediff(day,createdate,'2005-11-30')=0--'2005-11-30'生成的id\n应改为:\nselect id from t where name like 'abc%'\nselect id from t where createdate>='2005-11-30' and createdate<'2005-12-1'\n10. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n11. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n12. 不要写一些没有意义的查询，如需要生成一个空表结构：\nselect col1,col2 into #t from t where 1=0\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\ncreate table #t(...)\n\n13. 很多时候用 exists 代替 in 是一个好的选择：\nselect num from a where num in(select num from b)\n用下面的语句替换：\nselect num from a where exists(select 1 from b where num=a.num)\n14. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n15. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n16. 应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n17. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n18. 尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n19. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n20. 尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限(只有主键索引)。\n21. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n22. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n23. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度;如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n24. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n25. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n26. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n27. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n28. 在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n29. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n30. 尽量避免大事务操作，提高系统并发能力。\n\n\n","source":"_posts/sqlty.md","raw":"---\ntitle: sql优化\ncategories: [mysql]\ntags: [mysql]\ndate: 2016-11-14 14:24:28\ndescription: mysql查询语句优化方法\n---\n1. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。\n2. 应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\n3. 应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\nselect id from t where num is null\n可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：\nselect id from t where num=0\n4. 应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：\nselect id from t where num=10 or num=20\n可以这样查询：\nselect id from t where num=10\nunion all\nselect id from t where num=20\n5. 下面的查询也将导致全表扫描：\nselect id from t where name like '%abc%'\n若要提高效率，可以考虑全文检索。\n6. in 和 not in 也要慎用，否则会导致全表扫描，如：\nselect id from t where num in(1,2,3)\n对于连续的数值，能用 between 就不要用 in 了：\nselect id from t where num between 1 and 3\n7. 如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时;它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：\nselect id from t where num=@num\n可以改为强制查询使用索引：\nselect id from t with(index(索引名)) where num=@num\n8. 应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：\nselect id from t where num/2=100\n应改为:\nselect id from t where num=100*2\n9. 应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：\nselect id from t where substring(name,1,3)='abc'--name以abc开头的id\nselect id from t where datediff(day,createdate,'2005-11-30')=0--'2005-11-30'生成的id\n应改为:\nselect id from t where name like 'abc%'\nselect id from t where createdate>='2005-11-30' and createdate<'2005-12-1'\n10. 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。\n11. 在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。\n12. 不要写一些没有意义的查询，如需要生成一个空表结构：\nselect col1,col2 into #t from t where 1=0\n这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：\ncreate table #t(...)\n\n13. 很多时候用 exists 代替 in 是一个好的选择：\nselect num from a where num in(select num from b)\n用下面的语句替换：\nselect num from a where exists(select 1 from b where num=a.num)\n14. 并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。\n15. 索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。\n16. 应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。\n17. 尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。\n18. 尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。\n19. 任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。\n20. 尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限(只有主键索引)。\n21. 避免频繁创建和删除临时表，以减少系统表资源的消耗。\n22. 临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。\n23. 在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度;如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。\n24. 如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。\n25. 尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。\n26. 使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。\n27. 与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。\n28. 在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。\n29. 尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。\n30. 尽量避免大事务操作，提高系统并发能力。\n\n\n","slug":"sqlty","published":1,"updated":"2016-11-14T09:14:40.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yoi008uesqr812skzpg","content":"<ol>\n<li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li>\n<li>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li>\n<li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num is null<br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br>select id from t where num=0</li>\n<li>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num=10 or num=20<br>可以这样查询：<br>select id from t where num=10<br>union all<br>select id from t where num=20</li>\n<li>下面的查询也将导致全表扫描：<br>select id from t where name like ‘%abc%’<br>若要提高效率，可以考虑全文检索。</li>\n<li>in 和 not in 也要慎用，否则会导致全表扫描，如：<br>select id from t where num in(1,2,3)<br>对于连续的数值，能用 between 就不要用 in 了：<br>select id from t where num between 1 and 3</li>\n<li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时;它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br>select id from t where num=@num<br>可以改为强制查询使用索引：<br>select id from t with(index(索引名)) where num=@num</li>\n<li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where num/2=100<br>应改为:<br>select id from t where num=100*2</li>\n<li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where substring(name,1,3)=’abc’–name以abc开头的id<br>select id from t where datediff(day,createdate,’2005-11-30’)=0–’2005-11-30’生成的id<br>应改为:<br>select id from t where name like ‘abc%’<br>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’</li>\n<li>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li>\n<li>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</li>\n<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：<br>select col1,col2 into #t from t where 1=0<br>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>create table #t(…)</p>\n</li>\n<li><p>很多时候用 exists 代替 in 是一个好的选择：<br>select num from a where num in(select num from b)<br>用下面的语句替换：<br>select num from a where exists(select 1 from b where num=a.num)</p>\n</li>\n<li>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</li>\n<li>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</li>\n<li>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</li>\n<li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li>\n<li>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>\n<li>任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</li>\n<li>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限(只有主键索引)。</li>\n<li>避免频繁创建和删除临时表，以减少系统表资源的消耗。</li>\n<li>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</li>\n<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度;如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</li>\n<li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</li>\n<li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</li>\n<li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</li>\n<li>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</li>\n<li>在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</li>\n<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</li>\n<li>尽量避免大事务操作，提高系统并发能力。</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li>\n<li>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li>\n<li>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num is null<br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：<br>select id from t where num=0</li>\n<li>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：<br>select id from t where num=10 or num=20<br>可以这样查询：<br>select id from t where num=10<br>union all<br>select id from t where num=20</li>\n<li>下面的查询也将导致全表扫描：<br>select id from t where name like ‘%abc%’<br>若要提高效率，可以考虑全文检索。</li>\n<li>in 和 not in 也要慎用，否则会导致全表扫描，如：<br>select id from t where num in(1,2,3)<br>对于连续的数值，能用 between 就不要用 in 了：<br>select id from t where num between 1 and 3</li>\n<li>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时;它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：<br>select id from t where num=@num<br>可以改为强制查询使用索引：<br>select id from t with(index(索引名)) where num=@num</li>\n<li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where num/2=100<br>应改为:<br>select id from t where num=100*2</li>\n<li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：<br>select id from t where substring(name,1,3)=’abc’–name以abc开头的id<br>select id from t where datediff(day,createdate,’2005-11-30’)=0–’2005-11-30’生成的id<br>应改为:<br>select id from t where name like ‘abc%’<br>select id from t where createdate&gt;=’2005-11-30’ and createdate&lt;’2005-12-1’</li>\n<li>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li>\n<li>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</li>\n<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：<br>select col1,col2 into #t from t where 1=0<br>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：<br>create table #t(…)</p>\n</li>\n<li><p>很多时候用 exists 代替 in 是一个好的选择：<br>select num from a where num in(select num from b)<br>用下面的语句替换：<br>select num from a where exists(select 1 from b where num=a.num)</p>\n</li>\n<li>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</li>\n<li>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。</li>\n<li>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</li>\n<li>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li>\n<li>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li>\n<li>任何地方都不要使用 select <em> from t ，用具体的字段列表代替“</em>”，不要返回用不到的任何字段。</li>\n<li>尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限(只有主键索引)。</li>\n<li>避免频繁创建和删除临时表，以减少系统表资源的消耗。</li>\n<li>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</li>\n<li>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度;如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</li>\n<li>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</li>\n<li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</li>\n<li>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</li>\n<li>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</li>\n<li>在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</li>\n<li>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</li>\n<li>尽量避免大事务操作，提高系统并发能力。</li>\n</ol>\n"},{"title":"sublime text 3 使用积累","date":"2016-08-14T09:50:05.000Z","_content":"sublime text 3 使用积累\n<!-- more -->\n### 删除插件\nCtrl+Shift+p  remove package","source":"_posts/sublime.md","raw":"---\ntitle: sublime text 3 使用积累\ndate: 2016-08-14 17:50:05\ncategories: [sublime text]\ntags: [sublime text]\n---\nsublime text 3 使用积累\n<!-- more -->\n### 删除插件\nCtrl+Shift+p  remove package","slug":"sublime","published":1,"updated":"2016-09-27T09:52:41.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yok008yesqruc6qkkyk","content":"<p>sublime text 3 使用积累<br><a id=\"more\"></a></p>\n<h3 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h3><p>Ctrl+Shift+p  remove package</p>\n","excerpt":"<p>sublime text 3 使用积累<br></p>","more":"<p></p>\n<h3 id=\"删除插件\"><a href=\"#删除插件\" class=\"headerlink\" title=\"删除插件\"></a>删除插件</h3><p>Ctrl+Shift+p  remove package</p>"},{"title":"使用快速生成GoF设计模式的类图与代码","date":"2016-08-10T07:23:00.000Z","_content":"\n<!-- more -->\n\n### 用StartUML生成GoF设计模式类图与代码\n\n    打开startuml，建立类图，File->new project by approach->选择Empty project\n    选择Model->Add->Model\n    选择Model->Add->Diagram->ClassDiagram\n    Tools->Options->选Java，勾选生成代码选项\n    右键画图区，弹出下图对话框，选择applay pattern,选Gof->然后 23中模式任你选～\n    Tools->Java->Generate Code 生成代码\n    File->Export Diagram 生成类图图片","source":"_posts/staruml1.md","raw":"---\ntitle: 使用快速生成GoF设计模式的类图与代码\ndate: 2016-08-10 15:23:00\ncategories: [starUML]\ntags: [starUML,GoF,设计模式]\n---\n\n<!-- more -->\n\n### 用StartUML生成GoF设计模式类图与代码\n\n    打开startuml，建立类图，File->new project by approach->选择Empty project\n    选择Model->Add->Model\n    选择Model->Add->Diagram->ClassDiagram\n    Tools->Options->选Java，勾选生成代码选项\n    右键画图区，弹出下图对话框，选择applay pattern,选Gof->然后 23中模式任你选～\n    Tools->Java->Generate Code 生成代码\n    File->Export Diagram 生成类图图片","slug":"staruml1","published":1,"updated":"2016-09-26T09:07:06.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yom0091esqr16iq43jv","content":"<a id=\"more\"></a>\n<h3 id=\"用StartUML生成GoF设计模式类图与代码\"><a href=\"#用StartUML生成GoF设计模式类图与代码\" class=\"headerlink\" title=\"用StartUML生成GoF设计模式类图与代码\"></a>用StartUML生成GoF设计模式类图与代码</h3><pre><code>打开startuml，建立类图，File-&gt;new project by approach-&gt;选择Empty project\n选择Model-&gt;Add-&gt;Model\n选择Model-&gt;Add-&gt;Diagram-&gt;ClassDiagram\nTools-&gt;Options-&gt;选Java，勾选生成代码选项\n右键画图区，弹出下图对话框，选择applay pattern,选Gof-&gt;然后 23中模式任你选～\nTools-&gt;Java-&gt;Generate Code 生成代码\nFile-&gt;Export Diagram 生成类图图片\n</code></pre>","excerpt":"","more":"<h3 id=\"用StartUML生成GoF设计模式类图与代码\"><a href=\"#用StartUML生成GoF设计模式类图与代码\" class=\"headerlink\" title=\"用StartUML生成GoF设计模式类图与代码\"></a>用StartUML生成GoF设计模式类图与代码</h3><pre><code>打开startuml，建立类图，File-&gt;new project by approach-&gt;选择Empty project\n选择Model-&gt;Add-&gt;Model\n选择Model-&gt;Add-&gt;Diagram-&gt;ClassDiagram\nTools-&gt;Options-&gt;选Java，勾选生成代码选项\n右键画图区，弹出下图对话框，选择applay pattern,选Gof-&gt;然后 23中模式任你选～\nTools-&gt;Java-&gt;Generate Code 生成代码\nFile-&gt;Export Diagram 生成类图图片\n</code></pre>"},{"title":"存储过程的优缺点","date":"2016-08-08T08:24:05.000Z","_content":"why use Stored Procedure?\n<!-- more -->\n## 存储过程\n\n### 概念\n   存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过\n第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。\n存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程\n### 优点\n#### **存储过程的能力大大增强了SQL语言的功能和灵活性**\n   存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。\n#### **执行速度快**\n   存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,\n所以使用存储过程可提高数据库执行速度。\n#### **减少网络通信量**\n   当对数据库进行复杂操作时，（如对多个表进行insert、update、select、delete时）可将这些复杂操作用存储过程\n封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序完成就是多条SQL语句，可能要多次连接数据库，\n而换成存储过程只需一次连接。\n#### **更强的适应性与复用性**\n   存储过程可以重复使用，减少数据库开发人员的工作量。\n#### **可维护性高**\n   更新存储过程通常比更改、测试以及重新部署程序集需要较少的时间和精力。\n#### **安全性高**\n   可设定只有某用户才能对指定存储过程的使用权，且存储过程比多条sql稳定，只要数据库不出现问题，基本上是不会\n出现什么问题的。\n#### **分布式工作**\n   应用程序和数据库的编码工作可以单独进行，减少耦合度。\n        \n### 缺点\n#### **开发调试差** \n   无良好的IDE开发工具，存储过程的调试比一般SQL要复杂的多。（MySQL调试工具Debugger for MySQL）\n#### **可移植性差** \n   由于存储过程将应用程序绑定到数据库上，因此使用存储过程封装业务逻辑将限制应用程序的可移植性。\n#### **重新编译问题** \n   因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新\n编译（不过也可以设置成运行时刻自动编译）。\n#### **维护难** \n   如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，\n接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。\n    \n### 参考链接\nhttp://blog.csdn.net/jesse621/article/details/9452049\nhttp://blog.csdn.net/u010796790/article/details/52194842\nhttp://baike.baidu.com/link?url=31ou9zns4zUnhs0gXjdjlWT8j-QvJ6QJqz5FYj6p_DM2TXYoLIYJgBsELDuXTcelRtm9Pk51O7FZcOVowd_YB","source":"_posts/storedprodcedure.md","raw":"---\ntitle: 存储过程的优缺点\ndate: 2016-08-08 16:24:05\ncategories: [database]\ntags: [Stored Procedure]\n---\nwhy use Stored Procedure?\n<!-- more -->\n## 存储过程\n\n### 概念\n   存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过\n第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。\n存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程\n### 优点\n#### **存储过程的能力大大增强了SQL语言的功能和灵活性**\n   存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。\n#### **执行速度快**\n   存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,\n所以使用存储过程可提高数据库执行速度。\n#### **减少网络通信量**\n   当对数据库进行复杂操作时，（如对多个表进行insert、update、select、delete时）可将这些复杂操作用存储过程\n封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序完成就是多条SQL语句，可能要多次连接数据库，\n而换成存储过程只需一次连接。\n#### **更强的适应性与复用性**\n   存储过程可以重复使用，减少数据库开发人员的工作量。\n#### **可维护性高**\n   更新存储过程通常比更改、测试以及重新部署程序集需要较少的时间和精力。\n#### **安全性高**\n   可设定只有某用户才能对指定存储过程的使用权，且存储过程比多条sql稳定，只要数据库不出现问题，基本上是不会\n出现什么问题的。\n#### **分布式工作**\n   应用程序和数据库的编码工作可以单独进行，减少耦合度。\n        \n### 缺点\n#### **开发调试差** \n   无良好的IDE开发工具，存储过程的调试比一般SQL要复杂的多。（MySQL调试工具Debugger for MySQL）\n#### **可移植性差** \n   由于存储过程将应用程序绑定到数据库上，因此使用存储过程封装业务逻辑将限制应用程序的可移植性。\n#### **重新编译问题** \n   因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新\n编译（不过也可以设置成运行时刻自动编译）。\n#### **维护难** \n   如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，\n接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。\n    \n### 参考链接\nhttp://blog.csdn.net/jesse621/article/details/9452049\nhttp://blog.csdn.net/u010796790/article/details/52194842\nhttp://baike.baidu.com/link?url=31ou9zns4zUnhs0gXjdjlWT8j-QvJ6QJqz5FYj6p_DM2TXYoLIYJgBsELDuXTcelRtm9Pk51O7FZcOVowd_YB","slug":"storedprodcedure","published":1,"updated":"2016-10-24T08:53:13.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yop0096esqr5mdvz9j3","content":"<p>why use Stored Procedure?<br><a id=\"more\"></a></p>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>   存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过<br>第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。<br>存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><h4 id=\"存储过程的能力大大增强了SQL语言的功能和灵活性\"><a href=\"#存储过程的能力大大增强了SQL语言的功能和灵活性\" class=\"headerlink\" title=\"存储过程的能力大大增强了SQL语言的功能和灵活性\"></a><strong>存储过程的能力大大增强了SQL语言的功能和灵活性</strong></h4><p>   存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p>\n<h4 id=\"执行速度快\"><a href=\"#执行速度快\" class=\"headerlink\" title=\"执行速度快\"></a><strong>执行速度快</strong></h4><p>   存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,<br>所以使用存储过程可提高数据库执行速度。</p>\n<h4 id=\"减少网络通信量\"><a href=\"#减少网络通信量\" class=\"headerlink\" title=\"减少网络通信量\"></a><strong>减少网络通信量</strong></h4><p>   当对数据库进行复杂操作时，（如对多个表进行insert、update、select、delete时）可将这些复杂操作用存储过程<br>封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序完成就是多条SQL语句，可能要多次连接数据库，<br>而换成存储过程只需一次连接。</p>\n<h4 id=\"更强的适应性与复用性\"><a href=\"#更强的适应性与复用性\" class=\"headerlink\" title=\"更强的适应性与复用性\"></a><strong>更强的适应性与复用性</strong></h4><p>   存储过程可以重复使用，减少数据库开发人员的工作量。</p>\n<h4 id=\"可维护性高\"><a href=\"#可维护性高\" class=\"headerlink\" title=\"可维护性高\"></a><strong>可维护性高</strong></h4><p>   更新存储过程通常比更改、测试以及重新部署程序集需要较少的时间和精力。</p>\n<h4 id=\"安全性高\"><a href=\"#安全性高\" class=\"headerlink\" title=\"安全性高\"></a><strong>安全性高</strong></h4><p>   可设定只有某用户才能对指定存储过程的使用权，且存储过程比多条sql稳定，只要数据库不出现问题，基本上是不会<br>出现什么问题的。</p>\n<h4 id=\"分布式工作\"><a href=\"#分布式工作\" class=\"headerlink\" title=\"分布式工作\"></a><strong>分布式工作</strong></h4><p>   应用程序和数据库的编码工作可以单独进行，减少耦合度。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><h4 id=\"开发调试差\"><a href=\"#开发调试差\" class=\"headerlink\" title=\"开发调试差\"></a><strong>开发调试差</strong></h4><p>   无良好的IDE开发工具，存储过程的调试比一般SQL要复杂的多。（MySQL调试工具Debugger for MySQL）</p>\n<h4 id=\"可移植性差\"><a href=\"#可移植性差\" class=\"headerlink\" title=\"可移植性差\"></a><strong>可移植性差</strong></h4><p>   由于存储过程将应用程序绑定到数据库上，因此使用存储过程封装业务逻辑将限制应用程序的可移植性。</p>\n<h4 id=\"重新编译问题\"><a href=\"#重新编译问题\" class=\"headerlink\" title=\"重新编译问题\"></a><strong>重新编译问题</strong></h4><p>   因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新<br>编译（不过也可以设置成运行时刻自动编译）。</p>\n<h4 id=\"维护难\"><a href=\"#维护难\" class=\"headerlink\" title=\"维护难\"></a><strong>维护难</strong></h4><p>   如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，<br>接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://blog.csdn.net/jesse621/article/details/9452049\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jesse621/article/details/9452049</a><br><a href=\"http://blog.csdn.net/u010796790/article/details/52194842\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u010796790/article/details/52194842</a><br><a href=\"http://baike.baidu.com/link?url=31ou9zns4zUnhs0gXjdjlWT8j-QvJ6QJqz5FYj6p_DM2TXYoLIYJgBsELDuXTcelRtm9Pk51O7FZcOVowd_YB\" target=\"_blank\" rel=\"external\">http://baike.baidu.com/link?url=31ou9zns4zUnhs0gXjdjlWT8j-QvJ6QJqz5FYj6p_DM2TXYoLIYJgBsELDuXTcelRtm9Pk51O7FZcOVowd_YB</a></p>\n","excerpt":"<p>why use Stored Procedure?<br></p>","more":"<p></p>\n<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>   存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过<br>第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。<br>存储过程是数据库中的一个重要对象，任何一个设计良好的数据库应用程序都应该用到存储过程</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><h4 id=\"存储过程的能力大大增强了SQL语言的功能和灵活性\"><a href=\"#存储过程的能力大大增强了SQL语言的功能和灵活性\" class=\"headerlink\" title=\"存储过程的能力大大增强了SQL语言的功能和灵活性\"></a><strong>存储过程的能力大大增强了SQL语言的功能和灵活性</strong></h4><p>   存储过程可以用流控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</p>\n<h4 id=\"执行速度快\"><a href=\"#执行速度快\" class=\"headerlink\" title=\"执行速度快\"></a><strong>执行速度快</strong></h4><p>   存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,<br>所以使用存储过程可提高数据库执行速度。</p>\n<h4 id=\"减少网络通信量\"><a href=\"#减少网络通信量\" class=\"headerlink\" title=\"减少网络通信量\"></a><strong>减少网络通信量</strong></h4><p>   当对数据库进行复杂操作时，（如对多个表进行insert、update、select、delete时）可将这些复杂操作用存储过程<br>封装起来与数据库提供的事务处理结合一起使用。这些操作，如果用程序完成就是多条SQL语句，可能要多次连接数据库，<br>而换成存储过程只需一次连接。</p>\n<h4 id=\"更强的适应性与复用性\"><a href=\"#更强的适应性与复用性\" class=\"headerlink\" title=\"更强的适应性与复用性\"></a><strong>更强的适应性与复用性</strong></h4><p>   存储过程可以重复使用，减少数据库开发人员的工作量。</p>\n<h4 id=\"可维护性高\"><a href=\"#可维护性高\" class=\"headerlink\" title=\"可维护性高\"></a><strong>可维护性高</strong></h4><p>   更新存储过程通常比更改、测试以及重新部署程序集需要较少的时间和精力。</p>\n<h4 id=\"安全性高\"><a href=\"#安全性高\" class=\"headerlink\" title=\"安全性高\"></a><strong>安全性高</strong></h4><p>   可设定只有某用户才能对指定存储过程的使用权，且存储过程比多条sql稳定，只要数据库不出现问题，基本上是不会<br>出现什么问题的。</p>\n<h4 id=\"分布式工作\"><a href=\"#分布式工作\" class=\"headerlink\" title=\"分布式工作\"></a><strong>分布式工作</strong></h4><p>   应用程序和数据库的编码工作可以单独进行，减少耦合度。</p>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><h4 id=\"开发调试差\"><a href=\"#开发调试差\" class=\"headerlink\" title=\"开发调试差\"></a><strong>开发调试差</strong></h4><p>   无良好的IDE开发工具，存储过程的调试比一般SQL要复杂的多。（MySQL调试工具Debugger for MySQL）</p>\n<h4 id=\"可移植性差\"><a href=\"#可移植性差\" class=\"headerlink\" title=\"可移植性差\"></a><strong>可移植性差</strong></h4><p>   由于存储过程将应用程序绑定到数据库上，因此使用存储过程封装业务逻辑将限制应用程序的可移植性。</p>\n<h4 id=\"重新编译问题\"><a href=\"#重新编译问题\" class=\"headerlink\" title=\"重新编译问题\"></a><strong>重新编译问题</strong></h4><p>   因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新<br>编译（不过也可以设置成运行时刻自动编译）。</p>\n<h4 id=\"维护难\"><a href=\"#维护难\" class=\"headerlink\" title=\"维护难\"></a><strong>维护难</strong></h4><p>   如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，<br>接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://blog.csdn.net/jesse621/article/details/9452049\">http://blog.csdn.net/jesse621/article/details/9452049</a><br><a href=\"http://blog.csdn.net/u010796790/article/details/52194842\">http://blog.csdn.net/u010796790/article/details/52194842</a><br><a href=\"http://baike.baidu.com/link?url=31ou9zns4zUnhs0gXjdjlWT8j-QvJ6QJqz5FYj6p_DM2TXYoLIYJgBsELDuXTcelRtm9Pk51O7FZcOVowd_YB\">http://baike.baidu.com/link?url=31ou9zns4zUnhs0gXjdjlWT8j-QvJ6QJqz5FYj6p_DM2TXYoLIYJgBsELDuXTcelRtm9Pk51O7FZcOVowd_YB</a></p>"},{"title":"linux下svn安装","date":"2016-12-21T03:15:45.000Z","description":"linux下svn安装","_content":"安装步骤如下：\n1. yum install subversion\n2. 查看安装版本 svnserve --version\n3. 创建SVN版本库目录 mkdir -p /var/svn/idea4j\n4. 创建版本库  svnadmin create /var/svn/idea4j\n  执行了这个命令之后会在/var/svn/idea4j目录下生成如下这些文件:conf  db  format  hooks  locks  README.txt\n5. 进入conf目录（该svn版本库配置文件）cd conf/\n  authz文件是权限控制文件\n  passwd是帐号密码文件\n  svnserve.conf SVN服务配置文件\n6. 设置帐号密码 vi passwd\n  在[users]块中添加用户和密码，格式：帐号=密码，如markee=guagua99\n7. 设置权限 vim authz \n```txt\n[groups]\n#增加组\ndevelopers = markee\nproduct = markee\n[idea4j:/]\n#组权限\n@developers=rw\n* =\n``` \n8. 修改svnserve.conf文件  vi svnserve.conf\n  打开下面的几个注释：\n  anon-access = read #匿名用户可读\n  auth-access = write #授权用户可写\n  password-db = passwd #使用哪个文件作为账号文件\n  authz-db = authz #使用哪个文件作为权限文件\n  realm = /var/svn/idea4j # 认证空间名，版本库所在目录\n  \n9. 启动svn版本库  svnserve -d -r /var/svn/idea4j（停止SVN命令  killall svnserve）\n\n\n10. 验证svn\nmkdir test\nsvn import test svn://192.168.152.128/zd/svn/project/ -m \"zhudan\"","source":"_posts/svn1.md","raw":"---\ntitle: linux下svn安装\ncategories: [svn]\ntags: [svn]\ndate: 2016-12-21 11:15:45\ndescription: linux下svn安装\n---\n安装步骤如下：\n1. yum install subversion\n2. 查看安装版本 svnserve --version\n3. 创建SVN版本库目录 mkdir -p /var/svn/idea4j\n4. 创建版本库  svnadmin create /var/svn/idea4j\n  执行了这个命令之后会在/var/svn/idea4j目录下生成如下这些文件:conf  db  format  hooks  locks  README.txt\n5. 进入conf目录（该svn版本库配置文件）cd conf/\n  authz文件是权限控制文件\n  passwd是帐号密码文件\n  svnserve.conf SVN服务配置文件\n6. 设置帐号密码 vi passwd\n  在[users]块中添加用户和密码，格式：帐号=密码，如markee=guagua99\n7. 设置权限 vim authz \n```txt\n[groups]\n#增加组\ndevelopers = markee\nproduct = markee\n[idea4j:/]\n#组权限\n@developers=rw\n* =\n``` \n8. 修改svnserve.conf文件  vi svnserve.conf\n  打开下面的几个注释：\n  anon-access = read #匿名用户可读\n  auth-access = write #授权用户可写\n  password-db = passwd #使用哪个文件作为账号文件\n  authz-db = authz #使用哪个文件作为权限文件\n  realm = /var/svn/idea4j # 认证空间名，版本库所在目录\n  \n9. 启动svn版本库  svnserve -d -r /var/svn/idea4j（停止SVN命令  killall svnserve）\n\n\n10. 验证svn\nmkdir test\nsvn import test svn://192.168.152.128/zd/svn/project/ -m \"zhudan\"","slug":"svn1","published":1,"updated":"2016-12-22T01:42:23.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yor0099esqrpj03i7km","content":"<p>安装步骤如下：</p>\n<ol>\n<li>yum install subversion</li>\n<li>查看安装版本 svnserve –version</li>\n<li>创建SVN版本库目录 mkdir -p /var/svn/idea4j</li>\n<li>创建版本库  svnadmin create /var/svn/idea4j<br>执行了这个命令之后会在/var/svn/idea4j目录下生成如下这些文件:conf  db  format  hooks  locks  README.txt</li>\n<li>进入conf目录（该svn版本库配置文件）cd conf/<br>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.conf SVN服务配置文件</li>\n<li>设置帐号密码 vi passwd<br>在[users]块中添加用户和密码，格式：帐号=密码，如markee=guagua99</li>\n<li>设置权限 vim authz<br>```txt<br>[groups]<br>#增加组<br>developers = markee<br>product = markee<br>[idea4j:/]<br>#组权限<br>@developers=rw</li>\n</ol>\n<ul>\n<li>=<br>``` </li>\n</ul>\n<ol>\n<li><p>修改svnserve.conf文件  vi svnserve.conf<br>打开下面的几个注释：<br>anon-access = read #匿名用户可读<br>auth-access = write #授权用户可写<br>password-db = passwd #使用哪个文件作为账号文件<br>authz-db = authz #使用哪个文件作为权限文件<br>realm = /var/svn/idea4j # 认证空间名，版本库所在目录</p>\n</li>\n<li><p>启动svn版本库  svnserve -d -r /var/svn/idea4j（停止SVN命令  killall svnserve）</p>\n</li>\n</ol>\n<ol>\n<li>验证svn<br>mkdir test<br>svn import test svn://192.168.152.128/zd/svn/project/ -m “zhudan”</li>\n</ol>\n","excerpt":"","more":"<p>安装步骤如下：</p>\n<ol>\n<li>yum install subversion</li>\n<li>查看安装版本 svnserve –version</li>\n<li>创建SVN版本库目录 mkdir -p /var/svn/idea4j</li>\n<li>创建版本库  svnadmin create /var/svn/idea4j<br>执行了这个命令之后会在/var/svn/idea4j目录下生成如下这些文件:conf  db  format  hooks  locks  README.txt</li>\n<li>进入conf目录（该svn版本库配置文件）cd conf/<br>authz文件是权限控制文件<br>passwd是帐号密码文件<br>svnserve.conf SVN服务配置文件</li>\n<li>设置帐号密码 vi passwd<br>在[users]块中添加用户和密码，格式：帐号=密码，如markee=guagua99</li>\n<li>设置权限 vim authz<br>```txt<br>[groups]<br>#增加组<br>developers = markee<br>product = markee<br>[idea4j:/]<br>#组权限<br>@developers=rw</li>\n</ol>\n<ul>\n<li>=<br>``` </li>\n</ul>\n<ol>\n<li><p>修改svnserve.conf文件  vi svnserve.conf<br>打开下面的几个注释：<br>anon-access = read #匿名用户可读<br>auth-access = write #授权用户可写<br>password-db = passwd #使用哪个文件作为账号文件<br>authz-db = authz #使用哪个文件作为权限文件<br>realm = /var/svn/idea4j # 认证空间名，版本库所在目录</p>\n</li>\n<li><p>启动svn版本库  svnserve -d -r /var/svn/idea4j（停止SVN命令  killall svnserve）</p>\n</li>\n</ol>\n<ol>\n<li>验证svn<br>mkdir test<br>svn import test svn://192.168.152.128/zd/svn/project/ -m “zhudan”</li>\n</ol>\n"},{"title":"美国历任总统，在任年限及所属党派","date":"2016-11-09T03:20:52.000Z","description":"美国历任总统，在任年限及所属党派","_content":"|任数|姓名|在任年限|党派|\n|:-:|:-|:-|:-|\n|1 |乔治·华盛顿（George Washington）|1789-1797 |无党派|\n|2 |约翰·亚当斯（John Adams）|1797-1801|联邦党|\n|3 |托马斯·杰斐逊（Thomas Jefferson）| 1801-1809 |民主共和党|\n|4 |詹姆斯·麦迪逊（James Madison）| 1809-1817 |民主共和党|\n|5 |詹姆斯·门罗（James Monroe）| 1817-1825 |民主共和党|\n|6 |约翰·昆西·亚当斯（John Quincy Adams）| 1825-1829 |民主共和党|\n|7 |安德鲁·杰克逊（Andrew Jackson）| 1829-1837 |民主党|\n|8 |马丁·范布伦（Martin van Buren）| 1837-1841 |民主党|\n|9 |威廉·亨利·哈里森（William Henry Harrison）| 1841 |辉格党|\n|10|约翰·泰勒（John Tyler）| 1841-1845 |本为辉格党，后无党派|\n|11|詹姆斯·诺克斯·波尔克（James Knox Polk）| 1845-1849|民主党|\n|12|扎卡里·泰勒（Zachary Taylor）| 1849-1850 |辉格党|\n|13|米勒德·菲尔莫尔（Millard Fillmore）| 1850-1853 |辉格党|\n|14|福兰克林·皮尔斯（Franklin Pierce）| 1853-1857 |民主党|\n|15|詹姆斯·布坎南 （James Buchanan）|1857-1861 |民主党|\n|16|亚伯拉罕·林肯（Abraham Lincoln）| 1861-1865 |共和党，国家统一党|\n|17|安德鲁·约翰逊（Andrew Johnson）| 1865-1869 |民主党，国家统一党|\n|18|尤里西斯·格兰特（Ulysses S.Grant） |1869-1877 |共和党|\n|19|拉瑟福德·伯查德·海斯（Rutherford Birchard Hayes）| 1877-1881| 共和党|\n|20|詹姆斯·阿布拉姆·加菲尔德（James Abram Garfield）| 1881 |共和党|\n|21|切斯特·艾伦·阿瑟（Chester Alan Arthur）| 1881-1885 |共和党|\n|22|史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland）| 1885-1889|民主党|\n|23|本杰明·哈里森 （Benjamin Harrison）|1889-1893 |共和党|\n|24|史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland ）| 1893-1897 |民主党|\n|25|威廉·麦金利（William McKinley） |1897-1901 |共和党|\n|26|西奥多·罗斯福 （Theodore Roosevelt）|1901-1909 |共和党|\n|27|威廉·霍华德·塔夫脱（William Howard Taft）| 1909-1913 |共和党|\n|28|托马斯·伍德罗·威尔逊（Thomas Woodrow Wilson）| 1913-1921 |民主党|\n|29|沃伦·甘梅利尔·哈定（Warren Gamaliel Harding）| 1921-1923 |共和党|\n|30|约翰·卡尔文·柯立芝（John Calvin Coolidge）| 1923-1929 |共和党|\n|31|赫伯特·克拉克·胡佛（Herbert Clark Hoover）|1929-1933 |共和党|\n|32|富兰克林·德拉诺·罗斯福（Franklin Delano Roosevelt）| 1933-1945 |民主党|\n|33|哈里·S·杜鲁门（Harry S. Truman）| 1945-1953 |民主党|\n|34|德怀特·戴维·艾森豪威尔（Dwight David Eisenhower）| 1953-1961|共和党|\n|35|约翰·菲茨杰拉德·肯尼迪（John Fitzgerald Kennedy）| 1961-1963 |民主党|\n|36|林登·拜恩斯·约翰逊（Lyndon Baines Johnson）| 1963-1969 |民主党|\n|37|理查德·米尔豪斯·尼克松（Richard Milhous Nixon）| 1969-1974 |共和党|\n|38|杰拉尔德·鲁道夫·福特（Gerald Rudolph Ford）| 1974-1977 |共和党|\n|39|詹姆斯·厄尔··卡特（James Earl Carter ）|1977-1981 |民主党|\n|40|罗纳德·威尔逊·里根（Ronald Wilson Reagan）| 1981-1989 |共和党|\n|41|乔治·赫伯特·沃克·布什（George Herbert Walker Bush）| 1989-1993 |共和党|\n|42|威廉·杰斐逊·克林顿（William Jefferson Clinton）| 1993-2001 |民主党\n|43|乔治·沃克·布什（George Walker Bush）| 2001-2009 |共和党|\n|44|贝拉克·侯赛因·奥巴马（Barack Hussein Obama）|2009-2017|民主党|","source":"_posts/usapresident.md","raw":"---\ntitle: 美国历任总统，在任年限及所属党派\ncategories: [其他]\ntags: [其他]\ndate: 2016-11-09 11:20:52\ndescription: 美国历任总统，在任年限及所属党派\n---\n|任数|姓名|在任年限|党派|\n|:-:|:-|:-|:-|\n|1 |乔治·华盛顿（George Washington）|1789-1797 |无党派|\n|2 |约翰·亚当斯（John Adams）|1797-1801|联邦党|\n|3 |托马斯·杰斐逊（Thomas Jefferson）| 1801-1809 |民主共和党|\n|4 |詹姆斯·麦迪逊（James Madison）| 1809-1817 |民主共和党|\n|5 |詹姆斯·门罗（James Monroe）| 1817-1825 |民主共和党|\n|6 |约翰·昆西·亚当斯（John Quincy Adams）| 1825-1829 |民主共和党|\n|7 |安德鲁·杰克逊（Andrew Jackson）| 1829-1837 |民主党|\n|8 |马丁·范布伦（Martin van Buren）| 1837-1841 |民主党|\n|9 |威廉·亨利·哈里森（William Henry Harrison）| 1841 |辉格党|\n|10|约翰·泰勒（John Tyler）| 1841-1845 |本为辉格党，后无党派|\n|11|詹姆斯·诺克斯·波尔克（James Knox Polk）| 1845-1849|民主党|\n|12|扎卡里·泰勒（Zachary Taylor）| 1849-1850 |辉格党|\n|13|米勒德·菲尔莫尔（Millard Fillmore）| 1850-1853 |辉格党|\n|14|福兰克林·皮尔斯（Franklin Pierce）| 1853-1857 |民主党|\n|15|詹姆斯·布坎南 （James Buchanan）|1857-1861 |民主党|\n|16|亚伯拉罕·林肯（Abraham Lincoln）| 1861-1865 |共和党，国家统一党|\n|17|安德鲁·约翰逊（Andrew Johnson）| 1865-1869 |民主党，国家统一党|\n|18|尤里西斯·格兰特（Ulysses S.Grant） |1869-1877 |共和党|\n|19|拉瑟福德·伯查德·海斯（Rutherford Birchard Hayes）| 1877-1881| 共和党|\n|20|詹姆斯·阿布拉姆·加菲尔德（James Abram Garfield）| 1881 |共和党|\n|21|切斯特·艾伦·阿瑟（Chester Alan Arthur）| 1881-1885 |共和党|\n|22|史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland）| 1885-1889|民主党|\n|23|本杰明·哈里森 （Benjamin Harrison）|1889-1893 |共和党|\n|24|史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland ）| 1893-1897 |民主党|\n|25|威廉·麦金利（William McKinley） |1897-1901 |共和党|\n|26|西奥多·罗斯福 （Theodore Roosevelt）|1901-1909 |共和党|\n|27|威廉·霍华德·塔夫脱（William Howard Taft）| 1909-1913 |共和党|\n|28|托马斯·伍德罗·威尔逊（Thomas Woodrow Wilson）| 1913-1921 |民主党|\n|29|沃伦·甘梅利尔·哈定（Warren Gamaliel Harding）| 1921-1923 |共和党|\n|30|约翰·卡尔文·柯立芝（John Calvin Coolidge）| 1923-1929 |共和党|\n|31|赫伯特·克拉克·胡佛（Herbert Clark Hoover）|1929-1933 |共和党|\n|32|富兰克林·德拉诺·罗斯福（Franklin Delano Roosevelt）| 1933-1945 |民主党|\n|33|哈里·S·杜鲁门（Harry S. Truman）| 1945-1953 |民主党|\n|34|德怀特·戴维·艾森豪威尔（Dwight David Eisenhower）| 1953-1961|共和党|\n|35|约翰·菲茨杰拉德·肯尼迪（John Fitzgerald Kennedy）| 1961-1963 |民主党|\n|36|林登·拜恩斯·约翰逊（Lyndon Baines Johnson）| 1963-1969 |民主党|\n|37|理查德·米尔豪斯·尼克松（Richard Milhous Nixon）| 1969-1974 |共和党|\n|38|杰拉尔德·鲁道夫·福特（Gerald Rudolph Ford）| 1974-1977 |共和党|\n|39|詹姆斯·厄尔··卡特（James Earl Carter ）|1977-1981 |民主党|\n|40|罗纳德·威尔逊·里根（Ronald Wilson Reagan）| 1981-1989 |共和党|\n|41|乔治·赫伯特·沃克·布什（George Herbert Walker Bush）| 1989-1993 |共和党|\n|42|威廉·杰斐逊·克林顿（William Jefferson Clinton）| 1993-2001 |民主党\n|43|乔治·沃克·布什（George Walker Bush）| 2001-2009 |共和党|\n|44|贝拉克·侯赛因·奥巴马（Barack Hussein Obama）|2009-2017|民主党|","slug":"usapresident","published":1,"updated":"2016-11-09T03:42:08.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yow009eesqr3yiy9lyn","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">任数</th>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:left\">在任年限</th>\n<th style=\"text-align:left\">党派</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">乔治·华盛顿（George Washington）</td>\n<td style=\"text-align:left\">1789-1797</td>\n<td style=\"text-align:left\">无党派</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">约翰·亚当斯（John Adams）</td>\n<td style=\"text-align:left\">1797-1801</td>\n<td style=\"text-align:left\">联邦党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">托马斯·杰斐逊（Thomas Jefferson）</td>\n<td style=\"text-align:left\">1801-1809</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">詹姆斯·麦迪逊（James Madison）</td>\n<td style=\"text-align:left\">1809-1817</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">詹姆斯·门罗（James Monroe）</td>\n<td style=\"text-align:left\">1817-1825</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">约翰·昆西·亚当斯（John Quincy Adams）</td>\n<td style=\"text-align:left\">1825-1829</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">安德鲁·杰克逊（Andrew Jackson）</td>\n<td style=\"text-align:left\">1829-1837</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">马丁·范布伦（Martin van Buren）</td>\n<td style=\"text-align:left\">1837-1841</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">威廉·亨利·哈里森（William Henry Harrison）</td>\n<td style=\"text-align:left\">1841</td>\n<td style=\"text-align:left\">辉格党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">约翰·泰勒（John Tyler）</td>\n<td style=\"text-align:left\">1841-1845</td>\n<td style=\"text-align:left\">本为辉格党，后无党派</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">詹姆斯·诺克斯·波尔克（James Knox Polk）</td>\n<td style=\"text-align:left\">1845-1849</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">扎卡里·泰勒（Zachary Taylor）</td>\n<td style=\"text-align:left\">1849-1850</td>\n<td style=\"text-align:left\">辉格党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:left\">米勒德·菲尔莫尔（Millard Fillmore）</td>\n<td style=\"text-align:left\">1850-1853</td>\n<td style=\"text-align:left\">辉格党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:left\">福兰克林·皮尔斯（Franklin Pierce）</td>\n<td style=\"text-align:left\">1853-1857</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\">詹姆斯·布坎南 （James Buchanan）</td>\n<td style=\"text-align:left\">1857-1861</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\">亚伯拉罕·林肯（Abraham Lincoln）</td>\n<td style=\"text-align:left\">1861-1865</td>\n<td style=\"text-align:left\">共和党，国家统一党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:left\">安德鲁·约翰逊（Andrew Johnson）</td>\n<td style=\"text-align:left\">1865-1869</td>\n<td style=\"text-align:left\">民主党，国家统一党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\">尤里西斯·格兰特（Ulysses S.Grant）</td>\n<td style=\"text-align:left\">1869-1877</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:left\">拉瑟福德·伯查德·海斯（Rutherford Birchard Hayes）</td>\n<td style=\"text-align:left\">1877-1881</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:left\">詹姆斯·阿布拉姆·加菲尔德（James Abram Garfield）</td>\n<td style=\"text-align:left\">1881</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:left\">切斯特·艾伦·阿瑟（Chester Alan Arthur）</td>\n<td style=\"text-align:left\">1881-1885</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:left\">史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland）</td>\n<td style=\"text-align:left\">1885-1889</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:left\">本杰明·哈里森 （Benjamin Harrison）</td>\n<td style=\"text-align:left\">1889-1893</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:left\">史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland ）</td>\n<td style=\"text-align:left\">1893-1897</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:left\">威廉·麦金利（William McKinley）</td>\n<td style=\"text-align:left\">1897-1901</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:left\">西奥多·罗斯福 （Theodore Roosevelt）</td>\n<td style=\"text-align:left\">1901-1909</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:left\">威廉·霍华德·塔夫脱（William Howard Taft）</td>\n<td style=\"text-align:left\">1909-1913</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:left\">托马斯·伍德罗·威尔逊（Thomas Woodrow Wilson）</td>\n<td style=\"text-align:left\">1913-1921</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td style=\"text-align:left\">沃伦·甘梅利尔·哈定（Warren Gamaliel Harding）</td>\n<td style=\"text-align:left\">1921-1923</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:left\">约翰·卡尔文·柯立芝（John Calvin Coolidge）</td>\n<td style=\"text-align:left\">1923-1929</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td style=\"text-align:left\">赫伯特·克拉克·胡佛（Herbert Clark Hoover）</td>\n<td style=\"text-align:left\">1929-1933</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:left\">富兰克林·德拉诺·罗斯福（Franklin Delano Roosevelt）</td>\n<td style=\"text-align:left\">1933-1945</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td style=\"text-align:left\">哈里·S·杜鲁门（Harry S. Truman）</td>\n<td style=\"text-align:left\">1945-1953</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:left\">德怀特·戴维·艾森豪威尔（Dwight David Eisenhower）</td>\n<td style=\"text-align:left\">1953-1961</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td style=\"text-align:left\">约翰·菲茨杰拉德·肯尼迪（John Fitzgerald Kennedy）</td>\n<td style=\"text-align:left\">1961-1963</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td style=\"text-align:left\">林登·拜恩斯·约翰逊（Lyndon Baines Johnson）</td>\n<td style=\"text-align:left\">1963-1969</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:left\">理查德·米尔豪斯·尼克松（Richard Milhous Nixon）</td>\n<td style=\"text-align:left\">1969-1974</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td style=\"text-align:left\">杰拉尔德·鲁道夫·福特（Gerald Rudolph Ford）</td>\n<td style=\"text-align:left\">1974-1977</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">39</td>\n<td style=\"text-align:left\">詹姆斯·厄尔··卡特（James Earl Carter ）</td>\n<td style=\"text-align:left\">1977-1981</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:left\">罗纳德·威尔逊·里根（Ronald Wilson Reagan）</td>\n<td style=\"text-align:left\">1981-1989</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">41</td>\n<td style=\"text-align:left\">乔治·赫伯特·沃克·布什（George Herbert Walker Bush）</td>\n<td style=\"text-align:left\">1989-1993</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">42</td>\n<td style=\"text-align:left\">威廉·杰斐逊·克林顿（William Jefferson Clinton）</td>\n<td style=\"text-align:left\">1993-2001</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">43</td>\n<td style=\"text-align:left\">乔治·沃克·布什（George Walker Bush）</td>\n<td style=\"text-align:left\">2001-2009</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">44</td>\n<td style=\"text-align:left\">贝拉克·侯赛因·奥巴马（Barack Hussein Obama）</td>\n<td style=\"text-align:left\">2009-2017</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">任数</th>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:left\">在任年限</th>\n<th style=\"text-align:left\">党派</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">乔治·华盛顿（George Washington）</td>\n<td style=\"text-align:left\">1789-1797</td>\n<td style=\"text-align:left\">无党派</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">约翰·亚当斯（John Adams）</td>\n<td style=\"text-align:left\">1797-1801</td>\n<td style=\"text-align:left\">联邦党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">托马斯·杰斐逊（Thomas Jefferson）</td>\n<td style=\"text-align:left\">1801-1809</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">詹姆斯·麦迪逊（James Madison）</td>\n<td style=\"text-align:left\">1809-1817</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">詹姆斯·门罗（James Monroe）</td>\n<td style=\"text-align:left\">1817-1825</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">约翰·昆西·亚当斯（John Quincy Adams）</td>\n<td style=\"text-align:left\">1825-1829</td>\n<td style=\"text-align:left\">民主共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">安德鲁·杰克逊（Andrew Jackson）</td>\n<td style=\"text-align:left\">1829-1837</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">马丁·范布伦（Martin van Buren）</td>\n<td style=\"text-align:left\">1837-1841</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">威廉·亨利·哈里森（William Henry Harrison）</td>\n<td style=\"text-align:left\">1841</td>\n<td style=\"text-align:left\">辉格党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">约翰·泰勒（John Tyler）</td>\n<td style=\"text-align:left\">1841-1845</td>\n<td style=\"text-align:left\">本为辉格党，后无党派</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">詹姆斯·诺克斯·波尔克（James Knox Polk）</td>\n<td style=\"text-align:left\">1845-1849</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">扎卡里·泰勒（Zachary Taylor）</td>\n<td style=\"text-align:left\">1849-1850</td>\n<td style=\"text-align:left\">辉格党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:left\">米勒德·菲尔莫尔（Millard Fillmore）</td>\n<td style=\"text-align:left\">1850-1853</td>\n<td style=\"text-align:left\">辉格党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:left\">福兰克林·皮尔斯（Franklin Pierce）</td>\n<td style=\"text-align:left\">1853-1857</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\">詹姆斯·布坎南 （James Buchanan）</td>\n<td style=\"text-align:left\">1857-1861</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\">亚伯拉罕·林肯（Abraham Lincoln）</td>\n<td style=\"text-align:left\">1861-1865</td>\n<td style=\"text-align:left\">共和党，国家统一党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:left\">安德鲁·约翰逊（Andrew Johnson）</td>\n<td style=\"text-align:left\">1865-1869</td>\n<td style=\"text-align:left\">民主党，国家统一党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:left\">尤里西斯·格兰特（Ulysses S.Grant）</td>\n<td style=\"text-align:left\">1869-1877</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:left\">拉瑟福德·伯查德·海斯（Rutherford Birchard Hayes）</td>\n<td style=\"text-align:left\">1877-1881</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">20</td>\n<td style=\"text-align:left\">詹姆斯·阿布拉姆·加菲尔德（James Abram Garfield）</td>\n<td style=\"text-align:left\">1881</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:left\">切斯特·艾伦·阿瑟（Chester Alan Arthur）</td>\n<td style=\"text-align:left\">1881-1885</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">22</td>\n<td style=\"text-align:left\">史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland）</td>\n<td style=\"text-align:left\">1885-1889</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">23</td>\n<td style=\"text-align:left\">本杰明·哈里森 （Benjamin Harrison）</td>\n<td style=\"text-align:left\">1889-1893</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">24</td>\n<td style=\"text-align:left\">史蒂芬·格罗佛·克利夫兰（Stephen Grover Cleveland ）</td>\n<td style=\"text-align:left\">1893-1897</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">25</td>\n<td style=\"text-align:left\">威廉·麦金利（William McKinley）</td>\n<td style=\"text-align:left\">1897-1901</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">26</td>\n<td style=\"text-align:left\">西奥多·罗斯福 （Theodore Roosevelt）</td>\n<td style=\"text-align:left\">1901-1909</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">27</td>\n<td style=\"text-align:left\">威廉·霍华德·塔夫脱（William Howard Taft）</td>\n<td style=\"text-align:left\">1909-1913</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">28</td>\n<td style=\"text-align:left\">托马斯·伍德罗·威尔逊（Thomas Woodrow Wilson）</td>\n<td style=\"text-align:left\">1913-1921</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">29</td>\n<td style=\"text-align:left\">沃伦·甘梅利尔·哈定（Warren Gamaliel Harding）</td>\n<td style=\"text-align:left\">1921-1923</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30</td>\n<td style=\"text-align:left\">约翰·卡尔文·柯立芝（John Calvin Coolidge）</td>\n<td style=\"text-align:left\">1923-1929</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">31</td>\n<td style=\"text-align:left\">赫伯特·克拉克·胡佛（Herbert Clark Hoover）</td>\n<td style=\"text-align:left\">1929-1933</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">32</td>\n<td style=\"text-align:left\">富兰克林·德拉诺·罗斯福（Franklin Delano Roosevelt）</td>\n<td style=\"text-align:left\">1933-1945</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">33</td>\n<td style=\"text-align:left\">哈里·S·杜鲁门（Harry S. Truman）</td>\n<td style=\"text-align:left\">1945-1953</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">34</td>\n<td style=\"text-align:left\">德怀特·戴维·艾森豪威尔（Dwight David Eisenhower）</td>\n<td style=\"text-align:left\">1953-1961</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">35</td>\n<td style=\"text-align:left\">约翰·菲茨杰拉德·肯尼迪（John Fitzgerald Kennedy）</td>\n<td style=\"text-align:left\">1961-1963</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">36</td>\n<td style=\"text-align:left\">林登·拜恩斯·约翰逊（Lyndon Baines Johnson）</td>\n<td style=\"text-align:left\">1963-1969</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">37</td>\n<td style=\"text-align:left\">理查德·米尔豪斯·尼克松（Richard Milhous Nixon）</td>\n<td style=\"text-align:left\">1969-1974</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">38</td>\n<td style=\"text-align:left\">杰拉尔德·鲁道夫·福特（Gerald Rudolph Ford）</td>\n<td style=\"text-align:left\">1974-1977</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">39</td>\n<td style=\"text-align:left\">詹姆斯·厄尔··卡特（James Earl Carter ）</td>\n<td style=\"text-align:left\">1977-1981</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40</td>\n<td style=\"text-align:left\">罗纳德·威尔逊·里根（Ronald Wilson Reagan）</td>\n<td style=\"text-align:left\">1981-1989</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">41</td>\n<td style=\"text-align:left\">乔治·赫伯特·沃克·布什（George Herbert Walker Bush）</td>\n<td style=\"text-align:left\">1989-1993</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">42</td>\n<td style=\"text-align:left\">威廉·杰斐逊·克林顿（William Jefferson Clinton）</td>\n<td style=\"text-align:left\">1993-2001</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">43</td>\n<td style=\"text-align:left\">乔治·沃克·布什（George Walker Bush）</td>\n<td style=\"text-align:left\">2001-2009</td>\n<td style=\"text-align:left\">共和党</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">44</td>\n<td style=\"text-align:left\">贝拉克·侯赛因·奥巴马（Barack Hussein Obama）</td>\n<td style=\"text-align:left\">2009-2017</td>\n<td style=\"text-align:left\">民主党</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"vim命令","date":"2016-08-16T06:47:02.000Z","_content":"\n### 查看命令历史\n以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。\n\n### 文件命令集\n| 行为|命令|\n|:----|:---------|\n|打开多个文件 |vim file1 file2 ...|\n|在vim窗口中打开一个新文件|:open file|\n|在新窗口中打开文件|:split file|\n|切换到下一个文件|:bn|\n|切换到上一个文件|:bp|\n\n\n### 拷贝和粘贴\n|命令| 行为|\n|:----|:---------|\n|yy|拷贝当前行|\n|p | 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。|","source":"_posts/vim.md","raw":"---\ntitle: vim命令\ncategories: [vim]\ntags: [vim]\ndate: 2016-08-16 14:47:02\n---\n\n### 查看命令历史\n以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。\n\n### 文件命令集\n| 行为|命令|\n|:----|:---------|\n|打开多个文件 |vim file1 file2 ...|\n|在vim窗口中打开一个新文件|:open file|\n|在新窗口中打开文件|:split file|\n|切换到下一个文件|:bn|\n|切换到上一个文件|:bp|\n\n\n### 拷贝和粘贴\n|命令| 行为|\n|:----|:---------|\n|yy|拷贝当前行|\n|p | 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。|","slug":"vim","published":1,"updated":"2016-09-29T08:03:21.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yoy009hesqrd7ljoec6","content":"<h3 id=\"查看命令历史\"><a href=\"#查看命令历史\" class=\"headerlink\" title=\"查看命令历史\"></a>查看命令历史</h3><p>以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。</p>\n<h3 id=\"文件命令集\"><a href=\"#文件命令集\" class=\"headerlink\" title=\"文件命令集\"></a>文件命令集</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">行为</th>\n<th style=\"text-align:left\">命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">打开多个文件</td>\n<td style=\"text-align:left\">vim file1 file2 …</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在vim窗口中打开一个新文件</td>\n<td style=\"text-align:left\">:open file</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在新窗口中打开文件</td>\n<td style=\"text-align:left\">:split file</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换到下一个文件</td>\n<td style=\"text-align:left\">:bn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换到上一个文件</td>\n<td style=\"text-align:left\">:bp</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"拷贝和粘贴\"><a href=\"#拷贝和粘贴\" class=\"headerlink\" title=\"拷贝和粘贴\"></a>拷贝和粘贴</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">yy</td>\n<td style=\"text-align:left\">拷贝当前行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h3 id=\"查看命令历史\"><a href=\"#查看命令历史\" class=\"headerlink\" title=\"查看命令历史\"></a>查看命令历史</h3><p>以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。</p>\n<h3 id=\"文件命令集\"><a href=\"#文件命令集\" class=\"headerlink\" title=\"文件命令集\"></a>文件命令集</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">行为</th>\n<th style=\"text-align:left\">命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">打开多个文件</td>\n<td style=\"text-align:left\">vim file1 file2 …</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在vim窗口中打开一个新文件</td>\n<td style=\"text-align:left\">:open file</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">在新窗口中打开文件</td>\n<td style=\"text-align:left\">:split file</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换到下一个文件</td>\n<td style=\"text-align:left\">:bn</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">切换到上一个文件</td>\n<td style=\"text-align:left\">:bp</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"拷贝和粘贴\"><a href=\"#拷贝和粘贴\" class=\"headerlink\" title=\"拷贝和粘贴\"></a>拷贝和粘贴</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">行为</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">yy</td>\n<td style=\"text-align:left\">拷贝当前行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">p</td>\n<td style=\"text-align:left\">在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"性能概述","date":"2016-11-03T04:11:59.000Z","description":null,"_content":"\n程序的性能通过以下几个方面来表现：\n- 执行速度：\n- 内存分配：\n- 启动时间：\n- 负载承受能力：\n\n性能调优的层次\n- 设计调优\n- 代码调优\n- JVM调优\n- 数据库调优\n- 操作系统调优","source":"_posts/xingnen.md","raw":"---\ntitle: 性能概述\ncategories: [java]\ntags: [java]\ndate: 2016-11-03 12:11:59\ndescription:\n---\n\n程序的性能通过以下几个方面来表现：\n- 执行速度：\n- 内存分配：\n- 启动时间：\n- 负载承受能力：\n\n性能调优的层次\n- 设计调优\n- 代码调优\n- JVM调优\n- 数据库调优\n- 操作系统调优","slug":"xingnen","published":1,"updated":"2016-11-03T08:21:02.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yp1009mesqr32iqg5od","content":"<p>程序的性能通过以下几个方面来表现：</p>\n<ul>\n<li>执行速度：</li>\n<li>内存分配：</li>\n<li>启动时间：</li>\n<li>负载承受能力：</li>\n</ul>\n<p>性能调优的层次</p>\n<ul>\n<li>设计调优</li>\n<li>代码调优</li>\n<li>JVM调优</li>\n<li>数据库调优</li>\n<li>操作系统调优</li>\n</ul>\n","excerpt":"","more":"<p>程序的性能通过以下几个方面来表现：</p>\n<ul>\n<li>执行速度：</li>\n<li>内存分配：</li>\n<li>启动时间：</li>\n<li>负载承受能力：</li>\n</ul>\n<p>性能调优的层次</p>\n<ul>\n<li>设计调优</li>\n<li>代码调优</li>\n<li>JVM调优</li>\n<li>数据库调优</li>\n<li>操作系统调优</li>\n</ul>\n"},{"title":"改善性能的几个技巧","date":"2016-11-04T07:46:16.000Z","description":"略","_content":"\n### 慎用异常\n\n### 使用局部变量\n\n### 位运算代替乘除法\n\n### 替换switch\n\n### 一维数组代替二维数组\n\n### 提取表达式\n\n### 展开循环\n\n### 布尔运算代替位运算\n\n### 使用arrayCopy\n\n### 使用Buffer进行I/O操作\n\n### 使用clone代替new\n\n### 静态方法代替实例方法\n\n","source":"_posts/xingnen2.md","raw":"---\ntitle: 改善性能的几个技巧\ncategories: [java]\ntags: [java]\ndate: 2016-11-04 15:46:16\ndescription: 略\n---\n\n### 慎用异常\n\n### 使用局部变量\n\n### 位运算代替乘除法\n\n### 替换switch\n\n### 一维数组代替二维数组\n\n### 提取表达式\n\n### 展开循环\n\n### 布尔运算代替位运算\n\n### 使用arrayCopy\n\n### 使用Buffer进行I/O操作\n\n### 使用clone代替new\n\n### 静态方法代替实例方法\n\n","slug":"xingnen2","published":1,"updated":"2016-11-09T03:30:19.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yp3009pesqrptlgvx3n","content":"<h3 id=\"慎用异常\"><a href=\"#慎用异常\" class=\"headerlink\" title=\"慎用异常\"></a>慎用异常</h3><h3 id=\"使用局部变量\"><a href=\"#使用局部变量\" class=\"headerlink\" title=\"使用局部变量\"></a>使用局部变量</h3><h3 id=\"位运算代替乘除法\"><a href=\"#位运算代替乘除法\" class=\"headerlink\" title=\"位运算代替乘除法\"></a>位运算代替乘除法</h3><h3 id=\"替换switch\"><a href=\"#替换switch\" class=\"headerlink\" title=\"替换switch\"></a>替换switch</h3><h3 id=\"一维数组代替二维数组\"><a href=\"#一维数组代替二维数组\" class=\"headerlink\" title=\"一维数组代替二维数组\"></a>一维数组代替二维数组</h3><h3 id=\"提取表达式\"><a href=\"#提取表达式\" class=\"headerlink\" title=\"提取表达式\"></a>提取表达式</h3><h3 id=\"展开循环\"><a href=\"#展开循环\" class=\"headerlink\" title=\"展开循环\"></a>展开循环</h3><h3 id=\"布尔运算代替位运算\"><a href=\"#布尔运算代替位运算\" class=\"headerlink\" title=\"布尔运算代替位运算\"></a>布尔运算代替位运算</h3><h3 id=\"使用arrayCopy\"><a href=\"#使用arrayCopy\" class=\"headerlink\" title=\"使用arrayCopy\"></a>使用arrayCopy</h3><h3 id=\"使用Buffer进行I-O操作\"><a href=\"#使用Buffer进行I-O操作\" class=\"headerlink\" title=\"使用Buffer进行I/O操作\"></a>使用Buffer进行I/O操作</h3><h3 id=\"使用clone代替new\"><a href=\"#使用clone代替new\" class=\"headerlink\" title=\"使用clone代替new\"></a>使用clone代替new</h3><h3 id=\"静态方法代替实例方法\"><a href=\"#静态方法代替实例方法\" class=\"headerlink\" title=\"静态方法代替实例方法\"></a>静态方法代替实例方法</h3>","excerpt":"","more":"<h3 id=\"慎用异常\"><a href=\"#慎用异常\" class=\"headerlink\" title=\"慎用异常\"></a>慎用异常</h3><h3 id=\"使用局部变量\"><a href=\"#使用局部变量\" class=\"headerlink\" title=\"使用局部变量\"></a>使用局部变量</h3><h3 id=\"位运算代替乘除法\"><a href=\"#位运算代替乘除法\" class=\"headerlink\" title=\"位运算代替乘除法\"></a>位运算代替乘除法</h3><h3 id=\"替换switch\"><a href=\"#替换switch\" class=\"headerlink\" title=\"替换switch\"></a>替换switch</h3><h3 id=\"一维数组代替二维数组\"><a href=\"#一维数组代替二维数组\" class=\"headerlink\" title=\"一维数组代替二维数组\"></a>一维数组代替二维数组</h3><h3 id=\"提取表达式\"><a href=\"#提取表达式\" class=\"headerlink\" title=\"提取表达式\"></a>提取表达式</h3><h3 id=\"展开循环\"><a href=\"#展开循环\" class=\"headerlink\" title=\"展开循环\"></a>展开循环</h3><h3 id=\"布尔运算代替位运算\"><a href=\"#布尔运算代替位运算\" class=\"headerlink\" title=\"布尔运算代替位运算\"></a>布尔运算代替位运算</h3><h3 id=\"使用arrayCopy\"><a href=\"#使用arrayCopy\" class=\"headerlink\" title=\"使用arrayCopy\"></a>使用arrayCopy</h3><h3 id=\"使用Buffer进行I-O操作\"><a href=\"#使用Buffer进行I-O操作\" class=\"headerlink\" title=\"使用Buffer进行I/O操作\"></a>使用Buffer进行I/O操作</h3><h3 id=\"使用clone代替new\"><a href=\"#使用clone代替new\" class=\"headerlink\" title=\"使用clone代替new\"></a>使用clone代替new</h3><h3 id=\"静态方法代替实例方法\"><a href=\"#静态方法代替实例方法\" class=\"headerlink\" title=\"静态方法代替实例方法\"></a>静态方法代替实例方法</h3>"},{"title":"常用xpath例子","date":"2017-08-10T02:40:40.000Z","description":"常用xpath例子","_content":"\n常用xpath例子\n\n根据字符串匹配节点，通过contains()、text()匹配\n.//*[@id='detail_all']/div[1]/ul/li[contains(text(), '字 数：')]/text()\n\n节点属性不包含*字符串，通过not()、contains()匹配\n`.//[@id=’con_ListStyleTab4A_1’]/p[not(contains(@class, ‘title’))]/a[@class=’Author’]/text()`\n\n截取字符串匹配\nsubstring-before(//div[@class='content']/ul/li[6],',')\nsubstring(.//h2/../p/span[contains(text(), '字数：')]/text(), '4')\n\n索引匹配末尾节点，通过last()匹配\n.//div[last()]/div[@class='show_info_right max_width']/text()\n\n通过..向上级查找匹配\n.//h1/../div[@class='booksub']/span/span/text()\n\n获取过个节点下的内容，通过//node()/text()可以获取当前节点及其子节点的内容。\n.//*[@id='job_detail']/dd[@class='job-advantage']//node()/text()\n\n有的时候页面中一系列数据下面并不一定包含某些字段，这时我们通过contains()来匹配包含某些关键字的节点来寻找对应的另一个节点。\n.//div[@class='infobox']//node()[contains(text(), '户型')]/../node()/text()","source":"_posts/xpath.md","raw":"---\ntitle: 常用xpath例子\ncategories: [xpath]\ntags: [xpath]\ndate: 2017-08-10 10:40:40\ndescription: 常用xpath例子\n---\n\n常用xpath例子\n\n根据字符串匹配节点，通过contains()、text()匹配\n.//*[@id='detail_all']/div[1]/ul/li[contains(text(), '字 数：')]/text()\n\n节点属性不包含*字符串，通过not()、contains()匹配\n`.//[@id=’con_ListStyleTab4A_1’]/p[not(contains(@class, ‘title’))]/a[@class=’Author’]/text()`\n\n截取字符串匹配\nsubstring-before(//div[@class='content']/ul/li[6],',')\nsubstring(.//h2/../p/span[contains(text(), '字数：')]/text(), '4')\n\n索引匹配末尾节点，通过last()匹配\n.//div[last()]/div[@class='show_info_right max_width']/text()\n\n通过..向上级查找匹配\n.//h1/../div[@class='booksub']/span/span/text()\n\n获取过个节点下的内容，通过//node()/text()可以获取当前节点及其子节点的内容。\n.//*[@id='job_detail']/dd[@class='job-advantage']//node()/text()\n\n有的时候页面中一系列数据下面并不一定包含某些字段，这时我们通过contains()来匹配包含某些关键字的节点来寻找对应的另一个节点。\n.//div[@class='infobox']//node()[contains(text(), '户型')]/../node()/text()","slug":"xpath","published":1,"updated":"2017-08-10T02:44:19.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yp6009uesqropxptmw6","content":"<p>常用xpath例子</p>\n<p>根据字符串匹配节点，通过contains()、text()匹配<br>.//*[@id=’detail_all’]/div[1]/ul/li[contains(text(), ‘字 数：’)]/text()</p>\n<p>节点属性不包含*字符串，通过not()、contains()匹配<br><code>.//[@id=’con_ListStyleTab4A_1’]/p[not(contains(@class, ‘title’))]/a[@class=’Author’]/text()</code></p>\n<p>截取字符串匹配<br>substring-before(//div[@class=’content’]/ul/li[6],’,’)<br>substring(.//h2/../p/span[contains(text(), ‘字数：’)]/text(), ‘4’)</p>\n<p>索引匹配末尾节点，通过last()匹配<br>.//div[last()]/div[@class=’show_info_right max_width’]/text()</p>\n<p>通过..向上级查找匹配<br>.//h1/../div[@class=’booksub’]/span/span/text()</p>\n<p>获取过个节点下的内容，通过//node()/text()可以获取当前节点及其子节点的内容。<br>.//*[@id=’job_detail’]/dd[@class=’job-advantage’]//node()/text()</p>\n<p>有的时候页面中一系列数据下面并不一定包含某些字段，这时我们通过contains()来匹配包含某些关键字的节点来寻找对应的另一个节点。<br>.//div[@class=’infobox’]//node()[contains(text(), ‘户型’)]/../node()/text()</p>\n","excerpt":"","more":"<p>常用xpath例子</p>\n<p>根据字符串匹配节点，通过contains()、text()匹配<br>.//*[@id=’detail_all’]/div[1]/ul/li[contains(text(), ‘字 数：’)]/text()</p>\n<p>节点属性不包含*字符串，通过not()、contains()匹配<br><code>.//[@id=’con_ListStyleTab4A_1’]/p[not(contains(@class, ‘title’))]/a[@class=’Author’]/text()</code></p>\n<p>截取字符串匹配<br>substring-before(//div[@class=’content’]/ul/li[6],’,’)<br>substring(.//h2/../p/span[contains(text(), ‘字数：’)]/text(), ‘4’)</p>\n<p>索引匹配末尾节点，通过last()匹配<br>.//div[last()]/div[@class=’show_info_right max_width’]/text()</p>\n<p>通过..向上级查找匹配<br>.//h1/../div[@class=’booksub’]/span/span/text()</p>\n<p>获取过个节点下的内容，通过//node()/text()可以获取当前节点及其子节点的内容。<br>.//*[@id=’job_detail’]/dd[@class=’job-advantage’]//node()/text()</p>\n<p>有的时候页面中一系列数据下面并不一定包含某些字段，这时我们通过contains()来匹配包含某些关键字的节点来寻找对应的另一个节点。<br>.//div[@class=’infobox’]//node()[contains(text(), ‘户型’)]/../node()/text()</p>\n"},{"title":"我的阴阳师之路","date":"2017-03-20T05:53:35.000Z","description":null,"_content":"\n    ","source":"_posts/yinyangshi.md","raw":"---\ntitle: 我的阴阳师之路\ncategories: [游戏]\ntags: [游戏]\ndate: 2017-03-20 13:53:35\ndescription:\n---\n\n    ","slug":"yinyangshi","published":1,"updated":"2017-03-20T05:55:09.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yp8009xesqrxay1dje2","content":"","excerpt":"","more":""},{"title":"zookeeper选举规则","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n### zookeeper选举规则\n\n\n\n角色：\n\n1.LOOKING：竞选\n\n​      2.OBSERVING：观察\n\n​      3.FOLLOWING：跟随者\n\n​      4.LEADER：领导者\n\n投票信息：\n\n​      1.logicalclock（electionEpoch）：本地选举周期，每次投票都会自增\n\n​      2.epoch（peerEpoch）：选举周期，每次选举最终确定完leader结束选举流程时会自增(真正zxid的前32位)\n\n​      3.zxid：数据ID，每次数据变动都会自增（真正zxid的后32位，zxid一共64位）\n\n​      4.sid：该投票信息所属的serverId\n\n​      5.leader：提议的leader（被提议的server的serverId，即sid）\n\n没有leader时\n\n投票比较规则：\n\n​     1.epoch大的胜出，否则进行步骤2\n\n​     2.zxid大的胜出，否则进行步骤3\n\n​     3.sid大的胜出\n\n","source":"_posts/zookeeper选举规则.md","raw":"---\ntitle: zookeeper选举规则\ncategories: [zookeeper]\ntags: [zookeeper]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n### zookeeper选举规则\n\n\n\n角色：\n\n1.LOOKING：竞选\n\n​      2.OBSERVING：观察\n\n​      3.FOLLOWING：跟随者\n\n​      4.LEADER：领导者\n\n投票信息：\n\n​      1.logicalclock（electionEpoch）：本地选举周期，每次投票都会自增\n\n​      2.epoch（peerEpoch）：选举周期，每次选举最终确定完leader结束选举流程时会自增(真正zxid的前32位)\n\n​      3.zxid：数据ID，每次数据变动都会自增（真正zxid的后32位，zxid一共64位）\n\n​      4.sid：该投票信息所属的serverId\n\n​      5.leader：提议的leader（被提议的server的serverId，即sid）\n\n没有leader时\n\n投票比较规则：\n\n​     1.epoch大的胜出，否则进行步骤2\n\n​     2.zxid大的胜出，否则进行步骤3\n\n​     3.sid大的胜出\n\n","slug":"zookeeper选举规则","published":1,"updated":"2020-09-28T10:42:52.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ypc00a2esqrbm101l8m","content":"<h3 id=\"zookeeper选举规则\"><a href=\"#zookeeper选举规则\" class=\"headerlink\" title=\"zookeeper选举规则\"></a>zookeeper选举规则</h3><p>角色：</p>\n<p>1.LOOKING：竞选</p>\n<p>​      2.OBSERVING：观察</p>\n<p>​      3.FOLLOWING：跟随者</p>\n<p>​      4.LEADER：领导者</p>\n<p>投票信息：</p>\n<p>​      1.logicalclock（electionEpoch）：本地选举周期，每次投票都会自增</p>\n<p>​      2.epoch（peerEpoch）：选举周期，每次选举最终确定完leader结束选举流程时会自增(真正zxid的前32位)</p>\n<p>​      3.zxid：数据ID，每次数据变动都会自增（真正zxid的后32位，zxid一共64位）</p>\n<p>​      4.sid：该投票信息所属的serverId</p>\n<p>​      5.leader：提议的leader（被提议的server的serverId，即sid）</p>\n<p>没有leader时</p>\n<p>投票比较规则：</p>\n<p>​     1.epoch大的胜出，否则进行步骤2</p>\n<p>​     2.zxid大的胜出，否则进行步骤3</p>\n<p>​     3.sid大的胜出</p>\n","excerpt":"","more":"<h3 id=\"zookeeper选举规则\"><a href=\"#zookeeper选举规则\" class=\"headerlink\" title=\"zookeeper选举规则\"></a>zookeeper选举规则</h3><p>角色：</p>\n<p>1.LOOKING：竞选</p>\n<p>​      2.OBSERVING：观察</p>\n<p>​      3.FOLLOWING：跟随者</p>\n<p>​      4.LEADER：领导者</p>\n<p>投票信息：</p>\n<p>​      1.logicalclock（electionEpoch）：本地选举周期，每次投票都会自增</p>\n<p>​      2.epoch（peerEpoch）：选举周期，每次选举最终确定完leader结束选举流程时会自增(真正zxid的前32位)</p>\n<p>​      3.zxid：数据ID，每次数据变动都会自增（真正zxid的后32位，zxid一共64位）</p>\n<p>​      4.sid：该投票信息所属的serverId</p>\n<p>​      5.leader：提议的leader（被提议的server的serverId，即sid）</p>\n<p>没有leader时</p>\n<p>投票比较规则：</p>\n<p>​     1.epoch大的胜出，否则进行步骤2</p>\n<p>​     2.zxid大的胜出，否则进行步骤3</p>\n<p>​     3.sid大的胜出</p>\n"},{"title":"jps","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\njps\n\njmap -histo [pid] > pp.txt //快照","source":"_posts/使用jvm工具排查故障.md","raw":"---\ntitle: jps\ncategories: [jps]\ntags: [jps]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\njps\n\njmap -histo [pid] > pp.txt //快照","slug":"使用jvm工具排查故障","published":1,"updated":"2020-09-28T10:40:56.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ype00a5esqrq9hgbygq","content":"<p>jps</p>\n<p>jmap -histo [pid] &gt; pp.txt //快照</p>\n","excerpt":"","more":"<p>jps</p>\n<p>jmap -histo [pid] &gt; pp.txt //快照</p>\n"},{"title":"使用maxwell实时同步mysql数据到消息队列(rabbitMQ)","date":"2020-07-27T03:02:09.000Z","description":null,"_content":"\n\n\n## 使用maxwell实时同步mysql数据到消息队列(rabbitMQ)\n\nmaxwell（麦克斯韦）官网：http://maxwells-daemon.io/\n<!-- more -->\n### 配置mysql\n\n需要mysql开启binlog，而binlog默认是关闭的，需要开启，并且为了保证*同步数据的一致性*，使用的日志格式为*row-based replication(RBR)*，新建或修改`my.conf`开启binlog。\n\n```\n[mysqld]\nlog-bin=mysql-bin #添加这一行就ok\nbinlog-format=ROW #选择row模式\nserver_id=1 #随机指定一个不能和其他集群中机器重名的字符串，如果只有一台机器，那就可以随便指定了\n```\n\n重启mysql, 查询是否已开启bin\n\n```sql\nshow variables like '%log_bin%'\n```\n\n| Variable_name | value |\n| ------------- | ----- |\n| log_bin       | on    |\n| sql_log_bin   | on    |\n\n### 配置jdk环境（略）\n\n### 安装Maxwell\n\n在https://github.com/zendesk/maxwell/releases这里下载对应版本。\n\n解压，修改config.properties.example为config.properties，然后根据自己的实际情况修改配置\n\n### 配置rabbitMQ环境\n\n### 配置maxwell发送消息到rabbitMQ\n\n修改maxwell的config.properties\n\n```properties\n# tl;dr config 生产环境配置为info级别\nlog_level=DEBUG\n \nproducer=rabbitmq\n \n# mysql login info, mysql用户必须拥有读取binlog权限和新建库表的权限\nhost=127.0.0.1\nuser=user\npassword=pwd\n \noutput_nulls=true\n# options to pass into the jdbc connection, given as opt=val&opt2=val2\n#jdbc_options=opt1=100&opt2=hello\njdbc_options=autoReconnet=true\n \n#需要同步的数据库，表，及不包含的字段\n#filter=exclude: *.*, include: foo.*, include: bar.baz\nfilter=exclude: *.*,include: minifanka.*\n \n#replica_server_id 和 client_id 唯一标示，用于集群部署\nreplica_server_id=64\nclient_id=maxwell_dev\n \nmetrics_type=http\nmetrics_slf4j_interval=60\nhttp_port=8111\nhttp_diagnostic=true # default false\n \n#rabbitmq\nrabbitmq_host=10.255.200.161\nrabbitmq_port=5672\nrabbitmq_user=admin\nrabbitmq_pass=admin123\nrabbitmq_virtual_host=/\nrabbitmq_exchange=maxwell\nrabbitmq_exchange_type=topic\nrabbitmq_exchange_durable=false\nrabbitmq_exchange_autodelete=false\nrabbitmq_routing_key_template=%db%.%table%\nrabbitmq_message_persistent=false\nrabbitmq_declare_exchange=true\n```\n\n\n\n启动maxwell\n\n```bash\n./bin/maxwell\n```\n\n启动成功后，会自动生成maxwell库，该库记录了maxwell同步的状态，最后一次同步的id等等信息，在主库失败或同步异常后，只要maxwell库存在，下次同步会根据最后一次同步的id。\n\nrabbitMQ控制台中会自动创建名称为maxwell的exchange（该exchange为config.properties中配置的）\n\n新建Queue并绑定exchange，并设置routingkey为%db%.%table%（该routingkey为config.properties中配置）\n\n可以使用rabbitmqctl 创建队列，交换机\n\n- 创建交换机\n\n```sh\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, direct, true, false, false, []).'\n```\n\n- 创建队列\n\n```sh\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, true, false, [], none).'\n```\n\n- 绑定队列和交换机\n\n```sh\nrabbitmqctl eval 'rabbit_binding:add({binding, {resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, <<\"ac.routing.key.alarm\">>, {resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, []}).'\n```\n\n这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.\n\n\n\n### MQ消费端\n\n新建一个MaxwellData,接收数据\n\n```java\npublic class MaxwellData implements Serializable {\n    private String type;\n    private String database;\n    private String table;\n    private Map<String, Object> data;\n    private Map<String, Object> old;\n \n    public MaxwellData() {\n    }\n \n    public String getType() {\n        return this.type;\n    }\n \n    public void setType(String type) {\n        this.type = type;\n    }\n \n    public String getDatabase() {\n        return this.database;\n    }\n \n    public void setDatabase(String database) {\n        this.database = database;\n    }\n \n    public String getTable() {\n        return this.table;\n    }\n \n    public void setTable(String table) {\n        this.table = table;\n    }\n \n    public Map<String, Object> getData() {\n        return this.data;\n    }\n \n    public void setData(Map<String, Object> data) {\n        this.data = data;\n    }\n \n    public Map<String, Object> getOld() {\n        return this.old;\n    }\n \n    public void setOld(Map<String, Object> old) {\n        this.old = old;\n    }\n }\n```\n\n消费者代码\n\n```java\n    @RabbitHandler\n    @RabbitListener(queues = \"新建的队列名\")\n    public void process(byte[] data) {\n        String s = new String(data);\n        MaxwellData maxwellData = decodeMsg(s);\n        logger.info(\"maxwellData:\" + maxwellData);\n        //to do\n    }\n    private MaxwellData decodeMsg(String msg) {\n        if (msg == null) {\n            return null;\n        }\n        return JSON.parseObject(msg, MaxwellData.class);\n    }\n\n```\n\n### 全量同步\n\n使用maxwell-bootstrap命令\n\n./bin/maxwell-bootstrap --database 库名 --table 表名 --host 127.0.0.1 --user 用户 --password 密码 --client_id  config.properties配置的client_id\n\n同步db.table表的所有数据，并指定client_id示maxwell_dev的maxwell执行同步\n\n上一个命令先开着，然后再启动client_id=maxwell_dev的maxwell\n\n./bin/maxwell --client_id maxwell_dev\n\n等待执行完成即可\n\n\n\n### maxwell异常重启\n\n如果maxwell挂掉，查询Maxwell数据库中的positions表 \n\n ![image-20200727094000939](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200727094000939.png)\n\n执行nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 >>server.log 2>&1 &\n\n其中\n–init_position=**mysql-bin.000004:4:0**\n**init_position参数mysql-bin.000004:4:0分别为：binlog文件名、position、mawell hearbeat**\n\n\nnohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 >>server.log 2>&1 &\n\n\n\n\n\n","source":"_posts/使用maxwell实时同步mysql数据到消息队列(rabbitMQ).md","raw":"---\ntitle: 使用maxwell实时同步mysql数据到消息队列(rabbitMQ)\ncategories: [maxwell]\ntags: [maxwell,mysql]\ndate: 2020-07-27 11:02:09\ndescription:\n---\n\n\n\n## 使用maxwell实时同步mysql数据到消息队列(rabbitMQ)\n\nmaxwell（麦克斯韦）官网：http://maxwells-daemon.io/\n<!-- more -->\n### 配置mysql\n\n需要mysql开启binlog，而binlog默认是关闭的，需要开启，并且为了保证*同步数据的一致性*，使用的日志格式为*row-based replication(RBR)*，新建或修改`my.conf`开启binlog。\n\n```\n[mysqld]\nlog-bin=mysql-bin #添加这一行就ok\nbinlog-format=ROW #选择row模式\nserver_id=1 #随机指定一个不能和其他集群中机器重名的字符串，如果只有一台机器，那就可以随便指定了\n```\n\n重启mysql, 查询是否已开启bin\n\n```sql\nshow variables like '%log_bin%'\n```\n\n| Variable_name | value |\n| ------------- | ----- |\n| log_bin       | on    |\n| sql_log_bin   | on    |\n\n### 配置jdk环境（略）\n\n### 安装Maxwell\n\n在https://github.com/zendesk/maxwell/releases这里下载对应版本。\n\n解压，修改config.properties.example为config.properties，然后根据自己的实际情况修改配置\n\n### 配置rabbitMQ环境\n\n### 配置maxwell发送消息到rabbitMQ\n\n修改maxwell的config.properties\n\n```properties\n# tl;dr config 生产环境配置为info级别\nlog_level=DEBUG\n \nproducer=rabbitmq\n \n# mysql login info, mysql用户必须拥有读取binlog权限和新建库表的权限\nhost=127.0.0.1\nuser=user\npassword=pwd\n \noutput_nulls=true\n# options to pass into the jdbc connection, given as opt=val&opt2=val2\n#jdbc_options=opt1=100&opt2=hello\njdbc_options=autoReconnet=true\n \n#需要同步的数据库，表，及不包含的字段\n#filter=exclude: *.*, include: foo.*, include: bar.baz\nfilter=exclude: *.*,include: minifanka.*\n \n#replica_server_id 和 client_id 唯一标示，用于集群部署\nreplica_server_id=64\nclient_id=maxwell_dev\n \nmetrics_type=http\nmetrics_slf4j_interval=60\nhttp_port=8111\nhttp_diagnostic=true # default false\n \n#rabbitmq\nrabbitmq_host=10.255.200.161\nrabbitmq_port=5672\nrabbitmq_user=admin\nrabbitmq_pass=admin123\nrabbitmq_virtual_host=/\nrabbitmq_exchange=maxwell\nrabbitmq_exchange_type=topic\nrabbitmq_exchange_durable=false\nrabbitmq_exchange_autodelete=false\nrabbitmq_routing_key_template=%db%.%table%\nrabbitmq_message_persistent=false\nrabbitmq_declare_exchange=true\n```\n\n\n\n启动maxwell\n\n```bash\n./bin/maxwell\n```\n\n启动成功后，会自动生成maxwell库，该库记录了maxwell同步的状态，最后一次同步的id等等信息，在主库失败或同步异常后，只要maxwell库存在，下次同步会根据最后一次同步的id。\n\nrabbitMQ控制台中会自动创建名称为maxwell的exchange（该exchange为config.properties中配置的）\n\n新建Queue并绑定exchange，并设置routingkey为%db%.%table%（该routingkey为config.properties中配置）\n\n可以使用rabbitmqctl 创建队列，交换机\n\n- 创建交换机\n\n```sh\nrabbitmqctl eval 'rabbit_exchange:declare({resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, direct, true, false, false, []).'\n```\n\n- 创建队列\n\n```sh\nrabbitmqctl eval 'rabbit_amqqueue:declare({resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, true, false, [], none).'\n```\n\n- 绑定队列和交换机\n\n```sh\nrabbitmqctl eval 'rabbit_binding:add({binding, {resource, <<\"test\">>, exchange, <<\"ac.exchange.alarm\">>}, <<\"ac.routing.key.alarm\">>, {resource, <<\"test\">>, queue, <<\"ac.queue.alarm\">>}, []}).'\n```\n\n这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.\n\n\n\n### MQ消费端\n\n新建一个MaxwellData,接收数据\n\n```java\npublic class MaxwellData implements Serializable {\n    private String type;\n    private String database;\n    private String table;\n    private Map<String, Object> data;\n    private Map<String, Object> old;\n \n    public MaxwellData() {\n    }\n \n    public String getType() {\n        return this.type;\n    }\n \n    public void setType(String type) {\n        this.type = type;\n    }\n \n    public String getDatabase() {\n        return this.database;\n    }\n \n    public void setDatabase(String database) {\n        this.database = database;\n    }\n \n    public String getTable() {\n        return this.table;\n    }\n \n    public void setTable(String table) {\n        this.table = table;\n    }\n \n    public Map<String, Object> getData() {\n        return this.data;\n    }\n \n    public void setData(Map<String, Object> data) {\n        this.data = data;\n    }\n \n    public Map<String, Object> getOld() {\n        return this.old;\n    }\n \n    public void setOld(Map<String, Object> old) {\n        this.old = old;\n    }\n }\n```\n\n消费者代码\n\n```java\n    @RabbitHandler\n    @RabbitListener(queues = \"新建的队列名\")\n    public void process(byte[] data) {\n        String s = new String(data);\n        MaxwellData maxwellData = decodeMsg(s);\n        logger.info(\"maxwellData:\" + maxwellData);\n        //to do\n    }\n    private MaxwellData decodeMsg(String msg) {\n        if (msg == null) {\n            return null;\n        }\n        return JSON.parseObject(msg, MaxwellData.class);\n    }\n\n```\n\n### 全量同步\n\n使用maxwell-bootstrap命令\n\n./bin/maxwell-bootstrap --database 库名 --table 表名 --host 127.0.0.1 --user 用户 --password 密码 --client_id  config.properties配置的client_id\n\n同步db.table表的所有数据，并指定client_id示maxwell_dev的maxwell执行同步\n\n上一个命令先开着，然后再启动client_id=maxwell_dev的maxwell\n\n./bin/maxwell --client_id maxwell_dev\n\n等待执行完成即可\n\n\n\n### maxwell异常重启\n\n如果maxwell挂掉，查询Maxwell数据库中的positions表 \n\n ![image-20200727094000939](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200727094000939.png)\n\n执行nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 >>server.log 2>&1 &\n\n其中\n–init_position=**mysql-bin.000004:4:0**\n**init_position参数mysql-bin.000004:4:0分别为：binlog文件名、position、mawell hearbeat**\n\n\nnohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 >>server.log 2>&1 &\n\n\n\n\n\n","slug":"使用maxwell实时同步mysql数据到消息队列(rabbitMQ)","published":1,"updated":"2020-08-04T05:11:06.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yph00aaesqr45ujez8k","content":"<h2 id=\"使用maxwell实时同步mysql数据到消息队列-rabbitMQ\"><a href=\"#使用maxwell实时同步mysql数据到消息队列-rabbitMQ\" class=\"headerlink\" title=\"使用maxwell实时同步mysql数据到消息队列(rabbitMQ)\"></a>使用maxwell实时同步mysql数据到消息队列(rabbitMQ)</h2><p>maxwell（麦克斯韦）官网：<a href=\"http://maxwells-daemon.io/\" target=\"_blank\" rel=\"external\">http://maxwells-daemon.io/</a><br><a id=\"more\"></a></p>\n<h3 id=\"配置mysql\"><a href=\"#配置mysql\" class=\"headerlink\" title=\"配置mysql\"></a>配置mysql</h3><p>需要mysql开启binlog，而binlog默认是关闭的，需要开启，并且为了保证<em>同步数据的一致性</em>，使用的日志格式为<em>row-based replication(RBR)</em>，新建或修改<code>my.conf</code>开启binlog。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin #添加这一行就ok</div><div class=\"line\">binlog-format=ROW #选择row模式</div><div class=\"line\">server_id=1 #随机指定一个不能和其他集群中机器重名的字符串，如果只有一台机器，那就可以随便指定了</div></pre></td></tr></table></figure>\n<p>重启mysql, 查询是否已开启bin</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%log_bin%'</span></div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log_bin</td>\n<td>on</td>\n</tr>\n<tr>\n<td>sql_log_bin</td>\n<td>on</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"配置jdk环境（略）\"><a href=\"#配置jdk环境（略）\" class=\"headerlink\" title=\"配置jdk环境（略）\"></a>配置jdk环境（略）</h3><h3 id=\"安装Maxwell\"><a href=\"#安装Maxwell\" class=\"headerlink\" title=\"安装Maxwell\"></a>安装Maxwell</h3><p>在<a href=\"https://github.com/zendesk/maxwell/releases这里下载对应版本。\" target=\"_blank\" rel=\"external\">https://github.com/zendesk/maxwell/releases这里下载对应版本。</a></p>\n<p>解压，修改config.properties.example为config.properties，然后根据自己的实际情况修改配置</p>\n<h3 id=\"配置rabbitMQ环境\"><a href=\"#配置rabbitMQ环境\" class=\"headerlink\" title=\"配置rabbitMQ环境\"></a>配置rabbitMQ环境</h3><h3 id=\"配置maxwell发送消息到rabbitMQ\"><a href=\"#配置maxwell发送消息到rabbitMQ\" class=\"headerlink\" title=\"配置maxwell发送消息到rabbitMQ\"></a>配置maxwell发送消息到rabbitMQ</h3><p>修改maxwell的config.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tl;dr config 生产环境配置为info级别</div><div class=\"line\">log_level=DEBUG</div><div class=\"line\"> </div><div class=\"line\">producer=rabbitmq</div><div class=\"line\"> </div><div class=\"line\"># mysql login info, mysql用户必须拥有读取binlog权限和新建库表的权限</div><div class=\"line\">host=127.0.0.1</div><div class=\"line\">user=user</div><div class=\"line\">password=pwd</div><div class=\"line\"> </div><div class=\"line\">output_nulls=true</div><div class=\"line\"># options to pass into the jdbc connection, given as opt=val&amp;opt2=val2</div><div class=\"line\">#jdbc_options=opt1=100&amp;opt2=hello</div><div class=\"line\">jdbc_options=autoReconnet=true</div><div class=\"line\"> </div><div class=\"line\">#需要同步的数据库，表，及不包含的字段</div><div class=\"line\">#filter=exclude: *.*, include: foo.*, include: bar.baz</div><div class=\"line\">filter=exclude: *.*,include: minifanka.*</div><div class=\"line\"> </div><div class=\"line\">#replica_server_id 和 client_id 唯一标示，用于集群部署</div><div class=\"line\">replica_server_id=64</div><div class=\"line\">client_id=maxwell_dev</div><div class=\"line\"> </div><div class=\"line\">metrics_type=http</div><div class=\"line\">metrics_slf4j_interval=60</div><div class=\"line\">http_port=8111</div><div class=\"line\">http_diagnostic=true # default false</div><div class=\"line\"> </div><div class=\"line\">#rabbitmq</div><div class=\"line\">rabbitmq_host=10.255.200.161</div><div class=\"line\">rabbitmq_port=5672</div><div class=\"line\">rabbitmq_user=admin</div><div class=\"line\">rabbitmq_pass=admin123</div><div class=\"line\">rabbitmq_virtual_host=/</div><div class=\"line\">rabbitmq_exchange=maxwell</div><div class=\"line\">rabbitmq_exchange_type=topic</div><div class=\"line\">rabbitmq_exchange_durable=false</div><div class=\"line\">rabbitmq_exchange_autodelete=false</div><div class=\"line\">rabbitmq_routing_key_template=%db%.%table%</div><div class=\"line\">rabbitmq_message_persistent=false</div><div class=\"line\">rabbitmq_declare_exchange=true</div></pre></td></tr></table></figure>\n<p>启动maxwell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/maxwell</div></pre></td></tr></table></figure>\n<p>启动成功后，会自动生成maxwell库，该库记录了maxwell同步的状态，最后一次同步的id等等信息，在主库失败或同步异常后，只要maxwell库存在，下次同步会根据最后一次同步的id。</p>\n<p>rabbitMQ控制台中会自动创建名称为maxwell的exchange（该exchange为config.properties中配置的）</p>\n<p>新建Queue并绑定exchange，并设置routingkey为%db%.%table%（该routingkey为config.properties中配置）</p>\n<p>可以使用rabbitmqctl 创建队列，交换机</p>\n<ul>\n<li>创建交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_exchange:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, direct, true, false, false, []).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>创建队列</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_amqqueue:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, true, false, [], none).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>绑定队列和交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_binding:add(&#123;binding, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, &lt;&lt;\"ac.routing.key.alarm\"&gt;&gt;, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, []&#125;).'</span></div></pre></td></tr></table></figure>\n<p>这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.</p>\n<h3 id=\"MQ消费端\"><a href=\"#MQ消费端\" class=\"headerlink\" title=\"MQ消费端\"></a>MQ消费端</h3><p>新建一个MaxwellData,接收数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxwellData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String type;</div><div class=\"line\">    <span class=\"keyword\">private</span> String database;</div><div class=\"line\">    <span class=\"keyword\">private</span> String table;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; data;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; old;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxwellData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.type;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">(String type)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDatabase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.database;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDatabase</span><span class=\"params\">(String database)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.database = database;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.table;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTable</span><span class=\"params\">(String table)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.table = table;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getOld</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.old;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOld</span><span class=\"params\">(Map&lt;String, Object&gt; old)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.old = old;</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>消费者代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RabbitHandler</span></div><div class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"新建的队列名\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data)</span> </span>&#123;</div><div class=\"line\">    String s = <span class=\"keyword\">new</span> String(data);</div><div class=\"line\">    MaxwellData maxwellData = decodeMsg(s);</div><div class=\"line\">    logger.info(<span class=\"string\">\"maxwellData:\"</span> + maxwellData);</div><div class=\"line\">    <span class=\"comment\">//to do</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> MaxwellData <span class=\"title\">decodeMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> JSON.parseObject(msg, MaxwellData.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"全量同步\"><a href=\"#全量同步\" class=\"headerlink\" title=\"全量同步\"></a>全量同步</h3><p>使用maxwell-bootstrap命令</p>\n<p>./bin/maxwell-bootstrap –database 库名 –table 表名 –host 127.0.0.1 –user 用户 –password 密码 –client_id  config.properties配置的client_id</p>\n<p>同步db.table表的所有数据，并指定client_id示maxwell_dev的maxwell执行同步</p>\n<p>上一个命令先开着，然后再启动client_id=maxwell_dev的maxwell</p>\n<p>./bin/maxwell –client_id maxwell_dev</p>\n<p>等待执行完成即可</p>\n<h3 id=\"maxwell异常重启\"><a href=\"#maxwell异常重启\" class=\"headerlink\" title=\"maxwell异常重启\"></a>maxwell异常重启</h3><p>如果maxwell挂掉，查询Maxwell数据库中的positions表 </p>\n<p> <img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200727094000939.png\" alt=\"image-20200727094000939\"></p>\n<p>执行nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 &gt;&gt;server.log 2&gt;&amp;1 &amp;</p>\n<p>其中<br>–init_position=<strong>mysql-bin.000004:4:0</strong><br><strong>init_position参数mysql-bin.000004:4:0分别为：binlog文件名、position、mawell hearbeat</strong></p>\n<p>nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 &gt;&gt;server.log 2&gt;&amp;1 &amp;</p>\n","excerpt":"<h2 id=\"使用maxwell实时同步mysql数据到消息队列-rabbitMQ\"><a href=\"#使用maxwell实时同步mysql数据到消息队列-rabbitMQ\" class=\"headerlink\" title=\"使用maxwell实时同步mysql数据到消息队列(rabbitMQ)\"></a>使用maxwell实时同步mysql数据到消息队列(rabbitMQ)</h2><p>maxwell（麦克斯韦）官网：<a href=\"http://maxwells-daemon.io/\">http://maxwells-daemon.io/</a><br></p>","more":"<p></p>\n<h3 id=\"配置mysql\"><a href=\"#配置mysql\" class=\"headerlink\" title=\"配置mysql\"></a>配置mysql</h3><p>需要mysql开启binlog，而binlog默认是关闭的，需要开启，并且为了保证<em>同步数据的一致性</em>，使用的日志格式为<em>row-based replication(RBR)</em>，新建或修改<code>my.conf</code>开启binlog。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin #添加这一行就ok</div><div class=\"line\">binlog-format=ROW #选择row模式</div><div class=\"line\">server_id=1 #随机指定一个不能和其他集群中机器重名的字符串，如果只有一台机器，那就可以随便指定了</div></pre></td></tr></table></figure>\n<p>重启mysql, 查询是否已开启bin</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%log_bin%'</span></div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>log_bin</td>\n<td>on</td>\n</tr>\n<tr>\n<td>sql_log_bin</td>\n<td>on</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"配置jdk环境（略）\"><a href=\"#配置jdk环境（略）\" class=\"headerlink\" title=\"配置jdk环境（略）\"></a>配置jdk环境（略）</h3><h3 id=\"安装Maxwell\"><a href=\"#安装Maxwell\" class=\"headerlink\" title=\"安装Maxwell\"></a>安装Maxwell</h3><p>在<a href=\"https://github.com/zendesk/maxwell/releases这里下载对应版本。\">https://github.com/zendesk/maxwell/releases这里下载对应版本。</a></p>\n<p>解压，修改config.properties.example为config.properties，然后根据自己的实际情况修改配置</p>\n<h3 id=\"配置rabbitMQ环境\"><a href=\"#配置rabbitMQ环境\" class=\"headerlink\" title=\"配置rabbitMQ环境\"></a>配置rabbitMQ环境</h3><h3 id=\"配置maxwell发送消息到rabbitMQ\"><a href=\"#配置maxwell发送消息到rabbitMQ\" class=\"headerlink\" title=\"配置maxwell发送消息到rabbitMQ\"></a>配置maxwell发送消息到rabbitMQ</h3><p>修改maxwell的config.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"># tl;dr config 生产环境配置为info级别</div><div class=\"line\">log_level=DEBUG</div><div class=\"line\"> </div><div class=\"line\">producer=rabbitmq</div><div class=\"line\"> </div><div class=\"line\"># mysql login info, mysql用户必须拥有读取binlog权限和新建库表的权限</div><div class=\"line\">host=127.0.0.1</div><div class=\"line\">user=user</div><div class=\"line\">password=pwd</div><div class=\"line\"> </div><div class=\"line\">output_nulls=true</div><div class=\"line\"># options to pass into the jdbc connection, given as opt=val&amp;opt2=val2</div><div class=\"line\">#jdbc_options=opt1=100&amp;opt2=hello</div><div class=\"line\">jdbc_options=autoReconnet=true</div><div class=\"line\"> </div><div class=\"line\">#需要同步的数据库，表，及不包含的字段</div><div class=\"line\">#filter=exclude: *.*, include: foo.*, include: bar.baz</div><div class=\"line\">filter=exclude: *.*,include: minifanka.*</div><div class=\"line\"> </div><div class=\"line\">#replica_server_id 和 client_id 唯一标示，用于集群部署</div><div class=\"line\">replica_server_id=64</div><div class=\"line\">client_id=maxwell_dev</div><div class=\"line\"> </div><div class=\"line\">metrics_type=http</div><div class=\"line\">metrics_slf4j_interval=60</div><div class=\"line\">http_port=8111</div><div class=\"line\">http_diagnostic=true # default false</div><div class=\"line\"> </div><div class=\"line\">#rabbitmq</div><div class=\"line\">rabbitmq_host=10.255.200.161</div><div class=\"line\">rabbitmq_port=5672</div><div class=\"line\">rabbitmq_user=admin</div><div class=\"line\">rabbitmq_pass=admin123</div><div class=\"line\">rabbitmq_virtual_host=/</div><div class=\"line\">rabbitmq_exchange=maxwell</div><div class=\"line\">rabbitmq_exchange_type=topic</div><div class=\"line\">rabbitmq_exchange_durable=false</div><div class=\"line\">rabbitmq_exchange_autodelete=false</div><div class=\"line\">rabbitmq_routing_key_template=%db%.%table%</div><div class=\"line\">rabbitmq_message_persistent=false</div><div class=\"line\">rabbitmq_declare_exchange=true</div></pre></td></tr></table></figure>\n<p>启动maxwell</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./bin/maxwell</div></pre></td></tr></table></figure>\n<p>启动成功后，会自动生成maxwell库，该库记录了maxwell同步的状态，最后一次同步的id等等信息，在主库失败或同步异常后，只要maxwell库存在，下次同步会根据最后一次同步的id。</p>\n<p>rabbitMQ控制台中会自动创建名称为maxwell的exchange（该exchange为config.properties中配置的）</p>\n<p>新建Queue并绑定exchange，并设置routingkey为%db%.%table%（该routingkey为config.properties中配置）</p>\n<p>可以使用rabbitmqctl 创建队列，交换机</p>\n<ul>\n<li>创建交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_exchange:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, direct, true, false, false, []).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>创建队列</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_amqqueue:declare(&#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, true, false, [], none).'</span></div></pre></td></tr></table></figure>\n<ul>\n<li>绑定队列和交换机</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rabbitmqctl <span class=\"built_in\">eval</span> <span class=\"string\">'rabbit_binding:add(&#123;binding, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, exchange, &lt;&lt;\"ac.exchange.alarm\"&gt;&gt;&#125;, &lt;&lt;\"ac.routing.key.alarm\"&gt;&gt;, &#123;resource, &lt;&lt;\"test\"&gt;&gt;, queue, &lt;&lt;\"ac.queue.alarm\"&gt;&gt;&#125;, []&#125;).'</span></div></pre></td></tr></table></figure>\n<p>这三条命令执行后的最终结果是：在 test 虚拟主机下创建了 direct 类型的，持久化的，名为 ac.exchange.alarm 的exchange，创建了持久化的，名为 ac.queue.alarm 的queue，该队列以 ac.routing.key.alarm 的routing key绑定到了 ac.exchange.alarm 这个exchange上。其他参数为默认值.</p>\n<h3 id=\"MQ消费端\"><a href=\"#MQ消费端\" class=\"headerlink\" title=\"MQ消费端\"></a>MQ消费端</h3><p>新建一个MaxwellData,接收数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MaxwellData</span> <span class=\"keyword\">implements</span> <span class=\"title\">Serializable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String type;</div><div class=\"line\">    <span class=\"keyword\">private</span> String database;</div><div class=\"line\">    <span class=\"keyword\">private</span> String table;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; data;</div><div class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, Object&gt; old;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MaxwellData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getType</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.type;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setType</span><span class=\"params\">(String type)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.type = type;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDatabase</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.database;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setDatabase</span><span class=\"params\">(String database)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.database = database;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTable</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.table;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTable</span><span class=\"params\">(String table)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.table = table;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getData</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(Map&lt;String, Object&gt; data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = data;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title\">getOld</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.old;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOld</span><span class=\"params\">(Map&lt;String, Object&gt; old)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.old = old;</div><div class=\"line\">    &#125;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>消费者代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@RabbitHandler</span></div><div class=\"line\"><span class=\"meta\">@RabbitListener</span>(queues = <span class=\"string\">\"新建的队列名\"</span>)</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] data)</span> </span>&#123;</div><div class=\"line\">    String s = <span class=\"keyword\">new</span> String(data);</div><div class=\"line\">    MaxwellData maxwellData = decodeMsg(s);</div><div class=\"line\">    logger.info(<span class=\"string\">\"maxwellData:\"</span> + maxwellData);</div><div class=\"line\">    <span class=\"comment\">//to do</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> MaxwellData <span class=\"title\">decodeMsg</span><span class=\"params\">(String msg)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (msg == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> JSON.parseObject(msg, MaxwellData.class);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"全量同步\"><a href=\"#全量同步\" class=\"headerlink\" title=\"全量同步\"></a>全量同步</h3><p>使用maxwell-bootstrap命令</p>\n<p>./bin/maxwell-bootstrap –database 库名 –table 表名 –host 127.0.0.1 –user 用户 –password 密码 –client_id  config.properties配置的client_id</p>\n<p>同步db.table表的所有数据，并指定client_id示maxwell_dev的maxwell执行同步</p>\n<p>上一个命令先开着，然后再启动client_id=maxwell_dev的maxwell</p>\n<p>./bin/maxwell –client_id maxwell_dev</p>\n<p>等待执行完成即可</p>\n<h3 id=\"maxwell异常重启\"><a href=\"#maxwell异常重启\" class=\"headerlink\" title=\"maxwell异常重启\"></a>maxwell异常重启</h3><p>如果maxwell挂掉，查询Maxwell数据库中的positions表 </p>\n<p> <img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200727094000939.png\" alt=\"image-20200727094000939\"></p>\n<p>执行nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 &gt;&gt;server.log 2&gt;&amp;1 &amp;</p>\n<p>其中<br>–init_position=<strong>mysql-bin.000004:4:0</strong><br><strong>init_position参数mysql-bin.000004:4:0分别为：binlog文件名、position、mawell hearbeat</strong></p>\n<p>nohup bin/maxwell –init_position=mysql-bin.000620:4402754:1595320038718 &gt;&gt;server.log 2&gt;&amp;1 &amp;</p>"},{"title":"前后端联调过程","date":"2020-07-27T03:02:09.000Z","description":null,"_content":"\n\n\n## 前后端联调过程\n\n鉴于目前前后端联调存在的一些问题，经讨论我们拟已下流程规范前后端联调\n<!-- more -->\n\n**1、需求评审后：** 在需求评审后，前后端相关开发人员小范围进行需求评审，前后端各自捋清楚自己的业务量。\n\n**2、准备阶段：** 前后端一起商量需求中需要联调的部分，进行接口的口头协议交流\n\n**3、接口定义阶段：** 前后端中的一方根据之前的口头协议拟定出一份详细的接口，并输出**API文档**，对于功能量比较多的项目，可以分阶段，分模块输出相应文档，文档输出有以下要求：\n\n- 相关老接口，比如返回类型为map，不能用swagger明确参数的接口，需要用书面文档输出，明确参数类型及名称等必要属性\n- 新接口，使用swagger定义明确即可\n\n**完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题，注意：第一份确认并书写好API的接口原则上要求不能大改。**\n\n**前三步总体时间无特殊情况不能超过一天，若有特殊情况，需要向研发组长说明**\n\n**4、需求开发阶段：** 双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段（甚至接口），重复步骤3。\n\n**注意：后端接口需要充分自测，** 要求自己用swaggerUI传入相关参数测试返回正确结果才行。\n\n**5、联调阶段：** 双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。\n\n","source":"_posts/前后端联调过程.md","raw":"---\ntitle: 前后端联调过程\ncategories: [工作]\ntags: [工作]\ndate: 2020-07-27 11:02:09\ndescription:\n---\n\n\n\n## 前后端联调过程\n\n鉴于目前前后端联调存在的一些问题，经讨论我们拟已下流程规范前后端联调\n<!-- more -->\n\n**1、需求评审后：** 在需求评审后，前后端相关开发人员小范围进行需求评审，前后端各自捋清楚自己的业务量。\n\n**2、准备阶段：** 前后端一起商量需求中需要联调的部分，进行接口的口头协议交流\n\n**3、接口定义阶段：** 前后端中的一方根据之前的口头协议拟定出一份详细的接口，并输出**API文档**，对于功能量比较多的项目，可以分阶段，分模块输出相应文档，文档输出有以下要求：\n\n- 相关老接口，比如返回类型为map，不能用swagger明确参数的接口，需要用书面文档输出，明确参数类型及名称等必要属性\n- 新接口，使用swagger定义明确即可\n\n**完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题，注意：第一份确认并书写好API的接口原则上要求不能大改。**\n\n**前三步总体时间无特殊情况不能超过一天，若有特殊情况，需要向研发组长说明**\n\n**4、需求开发阶段：** 双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段（甚至接口），重复步骤3。\n\n**注意：后端接口需要充分自测，** 要求自己用swaggerUI传入相关参数测试返回正确结果才行。\n\n**5、联调阶段：** 双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。\n\n","slug":"前后端联调过程","published":1,"updated":"2020-08-04T05:10:16.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ypj00acesqrdi18fhtw","content":"<h2 id=\"前后端联调过程\"><a href=\"#前后端联调过程\" class=\"headerlink\" title=\"前后端联调过程\"></a>前后端联调过程</h2><p>鉴于目前前后端联调存在的一些问题，经讨论我们拟已下流程规范前后端联调<br><a id=\"more\"></a></p>\n<p><strong>1、需求评审后：</strong> 在需求评审后，前后端相关开发人员小范围进行需求评审，前后端各自捋清楚自己的业务量。</p>\n<p><strong>2、准备阶段：</strong> 前后端一起商量需求中需要联调的部分，进行接口的口头协议交流</p>\n<p><strong>3、接口定义阶段：</strong> 前后端中的一方根据之前的口头协议拟定出一份详细的接口，并输出<strong>API文档</strong>，对于功能量比较多的项目，可以分阶段，分模块输出相应文档，文档输出有以下要求：</p>\n<ul>\n<li>相关老接口，比如返回类型为map，不能用swagger明确参数的接口，需要用书面文档输出，明确参数类型及名称等必要属性</li>\n<li>新接口，使用swagger定义明确即可</li>\n</ul>\n<p><strong>完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题，注意：第一份确认并书写好API的接口原则上要求不能大改。</strong></p>\n<p><strong>前三步总体时间无特殊情况不能超过一天，若有特殊情况，需要向研发组长说明</strong></p>\n<p><strong>4、需求开发阶段：</strong> 双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段（甚至接口），重复步骤3。</p>\n<p><strong>注意：后端接口需要充分自测，</strong> 要求自己用swaggerUI传入相关参数测试返回正确结果才行。</p>\n<p><strong>5、联调阶段：</strong> 双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。</p>\n","excerpt":"<h2 id=\"前后端联调过程\"><a href=\"#前后端联调过程\" class=\"headerlink\" title=\"前后端联调过程\"></a>前后端联调过程</h2><p>鉴于目前前后端联调存在的一些问题，经讨论我们拟已下流程规范前后端联调<br></p>","more":"<p></p>\n<p><strong>1、需求评审后：</strong> 在需求评审后，前后端相关开发人员小范围进行需求评审，前后端各自捋清楚自己的业务量。</p>\n<p><strong>2、准备阶段：</strong> 前后端一起商量需求中需要联调的部分，进行接口的口头协议交流</p>\n<p><strong>3、接口定义阶段：</strong> 前后端中的一方根据之前的口头协议拟定出一份详细的接口，并输出<strong>API文档</strong>，对于功能量比较多的项目，可以分阶段，分模块输出相应文档，文档输出有以下要求：</p>\n<ul>\n<li>相关老接口，比如返回类型为map，不能用swagger明确参数的接口，需要用书面文档输出，明确参数类型及名称等必要属性</li>\n<li>新接口，使用swagger定义明确即可</li>\n</ul>\n<p><strong>完成后由另一方确认。有疑问的地方重新商量直至双方都没有问题，注意：第一份确认并书写好API的接口原则上要求不能大改。</strong></p>\n<p><strong>前三步总体时间无特殊情况不能超过一天，若有特殊情况，需要向研发组长说明</strong></p>\n<p><strong>4、需求开发阶段：</strong> 双方根据协商出来的接口为基础进行开发，如在开发过程中发现需要新增或删除一些字段（甚至接口），重复步骤3。</p>\n<p><strong>注意：后端接口需要充分自测，</strong> 要求自己用swaggerUI传入相关参数测试返回正确结果才行。</p>\n<p><strong>5、联调阶段：</strong> 双方独自的工作完成，开始前后端联调，如在联调过程发现有疑问，重复步骤3，直至联调完成。</p>"},{"title":"手写RPC框架","date":"2020-06-30T08:04:07.000Z","description":null,"_content":"\n##  手写RPC框架\n\n### RPC是什么？\n\nRPC(Remote Procedure Call Protocol)，远程过程调用\n\n<!-- more -->\n\nPRC调用过程：\n\n1. 客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到[栈](https://zh.wikipedia.org/wiki/栈)（stack）中。\n2. 客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 [marshalling](https://zh.wikipedia.org/wiki/Marshalling_(计算机科学))。（常见方式：[XML](https://zh.wikipedia.org/wiki/XML)、[JSON](https://zh.wikipedia.org/wiki/JSON)、二进制编码）\n3. 客户端本地操作系统发送信息至服务器。（可通过自定义[TCP协议](https://zh.wikipedia.org/wiki/传输控制协议)或[HTTP](https://zh.wikipedia.org/wiki/HTTP)传输）\n4. 服务器系统将信息传送至服务端stub（server stub）。\n5. 服务端stub（server stub）解析信息。该过程叫 [unmarshalling](https://zh.wikipedia.org/wiki/Unmarshalling_(计算机科学))。\n6. 服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。","source":"_posts/手写RPC框架.md","raw":"---\ntitle: 手写RPC框架\ncategories: [RPC]\ntags: [RPC]\ndate: 2020-06-30 16:04:07\ndescription:\n---\n\n##  手写RPC框架\n\n### RPC是什么？\n\nRPC(Remote Procedure Call Protocol)，远程过程调用\n\n<!-- more -->\n\nPRC调用过程：\n\n1. 客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到[栈](https://zh.wikipedia.org/wiki/栈)（stack）中。\n2. 客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 [marshalling](https://zh.wikipedia.org/wiki/Marshalling_(计算机科学))。（常见方式：[XML](https://zh.wikipedia.org/wiki/XML)、[JSON](https://zh.wikipedia.org/wiki/JSON)、二进制编码）\n3. 客户端本地操作系统发送信息至服务器。（可通过自定义[TCP协议](https://zh.wikipedia.org/wiki/传输控制协议)或[HTTP](https://zh.wikipedia.org/wiki/HTTP)传输）\n4. 服务器系统将信息传送至服务端stub（server stub）。\n5. 服务端stub（server stub）解析信息。该过程叫 [unmarshalling](https://zh.wikipedia.org/wiki/Unmarshalling_(计算机科学))。\n6. 服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。","slug":"手写RPC框架","published":1,"updated":"2020-08-04T05:11:43.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ypm00ahesqrmnmxeirl","content":"<h2 id=\"手写RPC框架\"><a href=\"#手写RPC框架\" class=\"headerlink\" title=\"手写RPC框架\"></a>手写RPC框架</h2><h3 id=\"RPC是什么？\"><a href=\"#RPC是什么？\" class=\"headerlink\" title=\"RPC是什么？\"></a>RPC是什么？</h3><p>RPC(Remote Procedure Call Protocol)，远程过程调用</p>\n<a id=\"more\"></a>\n<p>PRC调用过程：</p>\n<ol>\n<li>客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到<a href=\"https://zh.wikipedia.org/wiki/栈\" target=\"_blank\" rel=\"external\">栈</a>（stack）中。</li>\n<li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 <a href=\"https://zh.wikipedia.org/wiki/Marshalling_(计算机科学\" target=\"_blank\" rel=\"external\">marshalling</a>)。（常见方式：<a href=\"https://zh.wikipedia.org/wiki/XML\" target=\"_blank\" rel=\"external\">XML</a>、<a href=\"https://zh.wikipedia.org/wiki/JSON\" target=\"_blank\" rel=\"external\">JSON</a>、二进制编码）</li>\n<li>客户端本地操作系统发送信息至服务器。（可通过自定义<a href=\"https://zh.wikipedia.org/wiki/传输控制协议\" target=\"_blank\" rel=\"external\">TCP协议</a>或<a href=\"https://zh.wikipedia.org/wiki/HTTP\" target=\"_blank\" rel=\"external\">HTTP</a>传输）</li>\n<li>服务器系统将信息传送至服务端stub（server stub）。</li>\n<li>服务端stub（server stub）解析信息。该过程叫 <a href=\"https://zh.wikipedia.org/wiki/Unmarshalling_(计算机科学\" target=\"_blank\" rel=\"external\">unmarshalling</a>)。</li>\n<li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li>\n</ol>\n","excerpt":"<h2 id=\"手写RPC框架\"><a href=\"#手写RPC框架\" class=\"headerlink\" title=\"手写RPC框架\"></a>手写RPC框架</h2><h3 id=\"RPC是什么？\"><a href=\"#RPC是什么？\" class=\"headerlink\" title=\"RPC是什么？\"></a>RPC是什么？</h3><p>RPC(Remote Procedure Call Protocol)，远程过程调用</p>","more":"<p>PRC调用过程：</p>\n<ol>\n<li>客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到<a href=\"https://zh.wikipedia.org/wiki/栈\">栈</a>（stack）中。</li>\n<li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 <a href=\"https://zh.wikipedia.org/wiki/Marshalling_(计算机科学\">marshalling</a>)。（常见方式：<a href=\"https://zh.wikipedia.org/wiki/XML\">XML</a>、<a href=\"https://zh.wikipedia.org/wiki/JSON\">JSON</a>、二进制编码）</li>\n<li>客户端本地操作系统发送信息至服务器。（可通过自定义<a href=\"https://zh.wikipedia.org/wiki/传输控制协议\">TCP协议</a>或<a href=\"https://zh.wikipedia.org/wiki/HTTP\">HTTP</a>传输）</li>\n<li>服务器系统将信息传送至服务端stub（server stub）。</li>\n<li>服务端stub（server stub）解析信息。该过程叫 <a href=\"https://zh.wikipedia.org/wiki/Unmarshalling_(计算机科学\">unmarshalling</a>)。</li>\n<li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li>\n</ol>"},{"title":"小程序","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n# 小程序\n\n\n\n项目里边生成了不同类型的文件:\n\n1. `.json` 后缀的 `JSON` 配置文件\n2. `.wxml` 后缀的 `WXML` 模板文件\n3. `.wxss` 后缀的 `WXSS` 样式文件\n4. `.js` 后缀的 `JS` 脚本逻辑文件\n\n小程序目录结构\n\n![image-20200927130658471](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130658471.png)\n\n\n\n\n\n## JSON配置\n\n小程序中各个json文件的用途：\n\n### 小程序配置app.json\n\n![image-20200927130854683](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130854683.png)\n\n当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。\n\n我们简单说一下这个配置各个项的含义:\n\n1. `pages`字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。\n2. `window`字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。\n\n### 工具配置 project.config.json\n\n### 页面配置 page.json\n\n## WXML 模板\n\n从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 `HTML` 是用来描述当前这个页面的结构，`CSS` 用来描述页面的样子，`JS` 通常是用来处理这个页面和用户的交互。\n\n## WXSS 样式\n\n`WXSS` 具有 `CSS` 大部分的特性，小程序在 `WXSS` 也做了一些扩充和修改。\n\n1. 新增了尺寸单位。在写 `CSS` 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。`WXSS` 在底层支持新的尺寸单位 `rpx` ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。\n2. 提供了全局的样式和局部样式。和前边 `app.json`, `page.json` 的概念相同，你可以写一个 `app.wxss` 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 `page.wxss` 仅对当前页面生效。\n3. 此外 `WXSS` 仅支持部分 `CSS` 选择器\n\n更详细的文档可以参考 [WXSS](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html) \n\n\n\n## JS 逻辑交互\n\n\n\n## 目录结构\n\n小程序包含一个描述整体程序的 `app` 和多个描述各自页面的 `page`。\n\n一个小程序主体部分由三个文件组成，必须放在项目的根目录：**app.js,app.json**,app.wxss。\n\n一个小程序页面由四个文件组成，分别是**js,wxml**,json,wxss。\n\n**注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。**","source":"_posts/小程序.md","raw":"---\ntitle: 小程序\ncategories: [小程序]\ntags: [小程序]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n# 小程序\n\n\n\n项目里边生成了不同类型的文件:\n\n1. `.json` 后缀的 `JSON` 配置文件\n2. `.wxml` 后缀的 `WXML` 模板文件\n3. `.wxss` 后缀的 `WXSS` 样式文件\n4. `.js` 后缀的 `JS` 脚本逻辑文件\n\n小程序目录结构\n\n![image-20200927130658471](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130658471.png)\n\n\n\n\n\n## JSON配置\n\n小程序中各个json文件的用途：\n\n### 小程序配置app.json\n\n![image-20200927130854683](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130854683.png)\n\n当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。\n\n我们简单说一下这个配置各个项的含义:\n\n1. `pages`字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。\n2. `window`字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。\n\n### 工具配置 project.config.json\n\n### 页面配置 page.json\n\n## WXML 模板\n\n从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 `HTML` 是用来描述当前这个页面的结构，`CSS` 用来描述页面的样子，`JS` 通常是用来处理这个页面和用户的交互。\n\n## WXSS 样式\n\n`WXSS` 具有 `CSS` 大部分的特性，小程序在 `WXSS` 也做了一些扩充和修改。\n\n1. 新增了尺寸单位。在写 `CSS` 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。`WXSS` 在底层支持新的尺寸单位 `rpx` ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。\n2. 提供了全局的样式和局部样式。和前边 `app.json`, `page.json` 的概念相同，你可以写一个 `app.wxss` 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 `page.wxss` 仅对当前页面生效。\n3. 此外 `WXSS` 仅支持部分 `CSS` 选择器\n\n更详细的文档可以参考 [WXSS](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html) \n\n\n\n## JS 逻辑交互\n\n\n\n## 目录结构\n\n小程序包含一个描述整体程序的 `app` 和多个描述各自页面的 `page`。\n\n一个小程序主体部分由三个文件组成，必须放在项目的根目录：**app.js,app.json**,app.wxss。\n\n一个小程序页面由四个文件组成，分别是**js,wxml**,json,wxss。\n\n**注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。**","slug":"小程序","published":1,"updated":"2020-09-28T10:39:17.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ypn00ajesqrdsx2hlmr","content":"<h1 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h1><p>项目里边生成了不同类型的文件:</p>\n<ol>\n<li><code>.json</code> 后缀的 <code>JSON</code> 配置文件</li>\n<li><code>.wxml</code> 后缀的 <code>WXML</code> 模板文件</li>\n<li><code>.wxss</code> 后缀的 <code>WXSS</code> 样式文件</li>\n<li><code>.js</code> 后缀的 <code>JS</code> 脚本逻辑文件</li>\n</ol>\n<p>小程序目录结构</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130658471.png\" alt=\"image-20200927130658471\"></p>\n<h2 id=\"JSON配置\"><a href=\"#JSON配置\" class=\"headerlink\" title=\"JSON配置\"></a>JSON配置</h2><p>小程序中各个json文件的用途：</p>\n<h3 id=\"小程序配置app-json\"><a href=\"#小程序配置app-json\" class=\"headerlink\" title=\"小程序配置app.json\"></a>小程序配置app.json</h3><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130854683.png\" alt=\"image-20200927130854683\"></p>\n<p>当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p>\n<p>我们简单说一下这个配置各个项的含义:</p>\n<ol>\n<li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li>\n<li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li>\n</ol>\n<h3 id=\"工具配置-project-config-json\"><a href=\"#工具配置-project-config-json\" class=\"headerlink\" title=\"工具配置 project.config.json\"></a>工具配置 project.config.json</h3><h3 id=\"页面配置-page-json\"><a href=\"#页面配置-page-json\" class=\"headerlink\" title=\"页面配置 page.json\"></a>页面配置 page.json</h3><h2 id=\"WXML-模板\"><a href=\"#WXML-模板\" class=\"headerlink\" title=\"WXML 模板\"></a>WXML 模板</h2><p>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 <code>HTML</code> 是用来描述当前这个页面的结构，<code>CSS</code> 用来描述页面的样子，<code>JS</code> 通常是用来处理这个页面和用户的交互。</p>\n<h2 id=\"WXSS-样式\"><a href=\"#WXSS-样式\" class=\"headerlink\" title=\"WXSS 样式\"></a>WXSS 样式</h2><p><code>WXSS</code> 具有 <code>CSS</code> 大部分的特性，小程序在 <code>WXSS</code> 也做了一些扩充和修改。</p>\n<ol>\n<li>新增了尺寸单位。在写 <code>CSS</code> 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。<code>WXSS</code> 在底层支持新的尺寸单位 <code>rpx</code> ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。</li>\n<li>提供了全局的样式和局部样式。和前边 <code>app.json</code>, <code>page.json</code> 的概念相同，你可以写一个 <code>app.wxss</code> 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 <code>page.wxss</code> 仅对当前页面生效。</li>\n<li>此外 <code>WXSS</code> 仅支持部分 <code>CSS</code> 选择器</li>\n</ol>\n<p>更详细的文档可以参考 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html\" target=\"_blank\" rel=\"external\">WXSS</a> </p>\n<h2 id=\"JS-逻辑交互\"><a href=\"#JS-逻辑交互\" class=\"headerlink\" title=\"JS 逻辑交互\"></a>JS 逻辑交互</h2><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p>\n<p>一个小程序主体部分由三个文件组成，必须放在项目的根目录：<strong>app.js,app.json</strong>,app.wxss。</p>\n<p>一个小程序页面由四个文件组成，分别是<strong>js,wxml</strong>,json,wxss。</p>\n<p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p>\n","excerpt":"","more":"<h1 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h1><p>项目里边生成了不同类型的文件:</p>\n<ol>\n<li><code>.json</code> 后缀的 <code>JSON</code> 配置文件</li>\n<li><code>.wxml</code> 后缀的 <code>WXML</code> 模板文件</li>\n<li><code>.wxss</code> 后缀的 <code>WXSS</code> 样式文件</li>\n<li><code>.js</code> 后缀的 <code>JS</code> 脚本逻辑文件</li>\n</ol>\n<p>小程序目录结构</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130658471.png\" alt=\"image-20200927130658471\"></p>\n<h2 id=\"JSON配置\"><a href=\"#JSON配置\" class=\"headerlink\" title=\"JSON配置\"></a>JSON配置</h2><p>小程序中各个json文件的用途：</p>\n<h3 id=\"小程序配置app-json\"><a href=\"#小程序配置app-json\" class=\"headerlink\" title=\"小程序配置app.json\"></a>小程序配置app.json</h3><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200927130854683.png\" alt=\"image-20200927130854683\"></p>\n<p>当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等。</p>\n<p>我们简单说一下这个配置各个项的含义:</p>\n<ol>\n<li><code>pages</code>字段 —— 用于描述当前小程序所有页面路径，这是为了让微信客户端知道当前你的小程序页面定义在哪个目录。</li>\n<li><code>window</code>字段 —— 定义小程序所有页面的顶部背景颜色，文字颜色定义等。</li>\n</ol>\n<h3 id=\"工具配置-project-config-json\"><a href=\"#工具配置-project-config-json\" class=\"headerlink\" title=\"工具配置 project.config.json\"></a>工具配置 project.config.json</h3><h3 id=\"页面配置-page-json\"><a href=\"#页面配置-page-json\" class=\"headerlink\" title=\"页面配置 page.json\"></a>页面配置 page.json</h3><h2 id=\"WXML-模板\"><a href=\"#WXML-模板\" class=\"headerlink\" title=\"WXML 模板\"></a>WXML 模板</h2><p>从事过网页编程的人知道，网页编程采用的是 HTML + CSS + JS 这样的组合，其中 <code>HTML</code> 是用来描述当前这个页面的结构，<code>CSS</code> 用来描述页面的样子，<code>JS</code> 通常是用来处理这个页面和用户的交互。</p>\n<h2 id=\"WXSS-样式\"><a href=\"#WXSS-样式\" class=\"headerlink\" title=\"WXSS 样式\"></a>WXSS 样式</h2><p><code>WXSS</code> 具有 <code>CSS</code> 大部分的特性，小程序在 <code>WXSS</code> 也做了一些扩充和修改。</p>\n<ol>\n<li>新增了尺寸单位。在写 <code>CSS</code> 样式时，开发者需要考虑到手机设备的屏幕会有不同的宽度和设备像素比，采用一些技巧来换算一些像素单位。<code>WXSS</code> 在底层支持新的尺寸单位 <code>rpx</code> ，开发者可以免去换算的烦恼，只要交给小程序底层来换算即可，由于换算采用的浮点数运算，所以运算结果会和预期结果有一点点偏差。</li>\n<li>提供了全局的样式和局部样式。和前边 <code>app.json</code>, <code>page.json</code> 的概念相同，你可以写一个 <code>app.wxss</code> 作为全局样式，会作用于当前小程序的所有页面，局部页面样式 <code>page.wxss</code> 仅对当前页面生效。</li>\n<li>此外 <code>WXSS</code> 仅支持部分 <code>CSS</code> 选择器</li>\n</ol>\n<p>更详细的文档可以参考 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html\">WXSS</a> </p>\n<h2 id=\"JS-逻辑交互\"><a href=\"#JS-逻辑交互\" class=\"headerlink\" title=\"JS 逻辑交互\"></a>JS 逻辑交互</h2><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p>\n<p>一个小程序主体部分由三个文件组成，必须放在项目的根目录：<strong>app.js,app.json</strong>,app.wxss。</p>\n<p>一个小程序页面由四个文件组成，分别是<strong>js,wxml</strong>,json,wxss。</p>\n<p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p>\n"},{"title":"如何替换 JDK 的类","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n## 如何替换 JDK 的类\n\n\n\n### 如何替换jdk中的类呢？Java提供了endorsed技术。\n\n关于 endorsed ：可以的简单理解为 -Djava.endorsed.dirs 指定的目录面放置的jar文件，将有覆盖系统API的功能。但是能够覆盖的类是有限制的，其中不包括java.lang包中的类(出于安全的考虑)。\n\n\n\n### 为什么必须使用 endorsed 进行替换 jdk 中的类呢？\n\n因为java是采用双亲委派机制进行加载class类的。而jdk提供的类只能由类加载器Bootstrap进行加载。如果你想要在应用程序中替换掉jdk中的某个类是无法做到的，所以java提供了endorsed来达到你想要替换到系统中的类。\n\n### 使用endorsed的两种方式：\n\n- 运行的时候加上 -Djava.endorsed.dirs=D:\\endorsed（jar包存放目录） 参数\n- 将修改后的jar包放在：$JAVA_HOME/jre/lib/endorsed 、$JAVA_HOME/lib/endorsed 下面\n\n### 实例\n\n本实例通过修改ArrayList来试验:\n\n1. 新建maven工程，在工程中新建java.util.ArrayList\n\n2. 复制jdk中ArrayList源码到自己创建的ArrayList，并修改构造方法如下：\n\n![](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114253815.png)\n\n3. 将工程打包成jar，复制到endorsed文件夹中\n4. 新建测试类\n\n```java\npackage com.idea4j.endorsed.test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * -Djava.endorsed.dirs=D:\\idea4j-endorsed\\endorsed\n * -XX:+TraceClassLoading\n */\npublic class Test {\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        System.out.println(1);\n\n    }\n}\n\n```\n5. 修改运行参数，如图\n\n![image-20200911114058420](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114058420.png)\n\n6. 运行Test，结果如下：\n\n![image-20200911114454953](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114454953.png)\n\n看到Test类调用了我们修改的ArrayList，说明我们成功覆盖了jdk的类\n\n但我们只调用一次new ArrayList(),为什么日志输出了这么多次呢？\n\n我们在运行参数中在加入-XX:+TraceClassLoading看类加载过程可知，虚拟机启动时，有一些类调用了ArrayList默认构造器\n\n![image-20200911123505455](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911123505455.png)\n\n\n\n上面我们使用了修改运行参数的方法，下面我们再试验第二种方法，把jar包copy到$JAVA_HOME/jre/lib/endorsed下，结果和上面一样。\n\n但是copy到$JAVA_HOME/lib/endorsed下，结果是没有覆盖成功。这是为什么呢？如图，java-home应该为实际运行环境的目录。\n\n![image-20200911130242199](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911130242199.png)\n\n经查看项目jdk配置\n\n![image-20200911125011220](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911125011220.png)\n\nclasspath指定的是jre，所以，把jar包copy到$JAVA_HOME/jre/lib/endorsed下才能成功也就说的通了。\n\n[^1]: 参考连接：https://docs.oracle.com/javase/8/docs/technotes/guides/standards/\n\n#### \n\n\n\n\n\n","source":"_posts/如何替换 JDK 的类.md","raw":"---\ntitle: 如何替换 JDK 的类\ncategories: [如何替换 JDK 的类]\ntags: [如何替换 JDK 的类]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n## 如何替换 JDK 的类\n\n\n\n### 如何替换jdk中的类呢？Java提供了endorsed技术。\n\n关于 endorsed ：可以的简单理解为 -Djava.endorsed.dirs 指定的目录面放置的jar文件，将有覆盖系统API的功能。但是能够覆盖的类是有限制的，其中不包括java.lang包中的类(出于安全的考虑)。\n\n\n\n### 为什么必须使用 endorsed 进行替换 jdk 中的类呢？\n\n因为java是采用双亲委派机制进行加载class类的。而jdk提供的类只能由类加载器Bootstrap进行加载。如果你想要在应用程序中替换掉jdk中的某个类是无法做到的，所以java提供了endorsed来达到你想要替换到系统中的类。\n\n### 使用endorsed的两种方式：\n\n- 运行的时候加上 -Djava.endorsed.dirs=D:\\endorsed（jar包存放目录） 参数\n- 将修改后的jar包放在：$JAVA_HOME/jre/lib/endorsed 、$JAVA_HOME/lib/endorsed 下面\n\n### 实例\n\n本实例通过修改ArrayList来试验:\n\n1. 新建maven工程，在工程中新建java.util.ArrayList\n\n2. 复制jdk中ArrayList源码到自己创建的ArrayList，并修改构造方法如下：\n\n![](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114253815.png)\n\n3. 将工程打包成jar，复制到endorsed文件夹中\n4. 新建测试类\n\n```java\npackage com.idea4j.endorsed.test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * -Djava.endorsed.dirs=D:\\idea4j-endorsed\\endorsed\n * -XX:+TraceClassLoading\n */\npublic class Test {\n    public static void main(String[] args) {\n        List list = new ArrayList();\n        System.out.println(1);\n\n    }\n}\n\n```\n5. 修改运行参数，如图\n\n![image-20200911114058420](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114058420.png)\n\n6. 运行Test，结果如下：\n\n![image-20200911114454953](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114454953.png)\n\n看到Test类调用了我们修改的ArrayList，说明我们成功覆盖了jdk的类\n\n但我们只调用一次new ArrayList(),为什么日志输出了这么多次呢？\n\n我们在运行参数中在加入-XX:+TraceClassLoading看类加载过程可知，虚拟机启动时，有一些类调用了ArrayList默认构造器\n\n![image-20200911123505455](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911123505455.png)\n\n\n\n上面我们使用了修改运行参数的方法，下面我们再试验第二种方法，把jar包copy到$JAVA_HOME/jre/lib/endorsed下，结果和上面一样。\n\n但是copy到$JAVA_HOME/lib/endorsed下，结果是没有覆盖成功。这是为什么呢？如图，java-home应该为实际运行环境的目录。\n\n![image-20200911130242199](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911130242199.png)\n\n经查看项目jdk配置\n\n![image-20200911125011220](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911125011220.png)\n\nclasspath指定的是jre，所以，把jar包copy到$JAVA_HOME/jre/lib/endorsed下才能成功也就说的通了。\n\n[^1]: 参考连接：https://docs.oracle.com/javase/8/docs/technotes/guides/standards/\n\n#### \n\n\n\n\n\n","slug":"如何替换 JDK 的类","published":1,"updated":"2020-09-28T11:14:14.760Z","_id":"ckfmf4ypq00aoesqr6jrdhf5a","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"如何替换-JDK-的类\"><a href=\"#如何替换-JDK-的类\" class=\"headerlink\" title=\"如何替换 JDK 的类\"></a>如何替换 JDK 的类</h2><h3 id=\"如何替换jdk中的类呢？Java提供了endorsed技术。\"><a href=\"#如何替换jdk中的类呢？Java提供了endorsed技术。\" class=\"headerlink\" title=\"如何替换jdk中的类呢？Java提供了endorsed技术。\"></a>如何替换jdk中的类呢？Java提供了endorsed技术。</h3><p>关于 endorsed ：可以的简单理解为 -Djava.endorsed.dirs 指定的目录面放置的jar文件，将有覆盖系统API的功能。但是能够覆盖的类是有限制的，其中不包括java.lang包中的类(出于安全的考虑)。</p>\n<h3 id=\"为什么必须使用-endorsed-进行替换-jdk-中的类呢？\"><a href=\"#为什么必须使用-endorsed-进行替换-jdk-中的类呢？\" class=\"headerlink\" title=\"为什么必须使用 endorsed 进行替换 jdk 中的类呢？\"></a>为什么必须使用 endorsed 进行替换 jdk 中的类呢？</h3><p>因为java是采用双亲委派机制进行加载class类的。而jdk提供的类只能由类加载器Bootstrap进行加载。如果你想要在应用程序中替换掉jdk中的某个类是无法做到的，所以java提供了endorsed来达到你想要替换到系统中的类。</p>\n<h3 id=\"使用endorsed的两种方式：\"><a href=\"#使用endorsed的两种方式：\" class=\"headerlink\" title=\"使用endorsed的两种方式：\"></a>使用endorsed的两种方式：</h3><ul>\n<li>运行的时候加上 -Djava.endorsed.dirs=D:\\endorsed（jar包存放目录） 参数</li>\n<li>将修改后的jar包放在：$JAVA_HOME/jre/lib/endorsed 、$JAVA_HOME/lib/endorsed 下面</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>本实例通过修改ArrayList来试验:</p>\n<ol>\n<li><p>新建maven工程，在工程中新建java.util.ArrayList</p>\n</li>\n<li><p>复制jdk中ArrayList源码到自己创建的ArrayList，并修改构造方法如下：</p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114253815.png\" alt=\"\"></p>\n<ol>\n<li>将工程打包成jar，复制到endorsed文件夹中</li>\n<li>新建测试类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.endorsed.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * -Djava.endorsed.dirs=D:\\idea4j-endorsed\\endorsed</div><div class=\"line\"> * -XX:+TraceClassLoading</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">        System.out.println(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>修改运行参数，如图</li>\n</ol>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114058420.png\" alt=\"image-20200911114058420\"></p>\n<ol>\n<li>运行Test，结果如下：</li>\n</ol>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114454953.png\" alt=\"image-20200911114454953\"></p>\n<p>看到Test类调用了我们修改的ArrayList，说明我们成功覆盖了jdk的类</p>\n<p>但我们只调用一次new ArrayList(),为什么日志输出了这么多次呢？</p>\n<p>我们在运行参数中在加入-XX:+TraceClassLoading看类加载过程可知，虚拟机启动时，有一些类调用了ArrayList默认构造器</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911123505455.png\" alt=\"image-20200911123505455\"></p>\n<p>上面我们使用了修改运行参数的方法，下面我们再试验第二种方法，把jar包copy到$JAVA_HOME/jre/lib/endorsed下，结果和上面一样。</p>\n<p>但是copy到$JAVA_HOME/lib/endorsed下，结果是没有覆盖成功。这是为什么呢？如图，java-home应该为实际运行环境的目录。</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911130242199.png\" alt=\"image-20200911130242199\"></p>\n<p>经查看项目jdk配置</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911125011220.png\" alt=\"image-20200911125011220\"></p>\n<p>classpath指定的是jre，所以，把jar包copy到$JAVA_HOME/jre/lib/endorsed下才能成功也就说的通了。</p>\n<p>#### </p>\n","excerpt":"","more":"<h2 id=\"如何替换-JDK-的类\"><a href=\"#如何替换-JDK-的类\" class=\"headerlink\" title=\"如何替换 JDK 的类\"></a>如何替换 JDK 的类</h2><h3 id=\"如何替换jdk中的类呢？Java提供了endorsed技术。\"><a href=\"#如何替换jdk中的类呢？Java提供了endorsed技术。\" class=\"headerlink\" title=\"如何替换jdk中的类呢？Java提供了endorsed技术。\"></a>如何替换jdk中的类呢？Java提供了endorsed技术。</h3><p>关于 endorsed ：可以的简单理解为 -Djava.endorsed.dirs 指定的目录面放置的jar文件，将有覆盖系统API的功能。但是能够覆盖的类是有限制的，其中不包括java.lang包中的类(出于安全的考虑)。</p>\n<h3 id=\"为什么必须使用-endorsed-进行替换-jdk-中的类呢？\"><a href=\"#为什么必须使用-endorsed-进行替换-jdk-中的类呢？\" class=\"headerlink\" title=\"为什么必须使用 endorsed 进行替换 jdk 中的类呢？\"></a>为什么必须使用 endorsed 进行替换 jdk 中的类呢？</h3><p>因为java是采用双亲委派机制进行加载class类的。而jdk提供的类只能由类加载器Bootstrap进行加载。如果你想要在应用程序中替换掉jdk中的某个类是无法做到的，所以java提供了endorsed来达到你想要替换到系统中的类。</p>\n<h3 id=\"使用endorsed的两种方式：\"><a href=\"#使用endorsed的两种方式：\" class=\"headerlink\" title=\"使用endorsed的两种方式：\"></a>使用endorsed的两种方式：</h3><ul>\n<li>运行的时候加上 -Djava.endorsed.dirs=D:\\endorsed（jar包存放目录） 参数</li>\n<li>将修改后的jar包放在：$JAVA_HOME/jre/lib/endorsed 、$JAVA_HOME/lib/endorsed 下面</li>\n</ul>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>本实例通过修改ArrayList来试验:</p>\n<ol>\n<li><p>新建maven工程，在工程中新建java.util.ArrayList</p>\n</li>\n<li><p>复制jdk中ArrayList源码到自己创建的ArrayList，并修改构造方法如下：</p>\n</li>\n</ol>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114253815.png\" alt=\"\"></p>\n<ol>\n<li>将工程打包成jar，复制到endorsed文件夹中</li>\n<li>新建测试类</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> com.idea4j.endorsed.test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</div><div class=\"line\"><span class=\"keyword\">import</span> java.util.List;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * -Djava.endorsed.dirs=D:\\idea4j-endorsed\\endorsed</div><div class=\"line\"> * -XX:+TraceClassLoading</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">        List list = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">        System.out.println(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>修改运行参数，如图</li>\n</ol>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114058420.png\" alt=\"image-20200911114058420\"></p>\n<ol>\n<li>运行Test，结果如下：</li>\n</ol>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911114454953.png\" alt=\"image-20200911114454953\"></p>\n<p>看到Test类调用了我们修改的ArrayList，说明我们成功覆盖了jdk的类</p>\n<p>但我们只调用一次new ArrayList(),为什么日志输出了这么多次呢？</p>\n<p>我们在运行参数中在加入-XX:+TraceClassLoading看类加载过程可知，虚拟机启动时，有一些类调用了ArrayList默认构造器</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911123505455.png\" alt=\"image-20200911123505455\"></p>\n<p>上面我们使用了修改运行参数的方法，下面我们再试验第二种方法，把jar包copy到$JAVA_HOME/jre/lib/endorsed下，结果和上面一样。</p>\n<p>但是copy到$JAVA_HOME/lib/endorsed下，结果是没有覆盖成功。这是为什么呢？如图，java-home应该为实际运行环境的目录。</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911130242199.png\" alt=\"image-20200911130242199\"></p>\n<p>经查看项目jdk配置</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200911125011220.png\" alt=\"image-20200911125011220\"></p>\n<p>classpath指定的是jre，所以，把jar包copy到$JAVA_HOME/jre/lib/endorsed下才能成功也就说的通了。</p>\n<p>#### </p>\n"},{"title":"日拱一卒","date":"2020-07-03T05:47:07.000Z","description":null,"_content":"\n### 日拱一卒\n\nmysql查询表的字段数\n\n```mysql\nDESC `goods`\n```\n<!-- more -->\n结果如图：\n\n![image-20200730113601749](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113601749.png)\n\n\n\n```mysql\nSELECT COUNT(*) FROM information_schema.COLUMNS WHERE table_schema = 'testdb' AND table_name='testtb'\n\n\n```\n\n结果如图：\n\n![image-20200730113652530](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113652530.png)\n\n\n\n\n\n","source":"_posts/日拱一卒.md","raw":"---\ntitle: 日拱一卒\ncategories: [技巧]\ntags: [知识]\ndate: 2020-07-03 13:47:07\ndescription:\n---\n\n### 日拱一卒\n\nmysql查询表的字段数\n\n```mysql\nDESC `goods`\n```\n<!-- more -->\n结果如图：\n\n![image-20200730113601749](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113601749.png)\n\n\n\n```mysql\nSELECT COUNT(*) FROM information_schema.COLUMNS WHERE table_schema = 'testdb' AND table_name='testtb'\n\n\n```\n\n结果如图：\n\n![image-20200730113652530](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113652530.png)\n\n\n\n\n\n","slug":"日拱一卒","published":1,"updated":"2020-08-04T05:11:43.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yps00aqesqrbaz5cyrv","content":"<h3 id=\"日拱一卒\"><a href=\"#日拱一卒\" class=\"headerlink\" title=\"日拱一卒\"></a>日拱一卒</h3><p>mysql查询表的字段数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DESC `goods`</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>结果如图：</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113601749.png\" alt=\"image-20200730113601749\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(*) FROM information_schema.COLUMNS WHERE table_schema = &apos;testdb&apos; AND table_name=&apos;testtb&apos;</div></pre></td></tr></table></figure>\n<p>结果如图：</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113652530.png\" alt=\"image-20200730113652530\"></p>\n","excerpt":"<h3 id=\"日拱一卒\"><a href=\"#日拱一卒\" class=\"headerlink\" title=\"日拱一卒\"></a>日拱一卒</h3><p>mysql查询表的字段数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">DESC `goods`</div></pre></td></tr></table></figure>","more":"<p>结果如图：</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113601749.png\" alt=\"image-20200730113601749\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">SELECT COUNT(*) FROM information_schema.COLUMNS WHERE table_schema = &apos;testdb&apos; AND table_name=&apos;testtb&apos;</div></pre></td></tr></table></figure>\n<p>结果如图：</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200730113652530.png\" alt=\"image-20200730113652530\"></p>"},{"title":"如何有效的学习","date":"2020-07-20T03:02:09.000Z","description":null,"_content":"\n\n\n## 如何有效的学习\n<!-- more -->\n\n```mermaid\ngraph LR\n\n如何有效的学习 --> 要有学习的意愿\n如何有效的学习 --> 要有明确的目标\n如何有效的学习 --> 要付诸行动\n如何有效的学习 --> 要有产出\n```\n\n\n\n### 1.要有学习的意愿。\n\n“授人以鱼不如授人以渔，授人以渔不如授人以欲”，欲望是基础。\n\n### 2.要明确学习的目标。\n\n得知道自己也要学什么，明确的提出一个目标，而不是笼统的“好好学习”。\n\n### 3.付诸实践。\n\n“千里之行，始于足下”，没有行动，想法再好也没有用。在实践阶段，拆解目标是非常重要的，要把大目标拆成一个个小目标来完成。\n\n### 4.学习要有产出。\n\n人其实有生产者和消费者两种角色。如果没有产出的话，只学习本身是一种消费。你每天忙着读书、看专栏，看起来付出了很多，超级努力超级辛苦，但如果没有产出，工作和生活也没有什么改变，那这样的学习和玩一会儿手机、看一会儿电影在本质上并没有太大的区别，只是一种另类的娱乐。\n\n","source":"_posts/如何有效的学习.md","raw":"---\ntitle: 如何有效的学习\ncategories: [学习]\ntags: [学习]\ndate: 2020-07-20 11:02:09\ndescription:\n---\n\n\n\n## 如何有效的学习\n<!-- more -->\n\n```mermaid\ngraph LR\n\n如何有效的学习 --> 要有学习的意愿\n如何有效的学习 --> 要有明确的目标\n如何有效的学习 --> 要付诸行动\n如何有效的学习 --> 要有产出\n```\n\n\n\n### 1.要有学习的意愿。\n\n“授人以鱼不如授人以渔，授人以渔不如授人以欲”，欲望是基础。\n\n### 2.要明确学习的目标。\n\n得知道自己也要学什么，明确的提出一个目标，而不是笼统的“好好学习”。\n\n### 3.付诸实践。\n\n“千里之行，始于足下”，没有行动，想法再好也没有用。在实践阶段，拆解目标是非常重要的，要把大目标拆成一个个小目标来完成。\n\n### 4.学习要有产出。\n\n人其实有生产者和消费者两种角色。如果没有产出的话，只学习本身是一种消费。你每天忙着读书、看专栏，看起来付出了很多，超级努力超级辛苦，但如果没有产出，工作和生活也没有什么改变，那这样的学习和玩一会儿手机、看一会儿电影在本质上并没有太大的区别，只是一种另类的娱乐。\n\n","slug":"如何有效的学习","published":1,"updated":"2020-09-28T10:39:46.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ypu00auesqruuwixpsu","content":"<h2 id=\"如何有效的学习\"><a href=\"#如何有效的学习\" class=\"headerlink\" title=\"如何有效的学习\"></a>如何有效的学习</h2><a id=\"more\"></a>\n<pre class=\"mermaid\">graph LR\n\n如何有效的学习 --> 要有学习的意愿\n如何有效的学习 --> 要有明确的目标\n如何有效的学习 --> 要付诸行动\n如何有效的学习 --> 要有产出</pre>\n\n\n\n<h3 id=\"1-要有学习的意愿。\"><a href=\"#1-要有学习的意愿。\" class=\"headerlink\" title=\"1.要有学习的意愿。\"></a>1.要有学习的意愿。</h3><p>“授人以鱼不如授人以渔，授人以渔不如授人以欲”，欲望是基础。</p>\n<h3 id=\"2-要明确学习的目标。\"><a href=\"#2-要明确学习的目标。\" class=\"headerlink\" title=\"2.要明确学习的目标。\"></a>2.要明确学习的目标。</h3><p>得知道自己也要学什么，明确的提出一个目标，而不是笼统的“好好学习”。</p>\n<h3 id=\"3-付诸实践。\"><a href=\"#3-付诸实践。\" class=\"headerlink\" title=\"3.付诸实践。\"></a>3.付诸实践。</h3><p>“千里之行，始于足下”，没有行动，想法再好也没有用。在实践阶段，拆解目标是非常重要的，要把大目标拆成一个个小目标来完成。</p>\n<h3 id=\"4-学习要有产出。\"><a href=\"#4-学习要有产出。\" class=\"headerlink\" title=\"4.学习要有产出。\"></a>4.学习要有产出。</h3><p>人其实有生产者和消费者两种角色。如果没有产出的话，只学习本身是一种消费。你每天忙着读书、看专栏，看起来付出了很多，超级努力超级辛苦，但如果没有产出，工作和生活也没有什么改变，那这样的学习和玩一会儿手机、看一会儿电影在本质上并没有太大的区别，只是一种另类的娱乐。</p>\n","excerpt":"<h2 id=\"如何有效的学习\"><a href=\"#如何有效的学习\" class=\"headerlink\" title=\"如何有效的学习\"></a>如何有效的学习</h2>","more":"<pre class=\"mermaid\">graph LR\n\n如何有效的学习 --> 要有学习的意愿\n如何有效的学习 --> 要有明确的目标\n如何有效的学习 --> 要付诸行动\n如何有效的学习 --> 要有产出</pre>\n\n\n\n<h3 id=\"1-要有学习的意愿。\"><a href=\"#1-要有学习的意愿。\" class=\"headerlink\" title=\"1.要有学习的意愿。\"></a>1.要有学习的意愿。</h3><p>“授人以鱼不如授人以渔，授人以渔不如授人以欲”，欲望是基础。</p>\n<h3 id=\"2-要明确学习的目标。\"><a href=\"#2-要明确学习的目标。\" class=\"headerlink\" title=\"2.要明确学习的目标。\"></a>2.要明确学习的目标。</h3><p>得知道自己也要学什么，明确的提出一个目标，而不是笼统的“好好学习”。</p>\n<h3 id=\"3-付诸实践。\"><a href=\"#3-付诸实践。\" class=\"headerlink\" title=\"3.付诸实践。\"></a>3.付诸实践。</h3><p>“千里之行，始于足下”，没有行动，想法再好也没有用。在实践阶段，拆解目标是非常重要的，要把大目标拆成一个个小目标来完成。</p>\n<h3 id=\"4-学习要有产出。\"><a href=\"#4-学习要有产出。\" class=\"headerlink\" title=\"4.学习要有产出。\"></a>4.学习要有产出。</h3><p>人其实有生产者和消费者两种角色。如果没有产出的话，只学习本身是一种消费。你每天忙着读书、看专栏，看起来付出了很多，超级努力超级辛苦，但如果没有产出，工作和生活也没有什么改变，那这样的学习和玩一会儿手机、看一会儿电影在本质上并没有太大的区别，只是一种另类的娱乐。</p>"},{"title":"排序","date":"2016-08-14T09:21:33.000Z","_content":"\n# 排序\n\n## 基于比较的排序算法:\n\n### BUB - 冒泡排序\n\n#### 算法原理\n\n1.比较相邻的元素，如果第一个比第二个大，就交换他们两个；\n\n2.对每一对相邻的元素做同样的工作，从开始第一对到结尾的最后一对，比较完一轮，最大的元素就放到了最后一位；\n\n3.针对所有元素重复以上步骤，除了最后一个；\n\n4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较；\n\n#### 算法分析\n\n##### 时间复杂度\n\n若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：$C_{min}=n-1$,$M_{min}=0$\n\n所以，冒泡排序最好的时间复杂度为O(n)。\n\n若初始文件是反序的，需要进行$n-1$趟排序。每趟排序要进行$n-i$次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：\n\n$$\nC_{max}=\\frac{n(n-1)}{2}=O(n^2)\n$$\n\n$$\nM_{max}=\\frac{3n(n-1)}{2}=O(n^2)\n$$\n\n冒泡排序的最坏时间复杂度为:$O(n^2)$.\n\n因此冒泡排序的总的平均时间复杂度为$O(n^2)$.\n\n##### 算法描述\n\n示例代码\n\n```java\npublic static void bubbleSort(int arr[]){\n  \n  for(int i=0;i<aar.length;i++){\n    boolean isSwap = false;\n    //从第一位和第二位开始比较，每一轮最大的数都排到了最后\n    for(int j=0; j<aar.length-i-1;j++){\n      //如果前面的元素大于后面的元素，交换位置\n      if(arr[j]>arr{j+1}){\n        int temp = arr[j];\n        arr[j] = arr[j+1];\n        arr[j+1]=temp;\n        isSwap = true;\n      }\n    }\n    //如果没有换位，说明排序完成了\n    if(!isSwap){\n      break;\n    }\n  }\n}\n```\n\n\n\n### SEL - 选择排序\n\n#### 算法原理\n\n#### 算法分析\n\n##### 时间复杂度\n\n##### 算法描述\n\n示例代码\n\n```java\n private static void selectionSort(int[] a) {\n\n        for (int i = 0; i < a.length; i++) {\n            int min = i;\n            for (int j = i+1; j < a.length; j++) {\n                if (a[min] > a[j]) {\n                    min=j;\n                }\n            }\n            if (min != i) {\n                int temp = a[min];\n                a[min] = a[i];\n                a[i] = temp;\n            }\n        }\n    }\n```\n\n\n\n### INS - 插入排序\n\n#### 算法原理\n\n将第一个元素标记为已排序\n\n遍历每个没有排序过的元素\n\n “提取” 元素 X\n\n i = 最后排序过元素的指数 到 0 的遍历\n\n  如果现在排序过的元素 > 提取的元素\n\n   将排序过的元素向右移一格\n\n  否则：插入提取的元素\n\n#### 算法分析\n\n##### 时间复杂度\n\n##### 算法描述\n\n示例代码\n\n```java\nprivate static void insertionSort(int[] a) {\n\n        for (int i = 1; i < a.length ; i++) {\n            //第一个元素为一个有序部分，故而，从数组第二个元素提取\n            int value = a[i];\n            //依次和有序部分从后往前比较，\n            for (int j = i - 1; j >0; j--) {\n                //如果取出的元素小于有序部分的元素，\n                if (a[j] > value) {\n                    //那么有序部分的元素往后移动一位 即有序部分下标+1\n                    a[j+1] = a[j];\n                    //否则结束比较，提取元素插入最后移动的哪个元素的位置\n                } else {\n                    a[j+1] = value;\n                    break;\n                }\n            }\n        }\n    }\n```\n\n\n\n### MER - 归并排序 (递归实现)\n\n```java\n /**\n     *\n     * @param 排序数组\n     * @param 数组开头下标\n     * @param 数组长度\n     * @return\n     */\n    private static int[] mergeSort(int[] a, int l, int h) {\n\n        if (l == h) {\n            return new int[]{a[l]};\n        }\n        int middle = l+(h-l)/2;\n        int[] leftArray = mergeSort(a, l, middle);\n        int[] rightArray = mergeSort(a, middle+1, h);\n        //新有序数组\n        int[] newNum = new int[leftArray.length + rightArray.length];\n\n        int leftIndex=0,rightIndex=0,newIndex=0;\n\n        while (leftIndex < leftArray.length && rightIndex < rightArray.length) {\n            newNum[newIndex++]= leftArray[leftIndex]<rightArray[rightIndex]?leftArray[leftIndex++]:rightArray[rightIndex++];\n        }\n        while (leftIndex < leftArray.length) {\n            newNum[newIndex++] = leftArray[leftIndex++];\n        }\n        while (rightIndex < rightArray.length) {\n            newNum[newIndex++] = rightArray[rightIndex++];\n        }\n        return newNum;\n    }\n```\n\n\n\n### QUI - 快速排序 (递归实现)\n\n\n\n### R-Q - 随机快速排序 (递归实现)\n\n\n\n## 不基于比较的排序算法:\n\n### COU - 计数排序\n\n### RAD - 基数排序","source":"_posts/排序.md","raw":"---\ntitle: 排序\ndate: 2016-08-14 17:21:33\ncategories: [数据结构]\ntags: [数据结构]\n---\n\n# 排序\n\n## 基于比较的排序算法:\n\n### BUB - 冒泡排序\n\n#### 算法原理\n\n1.比较相邻的元素，如果第一个比第二个大，就交换他们两个；\n\n2.对每一对相邻的元素做同样的工作，从开始第一对到结尾的最后一对，比较完一轮，最大的元素就放到了最后一位；\n\n3.针对所有元素重复以上步骤，除了最后一个；\n\n4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较；\n\n#### 算法分析\n\n##### 时间复杂度\n\n若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：$C_{min}=n-1$,$M_{min}=0$\n\n所以，冒泡排序最好的时间复杂度为O(n)。\n\n若初始文件是反序的，需要进行$n-1$趟排序。每趟排序要进行$n-i$次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：\n\n$$\nC_{max}=\\frac{n(n-1)}{2}=O(n^2)\n$$\n\n$$\nM_{max}=\\frac{3n(n-1)}{2}=O(n^2)\n$$\n\n冒泡排序的最坏时间复杂度为:$O(n^2)$.\n\n因此冒泡排序的总的平均时间复杂度为$O(n^2)$.\n\n##### 算法描述\n\n示例代码\n\n```java\npublic static void bubbleSort(int arr[]){\n  \n  for(int i=0;i<aar.length;i++){\n    boolean isSwap = false;\n    //从第一位和第二位开始比较，每一轮最大的数都排到了最后\n    for(int j=0; j<aar.length-i-1;j++){\n      //如果前面的元素大于后面的元素，交换位置\n      if(arr[j]>arr{j+1}){\n        int temp = arr[j];\n        arr[j] = arr[j+1];\n        arr[j+1]=temp;\n        isSwap = true;\n      }\n    }\n    //如果没有换位，说明排序完成了\n    if(!isSwap){\n      break;\n    }\n  }\n}\n```\n\n\n\n### SEL - 选择排序\n\n#### 算法原理\n\n#### 算法分析\n\n##### 时间复杂度\n\n##### 算法描述\n\n示例代码\n\n```java\n private static void selectionSort(int[] a) {\n\n        for (int i = 0; i < a.length; i++) {\n            int min = i;\n            for (int j = i+1; j < a.length; j++) {\n                if (a[min] > a[j]) {\n                    min=j;\n                }\n            }\n            if (min != i) {\n                int temp = a[min];\n                a[min] = a[i];\n                a[i] = temp;\n            }\n        }\n    }\n```\n\n\n\n### INS - 插入排序\n\n#### 算法原理\n\n将第一个元素标记为已排序\n\n遍历每个没有排序过的元素\n\n “提取” 元素 X\n\n i = 最后排序过元素的指数 到 0 的遍历\n\n  如果现在排序过的元素 > 提取的元素\n\n   将排序过的元素向右移一格\n\n  否则：插入提取的元素\n\n#### 算法分析\n\n##### 时间复杂度\n\n##### 算法描述\n\n示例代码\n\n```java\nprivate static void insertionSort(int[] a) {\n\n        for (int i = 1; i < a.length ; i++) {\n            //第一个元素为一个有序部分，故而，从数组第二个元素提取\n            int value = a[i];\n            //依次和有序部分从后往前比较，\n            for (int j = i - 1; j >0; j--) {\n                //如果取出的元素小于有序部分的元素，\n                if (a[j] > value) {\n                    //那么有序部分的元素往后移动一位 即有序部分下标+1\n                    a[j+1] = a[j];\n                    //否则结束比较，提取元素插入最后移动的哪个元素的位置\n                } else {\n                    a[j+1] = value;\n                    break;\n                }\n            }\n        }\n    }\n```\n\n\n\n### MER - 归并排序 (递归实现)\n\n```java\n /**\n     *\n     * @param 排序数组\n     * @param 数组开头下标\n     * @param 数组长度\n     * @return\n     */\n    private static int[] mergeSort(int[] a, int l, int h) {\n\n        if (l == h) {\n            return new int[]{a[l]};\n        }\n        int middle = l+(h-l)/2;\n        int[] leftArray = mergeSort(a, l, middle);\n        int[] rightArray = mergeSort(a, middle+1, h);\n        //新有序数组\n        int[] newNum = new int[leftArray.length + rightArray.length];\n\n        int leftIndex=0,rightIndex=0,newIndex=0;\n\n        while (leftIndex < leftArray.length && rightIndex < rightArray.length) {\n            newNum[newIndex++]= leftArray[leftIndex]<rightArray[rightIndex]?leftArray[leftIndex++]:rightArray[rightIndex++];\n        }\n        while (leftIndex < leftArray.length) {\n            newNum[newIndex++] = leftArray[leftIndex++];\n        }\n        while (rightIndex < rightArray.length) {\n            newNum[newIndex++] = rightArray[rightIndex++];\n        }\n        return newNum;\n    }\n```\n\n\n\n### QUI - 快速排序 (递归实现)\n\n\n\n### R-Q - 随机快速排序 (递归实现)\n\n\n\n## 不基于比较的排序算法:\n\n### COU - 计数排序\n\n### RAD - 基数排序","slug":"排序","published":1,"updated":"2020-09-28T10:59:58.945Z","_id":"ckfmf4ypv00avesqr6cqq8csr","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><h2 id=\"基于比较的排序算法\"><a href=\"#基于比较的排序算法\" class=\"headerlink\" title=\"基于比较的排序算法:\"></a>基于比较的排序算法:</h2><h3 id=\"BUB-冒泡排序\"><a href=\"#BUB-冒泡排序\" class=\"headerlink\" title=\"BUB - 冒泡排序\"></a>BUB - 冒泡排序</h3><h4 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><p>1.比较相邻的元素，如果第一个比第二个大，就交换他们两个；</p>\n<p>2.对每一对相邻的元素做同样的工作，从开始第一对到结尾的最后一对，比较完一轮，最大的元素就放到了最后一位；</p>\n<p>3.针对所有元素重复以上步骤，除了最后一个；</p>\n<p>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较；</p>\n<h4 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><h5 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：$C<em>{min}=n-1$,$M</em>{min}=0$</p>\n<p>所以，冒泡排序最好的时间复杂度为O(n)。</p>\n<p>若初始文件是反序的，需要进行$n-1$趟排序。每趟排序要进行$n-i$次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：</p>\n<p>$$<br>C_{max}=\\frac{n(n-1)}{2}=O(n^2)<br>$$</p>\n<p>$$<br>M_{max}=\\frac{3n(n-1)}{2}=O(n^2)<br>$$</p>\n<p>冒泡排序的最坏时间复杂度为:$O(n^2)$.</p>\n<p>因此冒泡排序的总的平均时间复杂度为$O(n^2)$.</p>\n<h5 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h5><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;aar.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isSwap = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">//从第一位和第二位开始比较，每一轮最大的数都排到了最后</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;aar.length-i-<span class=\"number\">1</span>;j++)&#123;</div><div class=\"line\">      <span class=\"comment\">//如果前面的元素大于后面的元素，交换位置</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(arr[j]&gt;arr&#123;j+<span class=\"number\">1</span>&#125;)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> temp = arr[j];</div><div class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</div><div class=\"line\">        arr[j+<span class=\"number\">1</span>]=temp;</div><div class=\"line\">        isSwap = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果没有换位，说明排序完成了</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!isSwap)&#123;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SEL-选择排序\"><a href=\"#SEL-选择排序\" class=\"headerlink\" title=\"SEL - 选择排序\"></a>SEL - 选择排序</h3><h4 id=\"算法原理-1\"><a href=\"#算法原理-1\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><h4 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><h5 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><h5 id=\"算法描述-1\"><a href=\"#算法描述-1\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h5><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> min = i;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; a.length; j++) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (a[min] &gt; a[j]) &#123;</div><div class=\"line\">                   min=j;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (min != i) &#123;</div><div class=\"line\">               <span class=\"keyword\">int</span> temp = a[min];</div><div class=\"line\">               a[min] = a[i];</div><div class=\"line\">               a[i] = temp;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"INS-插入排序\"><a href=\"#INS-插入排序\" class=\"headerlink\" title=\"INS - 插入排序\"></a>INS - 插入排序</h3><h4 id=\"算法原理-2\"><a href=\"#算法原理-2\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><p>将第一个元素标记为已排序</p>\n<p>遍历每个没有排序过的元素</p>\n<p> “提取” 元素 X</p>\n<p> i = 最后排序过元素的指数 到 0 的遍历</p>\n<p>  如果现在排序过的元素 &gt; 提取的元素</p>\n<p>   将排序过的元素向右移一格</p>\n<p>  否则：插入提取的元素</p>\n<h4 id=\"算法分析-2\"><a href=\"#算法分析-2\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><h5 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><h5 id=\"算法描述-2\"><a href=\"#算法描述-2\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h5><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length ; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">//第一个元素为一个有序部分，故而，从数组第二个元素提取</span></div><div class=\"line\">            <span class=\"keyword\">int</span> value = a[i];</div><div class=\"line\">            <span class=\"comment\">//依次和有序部分从后往前比较，</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;<span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">                <span class=\"comment\">//如果取出的元素小于有序部分的元素，</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (a[j] &gt; value) &#123;</div><div class=\"line\">                    <span class=\"comment\">//那么有序部分的元素往后移动一位 即有序部分下标+1</span></div><div class=\"line\">                    a[j+<span class=\"number\">1</span>] = a[j];</div><div class=\"line\">                    <span class=\"comment\">//否则结束比较，提取元素插入最后移动的哪个元素的位置</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    a[j+<span class=\"number\">1</span>] = value;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"MER-归并排序-递归实现\"><a href=\"#MER-归并排序-递归实现\" class=\"headerlink\" title=\"MER - 归并排序 (递归实现)\"></a>MER - 归并排序 (递归实现)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> 排序数组</div><div class=\"line\">    * <span class=\"doctag\">@param</span> 数组开头下标</div><div class=\"line\">    * <span class=\"doctag\">@param</span> 数组长度</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] mergeSort(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> h) &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (l == h) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;a[l]&#125;;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">int</span> middle = l+(h-l)/<span class=\"number\">2</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span>[] leftArray = mergeSort(a, l, middle);</div><div class=\"line\">       <span class=\"keyword\">int</span>[] rightArray = mergeSort(a, middle+<span class=\"number\">1</span>, h);</div><div class=\"line\">       <span class=\"comment\">//新有序数组</span></div><div class=\"line\">       <span class=\"keyword\">int</span>[] newNum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[leftArray.length + rightArray.length];</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> leftIndex=<span class=\"number\">0</span>,rightIndex=<span class=\"number\">0</span>,newIndex=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">while</span> (leftIndex &lt; leftArray.length &amp;&amp; rightIndex &lt; rightArray.length) &#123;</div><div class=\"line\">           newNum[newIndex++]= leftArray[leftIndex]&lt;rightArray[rightIndex]?leftArray[leftIndex++]:rightArray[rightIndex++];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">while</span> (leftIndex &lt; leftArray.length) &#123;</div><div class=\"line\">           newNum[newIndex++] = leftArray[leftIndex++];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">while</span> (rightIndex &lt; rightArray.length) &#123;</div><div class=\"line\">           newNum[newIndex++] = rightArray[rightIndex++];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> newNum;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"QUI-快速排序-递归实现\"><a href=\"#QUI-快速排序-递归实现\" class=\"headerlink\" title=\"QUI - 快速排序 (递归实现)\"></a>QUI - 快速排序 (递归实现)</h3><h3 id=\"R-Q-随机快速排序-递归实现\"><a href=\"#R-Q-随机快速排序-递归实现\" class=\"headerlink\" title=\"R-Q - 随机快速排序 (递归实现)\"></a>R-Q - 随机快速排序 (递归实现)</h3><h2 id=\"不基于比较的排序算法\"><a href=\"#不基于比较的排序算法\" class=\"headerlink\" title=\"不基于比较的排序算法:\"></a>不基于比较的排序算法:</h2><h3 id=\"COU-计数排序\"><a href=\"#COU-计数排序\" class=\"headerlink\" title=\"COU - 计数排序\"></a>COU - 计数排序</h3><h3 id=\"RAD-基数排序\"><a href=\"#RAD-基数排序\" class=\"headerlink\" title=\"RAD - 基数排序\"></a>RAD - 基数排序</h3>","excerpt":"","more":"<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><h2 id=\"基于比较的排序算法\"><a href=\"#基于比较的排序算法\" class=\"headerlink\" title=\"基于比较的排序算法:\"></a>基于比较的排序算法:</h2><h3 id=\"BUB-冒泡排序\"><a href=\"#BUB-冒泡排序\" class=\"headerlink\" title=\"BUB - 冒泡排序\"></a>BUB - 冒泡排序</h3><h4 id=\"算法原理\"><a href=\"#算法原理\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><p>1.比较相邻的元素，如果第一个比第二个大，就交换他们两个；</p>\n<p>2.对每一对相邻的元素做同样的工作，从开始第一对到结尾的最后一对，比较完一轮，最大的元素就放到了最后一位；</p>\n<p>3.针对所有元素重复以上步骤，除了最后一个；</p>\n<p>4.持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较；</p>\n<h4 id=\"算法分析\"><a href=\"#算法分析\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><h5 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><p>若文件的初始状态是正序的，一趟扫描即可完成排序。所需的关键字比较次数C和记录移动次数M均达到最小值：$C<em>{min}=n-1$,$M</em>{min}=0$</p>\n<p>所以，冒泡排序最好的时间复杂度为O(n)。</p>\n<p>若初始文件是反序的，需要进行$n-1$趟排序。每趟排序要进行$n-i$次关键字的比较(1≤i≤n-1)，且每次比较都必须移动记录三次来达到交换记录位置。在这种情况下，比较和移动次数均达到最大值：</p>\n<p>$$<br>C_{max}=\\frac{n(n-1)}{2}=O(n^2)<br>$$</p>\n<p>$$<br>M_{max}=\\frac{3n(n-1)}{2}=O(n^2)<br>$$</p>\n<p>冒泡排序的最坏时间复杂度为:$O(n^2)$.</p>\n<p>因此冒泡排序的总的平均时间复杂度为$O(n^2)$.</p>\n<h5 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h5><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span></span>&#123;</div><div class=\"line\">  </div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;aar.length;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">boolean</span> isSwap = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"comment\">//从第一位和第二位开始比较，每一轮最大的数都排到了最后</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;aar.length-i-<span class=\"number\">1</span>;j++)&#123;</div><div class=\"line\">      <span class=\"comment\">//如果前面的元素大于后面的元素，交换位置</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(arr[j]&gt;arr&#123;j+<span class=\"number\">1</span>&#125;)&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> temp = arr[j];</div><div class=\"line\">        arr[j] = arr[j+<span class=\"number\">1</span>];</div><div class=\"line\">        arr[j+<span class=\"number\">1</span>]=temp;</div><div class=\"line\">        isSwap = <span class=\"keyword\">true</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//如果没有换位，说明排序完成了</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(!isSwap)&#123;</div><div class=\"line\">      <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"SEL-选择排序\"><a href=\"#SEL-选择排序\" class=\"headerlink\" title=\"SEL - 选择排序\"></a>SEL - 选择排序</h3><h4 id=\"算法原理-1\"><a href=\"#算法原理-1\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><h4 id=\"算法分析-1\"><a href=\"#算法分析-1\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><h5 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><h5 id=\"算法描述-1\"><a href=\"#算法描述-1\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h5><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a.length; i++) &#123;</div><div class=\"line\">           <span class=\"keyword\">int</span> min = i;</div><div class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i+<span class=\"number\">1</span>; j &lt; a.length; j++) &#123;</div><div class=\"line\">               <span class=\"keyword\">if</span> (a[min] &gt; a[j]) &#123;</div><div class=\"line\">                   min=j;</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">if</span> (min != i) &#123;</div><div class=\"line\">               <span class=\"keyword\">int</span> temp = a[min];</div><div class=\"line\">               a[min] = a[i];</div><div class=\"line\">               a[i] = temp;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"INS-插入排序\"><a href=\"#INS-插入排序\" class=\"headerlink\" title=\"INS - 插入排序\"></a>INS - 插入排序</h3><h4 id=\"算法原理-2\"><a href=\"#算法原理-2\" class=\"headerlink\" title=\"算法原理\"></a>算法原理</h4><p>将第一个元素标记为已排序</p>\n<p>遍历每个没有排序过的元素</p>\n<p> “提取” 元素 X</p>\n<p> i = 最后排序过元素的指数 到 0 的遍历</p>\n<p>  如果现在排序过的元素 &gt; 提取的元素</p>\n<p>   将排序过的元素向右移一格</p>\n<p>  否则：插入提取的元素</p>\n<h4 id=\"算法分析-2\"><a href=\"#算法分析-2\" class=\"headerlink\" title=\"算法分析\"></a>算法分析</h4><h5 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h5><h5 id=\"算法描述-2\"><a href=\"#算法描述-2\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h5><p>示例代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; a.length ; i++) &#123;</div><div class=\"line\">            <span class=\"comment\">//第一个元素为一个有序部分，故而，从数组第二个元素提取</span></div><div class=\"line\">            <span class=\"keyword\">int</span> value = a[i];</div><div class=\"line\">            <span class=\"comment\">//依次和有序部分从后往前比较，</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - <span class=\"number\">1</span>; j &gt;<span class=\"number\">0</span>; j--) &#123;</div><div class=\"line\">                <span class=\"comment\">//如果取出的元素小于有序部分的元素，</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (a[j] &gt; value) &#123;</div><div class=\"line\">                    <span class=\"comment\">//那么有序部分的元素往后移动一位 即有序部分下标+1</span></div><div class=\"line\">                    a[j+<span class=\"number\">1</span>] = a[j];</div><div class=\"line\">                    <span class=\"comment\">//否则结束比较，提取元素插入最后移动的哪个元素的位置</span></div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    a[j+<span class=\"number\">1</span>] = value;</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"MER-归并排序-递归实现\"><a href=\"#MER-归并排序-递归实现\" class=\"headerlink\" title=\"MER - 归并排序 (递归实现)\"></a>MER - 归并排序 (递归实现)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    *</div><div class=\"line\">    * <span class=\"doctag\">@param</span> 排序数组</div><div class=\"line\">    * <span class=\"doctag\">@param</span> 数组开头下标</div><div class=\"line\">    * <span class=\"doctag\">@param</span> 数组长度</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] mergeSort(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> h) &#123;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">if</span> (l == h) &#123;</div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;a[l]&#125;;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">int</span> middle = l+(h-l)/<span class=\"number\">2</span>;</div><div class=\"line\">       <span class=\"keyword\">int</span>[] leftArray = mergeSort(a, l, middle);</div><div class=\"line\">       <span class=\"keyword\">int</span>[] rightArray = mergeSort(a, middle+<span class=\"number\">1</span>, h);</div><div class=\"line\">       <span class=\"comment\">//新有序数组</span></div><div class=\"line\">       <span class=\"keyword\">int</span>[] newNum = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[leftArray.length + rightArray.length];</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">int</span> leftIndex=<span class=\"number\">0</span>,rightIndex=<span class=\"number\">0</span>,newIndex=<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">while</span> (leftIndex &lt; leftArray.length &amp;&amp; rightIndex &lt; rightArray.length) &#123;</div><div class=\"line\">           newNum[newIndex++]= leftArray[leftIndex]&lt;rightArray[rightIndex]?leftArray[leftIndex++]:rightArray[rightIndex++];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">while</span> (leftIndex &lt; leftArray.length) &#123;</div><div class=\"line\">           newNum[newIndex++] = leftArray[leftIndex++];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">while</span> (rightIndex &lt; rightArray.length) &#123;</div><div class=\"line\">           newNum[newIndex++] = rightArray[rightIndex++];</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">return</span> newNum;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"QUI-快速排序-递归实现\"><a href=\"#QUI-快速排序-递归实现\" class=\"headerlink\" title=\"QUI - 快速排序 (递归实现)\"></a>QUI - 快速排序 (递归实现)</h3><h3 id=\"R-Q-随机快速排序-递归实现\"><a href=\"#R-Q-随机快速排序-递归实现\" class=\"headerlink\" title=\"R-Q - 随机快速排序 (递归实现)\"></a>R-Q - 随机快速排序 (递归实现)</h3><h2 id=\"不基于比较的排序算法\"><a href=\"#不基于比较的排序算法\" class=\"headerlink\" title=\"不基于比较的排序算法:\"></a>不基于比较的排序算法:</h2><h3 id=\"COU-计数排序\"><a href=\"#COU-计数排序\" class=\"headerlink\" title=\"COU - 计数排序\"></a>COU - 计数排序</h3><h3 id=\"RAD-基数排序\"><a href=\"#RAD-基数排序\" class=\"headerlink\" title=\"RAD - 基数排序\"></a>RAD - 基数排序</h3>"},{"title":"消息队列","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n### 消息队列\n\n```mermaid\ngraph LR\n消息队列 --> B[队列] --> B1(使用场景)\nB1 --> 应用解耦\nB1 --> 服务通信\nB1 --> 削峰填谷\nB1 --> 消息广播\nB --> B2(消息协议)\nB2 --> JMS\nB2 --> AMQP\nB --> B3(常用队列)\nB3 --> RabbitMQ\nB3 --> ActiveMQ\nB3 --> RocketMQ\nB3 --> Kafka\n\n\n```\n<!-- more -->\n","source":"_posts/消息队列.md","raw":"---\ntitle: 消息队列\ncategories: [消息队列]\ntags: [消息队列]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n### 消息队列\n\n```mermaid\ngraph LR\n消息队列 --> B[队列] --> B1(使用场景)\nB1 --> 应用解耦\nB1 --> 服务通信\nB1 --> 削峰填谷\nB1 --> 消息广播\nB --> B2(消息协议)\nB2 --> JMS\nB2 --> AMQP\nB --> B3(常用队列)\nB3 --> RabbitMQ\nB3 --> ActiveMQ\nB3 --> RocketMQ\nB3 --> Kafka\n\n\n```\n<!-- more -->\n","slug":"消息队列","published":1,"updated":"2020-08-04T05:11:43.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ypy00azesqrp4p7m882","content":"<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p><pre class=\"mermaid\">graph LR<br>消息队列 –&gt; B[队列] –&gt; B1(使用场景)<br>B1 –&gt; 应用解耦<br>B1 –&gt; 服务通信<br>B1 –&gt; 削峰填谷<br>B1 –&gt; 消息广播<br>B –&gt; B2(消息协议)<br>B2 –&gt; JMS<br>B2 –&gt; AMQP<br>B –&gt; B3(常用队列)<br>B3 –&gt; RabbitMQ<br>B3 –&gt; ActiveMQ<br>B3 –&gt; RocketMQ<br>B3 –&gt; Kafka</pre><br><a id=\"more\"></a></p>\n","excerpt":"<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p><pre class=\"mermaid\">graph LR<br>消息队列 –&gt; B[队列] –&gt; B1(使用场景)<br>B1 –&gt; 应用解耦<br>B1 –&gt; 服务通信<br>B1 –&gt; 削峰填谷<br>B1 –&gt; 消息广播<br>B –&gt; B2(消息协议)<br>B2 –&gt; JMS<br>B2 –&gt; AMQP<br>B –&gt; B3(常用队列)<br>B3 –&gt; RabbitMQ<br>B3 –&gt; ActiveMQ<br>B3 –&gt; RocketMQ<br>B3 –&gt; Kafka</pre><br></p>","more":"<p></p>"},{"title":"深克隆","date":"2016-08-14T09:21:33.000Z","_content":"\n# 深克隆和浅克隆有什么区别\n\n","source":"_posts/深克隆和浅克隆有什么区别.md","raw":"---\ntitle: 深克隆\ndate: 2016-08-14 17:21:33\ncategories: [深克隆]\ntags: [深克隆]\n---\n\n# 深克隆和浅克隆有什么区别\n\n","slug":"深克隆和浅克隆有什么区别","published":1,"updated":"2020-09-28T10:38:36.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yq000b1esqrba9hoqnc","content":"<h1 id=\"深克隆和浅克隆有什么区别\"><a href=\"#深克隆和浅克隆有什么区别\" class=\"headerlink\" title=\"深克隆和浅克隆有什么区别\"></a>深克隆和浅克隆有什么区别</h1>","excerpt":"","more":"<h1 id=\"深克隆和浅克隆有什么区别\"><a href=\"#深克隆和浅克隆有什么区别\" class=\"headerlink\" title=\"深克隆和浅克隆有什么区别\"></a>深克隆和浅克隆有什么区别</h1>"},{"title":"类装载","date":"2017-08-14T09:21:33.000Z","_content":"\n类加载\n\n类的生命周期\n\n```mermaid\ngraph LR\n\nA(加载<br>loading) --> B(验证<br>Verification)--> C(准备<br>Preparation)-->D(解析<br>Resolution)-->E(初始化<br>Initialization)-->F(使用<br>Using)-->G(卸载<br>Unloading)\n\n```\n\n\n\n1. 虚拟机规范严格规定了有且只有5中情况必须立即对类进行初始化（而加载、验证、准备自然要在此之前）：\n2. 遇到new、getstatic、putstatic、或invokestatic这4条指令是，如果类没有进行过初始化，则先触发初始化。\n3. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则要先触发初始化。\n4. 当初始化一个类的时候，如果发现其父类还没有初始化，则要先触发其父类初始化。\n5. 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会初始化这个主类。\n6. 当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则要先触发初始化。\n\n","source":"_posts/类加载.md","raw":"---\ntitle: 类装载\ndate: 2017-08-14 17:21:33\ncategories: [类装载]\ntags: [类装载]\n---\n\n类加载\n\n类的生命周期\n\n```mermaid\ngraph LR\n\nA(加载<br>loading) --> B(验证<br>Verification)--> C(准备<br>Preparation)-->D(解析<br>Resolution)-->E(初始化<br>Initialization)-->F(使用<br>Using)-->G(卸载<br>Unloading)\n\n```\n\n\n\n1. 虚拟机规范严格规定了有且只有5中情况必须立即对类进行初始化（而加载、验证、准备自然要在此之前）：\n2. 遇到new、getstatic、putstatic、或invokestatic这4条指令是，如果类没有进行过初始化，则先触发初始化。\n3. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则要先触发初始化。\n4. 当初始化一个类的时候，如果发现其父类还没有初始化，则要先触发其父类初始化。\n5. 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会初始化这个主类。\n6. 当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则要先触发初始化。\n\n","slug":"类加载","published":1,"updated":"2020-09-28T10:35:20.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yq300b6esqrhgd5ogxa","content":"<p>类加载</p>\n<p>类的生命周期</p>\n<pre class=\"mermaid\">graph LR\n\nA(加载<br>loading) --> B(验证<br>Verification)--> C(准备<br>Preparation)-->D(解析<br>Resolution)-->E(初始化<br>Initialization)-->F(使用<br>Using)-->G(卸载<br>Unloading)</pre>\n\n\n\n<ol>\n<li>虚拟机规范严格规定了有且只有5中情况必须立即对类进行初始化（而加载、验证、准备自然要在此之前）：</li>\n<li>遇到new、getstatic、putstatic、或invokestatic这4条指令是，如果类没有进行过初始化，则先触发初始化。</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则要先触发初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有初始化，则要先触发其父类初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会初始化这个主类。</li>\n<li>当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则要先触发初始化。</li>\n</ol>\n","excerpt":"","more":"<p>类加载</p>\n<p>类的生命周期</p>\n<pre class=\"mermaid\">graph LR\n\nA(加载<br>loading) --> B(验证<br>Verification)--> C(准备<br>Preparation)-->D(解析<br>Resolution)-->E(初始化<br>Initialization)-->F(使用<br>Using)-->G(卸载<br>Unloading)</pre>\n\n\n\n<ol>\n<li>虚拟机规范严格规定了有且只有5中情况必须立即对类进行初始化（而加载、验证、准备自然要在此之前）：</li>\n<li>遇到new、getstatic、putstatic、或invokestatic这4条指令是，如果类没有进行过初始化，则先触发初始化。</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则要先触发初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有初始化，则要先触发其父类初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会初始化这个主类。</li>\n<li>当使用JDK1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行初始化，则要先触发初始化。</li>\n</ol>\n"},{"title":"类装载","date":"2016-08-14T09:21:33.000Z","_content":"\n## 类装载\n\n\n\n```mermaid\n\ngraph LR\n\nA(loading)-->B(verifying)-->C(preparing)-->D(resolving)-->E(initializing)-->F(using)-->G(unload)\n```\n\n\n\n- 在任何时刻，第一次**访问**某类，都会执行类装载\n- 访问包括三种情况：\n  - 使用某类的static方法\n  - 访问某类的static属性\n  - 构造某类的对象\n- 声明没有初始化的引用`Administrator admin;`,并不会导致类装载(This is lazy load)\n- 一个类的装载只会执行一次\n\n类装载的工作清单：\n\n1. 加载.class字节码文件：根据包语法决定的路径找到.class文件并加载\n2. 为static属性分配存储空间并全部置为默认值(Q:默认值是多少)\n3. 装载父类：如果这个类有父类，且父类还没有被装载过，则先装载它的父类；否则继续\n4. 进行类初始化：按照类定义中的顺序，从上到下初始化static属性和执行static块中的语句\n\n- 如果使用赋值运算符显示赋值，就执行赋值操作\n\n  ```\n  private static int count=0;\n  ```\n\n  - 如果等号右边的值所述的类尚未被装载，那么先装载等号右边的类再赋值\n\n- 如果没有用赋值运算符显示赋值，则什么也不干(保留默认值)\n\n  ```\n  private static Leader leader;\n  ```\n\n  - 即使这个属性所属的类尚未被装载，也不会去装载这个类lazy load\n\n- 如果static块中的语句会使用未装载的类，则先装载这个类，再执行这条语句\n\n  ```\n  static{...}\n  ```\n\n  - 即使本类的所有方法(包括构造器)都会使用未装载的类，也不会导致类加载；直到这些方法真正被执行的时候，才会判断使用到的类是否已被装载lazy load\n\n- static块的执行和static属性的初始化是用一个过程，执行的先后顺序只取决于他们在类中定义的顺序\n\n- 父类的初始化在父类的装载过程中完成\n\n### 对象构造\n\n1. 如果要构造的对象所属的类尚未被装载，先装载类\n2. 为非static属性分配存储空间并全部置默认值\n3. 调用父类constructor：如果这个类有父类，则先构造它的父类；否则继续\n   - 如果显示通过super初始化父类，那么super必须是constructor的第一行代码\n   - 根据类装载的顺序，此时父类一定被装载过了\n4. 初始化实例属性：按照**类定义中的顺序**，从上到下初始化非static属性\n5. 执行构造器中的其他代码，即super之外的所有代码","source":"_posts/类装载.md","raw":"---\ntitle: 类装载\ndate: 2016-08-14 17:21:33\ncategories: [类装载]\ntags: [类装载]\n---\n\n## 类装载\n\n\n\n```mermaid\n\ngraph LR\n\nA(loading)-->B(verifying)-->C(preparing)-->D(resolving)-->E(initializing)-->F(using)-->G(unload)\n```\n\n\n\n- 在任何时刻，第一次**访问**某类，都会执行类装载\n- 访问包括三种情况：\n  - 使用某类的static方法\n  - 访问某类的static属性\n  - 构造某类的对象\n- 声明没有初始化的引用`Administrator admin;`,并不会导致类装载(This is lazy load)\n- 一个类的装载只会执行一次\n\n类装载的工作清单：\n\n1. 加载.class字节码文件：根据包语法决定的路径找到.class文件并加载\n2. 为static属性分配存储空间并全部置为默认值(Q:默认值是多少)\n3. 装载父类：如果这个类有父类，且父类还没有被装载过，则先装载它的父类；否则继续\n4. 进行类初始化：按照类定义中的顺序，从上到下初始化static属性和执行static块中的语句\n\n- 如果使用赋值运算符显示赋值，就执行赋值操作\n\n  ```\n  private static int count=0;\n  ```\n\n  - 如果等号右边的值所述的类尚未被装载，那么先装载等号右边的类再赋值\n\n- 如果没有用赋值运算符显示赋值，则什么也不干(保留默认值)\n\n  ```\n  private static Leader leader;\n  ```\n\n  - 即使这个属性所属的类尚未被装载，也不会去装载这个类lazy load\n\n- 如果static块中的语句会使用未装载的类，则先装载这个类，再执行这条语句\n\n  ```\n  static{...}\n  ```\n\n  - 即使本类的所有方法(包括构造器)都会使用未装载的类，也不会导致类加载；直到这些方法真正被执行的时候，才会判断使用到的类是否已被装载lazy load\n\n- static块的执行和static属性的初始化是用一个过程，执行的先后顺序只取决于他们在类中定义的顺序\n\n- 父类的初始化在父类的装载过程中完成\n\n### 对象构造\n\n1. 如果要构造的对象所属的类尚未被装载，先装载类\n2. 为非static属性分配存储空间并全部置默认值\n3. 调用父类constructor：如果这个类有父类，则先构造它的父类；否则继续\n   - 如果显示通过super初始化父类，那么super必须是constructor的第一行代码\n   - 根据类装载的顺序，此时父类一定被装载过了\n4. 初始化实例属性：按照**类定义中的顺序**，从上到下初始化非static属性\n5. 执行构造器中的其他代码，即super之外的所有代码","slug":"类装载","published":1,"updated":"2020-09-28T10:34:58.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yq500b8esqrqp32x5mx","content":"<h2 id=\"类装载\"><a href=\"#类装载\" class=\"headerlink\" title=\"类装载\"></a>类装载</h2><pre class=\"mermaid\">\ngraph LR\n\nA(loading)-->B(verifying)-->C(preparing)-->D(resolving)-->E(initializing)-->F(using)-->G(unload)</pre>\n\n\n\n<ul>\n<li>在任何时刻，第一次<strong>访问</strong>某类，都会执行类装载</li>\n<li>访问包括三种情况：<ul>\n<li>使用某类的static方法</li>\n<li>访问某类的static属性</li>\n<li>构造某类的对象</li>\n</ul>\n</li>\n<li>声明没有初始化的引用<code>Administrator admin;</code>,并不会导致类装载(This is lazy load)</li>\n<li>一个类的装载只会执行一次</li>\n</ul>\n<p>类装载的工作清单：</p>\n<ol>\n<li>加载.class字节码文件：根据包语法决定的路径找到.class文件并加载</li>\n<li>为static属性分配存储空间并全部置为默认值(Q:默认值是多少)</li>\n<li>装载父类：如果这个类有父类，且父类还没有被装载过，则先装载它的父类；否则继续</li>\n<li>进行类初始化：按照类定义中的顺序，从上到下初始化static属性和执行static块中的语句</li>\n</ol>\n<ul>\n<li><p>如果使用赋值运算符显示赋值，就执行赋值操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static int count=0;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果等号右边的值所述的类尚未被装载，那么先装载等号右边的类再赋值</li>\n</ul>\n</li>\n<li><p>如果没有用赋值运算符显示赋值，则什么也不干(保留默认值)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Leader leader;</div></pre></td></tr></table></figure>\n<ul>\n<li>即使这个属性所属的类尚未被装载，也不会去装载这个类lazy load</li>\n</ul>\n</li>\n<li><p>如果static块中的语句会使用未装载的类，则先装载这个类，再执行这条语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">static&#123;...&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>即使本类的所有方法(包括构造器)都会使用未装载的类，也不会导致类加载；直到这些方法真正被执行的时候，才会判断使用到的类是否已被装载lazy load</li>\n</ul>\n</li>\n<li><p>static块的执行和static属性的初始化是用一个过程，执行的先后顺序只取决于他们在类中定义的顺序</p>\n</li>\n<li><p>父类的初始化在父类的装载过程中完成</p>\n</li>\n</ul>\n<h3 id=\"对象构造\"><a href=\"#对象构造\" class=\"headerlink\" title=\"对象构造\"></a>对象构造</h3><ol>\n<li>如果要构造的对象所属的类尚未被装载，先装载类</li>\n<li>为非static属性分配存储空间并全部置默认值</li>\n<li>调用父类constructor：如果这个类有父类，则先构造它的父类；否则继续<ul>\n<li>如果显示通过super初始化父类，那么super必须是constructor的第一行代码</li>\n<li>根据类装载的顺序，此时父类一定被装载过了</li>\n</ul>\n</li>\n<li>初始化实例属性：按照<strong>类定义中的顺序</strong>，从上到下初始化非static属性</li>\n<li>执行构造器中的其他代码，即super之外的所有代码</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"类装载\"><a href=\"#类装载\" class=\"headerlink\" title=\"类装载\"></a>类装载</h2><pre class=\"mermaid\">\ngraph LR\n\nA(loading)-->B(verifying)-->C(preparing)-->D(resolving)-->E(initializing)-->F(using)-->G(unload)</pre>\n\n\n\n<ul>\n<li>在任何时刻，第一次<strong>访问</strong>某类，都会执行类装载</li>\n<li>访问包括三种情况：<ul>\n<li>使用某类的static方法</li>\n<li>访问某类的static属性</li>\n<li>构造某类的对象</li>\n</ul>\n</li>\n<li>声明没有初始化的引用<code>Administrator admin;</code>,并不会导致类装载(This is lazy load)</li>\n<li>一个类的装载只会执行一次</li>\n</ul>\n<p>类装载的工作清单：</p>\n<ol>\n<li>加载.class字节码文件：根据包语法决定的路径找到.class文件并加载</li>\n<li>为static属性分配存储空间并全部置为默认值(Q:默认值是多少)</li>\n<li>装载父类：如果这个类有父类，且父类还没有被装载过，则先装载它的父类；否则继续</li>\n<li>进行类初始化：按照类定义中的顺序，从上到下初始化static属性和执行static块中的语句</li>\n</ol>\n<ul>\n<li><p>如果使用赋值运算符显示赋值，就执行赋值操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static int count=0;</div></pre></td></tr></table></figure>\n<ul>\n<li>如果等号右边的值所述的类尚未被装载，那么先装载等号右边的类再赋值</li>\n</ul>\n</li>\n<li><p>如果没有用赋值运算符显示赋值，则什么也不干(保留默认值)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static Leader leader;</div></pre></td></tr></table></figure>\n<ul>\n<li>即使这个属性所属的类尚未被装载，也不会去装载这个类lazy load</li>\n</ul>\n</li>\n<li><p>如果static块中的语句会使用未装载的类，则先装载这个类，再执行这条语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">static&#123;...&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>即使本类的所有方法(包括构造器)都会使用未装载的类，也不会导致类加载；直到这些方法真正被执行的时候，才会判断使用到的类是否已被装载lazy load</li>\n</ul>\n</li>\n<li><p>static块的执行和static属性的初始化是用一个过程，执行的先后顺序只取决于他们在类中定义的顺序</p>\n</li>\n<li><p>父类的初始化在父类的装载过程中完成</p>\n</li>\n</ul>\n<h3 id=\"对象构造\"><a href=\"#对象构造\" class=\"headerlink\" title=\"对象构造\"></a>对象构造</h3><ol>\n<li>如果要构造的对象所属的类尚未被装载，先装载类</li>\n<li>为非static属性分配存储空间并全部置默认值</li>\n<li>调用父类constructor：如果这个类有父类，则先构造它的父类；否则继续<ul>\n<li>如果显示通过super初始化父类，那么super必须是constructor的第一行代码</li>\n<li>根据类装载的顺序，此时父类一定被装载过了</li>\n</ul>\n</li>\n<li>初始化实例属性：按照<strong>类定义中的顺序</strong>，从上到下初始化非static属性</li>\n<li>执行构造器中的其他代码，即super之外的所有代码</li>\n</ol>\n"},{"title":"系统性能核心关注点","date":"2020-05-21T05:47:07.000Z","description":null,"_content":"\n```mermaid\ngraph LR\nA[系统性能核心关注点] -->B(基础设施优化)\nA --> C(系统层网络优化)\nA --> D(应用层编码优化)\nA --> E(分布式系统优化)\nC -->\n```\n\n<!-- more -->","source":"_posts/系统性能核心关注点.md","raw":"---\ntitle: 系统性能核心关注点\ncategories: [系统性能]\ntags: [系统性能]\ndate: 2020-05-21 13:47:07\ndescription:\n---\n\n```mermaid\ngraph LR\nA[系统性能核心关注点] -->B(基础设施优化)\nA --> C(系统层网络优化)\nA --> D(应用层编码优化)\nA --> E(分布式系统优化)\nC -->\n```\n\n<!-- more -->","slug":"系统性能核心关注点","published":1,"updated":"2020-08-04T05:11:43.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yq700bdesqrtnbcdzmj","content":"<pre class=\"mermaid\">graph LR\nA[系统性能核心关注点] -->B(基础设施优化)\nA --> C(系统层网络优化)\nA --> D(应用层编码优化)\nA --> E(分布式系统优化)\nC --></pre>\n\n<a id=\"more\"></a>","excerpt":"<pre class=\"mermaid\">graph LR\nA[系统性能核心关注点] -->B(基础设施优化)\nA --> C(系统层网络优化)\nA --> D(应用层编码优化)\nA --> E(分布式系统优化)\nC --></pre>","more":""},{"title":"Node.js 创建第一个应用","date":"2019-08-14T09:21:33.000Z","_content":"\n-- 缓存\n\n源码\n\n-- dubbo\n\nspring\n\nredis\n\nHashMap\n\njdk\n\n分布式\n\n-- 多线程 原理\n\njvm\n\nrpc\n\n\n\n流式\n\n\n\n分析数据库\n\n\n\n\n\n\n\n","source":"_posts/缓存.md","raw":"---\ntitle: Node.js 创建第一个应用\ndate: 2019-08-14 17:21:33\ncategories: [mst]\ntags: [缓存]\n---\n\n-- 缓存\n\n源码\n\n-- dubbo\n\nspring\n\nredis\n\nHashMap\n\njdk\n\n分布式\n\n-- 多线程 原理\n\njvm\n\nrpc\n\n\n\n流式\n\n\n\n分析数据库\n\n\n\n\n\n\n\n","slug":"缓存","published":1,"updated":"2020-09-28T10:34:40.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yq900bfesqrl8wtfaa3","content":"<p>– 缓存</p>\n<p>源码</p>\n<p>– dubbo</p>\n<p>spring</p>\n<p>redis</p>\n<p>HashMap</p>\n<p>jdk</p>\n<p>分布式</p>\n<p>– 多线程 原理</p>\n<p>jvm</p>\n<p>rpc</p>\n<p>流式</p>\n<p>分析数据库</p>\n","excerpt":"","more":"<p>– 缓存</p>\n<p>源码</p>\n<p>– dubbo</p>\n<p>spring</p>\n<p>redis</p>\n<p>HashMap</p>\n<p>jdk</p>\n<p>分布式</p>\n<p>– 多线程 原理</p>\n<p>jvm</p>\n<p>rpc</p>\n<p>流式</p>\n<p>分析数据库</p>\n"},{"title":"springboot启动器","date":"2020-06-28T03:09:07.000Z","description":null,"_content":"<!-- more -->\n## 编写springboot启动器（starter）\n\n\n\n### 命名规则\n\n- 官方 spring-boot-starter-模块名\n- 非官方（如我们自己编写的） 模块名-spring-boot-starter\n\n\n\n### 模块结构\n\n- Xxx-spring-boot-starter\n\n  引如自动装配模块，一般是个空工程\n\n- Xxx-spring-boot-autoconfigure\n\n  核心代码中的类文件：\n  1、XxxAutoConfiguration 自动配置类\n  2、XxxProperties 属性文件加载类，通过@EnableConfigurationProperties({XxxProperties.class})注入到spring容器中，使得在XxxAutoConfiguration中可以直接注入使用配置属性\n\n\n\n```\n@Configuration：定义配置类\n\n@EnableConfigurationProperties：属性类\n\n@AutoConfigureAfter: 自动配置应在XXX的自动配置类之后应用。\n\n@AutoConfigureBefore: 自动配置应在XXX的自动配置类之前应用\n\n@AutoConfigureOrder：定义配置类执行的顺序\n\n@ConditionalOnBean：当容器里有指定的Bean 时才生成\n\n@ConditionalOnMissingBean：当容器里没有指定Bean 时才生成\n\n@ConditionalOnClass：当类路径下有指定的类时才生成\n\n@ConditionalOnMissingClass：当类路径下没有指定的类时才生成\n\n@ConditionalOnExpression：基于SpEL 表达式作为判断条件。\n\n@ConditionalOnJava：基于JVM 版本作为判断条件。\n\n@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。\n\n@ConditionalOnProperty：指定的属性是否有指定的值。\n\n@ConditionalOnResource：类路径是否有指定的值。\n\n@ConditionalOnSingleCandidate：当指定Bean 在容器中只有一个，或者虽然有多个但是指定首选的Bean。\n\n@ConditionalOnWebApplication：当前项目是Web 项目的条件下。\n\n@ConditionalOnNotWebApplication：当前项目不是Web 项目的条件下。\n\n```\n\n### spring.factories配置\n\n在Xxx-spring-boot-autoconfigure模块下src/main/resources新建文件夹META-INF，然后新建一个spring.factories文件\n\n```properties\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.xxx.xxx.XxxAutoConfiguration\n```\n\n### 为ConfigurationProperties类生成元信息.\n\n在我们的autoconfiguration的模块中添加如下jar包依赖\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-configuration-processor</artifactId>\n   <optional>true</optional>\n</dependency>\n```\n\n\n","source":"_posts/编写springboot启动器.md","raw":"---\ntitle: springboot启动器\ncategories: [springboot]\ntags: [springboot]\ndate: 2020-06-28 11:09:07\ndescription:\n---\n<!-- more -->\n## 编写springboot启动器（starter）\n\n\n\n### 命名规则\n\n- 官方 spring-boot-starter-模块名\n- 非官方（如我们自己编写的） 模块名-spring-boot-starter\n\n\n\n### 模块结构\n\n- Xxx-spring-boot-starter\n\n  引如自动装配模块，一般是个空工程\n\n- Xxx-spring-boot-autoconfigure\n\n  核心代码中的类文件：\n  1、XxxAutoConfiguration 自动配置类\n  2、XxxProperties 属性文件加载类，通过@EnableConfigurationProperties({XxxProperties.class})注入到spring容器中，使得在XxxAutoConfiguration中可以直接注入使用配置属性\n\n\n\n```\n@Configuration：定义配置类\n\n@EnableConfigurationProperties：属性类\n\n@AutoConfigureAfter: 自动配置应在XXX的自动配置类之后应用。\n\n@AutoConfigureBefore: 自动配置应在XXX的自动配置类之前应用\n\n@AutoConfigureOrder：定义配置类执行的顺序\n\n@ConditionalOnBean：当容器里有指定的Bean 时才生成\n\n@ConditionalOnMissingBean：当容器里没有指定Bean 时才生成\n\n@ConditionalOnClass：当类路径下有指定的类时才生成\n\n@ConditionalOnMissingClass：当类路径下没有指定的类时才生成\n\n@ConditionalOnExpression：基于SpEL 表达式作为判断条件。\n\n@ConditionalOnJava：基于JVM 版本作为判断条件。\n\n@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。\n\n@ConditionalOnProperty：指定的属性是否有指定的值。\n\n@ConditionalOnResource：类路径是否有指定的值。\n\n@ConditionalOnSingleCandidate：当指定Bean 在容器中只有一个，或者虽然有多个但是指定首选的Bean。\n\n@ConditionalOnWebApplication：当前项目是Web 项目的条件下。\n\n@ConditionalOnNotWebApplication：当前项目不是Web 项目的条件下。\n\n```\n\n### spring.factories配置\n\n在Xxx-spring-boot-autoconfigure模块下src/main/resources新建文件夹META-INF，然后新建一个spring.factories文件\n\n```properties\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.xxx.xxx.XxxAutoConfiguration\n```\n\n### 为ConfigurationProperties类生成元信息.\n\n在我们的autoconfiguration的模块中添加如下jar包依赖\n\n```xml\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-configuration-processor</artifactId>\n   <optional>true</optional>\n</dependency>\n```\n\n\n","slug":"编写springboot启动器","published":1,"updated":"2020-08-04T04:57:28.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yqb00bjesqr6fo3s963","content":"<a id=\"more\"></a>\n<h2 id=\"编写springboot启动器（starter）\"><a href=\"#编写springboot启动器（starter）\" class=\"headerlink\" title=\"编写springboot启动器（starter）\"></a>编写springboot启动器（starter）</h2><h3 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h3><ul>\n<li>官方 spring-boot-starter-模块名</li>\n<li>非官方（如我们自己编写的） 模块名-spring-boot-starter</li>\n</ul>\n<h3 id=\"模块结构\"><a href=\"#模块结构\" class=\"headerlink\" title=\"模块结构\"></a>模块结构</h3><ul>\n<li><p>Xxx-spring-boot-starter</p>\n<p>引如自动装配模块，一般是个空工程</p>\n</li>\n<li><p>Xxx-spring-boot-autoconfigure</p>\n<p>核心代码中的类文件：<br>1、XxxAutoConfiguration 自动配置类<br>2、XxxProperties 属性文件加载类，通过@EnableConfigurationProperties({XxxProperties.class})注入到spring容器中，使得在XxxAutoConfiguration中可以直接注入使用配置属性</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configuration：定义配置类</div><div class=\"line\"></div><div class=\"line\">@EnableConfigurationProperties：属性类</div><div class=\"line\"></div><div class=\"line\">@AutoConfigureAfter: 自动配置应在XXX的自动配置类之后应用。</div><div class=\"line\"></div><div class=\"line\">@AutoConfigureBefore: 自动配置应在XXX的自动配置类之前应用</div><div class=\"line\"></div><div class=\"line\">@AutoConfigureOrder：定义配置类执行的顺序</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnBean：当容器里有指定的Bean 时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnMissingBean：当容器里没有指定Bean 时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnClass：当类路径下有指定的类时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnMissingClass：当类路径下没有指定的类时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnExpression：基于SpEL 表达式作为判断条件。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnJava：基于JVM 版本作为判断条件。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnProperty：指定的属性是否有指定的值。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnResource：类路径是否有指定的值。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnSingleCandidate：当指定Bean 在容器中只有一个，或者虽然有多个但是指定首选的Bean。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnWebApplication：当前项目是Web 项目的条件下。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnNotWebApplication：当前项目不是Web 项目的条件下。</div></pre></td></tr></table></figure>\n<h3 id=\"spring-factories配置\"><a href=\"#spring-factories配置\" class=\"headerlink\" title=\"spring.factories配置\"></a>spring.factories配置</h3><p>在Xxx-spring-boot-autoconfigure模块下src/main/resources新建文件夹META-INF，然后新建一个spring.factories文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</div><div class=\"line\">com.xxx.xxx.XxxAutoConfiguration</div></pre></td></tr></table></figure>\n<h3 id=\"为ConfigurationProperties类生成元信息\"><a href=\"#为ConfigurationProperties类生成元信息\" class=\"headerlink\" title=\"为ConfigurationProperties类生成元信息.\"></a>为ConfigurationProperties类生成元信息.</h3><p>在我们的autoconfiguration的模块中添加如下jar包依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"编写springboot启动器（starter）\"><a href=\"#编写springboot启动器（starter）\" class=\"headerlink\" title=\"编写springboot启动器（starter）\"></a>编写springboot启动器（starter）</h2><h3 id=\"命名规则\"><a href=\"#命名规则\" class=\"headerlink\" title=\"命名规则\"></a>命名规则</h3><ul>\n<li>官方 spring-boot-starter-模块名</li>\n<li>非官方（如我们自己编写的） 模块名-spring-boot-starter</li>\n</ul>\n<h3 id=\"模块结构\"><a href=\"#模块结构\" class=\"headerlink\" title=\"模块结构\"></a>模块结构</h3><ul>\n<li><p>Xxx-spring-boot-starter</p>\n<p>引如自动装配模块，一般是个空工程</p>\n</li>\n<li><p>Xxx-spring-boot-autoconfigure</p>\n<p>核心代码中的类文件：<br>1、XxxAutoConfiguration 自动配置类<br>2、XxxProperties 属性文件加载类，通过@EnableConfigurationProperties({XxxProperties.class})注入到spring容器中，使得在XxxAutoConfiguration中可以直接注入使用配置属性</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">@Configuration：定义配置类</div><div class=\"line\"></div><div class=\"line\">@EnableConfigurationProperties：属性类</div><div class=\"line\"></div><div class=\"line\">@AutoConfigureAfter: 自动配置应在XXX的自动配置类之后应用。</div><div class=\"line\"></div><div class=\"line\">@AutoConfigureBefore: 自动配置应在XXX的自动配置类之前应用</div><div class=\"line\"></div><div class=\"line\">@AutoConfigureOrder：定义配置类执行的顺序</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnBean：当容器里有指定的Bean 时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnMissingBean：当容器里没有指定Bean 时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnClass：当类路径下有指定的类时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnMissingClass：当类路径下没有指定的类时才生成</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnExpression：基于SpEL 表达式作为判断条件。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnJava：基于JVM 版本作为判断条件。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnJndi：在JNDI存在的条件下查找指定的位置。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnProperty：指定的属性是否有指定的值。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnResource：类路径是否有指定的值。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnSingleCandidate：当指定Bean 在容器中只有一个，或者虽然有多个但是指定首选的Bean。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnWebApplication：当前项目是Web 项目的条件下。</div><div class=\"line\"></div><div class=\"line\">@ConditionalOnNotWebApplication：当前项目不是Web 项目的条件下。</div></pre></td></tr></table></figure>\n<h3 id=\"spring-factories配置\"><a href=\"#spring-factories配置\" class=\"headerlink\" title=\"spring.factories配置\"></a>spring.factories配置</h3><p>在Xxx-spring-boot-autoconfigure模块下src/main/resources新建文件夹META-INF，然后新建一个spring.factories文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</div><div class=\"line\">com.xxx.xxx.XxxAutoConfiguration</div></pre></td></tr></table></figure>\n<h3 id=\"为ConfigurationProperties类生成元信息\"><a href=\"#为ConfigurationProperties类生成元信息\" class=\"headerlink\" title=\"为ConfigurationProperties类生成元信息.\"></a>为ConfigurationProperties类生成元信息.</h3><p>在我们的autoconfiguration的模块中添加如下jar包依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></div></pre></td></tr></table></figure>"},{"title":"问题大全","date":"2020-06-28T03:09:07.000Z","description":null,"_content":"<!-- more -->\n\nMycat，看过源码吗？聚合这块儿它怎么处理的\n\n限流怎么搞\n\n知道大概怎么个流程么，写个rpc框架\n\njvm内存了解么，新生代出问题了的话，你知道是为什么吗？怎么判断\n\n生产jvm调优有过经验么\n\n分布式事务怎么处理\n\n","source":"_posts/问题大全.md","raw":"---\ntitle: 问题大全\ncategories: [问题]\ntags: [问题]\ndate: 2020-06-28 11:09:07\ndescription:\n---\n<!-- more -->\n\nMycat，看过源码吗？聚合这块儿它怎么处理的\n\n限流怎么搞\n\n知道大概怎么个流程么，写个rpc框架\n\njvm内存了解么，新生代出问题了的话，你知道是为什么吗？怎么判断\n\n生产jvm调优有过经验么\n\n分布式事务怎么处理\n\n","slug":"问题大全","published":1,"updated":"2020-08-04T04:57:28.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yqe00blesqrr64jqxvt","content":"<a id=\"more\"></a>\n<p>Mycat，看过源码吗？聚合这块儿它怎么处理的</p>\n<p>限流怎么搞</p>\n<p>知道大概怎么个流程么，写个rpc框架</p>\n<p>jvm内存了解么，新生代出问题了的话，你知道是为什么吗？怎么判断</p>\n<p>生产jvm调优有过经验么</p>\n<p>分布式事务怎么处理</p>\n","excerpt":"","more":"<p>Mycat，看过源码吗？聚合这块儿它怎么处理的</p>\n<p>限流怎么搞</p>\n<p>知道大概怎么个流程么，写个rpc框架</p>\n<p>jvm内存了解么，新生代出问题了的话，你知道是为什么吗？怎么判断</p>\n<p>生产jvm调优有过经验么</p>\n<p>分布式事务怎么处理</p>"},{"title":"dubbo负载均衡","date":"2020-05-28T12:10:32.000Z","_content":"\n\n\nDubbo 提供了4种负载均衡实现，分别是：\n\n- 基于权重随机算法的 RandomLoadBalance；\n- 基于最少活跃调用数算法的 LeastActiveLoadBalance；\n- 基于 hash 一致性的 ConsistentHashLoadBalance；\n- 基于加权轮询算法的 RoundRobinLoadBalance；\n\n\n\n在 Dubbo 中，所有负载均衡实现类均继承自 AbstractLoadBalance，该类实现了 LoadBalance 接口，并封装了一些公共的逻辑。\n\n```java\n@Override\npublic <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n    if (invokers == null || invokers.isEmpty())\n        return null;\n    // 如果 invokers 列表中仅有一个 Invoker，直接返回即可，无需进行负载均衡\n    if (invokers.size() == 1)\n        return invokers.get(0);\n    \n    // 调用 doSelect 方法进行负载均衡，该方法为抽象方法，由子类实现\n    return doSelect(invokers, url, invocation);\n}\n\nprotected abstract <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation);\n```\n\n\n\n### RandomLoadBalance\n\n加权随机算法，算法思想：假如有一组服务器servers=[A,B,C]，他们对应的权重为weights[5,3,2],权重总和为10.现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) 区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上。比如数字3会落到服务器 A 对应的区间上，此时返回服务器 A 即可。权重越大的机器，在坐标轴上对应的区间范围就越大，因此随机数生成器生成的数字就会有更大的概率落到此区间内。只要随机数生成器产生的随机数分布性很好，在经过多次选择后，每个服务器被选中的次数比例接近其权重比例。\n\n```java\npublic class RandomLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"random\";\n\n    private final Random random = new Random();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        int totalWeight = 0;\n        boolean sameWeight = true;\n        // 下面这个循环有两个作用，第一是计算总权重 totalWeight，\n        // 第二是检测每个服务提供者的权重是否相同\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            // 累加权重\n            totalWeight += weight;\n            // 检测当前服务提供者的权重与上一个服务提供者的权重是否相同，\n            // 不相同的话，则将 sameWeight 置为 false。\n            if (sameWeight && i > 0\n                    && weight != getWeight(invokers.get(i - 1), invocation)) {\n                sameWeight = false;\n            }\n        }\n        \n        // 下面的 if 分支主要用于获取随机数，并计算随机数落在哪个区间上\n        if (totalWeight > 0 && !sameWeight) {\n            // 随机获取一个 [0, totalWeight) 区间内的数字\n            int offset = random.nextInt(totalWeight);\n            // 循环让 offset 数减去服务提供者权重值，当 offset 小于0时，返回相应的 Invoker。\n            // 举例说明一下，我们有 servers = [A, B, C]，weights = [5, 3, 2]，offset = 7。\n            // 第一次循环，offset - 5 = 2 > 0，即 offset > 5，\n            // 表明其不会落在服务器 A 对应的区间上。\n            // 第二次循环，offset - 3 = -1 < 0，即 5 < offset < 8，\n            // 表明其会落在服务器 B 对应的区间上\n            for (int i = 0; i < length; i++) {\n                // 让随机值 offset 减去权重值\n                offset -= getWeight(invokers.get(i), invocation);\n                if (offset < 0) {\n                    // 返回相应的 Invoker\n                    return invokers.get(i);\n                }\n            }\n        }\n        \n        // 如果所有服务提供者权重值相同，此时直接随机返回一个即可\n        return invokers.get(random.nextInt(length));\n    }\n}\n```\n\n\n\n### LeastActiveLoadBalance\n\nLeastActiveLoadBalance翻译过来是最小活跃数负载均衡。活跃调用数越小，表明该服务提供者效率越高，单位时间内可处理更多的请求。此时应优先将请求分配给该服务提供者。在具体实现中，每个服务提供者对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求、这就是最小活跃数负载均衡算法的基本思想。除了最小活跃数，LeastActiveLoadBalance 在实现上还引入了权重值。所以准确的来说，LeastActiveLoadBalance 是基于加权最小活跃数算法实现的。\n\n```java\npublic class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    private final Random random = new Random();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        // 最小的活跃数\n        int leastActive = -1;\n        // 具有相同“最小活跃数”的服务者提供者（以下用 Invoker 代称）数量\n        int leastCount = 0; \n        // leastIndexs 用于记录具有相同“最小活跃数”的 Invoker 在 invokers 列表中的下标信息\n        int[] leastIndexs = new int[length];\n        int totalWeight = 0;\n        // 第一个最小活跃数的 Invoker 权重值，用于与其他具有相同最小活跃数的 Invoker 的权重进行对比，\n        // 以检测是否“所有具有相同最小活跃数的 Invoker 的权重”均相等\n        int firstWeight = 0;\n        boolean sameWeight = true;\n\n        // 遍历 invokers 列表\n        for (int i = 0; i < length; i++) {\n            Invoker<T> invoker = invokers.get(i);\n            // 获取 Invoker 对应的活跃数\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();\n            // 获取权重 - ⭐️\n            int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);\n            // 发现更小的活跃数，重新开始\n            if (leastActive == -1 || active < leastActive) {\n            \t// 使用当前活跃数 active 更新最小活跃数 leastActive\n                leastActive = active;\n                // 更新 leastCount 为 1\n                leastCount = 1;\n                // 记录当前下标值到 leastIndexs 中\n                leastIndexs[0] = i;\n                totalWeight = weight;\n                firstWeight = weight;\n                sameWeight = true;\n\n            // 当前 Invoker 的活跃数 active 与最小活跃数 leastActive 相同 \n            } else if (active == leastActive) {\n            \t// 在 leastIndexs 中记录下当前 Invoker 在 invokers 集合中的下标\n                leastIndexs[leastCount++] = i;\n                // 累加权重\n                totalWeight += weight;\n                // 检测当前 Invoker 的权重与 firstWeight 是否相等，\n                // 不相等则将 sameWeight 置为 false\n                if (sameWeight && i > 0\n                    && weight != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n        \n        // 当只有一个 Invoker 具有最小活跃数，此时直接返回该 Invoker 即可\n        if (leastCount == 1) {\n            return invokers.get(leastIndexs[0]);\n        }\n\n        // 有多个 Invoker 具有相同的最小活跃数，但它们之间的权重不同\n        if (!sameWeight && totalWeight > 0) {\n        \t// 随机生成一个 [0, totalWeight) 之间的数字\n            int offsetWeight = random.nextInt(totalWeight);\n            // 循环让随机数减去具有最小活跃数的 Invoker 的权重值，\n            // 当 offset 小于等于0时，返回相应的 Invoker\n            for (int i = 0; i < leastCount; i++) {\n                int leastIndex = leastIndexs[i];\n                // 获取权重值，并让随机数减去权重值 - ⭐️\n                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);\n                if (offsetWeight <= 0)\n                    return invokers.get(leastIndex);\n            }\n        }\n        // 如果权重相同或权重为0时，随机返回一个 Invoker\n        return invokers.get(leastIndexs[random.nextInt(leastCount)]);\n    }\n}\n```\n\n大致的实现逻辑:\n\n1. 遍历 invokers 列表，寻找活跃数最小的 Invoker\n2. 如果有多个 Invoker 具有相同的最小活跃数，此时记录下这些 Invoker 在 invokers 集合中的下标，并累加它们的权重，比较它们的权重值是否相等\n3. 如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可\n4. 如果有多个 Invoker 具有最小活跃数，且它们的权重不相等，此时处理方式和 RandomLoadBalance 一致\n5. 如果有多个 Invoker 具有最小活跃数，但它们的权重相等，此时随机返回一个即可\n\n\n\n### ConsistentHashLoadBalance\n\n\n\n```java\npublic class ConsistentHashLoadBalance extends AbstractLoadBalance {\n\n    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = \n        new ConcurrentHashMap<String, ConsistentHashSelector<?>>();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String methodName = RpcUtils.getMethodName(invocation);\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + methodName;\n\n        // 获取 invokers 原始的 hashcode\n        int identityHashCode = System.identityHashCode(invokers);\n        ConsistentHashSelector<T> selector = (ConsistentHashSelector<T>) selectors.get(key);\n        // 如果 invokers 是一个新的 List 对象，意味着服务提供者数量发生了变化，可能新增也可能减少了。\n        // 此时 selector.identityHashCode != identityHashCode 条件成立\n        if (selector == null || selector.identityHashCode != identityHashCode) {\n            // 创建新的 ConsistentHashSelector\n            selectors.put(key, new ConsistentHashSelector<T>(invokers, methodName, identityHashCode));\n            selector = (ConsistentHashSelector<T>) selectors.get(key);\n        }\n\n        // 调用 ConsistentHashSelector 的 select 方法选择 Invoker\n        return selector.select(invocation);\n    }\n    \n    private static final class ConsistentHashSelector<T> {...}\n}\n```\n\n\n\n\n\n### RoundRobinLoadBalance\n\n```java\npublic class RoundRobinLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"roundrobin\";\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> sequences = \n        new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        // key = 全限定类名 + \".\" + 方法名，比如 com.xxx.DemoService.sayHello\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int length = invokers.size();\n        // 最大权重\n        int maxWeight = 0;\n        // 最小权重\n        int minWeight = Integer.MAX_VALUE;\n        final LinkedHashMap<Invoker<T>, IntegerWrapper> invokerToWeightMap = new LinkedHashMap<Invoker<T>, IntegerWrapper>();\n        // 权重总和\n        int weightSum = 0;\n\n        // 下面这个循环主要用于查找最大和最小权重，计算权重总和等\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            // 获取最大和最小权重\n            maxWeight = Math.max(maxWeight, weight);\n            minWeight = Math.min(minWeight, weight);\n            if (weight > 0) {\n                // 将 weight 封装到 IntegerWrapper 中\n                invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight));\n                // 累加权重\n                weightSum += weight;\n            }\n        }\n\n        // 查找 key 对应的对应 AtomicPositiveInteger 实例，为空则创建。\n        // 这里可以把 AtomicPositiveInteger 看成一个黑盒，大家只要知道\n        // AtomicPositiveInteger 用于记录服务的调用编号即可。至于细节，\n        // 大家如果感兴趣，可以自行分析\n        AtomicPositiveInteger sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new AtomicPositiveInteger());\n            sequence = sequences.get(key);\n        }\n\n        // 获取当前的调用编号\n        int currentSequence = sequence.getAndIncrement();\n        // 如果最小权重小于最大权重，表明服务提供者之间的权重是不相等的\n        if (maxWeight > 0 && minWeight < maxWeight) {\n            // 使用调用编号对权重总和进行取余操作\n            int mod = currentSequence % weightSum;\n            // 进行 maxWeight 次遍历\n            for (int i = 0; i < maxWeight; i++) {\n                // 遍历 invokerToWeightMap\n                for (Map.Entry<Invoker<T>, IntegerWrapper> each : invokerToWeightMap.entrySet()) {\n\t\t\t\t\t// 获取 Invoker\n                    final Invoker<T> k = each.getKey();\n                    // 获取权重包装类 IntegerWrapper\n                    final IntegerWrapper v = each.getValue();\n                    \n                    // 如果 mod = 0，且权重大于0，此时返回相应的 Invoker\n                    if (mod == 0 && v.getValue() > 0) {\n                        return k;\n                    }\n                    \n                    // mod != 0，且权重大于0，此时对权重和 mod 分别进行自减操作\n                    if (v.getValue() > 0) {\n                        v.decrement();\n                        mod--;\n                    }\n                }\n            }\n        }\n        \n        // 服务提供者之间的权重相等，此时通过轮询选择 Invoker\n        return invokers.get(currentSequence % length);\n    }\n\n    // IntegerWrapper 是一个 int 包装类，主要包含了一个自减方法。\n    private static final class IntegerWrapper {\n        private int value;\n\n        public void decrement() {\n            this.value--;\n        }\n        \n        // 省略部分代码\n    }\n}\n```\n\n","source":"_posts/dubbo文档摘抄.md","raw":"---\ntitle: dubbo负载均衡\ndate: 2020-05-28 20:10:32\ncategories: [dubbo]\ntags: [dubbo]\n---\n\n\n\nDubbo 提供了4种负载均衡实现，分别是：\n\n- 基于权重随机算法的 RandomLoadBalance；\n- 基于最少活跃调用数算法的 LeastActiveLoadBalance；\n- 基于 hash 一致性的 ConsistentHashLoadBalance；\n- 基于加权轮询算法的 RoundRobinLoadBalance；\n\n\n\n在 Dubbo 中，所有负载均衡实现类均继承自 AbstractLoadBalance，该类实现了 LoadBalance 接口，并封装了一些公共的逻辑。\n\n```java\n@Override\npublic <T> Invoker<T> select(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n    if (invokers == null || invokers.isEmpty())\n        return null;\n    // 如果 invokers 列表中仅有一个 Invoker，直接返回即可，无需进行负载均衡\n    if (invokers.size() == 1)\n        return invokers.get(0);\n    \n    // 调用 doSelect 方法进行负载均衡，该方法为抽象方法，由子类实现\n    return doSelect(invokers, url, invocation);\n}\n\nprotected abstract <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation);\n```\n\n\n\n### RandomLoadBalance\n\n加权随机算法，算法思想：假如有一组服务器servers=[A,B,C]，他们对应的权重为weights[5,3,2],权重总和为10.现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) 区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上。比如数字3会落到服务器 A 对应的区间上，此时返回服务器 A 即可。权重越大的机器，在坐标轴上对应的区间范围就越大，因此随机数生成器生成的数字就会有更大的概率落到此区间内。只要随机数生成器产生的随机数分布性很好，在经过多次选择后，每个服务器被选中的次数比例接近其权重比例。\n\n```java\npublic class RandomLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"random\";\n\n    private final Random random = new Random();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        int totalWeight = 0;\n        boolean sameWeight = true;\n        // 下面这个循环有两个作用，第一是计算总权重 totalWeight，\n        // 第二是检测每个服务提供者的权重是否相同\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            // 累加权重\n            totalWeight += weight;\n            // 检测当前服务提供者的权重与上一个服务提供者的权重是否相同，\n            // 不相同的话，则将 sameWeight 置为 false。\n            if (sameWeight && i > 0\n                    && weight != getWeight(invokers.get(i - 1), invocation)) {\n                sameWeight = false;\n            }\n        }\n        \n        // 下面的 if 分支主要用于获取随机数，并计算随机数落在哪个区间上\n        if (totalWeight > 0 && !sameWeight) {\n            // 随机获取一个 [0, totalWeight) 区间内的数字\n            int offset = random.nextInt(totalWeight);\n            // 循环让 offset 数减去服务提供者权重值，当 offset 小于0时，返回相应的 Invoker。\n            // 举例说明一下，我们有 servers = [A, B, C]，weights = [5, 3, 2]，offset = 7。\n            // 第一次循环，offset - 5 = 2 > 0，即 offset > 5，\n            // 表明其不会落在服务器 A 对应的区间上。\n            // 第二次循环，offset - 3 = -1 < 0，即 5 < offset < 8，\n            // 表明其会落在服务器 B 对应的区间上\n            for (int i = 0; i < length; i++) {\n                // 让随机值 offset 减去权重值\n                offset -= getWeight(invokers.get(i), invocation);\n                if (offset < 0) {\n                    // 返回相应的 Invoker\n                    return invokers.get(i);\n                }\n            }\n        }\n        \n        // 如果所有服务提供者权重值相同，此时直接随机返回一个即可\n        return invokers.get(random.nextInt(length));\n    }\n}\n```\n\n\n\n### LeastActiveLoadBalance\n\nLeastActiveLoadBalance翻译过来是最小活跃数负载均衡。活跃调用数越小，表明该服务提供者效率越高，单位时间内可处理更多的请求。此时应优先将请求分配给该服务提供者。在具体实现中，每个服务提供者对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求、这就是最小活跃数负载均衡算法的基本思想。除了最小活跃数，LeastActiveLoadBalance 在实现上还引入了权重值。所以准确的来说，LeastActiveLoadBalance 是基于加权最小活跃数算法实现的。\n\n```java\npublic class LeastActiveLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"leastactive\";\n\n    private final Random random = new Random();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        int length = invokers.size();\n        // 最小的活跃数\n        int leastActive = -1;\n        // 具有相同“最小活跃数”的服务者提供者（以下用 Invoker 代称）数量\n        int leastCount = 0; \n        // leastIndexs 用于记录具有相同“最小活跃数”的 Invoker 在 invokers 列表中的下标信息\n        int[] leastIndexs = new int[length];\n        int totalWeight = 0;\n        // 第一个最小活跃数的 Invoker 权重值，用于与其他具有相同最小活跃数的 Invoker 的权重进行对比，\n        // 以检测是否“所有具有相同最小活跃数的 Invoker 的权重”均相等\n        int firstWeight = 0;\n        boolean sameWeight = true;\n\n        // 遍历 invokers 列表\n        for (int i = 0; i < length; i++) {\n            Invoker<T> invoker = invokers.get(i);\n            // 获取 Invoker 对应的活跃数\n            int active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();\n            // 获取权重 - ⭐️\n            int weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);\n            // 发现更小的活跃数，重新开始\n            if (leastActive == -1 || active < leastActive) {\n            \t// 使用当前活跃数 active 更新最小活跃数 leastActive\n                leastActive = active;\n                // 更新 leastCount 为 1\n                leastCount = 1;\n                // 记录当前下标值到 leastIndexs 中\n                leastIndexs[0] = i;\n                totalWeight = weight;\n                firstWeight = weight;\n                sameWeight = true;\n\n            // 当前 Invoker 的活跃数 active 与最小活跃数 leastActive 相同 \n            } else if (active == leastActive) {\n            \t// 在 leastIndexs 中记录下当前 Invoker 在 invokers 集合中的下标\n                leastIndexs[leastCount++] = i;\n                // 累加权重\n                totalWeight += weight;\n                // 检测当前 Invoker 的权重与 firstWeight 是否相等，\n                // 不相等则将 sameWeight 置为 false\n                if (sameWeight && i > 0\n                    && weight != firstWeight) {\n                    sameWeight = false;\n                }\n            }\n        }\n        \n        // 当只有一个 Invoker 具有最小活跃数，此时直接返回该 Invoker 即可\n        if (leastCount == 1) {\n            return invokers.get(leastIndexs[0]);\n        }\n\n        // 有多个 Invoker 具有相同的最小活跃数，但它们之间的权重不同\n        if (!sameWeight && totalWeight > 0) {\n        \t// 随机生成一个 [0, totalWeight) 之间的数字\n            int offsetWeight = random.nextInt(totalWeight);\n            // 循环让随机数减去具有最小活跃数的 Invoker 的权重值，\n            // 当 offset 小于等于0时，返回相应的 Invoker\n            for (int i = 0; i < leastCount; i++) {\n                int leastIndex = leastIndexs[i];\n                // 获取权重值，并让随机数减去权重值 - ⭐️\n                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);\n                if (offsetWeight <= 0)\n                    return invokers.get(leastIndex);\n            }\n        }\n        // 如果权重相同或权重为0时，随机返回一个 Invoker\n        return invokers.get(leastIndexs[random.nextInt(leastCount)]);\n    }\n}\n```\n\n大致的实现逻辑:\n\n1. 遍历 invokers 列表，寻找活跃数最小的 Invoker\n2. 如果有多个 Invoker 具有相同的最小活跃数，此时记录下这些 Invoker 在 invokers 集合中的下标，并累加它们的权重，比较它们的权重值是否相等\n3. 如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可\n4. 如果有多个 Invoker 具有最小活跃数，且它们的权重不相等，此时处理方式和 RandomLoadBalance 一致\n5. 如果有多个 Invoker 具有最小活跃数，但它们的权重相等，此时随机返回一个即可\n\n\n\n### ConsistentHashLoadBalance\n\n\n\n```java\npublic class ConsistentHashLoadBalance extends AbstractLoadBalance {\n\n    private final ConcurrentMap<String, ConsistentHashSelector<?>> selectors = \n        new ConcurrentHashMap<String, ConsistentHashSelector<?>>();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        String methodName = RpcUtils.getMethodName(invocation);\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + methodName;\n\n        // 获取 invokers 原始的 hashcode\n        int identityHashCode = System.identityHashCode(invokers);\n        ConsistentHashSelector<T> selector = (ConsistentHashSelector<T>) selectors.get(key);\n        // 如果 invokers 是一个新的 List 对象，意味着服务提供者数量发生了变化，可能新增也可能减少了。\n        // 此时 selector.identityHashCode != identityHashCode 条件成立\n        if (selector == null || selector.identityHashCode != identityHashCode) {\n            // 创建新的 ConsistentHashSelector\n            selectors.put(key, new ConsistentHashSelector<T>(invokers, methodName, identityHashCode));\n            selector = (ConsistentHashSelector<T>) selectors.get(key);\n        }\n\n        // 调用 ConsistentHashSelector 的 select 方法选择 Invoker\n        return selector.select(invocation);\n    }\n    \n    private static final class ConsistentHashSelector<T> {...}\n}\n```\n\n\n\n\n\n### RoundRobinLoadBalance\n\n```java\npublic class RoundRobinLoadBalance extends AbstractLoadBalance {\n\n    public static final String NAME = \"roundrobin\";\n\n    private final ConcurrentMap<String, AtomicPositiveInteger> sequences = \n        new ConcurrentHashMap<String, AtomicPositiveInteger>();\n\n    @Override\n    protected <T> Invoker<T> doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation) {\n        // key = 全限定类名 + \".\" + 方法名，比如 com.xxx.DemoService.sayHello\n        String key = invokers.get(0).getUrl().getServiceKey() + \".\" + invocation.getMethodName();\n        int length = invokers.size();\n        // 最大权重\n        int maxWeight = 0;\n        // 最小权重\n        int minWeight = Integer.MAX_VALUE;\n        final LinkedHashMap<Invoker<T>, IntegerWrapper> invokerToWeightMap = new LinkedHashMap<Invoker<T>, IntegerWrapper>();\n        // 权重总和\n        int weightSum = 0;\n\n        // 下面这个循环主要用于查找最大和最小权重，计算权重总和等\n        for (int i = 0; i < length; i++) {\n            int weight = getWeight(invokers.get(i), invocation);\n            // 获取最大和最小权重\n            maxWeight = Math.max(maxWeight, weight);\n            minWeight = Math.min(minWeight, weight);\n            if (weight > 0) {\n                // 将 weight 封装到 IntegerWrapper 中\n                invokerToWeightMap.put(invokers.get(i), new IntegerWrapper(weight));\n                // 累加权重\n                weightSum += weight;\n            }\n        }\n\n        // 查找 key 对应的对应 AtomicPositiveInteger 实例，为空则创建。\n        // 这里可以把 AtomicPositiveInteger 看成一个黑盒，大家只要知道\n        // AtomicPositiveInteger 用于记录服务的调用编号即可。至于细节，\n        // 大家如果感兴趣，可以自行分析\n        AtomicPositiveInteger sequence = sequences.get(key);\n        if (sequence == null) {\n            sequences.putIfAbsent(key, new AtomicPositiveInteger());\n            sequence = sequences.get(key);\n        }\n\n        // 获取当前的调用编号\n        int currentSequence = sequence.getAndIncrement();\n        // 如果最小权重小于最大权重，表明服务提供者之间的权重是不相等的\n        if (maxWeight > 0 && minWeight < maxWeight) {\n            // 使用调用编号对权重总和进行取余操作\n            int mod = currentSequence % weightSum;\n            // 进行 maxWeight 次遍历\n            for (int i = 0; i < maxWeight; i++) {\n                // 遍历 invokerToWeightMap\n                for (Map.Entry<Invoker<T>, IntegerWrapper> each : invokerToWeightMap.entrySet()) {\n\t\t\t\t\t// 获取 Invoker\n                    final Invoker<T> k = each.getKey();\n                    // 获取权重包装类 IntegerWrapper\n                    final IntegerWrapper v = each.getValue();\n                    \n                    // 如果 mod = 0，且权重大于0，此时返回相应的 Invoker\n                    if (mod == 0 && v.getValue() > 0) {\n                        return k;\n                    }\n                    \n                    // mod != 0，且权重大于0，此时对权重和 mod 分别进行自减操作\n                    if (v.getValue() > 0) {\n                        v.decrement();\n                        mod--;\n                    }\n                }\n            }\n        }\n        \n        // 服务提供者之间的权重相等，此时通过轮询选择 Invoker\n        return invokers.get(currentSequence % length);\n    }\n\n    // IntegerWrapper 是一个 int 包装类，主要包含了一个自减方法。\n    private static final class IntegerWrapper {\n        private int value;\n\n        public void decrement() {\n            this.value--;\n        }\n        \n        // 省略部分代码\n    }\n}\n```\n\n","slug":"dubbo文档摘抄","published":1,"updated":"2020-09-28T10:49:07.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ysl00f9esqr6mwnihme","content":"<p>Dubbo 提供了4种负载均衡实现，分别是：</p>\n<ul>\n<li>基于权重随机算法的 RandomLoadBalance；</li>\n<li>基于最少活跃调用数算法的 LeastActiveLoadBalance；</li>\n<li>基于 hash 一致性的 ConsistentHashLoadBalance；</li>\n<li>基于加权轮询算法的 RoundRobinLoadBalance；</li>\n</ul>\n<p>在 Dubbo 中，所有负载均衡实现类均继承自 AbstractLoadBalance，该类实现了 LoadBalance 接口，并封装了一些公共的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">select</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (invokers == <span class=\"keyword\">null</span> || invokers.isEmpty())</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// 如果 invokers 列表中仅有一个 Invoker，直接返回即可，无需进行负载均衡</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (invokers.size() == <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(<span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 调用 doSelect 方法进行负载均衡，该方法为抽象方法，由子类实现</span></div><div class=\"line\">    <span class=\"keyword\">return</span> doSelect(invokers, url, invocation);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"RandomLoadBalance\"><a href=\"#RandomLoadBalance\" class=\"headerlink\" title=\"RandomLoadBalance\"></a>RandomLoadBalance</h3><p>加权随机算法，算法思想：假如有一组服务器servers=[A,B,C]，他们对应的权重为weights[5,3,2],权重总和为10.现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) 区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上。比如数字3会落到服务器 A 对应的区间上，此时返回服务器 A 即可。权重越大的机器，在坐标轴上对应的区间范围就越大，因此随机数生成器生成的数字就会有更大的概率落到此区间内。只要随机数生成器产生的随机数分布性很好，在经过多次选择后，每个服务器被选中的次数比例接近其权重比例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"random\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"comment\">// 下面这个循环有两个作用，第一是计算总权重 totalWeight，</span></div><div class=\"line\">        <span class=\"comment\">// 第二是检测每个服务提供者的权重是否相同</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</div><div class=\"line\">            <span class=\"comment\">// 累加权重</span></div><div class=\"line\">            totalWeight += weight;</div><div class=\"line\">            <span class=\"comment\">// 检测当前服务提供者的权重与上一个服务提供者的权重是否相同，</span></div><div class=\"line\">            <span class=\"comment\">// 不相同的话，则将 sameWeight 置为 false。</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></div><div class=\"line\">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class=\"number\">1</span>), invocation)) &#123;</div><div class=\"line\">                sameWeight = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 下面的 if 分支主要用于获取随机数，并计算随机数落在哪个区间上</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (totalWeight &gt; <span class=\"number\">0</span> &amp;&amp; !sameWeight) &#123;</div><div class=\"line\">            <span class=\"comment\">// 随机获取一个 [0, totalWeight) 区间内的数字</span></div><div class=\"line\">            <span class=\"keyword\">int</span> offset = random.nextInt(totalWeight);</div><div class=\"line\">            <span class=\"comment\">// 循环让 offset 数减去服务提供者权重值，当 offset 小于0时，返回相应的 Invoker。</span></div><div class=\"line\">            <span class=\"comment\">// 举例说明一下，我们有 servers = [A, B, C]，weights = [5, 3, 2]，offset = 7。</span></div><div class=\"line\">            <span class=\"comment\">// 第一次循环，offset - 5 = 2 &gt; 0，即 offset &gt; 5，</span></div><div class=\"line\">            <span class=\"comment\">// 表明其不会落在服务器 A 对应的区间上。</span></div><div class=\"line\">            <span class=\"comment\">// 第二次循环，offset - 3 = -1 &lt; 0，即 5 &lt; offset &lt; 8，</span></div><div class=\"line\">            <span class=\"comment\">// 表明其会落在服务器 B 对应的区间上</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">                <span class=\"comment\">// 让随机值 offset 减去权重值</span></div><div class=\"line\">                offset -= getWeight(invokers.get(i), invocation);</div><div class=\"line\">                <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 返回相应的 Invoker</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(i);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 如果所有服务提供者权重值相同，此时直接随机返回一个即可</span></div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(random.nextInt(length));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"LeastActiveLoadBalance\"><a href=\"#LeastActiveLoadBalance\" class=\"headerlink\" title=\"LeastActiveLoadBalance\"></a>LeastActiveLoadBalance</h3><p>LeastActiveLoadBalance翻译过来是最小活跃数负载均衡。活跃调用数越小，表明该服务提供者效率越高，单位时间内可处理更多的请求。此时应优先将请求分配给该服务提供者。在具体实现中，每个服务提供者对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求、这就是最小活跃数负载均衡算法的基本思想。除了最小活跃数，LeastActiveLoadBalance 在实现上还引入了权重值。所以准确的来说，LeastActiveLoadBalance 是基于加权最小活跃数算法实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeastActiveLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"leastactive\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size();</div><div class=\"line\">        <span class=\"comment\">// 最小的活跃数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> leastActive = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"comment\">// 具有相同“最小活跃数”的服务者提供者（以下用 Invoker 代称）数量</span></div><div class=\"line\">        <span class=\"keyword\">int</span> leastCount = <span class=\"number\">0</span>; </div><div class=\"line\">        <span class=\"comment\">// leastIndexs 用于记录具有相同“最小活跃数”的 Invoker 在 invokers 列表中的下标信息</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] leastIndexs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</div><div class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"comment\">// 第一个最小活跃数的 Invoker 权重值，用于与其他具有相同最小活跃数的 Invoker 的权重进行对比，</span></div><div class=\"line\">        <span class=\"comment\">// 以检测是否“所有具有相同最小活跃数的 Invoker 的权重”均相等</span></div><div class=\"line\">        <span class=\"keyword\">int</span> firstWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 遍历 invokers 列表</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">            Invoker&lt;T&gt; invoker = invokers.get(i);</div><div class=\"line\">            <span class=\"comment\">// 获取 Invoker 对应的活跃数</span></div><div class=\"line\">            <span class=\"keyword\">int</span> active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();</div><div class=\"line\">            <span class=\"comment\">// 获取权重 - ⭐️</span></div><div class=\"line\">            <span class=\"keyword\">int</span> weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);</div><div class=\"line\">            <span class=\"comment\">// 发现更小的活跃数，重新开始</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (leastActive == -<span class=\"number\">1</span> || active &lt; leastActive) &#123;</div><div class=\"line\">            \t<span class=\"comment\">// 使用当前活跃数 active 更新最小活跃数 leastActive</span></div><div class=\"line\">                leastActive = active;</div><div class=\"line\">                <span class=\"comment\">// 更新 leastCount 为 1</span></div><div class=\"line\">                leastCount = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"comment\">// 记录当前下标值到 leastIndexs 中</span></div><div class=\"line\">                leastIndexs[<span class=\"number\">0</span>] = i;</div><div class=\"line\">                totalWeight = weight;</div><div class=\"line\">                firstWeight = weight;</div><div class=\"line\">                sameWeight = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 当前 Invoker 的活跃数 active 与最小活跃数 leastActive 相同 </span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (active == leastActive) &#123;</div><div class=\"line\">            \t<span class=\"comment\">// 在 leastIndexs 中记录下当前 Invoker 在 invokers 集合中的下标</span></div><div class=\"line\">                leastIndexs[leastCount++] = i;</div><div class=\"line\">                <span class=\"comment\">// 累加权重</span></div><div class=\"line\">                totalWeight += weight;</div><div class=\"line\">                <span class=\"comment\">// 检测当前 Invoker 的权重与 firstWeight 是否相等，</span></div><div class=\"line\">                <span class=\"comment\">// 不相等则将 sameWeight 置为 false</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></div><div class=\"line\">                    &amp;&amp; weight != firstWeight) &#123;</div><div class=\"line\">                    sameWeight = <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 当只有一个 Invoker 具有最小活跃数，此时直接返回该 Invoker 即可</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (leastCount == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> invokers.get(leastIndexs[<span class=\"number\">0</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 有多个 Invoker 具有相同的最小活跃数，但它们之间的权重不同</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        \t<span class=\"comment\">// 随机生成一个 [0, totalWeight) 之间的数字</span></div><div class=\"line\">            <span class=\"keyword\">int</span> offsetWeight = random.nextInt(totalWeight);</div><div class=\"line\">            <span class=\"comment\">// 循环让随机数减去具有最小活跃数的 Invoker 的权重值，</span></div><div class=\"line\">            <span class=\"comment\">// 当 offset 小于等于0时，返回相应的 Invoker</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; leastCount; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> leastIndex = leastIndexs[i];</div><div class=\"line\">                <span class=\"comment\">// 获取权重值，并让随机数减去权重值 - ⭐️</span></div><div class=\"line\">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</div><div class=\"line\">                <span class=\"keyword\">if</span> (offsetWeight &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(leastIndex);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 如果权重相同或权重为0时，随机返回一个 Invoker</span></div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大致的实现逻辑:</p>\n<ol>\n<li>遍历 invokers 列表，寻找活跃数最小的 Invoker</li>\n<li>如果有多个 Invoker 具有相同的最小活跃数，此时记录下这些 Invoker 在 invokers 集合中的下标，并累加它们的权重，比较它们的权重值是否相等</li>\n<li>如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可</li>\n<li>如果有多个 Invoker 具有最小活跃数，且它们的权重不相等，此时处理方式和 RandomLoadBalance 一致</li>\n<li>如果有多个 Invoker 具有最小活跃数，但它们的权重相等，此时随机返回一个即可</li>\n</ol>\n<h3 id=\"ConsistentHashLoadBalance\"><a href=\"#ConsistentHashLoadBalance\" class=\"headerlink\" title=\"ConsistentHashLoadBalance\"></a>ConsistentHashLoadBalance</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = </div><div class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        String methodName = RpcUtils.getMethodName(invocation);</div><div class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + methodName;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取 invokers 原始的 hashcode</span></div><div class=\"line\">        <span class=\"keyword\">int</span> identityHashCode = System.identityHashCode(invokers);</div><div class=\"line\">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</div><div class=\"line\">        <span class=\"comment\">// 如果 invokers 是一个新的 List 对象，意味着服务提供者数量发生了变化，可能新增也可能减少了。</span></div><div class=\"line\">        <span class=\"comment\">// 此时 selector.identityHashCode != identityHashCode 条件成立</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (selector == <span class=\"keyword\">null</span> || selector.identityHashCode != identityHashCode) &#123;</div><div class=\"line\">            <span class=\"comment\">// 创建新的 ConsistentHashSelector</span></div><div class=\"line\">            selectors.put(key, <span class=\"keyword\">new</span> ConsistentHashSelector&lt;T&gt;(invokers, methodName, identityHashCode));</div><div class=\"line\">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用 ConsistentHashSelector 的 select 方法选择 Invoker</span></div><div class=\"line\">        <span class=\"keyword\">return</span> selector.select(invocation);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashSelector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RoundRobinLoadBalance\"><a href=\"#RoundRobinLoadBalance\" class=\"headerlink\" title=\"RoundRobinLoadBalance\"></a>RoundRobinLoadBalance</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobinLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"roundrobin\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = </div><div class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, AtomicPositiveInteger&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// key = 全限定类名 + \".\" + 方法名，比如 com.xxx.DemoService.sayHello</span></div><div class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + invocation.getMethodName();</div><div class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size();</div><div class=\"line\">        <span class=\"comment\">// 最大权重</span></div><div class=\"line\">        <span class=\"keyword\">int</span> maxWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"comment\">// 最小权重</span></div><div class=\"line\">        <span class=\"keyword\">int</span> minWeight = Integer.MAX_VALUE;</div><div class=\"line\">        <span class=\"keyword\">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</div><div class=\"line\">        <span class=\"comment\">// 权重总和</span></div><div class=\"line\">        <span class=\"keyword\">int</span> weightSum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 下面这个循环主要用于查找最大和最小权重，计算权重总和等</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</div><div class=\"line\">            <span class=\"comment\">// 获取最大和最小权重</span></div><div class=\"line\">            maxWeight = Math.max(maxWeight, weight);</div><div class=\"line\">            minWeight = Math.min(minWeight, weight);</div><div class=\"line\">            <span class=\"keyword\">if</span> (weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// 将 weight 封装到 IntegerWrapper 中</span></div><div class=\"line\">                invokerToWeightMap.put(invokers.get(i), <span class=\"keyword\">new</span> IntegerWrapper(weight));</div><div class=\"line\">                <span class=\"comment\">// 累加权重</span></div><div class=\"line\">                weightSum += weight;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 查找 key 对应的对应 AtomicPositiveInteger 实例，为空则创建。</span></div><div class=\"line\">        <span class=\"comment\">// 这里可以把 AtomicPositiveInteger 看成一个黑盒，大家只要知道</span></div><div class=\"line\">        <span class=\"comment\">// AtomicPositiveInteger 用于记录服务的调用编号即可。至于细节，</span></div><div class=\"line\">        <span class=\"comment\">// 大家如果感兴趣，可以自行分析</span></div><div class=\"line\">        AtomicPositiveInteger sequence = sequences.get(key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sequence == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sequences.putIfAbsent(key, <span class=\"keyword\">new</span> AtomicPositiveInteger());</div><div class=\"line\">            sequence = sequences.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取当前的调用编号</span></div><div class=\"line\">        <span class=\"keyword\">int</span> currentSequence = sequence.getAndIncrement();</div><div class=\"line\">        <span class=\"comment\">// 如果最小权重小于最大权重，表明服务提供者之间的权重是不相等的</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (maxWeight &gt; <span class=\"number\">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123;</div><div class=\"line\">            <span class=\"comment\">// 使用调用编号对权重总和进行取余操作</span></div><div class=\"line\">            <span class=\"keyword\">int</span> mod = currentSequence % weightSum;</div><div class=\"line\">            <span class=\"comment\">// 进行 maxWeight 次遍历</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxWeight; i++) &#123;</div><div class=\"line\">                <span class=\"comment\">// 遍历 invokerToWeightMap</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取 Invoker</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> Invoker&lt;T&gt; k = each.getKey();</div><div class=\"line\">                    <span class=\"comment\">// 获取权重包装类 IntegerWrapper</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> IntegerWrapper v = each.getValue();</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// 如果 mod = 0，且权重大于0，此时返回相应的 Invoker</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (mod == <span class=\"number\">0</span> &amp;&amp; v.getValue() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> k;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// mod != 0，且权重大于0，此时对权重和 mod 分别进行自减操作</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (v.getValue() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        v.decrement();</div><div class=\"line\">                        mod--;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 服务提供者之间的权重相等，此时通过轮询选择 Invoker</span></div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(currentSequence % length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// IntegerWrapper 是一个 int 包装类，主要包含了一个自减方法。</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerWrapper</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrement</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 省略部分代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Dubbo 提供了4种负载均衡实现，分别是：</p>\n<ul>\n<li>基于权重随机算法的 RandomLoadBalance；</li>\n<li>基于最少活跃调用数算法的 LeastActiveLoadBalance；</li>\n<li>基于 hash 一致性的 ConsistentHashLoadBalance；</li>\n<li>基于加权轮询算法的 RoundRobinLoadBalance；</li>\n</ul>\n<p>在 Dubbo 中，所有负载均衡实现类均继承自 AbstractLoadBalance，该类实现了 LoadBalance 接口，并封装了一些公共的逻辑。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">select</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (invokers == <span class=\"keyword\">null</span> || invokers.isEmpty())</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">// 如果 invokers 列表中仅有一个 Invoker，直接返回即可，无需进行负载均衡</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (invokers.size() == <span class=\"number\">1</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(<span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// 调用 doSelect 方法进行负载均衡，该方法为抽象方法，由子类实现</span></div><div class=\"line\">    <span class=\"keyword\">return</span> doSelect(invokers, url, invocation);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span></span>;</div></pre></td></tr></table></figure>\n<h3 id=\"RandomLoadBalance\"><a href=\"#RandomLoadBalance\" class=\"headerlink\" title=\"RandomLoadBalance\"></a>RandomLoadBalance</h3><p>加权随机算法，算法思想：假如有一组服务器servers=[A,B,C]，他们对应的权重为weights[5,3,2],权重总和为10.现在把这些权重值平铺在一维坐标值上，[0, 5) 区间属于服务器 A，[5, 8) 区间属于服务器 B，[8, 10) 区间属于服务器 C。接下来通过随机数生成器生成一个范围在 [0, 10) 之间的随机数，然后计算这个随机数会落到哪个区间上。比如数字3会落到服务器 A 对应的区间上，此时返回服务器 A 即可。权重越大的机器，在坐标轴上对应的区间范围就越大，因此随机数生成器生成的数字就会有更大的概率落到此区间内。只要随机数生成器产生的随机数分布性很好，在经过多次选择后，每个服务器被选中的次数比例接近其权重比例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"random\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size();</div><div class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>;</div><div class=\"line\">        <span class=\"comment\">// 下面这个循环有两个作用，第一是计算总权重 totalWeight，</span></div><div class=\"line\">        <span class=\"comment\">// 第二是检测每个服务提供者的权重是否相同</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</div><div class=\"line\">            <span class=\"comment\">// 累加权重</span></div><div class=\"line\">            totalWeight += weight;</div><div class=\"line\">            <span class=\"comment\">// 检测当前服务提供者的权重与上一个服务提供者的权重是否相同，</span></div><div class=\"line\">            <span class=\"comment\">// 不相同的话，则将 sameWeight 置为 false。</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></div><div class=\"line\">                    &amp;&amp; weight != getWeight(invokers.get(i - <span class=\"number\">1</span>), invocation)) &#123;</div><div class=\"line\">                sameWeight = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 下面的 if 分支主要用于获取随机数，并计算随机数落在哪个区间上</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (totalWeight &gt; <span class=\"number\">0</span> &amp;&amp; !sameWeight) &#123;</div><div class=\"line\">            <span class=\"comment\">// 随机获取一个 [0, totalWeight) 区间内的数字</span></div><div class=\"line\">            <span class=\"keyword\">int</span> offset = random.nextInt(totalWeight);</div><div class=\"line\">            <span class=\"comment\">// 循环让 offset 数减去服务提供者权重值，当 offset 小于0时，返回相应的 Invoker。</span></div><div class=\"line\">            <span class=\"comment\">// 举例说明一下，我们有 servers = [A, B, C]，weights = [5, 3, 2]，offset = 7。</span></div><div class=\"line\">            <span class=\"comment\">// 第一次循环，offset - 5 = 2 &gt; 0，即 offset &gt; 5，</span></div><div class=\"line\">            <span class=\"comment\">// 表明其不会落在服务器 A 对应的区间上。</span></div><div class=\"line\">            <span class=\"comment\">// 第二次循环，offset - 3 = -1 &lt; 0，即 5 &lt; offset &lt; 8，</span></div><div class=\"line\">            <span class=\"comment\">// 表明其会落在服务器 B 对应的区间上</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">                <span class=\"comment\">// 让随机值 offset 减去权重值</span></div><div class=\"line\">                offset -= getWeight(invokers.get(i), invocation);</div><div class=\"line\">                <span class=\"keyword\">if</span> (offset &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                    <span class=\"comment\">// 返回相应的 Invoker</span></div><div class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(i);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 如果所有服务提供者权重值相同，此时直接随机返回一个即可</span></div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(random.nextInt(length));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"LeastActiveLoadBalance\"><a href=\"#LeastActiveLoadBalance\" class=\"headerlink\" title=\"LeastActiveLoadBalance\"></a>LeastActiveLoadBalance</h3><p>LeastActiveLoadBalance翻译过来是最小活跃数负载均衡。活跃调用数越小，表明该服务提供者效率越高，单位时间内可处理更多的请求。此时应优先将请求分配给该服务提供者。在具体实现中，每个服务提供者对应一个活跃数 active。初始情况下，所有服务提供者活跃数均为0。每收到一个请求，活跃数加1，完成请求后则将活跃数减1。在服务运行一段时间后，性能好的服务提供者处理请求的速度更快，因此活跃数下降的也越快，此时这样的服务提供者能够优先获取到新的服务请求、这就是最小活跃数负载均衡算法的基本思想。除了最小活跃数，LeastActiveLoadBalance 在实现上还引入了权重值。所以准确的来说，LeastActiveLoadBalance 是基于加权最小活跃数算法实现的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LeastActiveLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"leastactive\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Random random = <span class=\"keyword\">new</span> Random();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size();</div><div class=\"line\">        <span class=\"comment\">// 最小的活跃数</span></div><div class=\"line\">        <span class=\"keyword\">int</span> leastActive = -<span class=\"number\">1</span>;</div><div class=\"line\">        <span class=\"comment\">// 具有相同“最小活跃数”的服务者提供者（以下用 Invoker 代称）数量</span></div><div class=\"line\">        <span class=\"keyword\">int</span> leastCount = <span class=\"number\">0</span>; </div><div class=\"line\">        <span class=\"comment\">// leastIndexs 用于记录具有相同“最小活跃数”的 Invoker 在 invokers 列表中的下标信息</span></div><div class=\"line\">        <span class=\"keyword\">int</span>[] leastIndexs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</div><div class=\"line\">        <span class=\"keyword\">int</span> totalWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"comment\">// 第一个最小活跃数的 Invoker 权重值，用于与其他具有相同最小活跃数的 Invoker 的权重进行对比，</span></div><div class=\"line\">        <span class=\"comment\">// 以检测是否“所有具有相同最小活跃数的 Invoker 的权重”均相等</span></div><div class=\"line\">        <span class=\"keyword\">int</span> firstWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> sameWeight = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 遍历 invokers 列表</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">            Invoker&lt;T&gt; invoker = invokers.get(i);</div><div class=\"line\">            <span class=\"comment\">// 获取 Invoker 对应的活跃数</span></div><div class=\"line\">            <span class=\"keyword\">int</span> active = RpcStatus.getStatus(invoker.getUrl(), invocation.getMethodName()).getActive();</div><div class=\"line\">            <span class=\"comment\">// 获取权重 - ⭐️</span></div><div class=\"line\">            <span class=\"keyword\">int</span> weight = invoker.getUrl().getMethodParameter(invocation.getMethodName(), Constants.WEIGHT_KEY, Constants.DEFAULT_WEIGHT);</div><div class=\"line\">            <span class=\"comment\">// 发现更小的活跃数，重新开始</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (leastActive == -<span class=\"number\">1</span> || active &lt; leastActive) &#123;</div><div class=\"line\">            \t<span class=\"comment\">// 使用当前活跃数 active 更新最小活跃数 leastActive</span></div><div class=\"line\">                leastActive = active;</div><div class=\"line\">                <span class=\"comment\">// 更新 leastCount 为 1</span></div><div class=\"line\">                leastCount = <span class=\"number\">1</span>;</div><div class=\"line\">                <span class=\"comment\">// 记录当前下标值到 leastIndexs 中</span></div><div class=\"line\">                leastIndexs[<span class=\"number\">0</span>] = i;</div><div class=\"line\">                totalWeight = weight;</div><div class=\"line\">                firstWeight = weight;</div><div class=\"line\">                sameWeight = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 当前 Invoker 的活跃数 active 与最小活跃数 leastActive 相同 </span></div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (active == leastActive) &#123;</div><div class=\"line\">            \t<span class=\"comment\">// 在 leastIndexs 中记录下当前 Invoker 在 invokers 集合中的下标</span></div><div class=\"line\">                leastIndexs[leastCount++] = i;</div><div class=\"line\">                <span class=\"comment\">// 累加权重</span></div><div class=\"line\">                totalWeight += weight;</div><div class=\"line\">                <span class=\"comment\">// 检测当前 Invoker 的权重与 firstWeight 是否相等，</span></div><div class=\"line\">                <span class=\"comment\">// 不相等则将 sameWeight 置为 false</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (sameWeight &amp;&amp; i &gt; <span class=\"number\">0</span></div><div class=\"line\">                    &amp;&amp; weight != firstWeight) &#123;</div><div class=\"line\">                    sameWeight = <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 当只有一个 Invoker 具有最小活跃数，此时直接返回该 Invoker 即可</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (leastCount == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> invokers.get(leastIndexs[<span class=\"number\">0</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 有多个 Invoker 具有相同的最小活跃数，但它们之间的权重不同</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!sameWeight &amp;&amp; totalWeight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        \t<span class=\"comment\">// 随机生成一个 [0, totalWeight) 之间的数字</span></div><div class=\"line\">            <span class=\"keyword\">int</span> offsetWeight = random.nextInt(totalWeight);</div><div class=\"line\">            <span class=\"comment\">// 循环让随机数减去具有最小活跃数的 Invoker 的权重值，</span></div><div class=\"line\">            <span class=\"comment\">// 当 offset 小于等于0时，返回相应的 Invoker</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; leastCount; i++) &#123;</div><div class=\"line\">                <span class=\"keyword\">int</span> leastIndex = leastIndexs[i];</div><div class=\"line\">                <span class=\"comment\">// 获取权重值，并让随机数减去权重值 - ⭐️</span></div><div class=\"line\">                offsetWeight -= getWeight(invokers.get(leastIndex), invocation);</div><div class=\"line\">                <span class=\"keyword\">if</span> (offsetWeight &lt;= <span class=\"number\">0</span>)</div><div class=\"line\">                    <span class=\"keyword\">return</span> invokers.get(leastIndex);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 如果权重相同或权重为0时，随机返回一个 Invoker</span></div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(leastIndexs[random.nextInt(leastCount)]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大致的实现逻辑:</p>\n<ol>\n<li>遍历 invokers 列表，寻找活跃数最小的 Invoker</li>\n<li>如果有多个 Invoker 具有相同的最小活跃数，此时记录下这些 Invoker 在 invokers 集合中的下标，并累加它们的权重，比较它们的权重值是否相等</li>\n<li>如果只有一个 Invoker 具有最小的活跃数，此时直接返回该 Invoker 即可</li>\n<li>如果有多个 Invoker 具有最小活跃数，且它们的权重不相等，此时处理方式和 RandomLoadBalance 一致</li>\n<li>如果有多个 Invoker 具有最小活跃数，但它们的权重相等，此时随机返回一个即可</li>\n</ol>\n<h3 id=\"ConsistentHashLoadBalance\"><a href=\"#ConsistentHashLoadBalance\" class=\"headerlink\" title=\"ConsistentHashLoadBalance\"></a>ConsistentHashLoadBalance</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt; selectors = </div><div class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, ConsistentHashSelector&lt;?&gt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        String methodName = RpcUtils.getMethodName(invocation);</div><div class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + methodName;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取 invokers 原始的 hashcode</span></div><div class=\"line\">        <span class=\"keyword\">int</span> identityHashCode = System.identityHashCode(invokers);</div><div class=\"line\">        ConsistentHashSelector&lt;T&gt; selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</div><div class=\"line\">        <span class=\"comment\">// 如果 invokers 是一个新的 List 对象，意味着服务提供者数量发生了变化，可能新增也可能减少了。</span></div><div class=\"line\">        <span class=\"comment\">// 此时 selector.identityHashCode != identityHashCode 条件成立</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (selector == <span class=\"keyword\">null</span> || selector.identityHashCode != identityHashCode) &#123;</div><div class=\"line\">            <span class=\"comment\">// 创建新的 ConsistentHashSelector</span></div><div class=\"line\">            selectors.put(key, <span class=\"keyword\">new</span> ConsistentHashSelector&lt;T&gt;(invokers, methodName, identityHashCode));</div><div class=\"line\">            selector = (ConsistentHashSelector&lt;T&gt;) selectors.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 调用 ConsistentHashSelector 的 select 方法选择 Invoker</span></div><div class=\"line\">        <span class=\"keyword\">return</span> selector.select(invocation);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConsistentHashSelector</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;...&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"RoundRobinLoadBalance\"><a href=\"#RoundRobinLoadBalance\" class=\"headerlink\" title=\"RoundRobinLoadBalance\"></a>RoundRobinLoadBalance</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RoundRobinLoadBalance</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractLoadBalance</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String NAME = <span class=\"string\">\"roundrobin\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConcurrentMap&lt;String, AtomicPositiveInteger&gt; sequences = </div><div class=\"line\">        <span class=\"keyword\">new</span> ConcurrentHashMap&lt;String, AtomicPositiveInteger&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">Invoker&lt;T&gt; <span class=\"title\">doSelect</span><span class=\"params\">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// key = 全限定类名 + \".\" + 方法名，比如 com.xxx.DemoService.sayHello</span></div><div class=\"line\">        String key = invokers.get(<span class=\"number\">0</span>).getUrl().getServiceKey() + <span class=\"string\">\".\"</span> + invocation.getMethodName();</div><div class=\"line\">        <span class=\"keyword\">int</span> length = invokers.size();</div><div class=\"line\">        <span class=\"comment\">// 最大权重</span></div><div class=\"line\">        <span class=\"keyword\">int</span> maxWeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"comment\">// 最小权重</span></div><div class=\"line\">        <span class=\"keyword\">int</span> minWeight = Integer.MAX_VALUE;</div><div class=\"line\">        <span class=\"keyword\">final</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; invokerToWeightMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;Invoker&lt;T&gt;, IntegerWrapper&gt;();</div><div class=\"line\">        <span class=\"comment\">// 权重总和</span></div><div class=\"line\">        <span class=\"keyword\">int</span> weightSum = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 下面这个循环主要用于查找最大和最小权重，计算权重总和等</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">int</span> weight = getWeight(invokers.get(i), invocation);</div><div class=\"line\">            <span class=\"comment\">// 获取最大和最小权重</span></div><div class=\"line\">            maxWeight = Math.max(maxWeight, weight);</div><div class=\"line\">            minWeight = Math.min(minWeight, weight);</div><div class=\"line\">            <span class=\"keyword\">if</span> (weight &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"comment\">// 将 weight 封装到 IntegerWrapper 中</span></div><div class=\"line\">                invokerToWeightMap.put(invokers.get(i), <span class=\"keyword\">new</span> IntegerWrapper(weight));</div><div class=\"line\">                <span class=\"comment\">// 累加权重</span></div><div class=\"line\">                weightSum += weight;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 查找 key 对应的对应 AtomicPositiveInteger 实例，为空则创建。</span></div><div class=\"line\">        <span class=\"comment\">// 这里可以把 AtomicPositiveInteger 看成一个黑盒，大家只要知道</span></div><div class=\"line\">        <span class=\"comment\">// AtomicPositiveInteger 用于记录服务的调用编号即可。至于细节，</span></div><div class=\"line\">        <span class=\"comment\">// 大家如果感兴趣，可以自行分析</span></div><div class=\"line\">        AtomicPositiveInteger sequence = sequences.get(key);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sequence == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            sequences.putIfAbsent(key, <span class=\"keyword\">new</span> AtomicPositiveInteger());</div><div class=\"line\">            sequence = sequences.get(key);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 获取当前的调用编号</span></div><div class=\"line\">        <span class=\"keyword\">int</span> currentSequence = sequence.getAndIncrement();</div><div class=\"line\">        <span class=\"comment\">// 如果最小权重小于最大权重，表明服务提供者之间的权重是不相等的</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (maxWeight &gt; <span class=\"number\">0</span> &amp;&amp; minWeight &lt; maxWeight) &#123;</div><div class=\"line\">            <span class=\"comment\">// 使用调用编号对权重总和进行取余操作</span></div><div class=\"line\">            <span class=\"keyword\">int</span> mod = currentSequence % weightSum;</div><div class=\"line\">            <span class=\"comment\">// 进行 maxWeight 次遍历</span></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxWeight; i++) &#123;</div><div class=\"line\">                <span class=\"comment\">// 遍历 invokerToWeightMap</span></div><div class=\"line\">                <span class=\"keyword\">for</span> (Map.Entry&lt;Invoker&lt;T&gt;, IntegerWrapper&gt; each : invokerToWeightMap.entrySet()) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 获取 Invoker</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> Invoker&lt;T&gt; k = each.getKey();</div><div class=\"line\">                    <span class=\"comment\">// 获取权重包装类 IntegerWrapper</span></div><div class=\"line\">                    <span class=\"keyword\">final</span> IntegerWrapper v = each.getValue();</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// 如果 mod = 0，且权重大于0，此时返回相应的 Invoker</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (mod == <span class=\"number\">0</span> &amp;&amp; v.getValue() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        <span class=\"keyword\">return</span> k;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    </div><div class=\"line\">                    <span class=\"comment\">// mod != 0，且权重大于0，此时对权重和 mod 分别进行自减操作</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> (v.getValue() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                        v.decrement();</div><div class=\"line\">                        mod--;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 服务提供者之间的权重相等，此时通过轮询选择 Invoker</span></div><div class=\"line\">        <span class=\"keyword\">return</span> invokers.get(currentSequence % length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// IntegerWrapper 是一个 int 包装类，主要包含了一个自减方法。</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerWrapper</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">decrement</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.value--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 省略部分代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"zookeeper相关","date":"2020-07-15T03:11:07.000Z","description":null,"_content":"\n# zookeeper相关\n\n## ZooKeeper 是什么？\n\n​\tZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。\n\n​\tZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n\nZookeeper 保证了如下分布式一致性特性：\n\n1. 顺序一致性\n2. 原子性\n3. 单一视图\n4. 可靠性\n5. 实时性（最终一致性）\n\n客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。\n\n有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。\n\n\n\n## ZooKeeper 提供了什么？\n\n- 文件系统\n- 通知机制\n\n## Zookeeper 文件系统\n\nZookeeper 提供一个多层级的节点命名空间（节点称为 znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。\n\nZookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M。\n\n## Zookeeper 怎么保证主从节点的状态同步？\n\nZookeeper 的核心是原子广播机制，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 Zab 协议。Zab 协议有两种模式，它们分别是恢复模式和广播模式。\n\n恢复模式当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。\n\n广播模式一旦 leader 已经和多数的 follower 进行了状态同步后，它就可以开始广播消息了，即进入广播状态。这时候当一个 server 加入 ZooKeeper 服务中，它会在恢复模式下启动，发现 leader，并和 leader 进行状态同步。待到同步结束，它也参与消息广播。ZooKeeper 服务一直维持在 Broadcast 状态，直到 leader 崩溃了或者 leader 失去了大部分的 followers 支持。\n\n## 四种类型的数据节点 Znode\n\n（1）PERSISTENT-持久节点\n\n除非手动删除，否则节点一直存在于 Zookeeper 上\n\n（2）EPHEMERAL-临时节点\n\n临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。\n\n（3）PERSISTENT_SEQUENTIAL-持久顺序节点\n\n基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。\n\n（4）EPHEMERAL_SEQUENTIAL-临时顺序节点\n\n基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。\n\n## Zookeeper Watcher 机制 -- 数据变更通知\n\nZookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。\n\n工作机制：\n\n（1）客户端注册 watcher\n\n（2）服务端处理 watcher\n\n（3）客户端回调 watcher\n\nWatcher 特性总结：\n\n（1）一次性\n\n无论是服务端还是客户端，一旦一个 Watcher 被 触 发 ，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。\n\n（2）客户端串行执行\n\n客户端 Watcher 回调的过程是一个串行同步的过程。\n\n（3）轻量\n\n3.1、Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。\n\n3.2、客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。\n\n（4）watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了 ordering guarantee，即客户端监听事件后，才会感知它所监视 znode发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。\n\n（5）注册 watcher getData、exists、getChildren\n\n（6）触发 watcher create、delete、setData\n\n（7）当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。\n\n## 客户端注册 Watcher 实现\n\n（1）调用 getData()/getChildren()/exist()三个 API，传入 Watcher 对象\n\n（2）标记请求 request，封装 Watcher 到 WatchRegistration\n\n（3）封装成 Packet 对象，发服务端发送 request\n\n（4）收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理\n\n（5）请求返回，完成注册。\n\n## 服务端处理 Watcher 实现\n\n## 客户端回调 Watcher\n\n## ACL 权限控制机制\n\n## Chroot 特性\n\n## 会话管理\n\n## 服务器角色\n\n## Zookeeper 下 Server 工作状态\n\n服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。\n\n（1）LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。\n\n（2）FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。\n\n（3）LEADING：领导者状态。表明当前服务器角色是 Leader。\n\n（4）OBSERVING：观察者状态。表明当前服务器角色是 Observer。\n\n## 数据同步\n\n## zookeeper 是如何保证事务的顺序一致性的？\n\nzookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。\n\n## 分布式集群中为什么会有 Master主节点？\n\n在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。\n\n## zk 节点宕机如何处理？\n\nZookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。\n\n如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；\n\n如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。\n\nZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。\n\n所以\n\n3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票>1.5)\n\n2 个节点的 cluster 就不能挂掉任何 1 个节点了(leader 可以得到 1 票<=1)\n\n## zookeeper 负载均衡和 nginx 负载均衡区别\n\nzk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比 zk 大很多，应该说按业务选择用哪种方式。\n\n## Zookeeper 有哪几种几种部署模式？\n\n## 集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？\n\n## 集群支持动态添加机器吗？\n\n## Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?\n\n## Zookeeper 的 java 客户端都有哪些？\n\njava 客户端：zk 自带的 zkclient 及 Apache 开源的 Curator。\n\n## chubby 是什么，和 zookeeper 比你怎么看？\n\n## 说几个 zookeeper 常用的命令。\n\n常用命令：ls get set create delete 等。\n\n## ZAB 和 Paxos 算法的联系与区别？\n\n相同点：\n\n（1）两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行\n\n（2）Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交\n\n（3）ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot\n\n不同点：\n\nZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统\n\n## Zookeeper 的典型应用场景\n\n## Zookeeper 都有哪些功能？\n\n## 说一下 Zookeeper 的通知机制？\n\n## Zookeeper 和 Dubbo 的关系？","source":"_posts/zookeeper相关.md","raw":"---\ntitle: zookeeper相关\ncategories: [zookeeper]\ntags: [zookeeper]\ndate: 2020-07-15 11:11:07\ndescription:\n---\n\n# zookeeper相关\n\n## ZooKeeper 是什么？\n\n​\tZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。\n\n​\tZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。\n\nZookeeper 保证了如下分布式一致性特性：\n\n1. 顺序一致性\n2. 原子性\n3. 单一视图\n4. 可靠性\n5. 实时性（最终一致性）\n\n客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。\n\n有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。\n\n\n\n## ZooKeeper 提供了什么？\n\n- 文件系统\n- 通知机制\n\n## Zookeeper 文件系统\n\nZookeeper 提供一个多层级的节点命名空间（节点称为 znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。\n\nZookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M。\n\n## Zookeeper 怎么保证主从节点的状态同步？\n\nZookeeper 的核心是原子广播机制，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 Zab 协议。Zab 协议有两种模式，它们分别是恢复模式和广播模式。\n\n恢复模式当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。\n\n广播模式一旦 leader 已经和多数的 follower 进行了状态同步后，它就可以开始广播消息了，即进入广播状态。这时候当一个 server 加入 ZooKeeper 服务中，它会在恢复模式下启动，发现 leader，并和 leader 进行状态同步。待到同步结束，它也参与消息广播。ZooKeeper 服务一直维持在 Broadcast 状态，直到 leader 崩溃了或者 leader 失去了大部分的 followers 支持。\n\n## 四种类型的数据节点 Znode\n\n（1）PERSISTENT-持久节点\n\n除非手动删除，否则节点一直存在于 Zookeeper 上\n\n（2）EPHEMERAL-临时节点\n\n临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。\n\n（3）PERSISTENT_SEQUENTIAL-持久顺序节点\n\n基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。\n\n（4）EPHEMERAL_SEQUENTIAL-临时顺序节点\n\n基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。\n\n## Zookeeper Watcher 机制 -- 数据变更通知\n\nZookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。\n\n工作机制：\n\n（1）客户端注册 watcher\n\n（2）服务端处理 watcher\n\n（3）客户端回调 watcher\n\nWatcher 特性总结：\n\n（1）一次性\n\n无论是服务端还是客户端，一旦一个 Watcher 被 触 发 ，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。\n\n（2）客户端串行执行\n\n客户端 Watcher 回调的过程是一个串行同步的过程。\n\n（3）轻量\n\n3.1、Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。\n\n3.2、客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。\n\n（4）watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了 ordering guarantee，即客户端监听事件后，才会感知它所监视 znode发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。\n\n（5）注册 watcher getData、exists、getChildren\n\n（6）触发 watcher create、delete、setData\n\n（7）当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。\n\n## 客户端注册 Watcher 实现\n\n（1）调用 getData()/getChildren()/exist()三个 API，传入 Watcher 对象\n\n（2）标记请求 request，封装 Watcher 到 WatchRegistration\n\n（3）封装成 Packet 对象，发服务端发送 request\n\n（4）收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理\n\n（5）请求返回，完成注册。\n\n## 服务端处理 Watcher 实现\n\n## 客户端回调 Watcher\n\n## ACL 权限控制机制\n\n## Chroot 特性\n\n## 会话管理\n\n## 服务器角色\n\n## Zookeeper 下 Server 工作状态\n\n服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。\n\n（1）LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。\n\n（2）FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。\n\n（3）LEADING：领导者状态。表明当前服务器角色是 Leader。\n\n（4）OBSERVING：观察者状态。表明当前服务器角色是 Observer。\n\n## 数据同步\n\n## zookeeper 是如何保证事务的顺序一致性的？\n\nzookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。\n\n## 分布式集群中为什么会有 Master主节点？\n\n在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。\n\n## zk 节点宕机如何处理？\n\nZookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。\n\n如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；\n\n如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。\n\nZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。\n\n所以\n\n3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票>1.5)\n\n2 个节点的 cluster 就不能挂掉任何 1 个节点了(leader 可以得到 1 票<=1)\n\n## zookeeper 负载均衡和 nginx 负载均衡区别\n\nzk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比 zk 大很多，应该说按业务选择用哪种方式。\n\n## Zookeeper 有哪几种几种部署模式？\n\n## 集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？\n\n## 集群支持动态添加机器吗？\n\n## Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?\n\n## Zookeeper 的 java 客户端都有哪些？\n\njava 客户端：zk 自带的 zkclient 及 Apache 开源的 Curator。\n\n## chubby 是什么，和 zookeeper 比你怎么看？\n\n## 说几个 zookeeper 常用的命令。\n\n常用命令：ls get set create delete 等。\n\n## ZAB 和 Paxos 算法的联系与区别？\n\n相同点：\n\n（1）两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行\n\n（2）Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交\n\n（3）ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot\n\n不同点：\n\nZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统\n\n## Zookeeper 的典型应用场景\n\n## Zookeeper 都有哪些功能？\n\n## 说一下 Zookeeper 的通知机制？\n\n## Zookeeper 和 Dubbo 的关系？","slug":"zookeeper相关","published":1,"updated":"2020-09-28T10:43:34.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4ysn00faesqrhcmn4qxm","content":"<h1 id=\"zookeeper相关\"><a href=\"#zookeeper相关\" class=\"headerlink\" title=\"zookeeper相关\"></a>zookeeper相关</h1><h2 id=\"ZooKeeper-是什么？\"><a href=\"#ZooKeeper-是什么？\" class=\"headerlink\" title=\"ZooKeeper 是什么？\"></a>ZooKeeper 是什么？</h2><p>​    ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</p>\n<p>​    ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<p>Zookeeper 保证了如下分布式一致性特性：</p>\n<ol>\n<li>顺序一致性</li>\n<li>原子性</li>\n<li>单一视图</li>\n<li>可靠性</li>\n<li>实时性（最终一致性）</li>\n</ol>\n<p>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</p>\n<p>有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。</p>\n<h2 id=\"ZooKeeper-提供了什么？\"><a href=\"#ZooKeeper-提供了什么？\" class=\"headerlink\" title=\"ZooKeeper 提供了什么？\"></a>ZooKeeper 提供了什么？</h2><ul>\n<li>文件系统</li>\n<li>通知机制</li>\n</ul>\n<h2 id=\"Zookeeper-文件系统\"><a href=\"#Zookeeper-文件系统\" class=\"headerlink\" title=\"Zookeeper 文件系统\"></a>Zookeeper 文件系统</h2><p>Zookeeper 提供一个多层级的节点命名空间（节点称为 znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。</p>\n<p>Zookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M。</p>\n<h2 id=\"Zookeeper-怎么保证主从节点的状态同步？\"><a href=\"#Zookeeper-怎么保证主从节点的状态同步？\" class=\"headerlink\" title=\"Zookeeper 怎么保证主从节点的状态同步？\"></a>Zookeeper 怎么保证主从节点的状态同步？</h2><p>Zookeeper 的核心是原子广播机制，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 Zab 协议。Zab 协议有两种模式，它们分别是恢复模式和广播模式。</p>\n<p>恢复模式当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。</p>\n<p>广播模式一旦 leader 已经和多数的 follower 进行了状态同步后，它就可以开始广播消息了，即进入广播状态。这时候当一个 server 加入 ZooKeeper 服务中，它会在恢复模式下启动，发现 leader，并和 leader 进行状态同步。待到同步结束，它也参与消息广播。ZooKeeper 服务一直维持在 Broadcast 状态，直到 leader 崩溃了或者 leader 失去了大部分的 followers 支持。</p>\n<h2 id=\"四种类型的数据节点-Znode\"><a href=\"#四种类型的数据节点-Znode\" class=\"headerlink\" title=\"四种类型的数据节点 Znode\"></a>四种类型的数据节点 Znode</h2><p>（1）PERSISTENT-持久节点</p>\n<p>除非手动删除，否则节点一直存在于 Zookeeper 上</p>\n<p>（2）EPHEMERAL-临时节点</p>\n<p>临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。</p>\n<p>（3）PERSISTENT_SEQUENTIAL-持久顺序节点</p>\n<p>基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p>\n<p>（4）EPHEMERAL_SEQUENTIAL-临时顺序节点</p>\n<p>基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p>\n<h2 id=\"Zookeeper-Watcher-机制-–-数据变更通知\"><a href=\"#Zookeeper-Watcher-机制-–-数据变更通知\" class=\"headerlink\" title=\"Zookeeper Watcher 机制 – 数据变更通知\"></a>Zookeeper Watcher 机制 – 数据变更通知</h2><p>Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。</p>\n<p>工作机制：</p>\n<p>（1）客户端注册 watcher</p>\n<p>（2）服务端处理 watcher</p>\n<p>（3）客户端回调 watcher</p>\n<p>Watcher 特性总结：</p>\n<p>（1）一次性</p>\n<p>无论是服务端还是客户端，一旦一个 Watcher 被 触 发 ，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。</p>\n<p>（2）客户端串行执行</p>\n<p>客户端 Watcher 回调的过程是一个串行同步的过程。</p>\n<p>（3）轻量</p>\n<p>3.1、Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。</p>\n<p>3.2、客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。</p>\n<p>（4）watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了 ordering guarantee，即客户端监听事件后，才会感知它所监视 znode发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。</p>\n<p>（5）注册 watcher getData、exists、getChildren</p>\n<p>（6）触发 watcher create、delete、setData</p>\n<p>（7）当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。</p>\n<h2 id=\"客户端注册-Watcher-实现\"><a href=\"#客户端注册-Watcher-实现\" class=\"headerlink\" title=\"客户端注册 Watcher 实现\"></a>客户端注册 Watcher 实现</h2><p>（1）调用 getData()/getChildren()/exist()三个 API，传入 Watcher 对象</p>\n<p>（2）标记请求 request，封装 Watcher 到 WatchRegistration</p>\n<p>（3）封装成 Packet 对象，发服务端发送 request</p>\n<p>（4）收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理</p>\n<p>（5）请求返回，完成注册。</p>\n<h2 id=\"服务端处理-Watcher-实现\"><a href=\"#服务端处理-Watcher-实现\" class=\"headerlink\" title=\"服务端处理 Watcher 实现\"></a>服务端处理 Watcher 实现</h2><h2 id=\"客户端回调-Watcher\"><a href=\"#客户端回调-Watcher\" class=\"headerlink\" title=\"客户端回调 Watcher\"></a>客户端回调 Watcher</h2><h2 id=\"ACL-权限控制机制\"><a href=\"#ACL-权限控制机制\" class=\"headerlink\" title=\"ACL 权限控制机制\"></a>ACL 权限控制机制</h2><h2 id=\"Chroot-特性\"><a href=\"#Chroot-特性\" class=\"headerlink\" title=\"Chroot 特性\"></a>Chroot 特性</h2><h2 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h2><h2 id=\"服务器角色\"><a href=\"#服务器角色\" class=\"headerlink\" title=\"服务器角色\"></a>服务器角色</h2><h2 id=\"Zookeeper-下-Server-工作状态\"><a href=\"#Zookeeper-下-Server-工作状态\" class=\"headerlink\" title=\"Zookeeper 下 Server 工作状态\"></a>Zookeeper 下 Server 工作状态</h2><p>服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。</p>\n<p>（1）LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。</p>\n<p>（2）FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。</p>\n<p>（3）LEADING：领导者状态。表明当前服务器角色是 Leader。</p>\n<p>（4）OBSERVING：观察者状态。表明当前服务器角色是 Observer。</p>\n<h2 id=\"数据同步\"><a href=\"#数据同步\" class=\"headerlink\" title=\"数据同步\"></a>数据同步</h2><h2 id=\"zookeeper-是如何保证事务的顺序一致性的？\"><a href=\"#zookeeper-是如何保证事务的顺序一致性的？\" class=\"headerlink\" title=\"zookeeper 是如何保证事务的顺序一致性的？\"></a>zookeeper 是如何保证事务的顺序一致性的？</h2><p>zookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。</p>\n<h2 id=\"分布式集群中为什么会有-Master主节点？\"><a href=\"#分布式集群中为什么会有-Master主节点？\" class=\"headerlink\" title=\"分布式集群中为什么会有 Master主节点？\"></a>分布式集群中为什么会有 Master主节点？</h2><p>在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。</p>\n<h2 id=\"zk-节点宕机如何处理？\"><a href=\"#zk-节点宕机如何处理？\" class=\"headerlink\" title=\"zk 节点宕机如何处理？\"></a>zk 节点宕机如何处理？</h2><p>Zookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。</p>\n<p>如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；</p>\n<p>如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。</p>\n<p>ZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。</p>\n<p>所以</p>\n<p>3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票&gt;1.5)</p>\n<p>2 个节点的 cluster 就不能挂掉任何 1 个节点了(leader 可以得到 1 票&lt;=1)</p>\n<h2 id=\"zookeeper-负载均衡和-nginx-负载均衡区别\"><a href=\"#zookeeper-负载均衡和-nginx-负载均衡区别\" class=\"headerlink\" title=\"zookeeper 负载均衡和 nginx 负载均衡区别\"></a>zookeeper 负载均衡和 nginx 负载均衡区别</h2><p>zk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比 zk 大很多，应该说按业务选择用哪种方式。</p>\n<h2 id=\"Zookeeper-有哪几种几种部署模式？\"><a href=\"#Zookeeper-有哪几种几种部署模式？\" class=\"headerlink\" title=\"Zookeeper 有哪几种几种部署模式？\"></a>Zookeeper 有哪几种几种部署模式？</h2><h2 id=\"集群最少要几台机器，集群规则是怎样的？集群中有-3-台服务器，其中一个节点宕机，这个时候-Zookeeper-还可以使用吗？\"><a href=\"#集群最少要几台机器，集群规则是怎样的？集群中有-3-台服务器，其中一个节点宕机，这个时候-Zookeeper-还可以使用吗？\" class=\"headerlink\" title=\"集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？\"></a>集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？</h2><h2 id=\"集群支持动态添加机器吗？\"><a href=\"#集群支持动态添加机器吗？\" class=\"headerlink\" title=\"集群支持动态添加机器吗？\"></a>集群支持动态添加机器吗？</h2><h2 id=\"Zookeeper-对节点的-watch-监听通知是永久的吗？为什么不是永久的\"><a href=\"#Zookeeper-对节点的-watch-监听通知是永久的吗？为什么不是永久的\" class=\"headerlink\" title=\"Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?\"></a>Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?</h2><h2 id=\"Zookeeper-的-java-客户端都有哪些？\"><a href=\"#Zookeeper-的-java-客户端都有哪些？\" class=\"headerlink\" title=\"Zookeeper 的 java 客户端都有哪些？\"></a>Zookeeper 的 java 客户端都有哪些？</h2><p>java 客户端：zk 自带的 zkclient 及 Apache 开源的 Curator。</p>\n<h2 id=\"chubby-是什么，和-zookeeper-比你怎么看？\"><a href=\"#chubby-是什么，和-zookeeper-比你怎么看？\" class=\"headerlink\" title=\"chubby 是什么，和 zookeeper 比你怎么看？\"></a>chubby 是什么，和 zookeeper 比你怎么看？</h2><h2 id=\"说几个-zookeeper-常用的命令。\"><a href=\"#说几个-zookeeper-常用的命令。\" class=\"headerlink\" title=\"说几个 zookeeper 常用的命令。\"></a>说几个 zookeeper 常用的命令。</h2><p>常用命令：ls get set create delete 等。</p>\n<h2 id=\"ZAB-和-Paxos-算法的联系与区别？\"><a href=\"#ZAB-和-Paxos-算法的联系与区别？\" class=\"headerlink\" title=\"ZAB 和 Paxos 算法的联系与区别？\"></a>ZAB 和 Paxos 算法的联系与区别？</h2><p>相同点：</p>\n<p>（1）两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行</p>\n<p>（2）Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交</p>\n<p>（3）ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot</p>\n<p>不同点：</p>\n<p>ZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统</p>\n<h2 id=\"Zookeeper-的典型应用场景\"><a href=\"#Zookeeper-的典型应用场景\" class=\"headerlink\" title=\"Zookeeper 的典型应用场景\"></a>Zookeeper 的典型应用场景</h2><h2 id=\"Zookeeper-都有哪些功能？\"><a href=\"#Zookeeper-都有哪些功能？\" class=\"headerlink\" title=\"Zookeeper 都有哪些功能？\"></a>Zookeeper 都有哪些功能？</h2><h2 id=\"说一下-Zookeeper-的通知机制？\"><a href=\"#说一下-Zookeeper-的通知机制？\" class=\"headerlink\" title=\"说一下 Zookeeper 的通知机制？\"></a>说一下 Zookeeper 的通知机制？</h2><h2 id=\"Zookeeper-和-Dubbo-的关系？\"><a href=\"#Zookeeper-和-Dubbo-的关系？\" class=\"headerlink\" title=\"Zookeeper 和 Dubbo 的关系？\"></a>Zookeeper 和 Dubbo 的关系？</h2>","excerpt":"","more":"<h1 id=\"zookeeper相关\"><a href=\"#zookeeper相关\" class=\"headerlink\" title=\"zookeeper相关\"></a>zookeeper相关</h1><h2 id=\"ZooKeeper-是什么？\"><a href=\"#ZooKeeper-是什么？\" class=\"headerlink\" title=\"ZooKeeper 是什么？\"></a>ZooKeeper 是什么？</h2><p>​    ZooKeeper 是一个开源的分布式协调服务。它是一个为分布式应用提供一致性服务的软件，分布式应用程序可以基于 Zookeeper 实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</p>\n<p>​    ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>\n<p>Zookeeper 保证了如下分布式一致性特性：</p>\n<ol>\n<li>顺序一致性</li>\n<li>原子性</li>\n<li>单一视图</li>\n<li>可靠性</li>\n<li>实时性（最终一致性）</li>\n</ol>\n<p>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</p>\n<p>有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。</p>\n<h2 id=\"ZooKeeper-提供了什么？\"><a href=\"#ZooKeeper-提供了什么？\" class=\"headerlink\" title=\"ZooKeeper 提供了什么？\"></a>ZooKeeper 提供了什么？</h2><ul>\n<li>文件系统</li>\n<li>通知机制</li>\n</ul>\n<h2 id=\"Zookeeper-文件系统\"><a href=\"#Zookeeper-文件系统\" class=\"headerlink\" title=\"Zookeeper 文件系统\"></a>Zookeeper 文件系统</h2><p>Zookeeper 提供一个多层级的节点命名空间（节点称为 znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。</p>\n<p>Zookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M。</p>\n<h2 id=\"Zookeeper-怎么保证主从节点的状态同步？\"><a href=\"#Zookeeper-怎么保证主从节点的状态同步？\" class=\"headerlink\" title=\"Zookeeper 怎么保证主从节点的状态同步？\"></a>Zookeeper 怎么保证主从节点的状态同步？</h2><p>Zookeeper 的核心是原子广播机制，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 Zab 协议。Zab 协议有两种模式，它们分别是恢复模式和广播模式。</p>\n<p>恢复模式当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。</p>\n<p>广播模式一旦 leader 已经和多数的 follower 进行了状态同步后，它就可以开始广播消息了，即进入广播状态。这时候当一个 server 加入 ZooKeeper 服务中，它会在恢复模式下启动，发现 leader，并和 leader 进行状态同步。待到同步结束，它也参与消息广播。ZooKeeper 服务一直维持在 Broadcast 状态，直到 leader 崩溃了或者 leader 失去了大部分的 followers 支持。</p>\n<h2 id=\"四种类型的数据节点-Znode\"><a href=\"#四种类型的数据节点-Znode\" class=\"headerlink\" title=\"四种类型的数据节点 Znode\"></a>四种类型的数据节点 Znode</h2><p>（1）PERSISTENT-持久节点</p>\n<p>除非手动删除，否则节点一直存在于 Zookeeper 上</p>\n<p>（2）EPHEMERAL-临时节点</p>\n<p>临时节点的生命周期与客户端会话绑定，一旦客户端会话失效（客户端与zookeeper 连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除。</p>\n<p>（3）PERSISTENT_SEQUENTIAL-持久顺序节点</p>\n<p>基本特性同持久节点，只是增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p>\n<p>（4）EPHEMERAL_SEQUENTIAL-临时顺序节点</p>\n<p>基本特性同临时节点，增加了顺序属性，节点名后边会追加一个由父节点维护的自增整型数字。</p>\n<h2 id=\"Zookeeper-Watcher-机制-–-数据变更通知\"><a href=\"#Zookeeper-Watcher-机制-–-数据变更通知\" class=\"headerlink\" title=\"Zookeeper Watcher 机制 – 数据变更通知\"></a>Zookeeper Watcher 机制 – 数据变更通知</h2><p>Zookeeper 允许客户端向服务端的某个 Znode 注册一个 Watcher 监听，当服务端的一些指定事件触发了这个 Watcher，服务端会向指定客户端发送一个事件通知来实现分布式的通知功能，然后客户端根据 Watcher 通知状态和事件类型做出业务上的改变。</p>\n<p>工作机制：</p>\n<p>（1）客户端注册 watcher</p>\n<p>（2）服务端处理 watcher</p>\n<p>（3）客户端回调 watcher</p>\n<p>Watcher 特性总结：</p>\n<p>（1）一次性</p>\n<p>无论是服务端还是客户端，一旦一个 Watcher 被 触 发 ，Zookeeper 都会将其从相应的存储中移除。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。</p>\n<p>（2）客户端串行执行</p>\n<p>客户端 Watcher 回调的过程是一个串行同步的过程。</p>\n<p>（3）轻量</p>\n<p>3.1、Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。</p>\n<p>3.2、客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。</p>\n<p>（4）watcher event 异步发送 watcher 的通知事件从 server 发送到 client 是异步的，这就存在一个问题，不同的客户端和服务器之间通过 socket 进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于 Zookeeper 本身提供了 ordering guarantee，即客户端监听事件后，才会感知它所监视 znode发生了变化。所以我们使用 Zookeeper 不能期望能够监控到节点每次的变化。Zookeeper 只能保证最终的一致性，而无法保证强一致性。</p>\n<p>（5）注册 watcher getData、exists、getChildren</p>\n<p>（6）触发 watcher create、delete、setData</p>\n<p>（7）当一个客户端连接到一个新的服务器上时，watch 将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到 watch 的。而当 client 重新连接时，如果需要的话，所有先前注册过的 watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch 可能会丢失：对于一个未创建的 znode的 exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个 watch 事件可能会被丢失。</p>\n<h2 id=\"客户端注册-Watcher-实现\"><a href=\"#客户端注册-Watcher-实现\" class=\"headerlink\" title=\"客户端注册 Watcher 实现\"></a>客户端注册 Watcher 实现</h2><p>（1）调用 getData()/getChildren()/exist()三个 API，传入 Watcher 对象</p>\n<p>（2）标记请求 request，封装 Watcher 到 WatchRegistration</p>\n<p>（3）封装成 Packet 对象，发服务端发送 request</p>\n<p>（4）收到服务端响应后，将 Watcher 注册到 ZKWatcherManager 中进行管理</p>\n<p>（5）请求返回，完成注册。</p>\n<h2 id=\"服务端处理-Watcher-实现\"><a href=\"#服务端处理-Watcher-实现\" class=\"headerlink\" title=\"服务端处理 Watcher 实现\"></a>服务端处理 Watcher 实现</h2><h2 id=\"客户端回调-Watcher\"><a href=\"#客户端回调-Watcher\" class=\"headerlink\" title=\"客户端回调 Watcher\"></a>客户端回调 Watcher</h2><h2 id=\"ACL-权限控制机制\"><a href=\"#ACL-权限控制机制\" class=\"headerlink\" title=\"ACL 权限控制机制\"></a>ACL 权限控制机制</h2><h2 id=\"Chroot-特性\"><a href=\"#Chroot-特性\" class=\"headerlink\" title=\"Chroot 特性\"></a>Chroot 特性</h2><h2 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h2><h2 id=\"服务器角色\"><a href=\"#服务器角色\" class=\"headerlink\" title=\"服务器角色\"></a>服务器角色</h2><h2 id=\"Zookeeper-下-Server-工作状态\"><a href=\"#Zookeeper-下-Server-工作状态\" class=\"headerlink\" title=\"Zookeeper 下 Server 工作状态\"></a>Zookeeper 下 Server 工作状态</h2><p>服务器具有四种状态，分别是 LOOKING、FOLLOWING、LEADING、OBSERVING。</p>\n<p>（1）LOOKING：寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。</p>\n<p>（2）FOLLOWING：跟随者状态。表明当前服务器角色是 Follower。</p>\n<p>（3）LEADING：领导者状态。表明当前服务器角色是 Leader。</p>\n<p>（4）OBSERVING：观察者状态。表明当前服务器角色是 Observer。</p>\n<h2 id=\"数据同步\"><a href=\"#数据同步\" class=\"headerlink\" title=\"数据同步\"></a>数据同步</h2><h2 id=\"zookeeper-是如何保证事务的顺序一致性的？\"><a href=\"#zookeeper-是如何保证事务的顺序一致性的？\" class=\"headerlink\" title=\"zookeeper 是如何保证事务的顺序一致性的？\"></a>zookeeper 是如何保证事务的顺序一致性的？</h2><p>zookeeper 采用了全局递增的事务 Id 来标识，所有的 proposal（提议）都在被提出的时候加上了 zxid，zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。</p>\n<h2 id=\"分布式集群中为什么会有-Master主节点？\"><a href=\"#分布式集群中为什么会有-Master主节点？\" class=\"headerlink\" title=\"分布式集群中为什么会有 Master主节点？\"></a>分布式集群中为什么会有 Master主节点？</h2><p>在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。</p>\n<h2 id=\"zk-节点宕机如何处理？\"><a href=\"#zk-节点宕机如何处理？\" class=\"headerlink\" title=\"zk 节点宕机如何处理？\"></a>zk 节点宕机如何处理？</h2><p>Zookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。</p>\n<p>如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；</p>\n<p>如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader。</p>\n<p>ZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。</p>\n<p>所以</p>\n<p>3 个节点的 cluster 可以挂掉 1 个节点(leader 可以得到 2 票&gt;1.5)</p>\n<p>2 个节点的 cluster 就不能挂掉任何 1 个节点了(leader 可以得到 1 票&lt;=1)</p>\n<h2 id=\"zookeeper-负载均衡和-nginx-负载均衡区别\"><a href=\"#zookeeper-负载均衡和-nginx-负载均衡区别\" class=\"headerlink\" title=\"zookeeper 负载均衡和 nginx 负载均衡区别\"></a>zookeeper 负载均衡和 nginx 负载均衡区别</h2><p>zk 的负载均衡是可以调控，nginx 只是能调权重，其他需要可控的都需要自己写插件；但是 nginx 的吞吐量比 zk 大很多，应该说按业务选择用哪种方式。</p>\n<h2 id=\"Zookeeper-有哪几种几种部署模式？\"><a href=\"#Zookeeper-有哪几种几种部署模式？\" class=\"headerlink\" title=\"Zookeeper 有哪几种几种部署模式？\"></a>Zookeeper 有哪几种几种部署模式？</h2><h2 id=\"集群最少要几台机器，集群规则是怎样的？集群中有-3-台服务器，其中一个节点宕机，这个时候-Zookeeper-还可以使用吗？\"><a href=\"#集群最少要几台机器，集群规则是怎样的？集群中有-3-台服务器，其中一个节点宕机，这个时候-Zookeeper-还可以使用吗？\" class=\"headerlink\" title=\"集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？\"></a>集群最少要几台机器，集群规则是怎样的？集群中有 3 台服务器，其中一个节点宕机，这个时候 Zookeeper 还可以使用吗？</h2><h2 id=\"集群支持动态添加机器吗？\"><a href=\"#集群支持动态添加机器吗？\" class=\"headerlink\" title=\"集群支持动态添加机器吗？\"></a>集群支持动态添加机器吗？</h2><h2 id=\"Zookeeper-对节点的-watch-监听通知是永久的吗？为什么不是永久的\"><a href=\"#Zookeeper-对节点的-watch-监听通知是永久的吗？为什么不是永久的\" class=\"headerlink\" title=\"Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?\"></a>Zookeeper 对节点的 watch 监听通知是永久的吗？为什么不是永久的?</h2><h2 id=\"Zookeeper-的-java-客户端都有哪些？\"><a href=\"#Zookeeper-的-java-客户端都有哪些？\" class=\"headerlink\" title=\"Zookeeper 的 java 客户端都有哪些？\"></a>Zookeeper 的 java 客户端都有哪些？</h2><p>java 客户端：zk 自带的 zkclient 及 Apache 开源的 Curator。</p>\n<h2 id=\"chubby-是什么，和-zookeeper-比你怎么看？\"><a href=\"#chubby-是什么，和-zookeeper-比你怎么看？\" class=\"headerlink\" title=\"chubby 是什么，和 zookeeper 比你怎么看？\"></a>chubby 是什么，和 zookeeper 比你怎么看？</h2><h2 id=\"说几个-zookeeper-常用的命令。\"><a href=\"#说几个-zookeeper-常用的命令。\" class=\"headerlink\" title=\"说几个 zookeeper 常用的命令。\"></a>说几个 zookeeper 常用的命令。</h2><p>常用命令：ls get set create delete 等。</p>\n<h2 id=\"ZAB-和-Paxos-算法的联系与区别？\"><a href=\"#ZAB-和-Paxos-算法的联系与区别？\" class=\"headerlink\" title=\"ZAB 和 Paxos 算法的联系与区别？\"></a>ZAB 和 Paxos 算法的联系与区别？</h2><p>相同点：</p>\n<p>（1）两者都存在一个类似于 Leader 进程的角色，由其负责协调多个 Follower 进程的运行</p>\n<p>（2）Leader 进程都会等待超过半数的 Follower 做出正确的反馈后，才会将一个提案进行提交</p>\n<p>（3）ZAB 协议中，每个 Proposal 中都包含一个 epoch 值来代表当前的 Leader周期，Paxos 中名字为 Ballot</p>\n<p>不同点：</p>\n<p>ZAB 用来构建高可用的分布式数据主备系统（Zookeeper），Paxos 是用来构建分布式一致性状态机系统</p>\n<h2 id=\"Zookeeper-的典型应用场景\"><a href=\"#Zookeeper-的典型应用场景\" class=\"headerlink\" title=\"Zookeeper 的典型应用场景\"></a>Zookeeper 的典型应用场景</h2><h2 id=\"Zookeeper-都有哪些功能？\"><a href=\"#Zookeeper-都有哪些功能？\" class=\"headerlink\" title=\"Zookeeper 都有哪些功能？\"></a>Zookeeper 都有哪些功能？</h2><h2 id=\"说一下-Zookeeper-的通知机制？\"><a href=\"#说一下-Zookeeper-的通知机制？\" class=\"headerlink\" title=\"说一下 Zookeeper 的通知机制？\"></a>说一下 Zookeeper 的通知机制？</h2><h2 id=\"Zookeeper-和-Dubbo-的关系？\"><a href=\"#Zookeeper-和-Dubbo-的关系？\" class=\"headerlink\" title=\"Zookeeper 和 Dubbo 的关系？\"></a>Zookeeper 和 Dubbo 的关系？</h2>"},{"title":"Java字节码指令收集大全","date":"2020-05-28T12:10:32.000Z","_content":"\n## Java字节码指令收集大全\n\n\n\n### 常量入栈指令\n\n| **指令码** | **操作码（助记符）** | **操作数**             | **描述（栈指操作数栈）** |\n| :--------- | :--- | :--------- | :--- |\n| 0x01          | aconst_null     |            | null值入栈 |\n| 0x02          | iconst_m1     |            | -1（int）值入栈     |\n| 0x03          | iconst_0     |            | 0（int）值入栈     |\n| 0x04          | iconst_1     |            |1（int）值入栈     |\n| 0x05          | iconst_2     |            |2（int）值入栈     |\n| 0x06          | iconst_3     |            |3（int）值入栈     |\n| 0x07          | iconst_4     |            |4（int）值入栈     |\n| 0x08          | iconst_5     |            |5（int）值入栈     |\n| 0x09          | lconst_0     |            |0（long）值入栈     |\n| 0x0a          | lconst_1     |            |1（long）值入栈     |\n| 0x0b          | fconst_0     |            |0（float）值入栈     |\n| 0x0c          | fconst_1     |            |1（float）值入栈     |\n| 0x0d          | fconst_2     |            |2（float）值入栈     |\n| 0x0e          | dconst_0     |            |0（double）值入栈     |\n| 0x0f          | dconst_1     |            |1（double）值入栈     |\n| 0x10          | bipush |  valuebyte  | valuebyte值带符号扩展成int值入栈 |\n| 0x11          | sipush |  valuebyte1  valuebyte2|(valuebyte1 << 8)\\|valuebyte2 值带符号扩展成int值入栈。    |\n| 0x12          | ldc|  indexbyte1     | 常量池中的常量值<br/>（int, float, string reference, object reference）入栈。 |\n| 0x13          | ldc_w     |  indexbyte1 indexbyte2  | 常量池中常量<br/>（int, float, string reference, object reference）入栈。 |\n| 0x14          | ldc2_2     |  indexbyte1 indexbyte2      |  常量池中常量（long, double）入栈。    |\n\n### 局部变量值转载到栈中指令\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---- | ---- | ---- | ---- |\n|0x19     |(wide)aload     | indexbyte |从局部变量indexbyte中装载引用类型值入栈     |\n|0x2a     |aload_0     |      |从局部变量0中装载引用类型值入栈     |\n|0x2b     |aload_1     |      |从局部变量1中装载引用类型值入栈     |\n|0x2c     |aload_2     |      |从局部变量2中装载引用类型值入栈     |\n|0a2d     |aload_3     |      |从局部变量3中装载引用类型值入栈     |\n|0x15     |(wide)iload     | indexbyte |从局部变量indexbyte中装载int类型值入栈     |\n|0x1a     |iload_0    |      |从局部变量0中装载int类型值入栈     |\n|0x1b     |iload_1     |      |从局部变量1中装载int类型值入栈     |\n|0x1c     |iload_2     |      |从局部变量2中装载int类型值入栈     |\n|0x1d     |iload_3     |      |从局部变量3中装载int类型值入栈     |\n|0x16     |(wide)lload     | indexbyte |从局部变量indexbyte中装载long类型值入栈     |\n|0x1e     |lload_0     |      |从局部变量0中装载long类型值入栈     |\n|0x1f     |lload_1     |      |从局部变量1中装载long类型值入栈     |\n|0x20     |lload_2     |      |从局部变量2中装载long类型值入栈     |\n|0x21     |lload_3     |      |从局部变量3中装载long类型值入栈     |\n|0x17     |f(wide)load     | indexbyte |从局部变量indexbyte中装载float类型值入栈     |\n|0x22     |fload_0     |      |从局部变量0中装载float类型值入栈     |\n|0x23     |fload_1     |      |从局部变量1中装载float类型值入栈     |\n|0x24     |fload_2     |      |从局部变量2中装载float类型值入栈     |\n|0x25     |fload_3     |      |从局部变量3中装载float类型值入栈     |\n|0x18     |（wide）dload     | indexbyte |从局部变量indexbyte中装载引用类型值入栈     |\n|0x26     |dload_0    |      |从局部变量0中装载double类型值入栈     |\n|0x27     |dload_1    |      |从局部变量1中装载double类型值入栈     |\n|0x28     |dload_2    |      |从局部变量3中装载double类型值入栈      |\n|0x29     |dload_3    |      |从局部变量3中装载double类型值入栈      |\n|0x32     |aaload     |      |从引用类型数组中装载指定项的值入栈      |\n|0x2e     |iaload     |      |从int类型数组中装载指定项的值入栈      |\n|0x2f     |laload     |      |从long类型数组中装载指定项的值入栈      |\n|0x30     |faload     |      |从float类型数组中装载指定项的值入栈      |\n|0x31     |daload     |      |从double类型数组中装载指定项的值入栈      |\n|0x33     |baload     |      |从boolean或者byte类型数组中装载指定项的值入栈（<br/>先转换为int类型值，后压栈）。      |\n|0x34     |caload     |      |从char类型数组中装载指定项的值入栈 <br/>（先转换为int类型值，后压栈）。     |\n|0x35     |saload     |      |从short类型数组中装载指定项的值入栈 <br/>（先转换为int类型值，后压栈）。     |\n\n### **将栈顶值保存到局部变量中指令**\n\n| 0x3a | (wide)astore | indexbyte | 将栈顶引用类型值保存到局部变量indexbyte中。                  |\n| ---- | ------------ | --------- | ------------------------------------------------------------ |\n| 0x4b | astroe_0     |           | 将栈顶引用类型值保存到局部变量0中。                          |\n| 0x4c | astore_1     |           | 将栈顶引用类型值保存到局部变量1中。                          |\n| 0x4d | astore_2     |           | 将栈顶引用类型值保存到局部变量2中。                          |\n| 0x4e | astore_3     |           | 将栈顶引用类型值保存到局部变量3中。                          |\n| 0x36 | (wide)istore | indexbyte | 将栈顶int类型值保存到局部变量indexbyte中。                   |\n| 0x3b | istore_0     |           | 将栈顶int类型值保存到局部变量0中。                           |\n| 0x3c | istore_1     |           | 将栈顶int类型值保存到局部变量1中。                           |\n| 0x3d | istore_2     |           | 将栈顶int类型值保存到局部变量2中。                           |\n| 0x3e | istore_3     |           | 将栈顶int类型值保存到局部变量3中。                           |\n| 0x37 | (wide)lstore | indexbyte | 将栈顶long类型值保存到局部变量indexbyte中。                  |\n| 0x3f | lstore_0     |           | 将栈顶long类型值保存到局部变量0中。                          |\n| 0x40 | lstore_1     |           | 将栈顶long类型值保存到局部变量1中。                          |\n| 0x41 | lstore_2     |           | 将栈顶long类型值保存到局部变量2中。                          |\n| 0x42 | lstroe_3     |           | 将栈顶long类型值保存到局部变量3中。                          |\n| 0x38 | (wide)fstore | indexbyte | 将栈顶float类型值保存到局部变量indexbyte中。                 |\n| 0x43 | fstore_0     |           | 将栈顶float类型值保存到局部变量0中。                         |\n| 0x44 | fstore_1     |           | 将栈顶float类型值保存到局部变量1中。                         |\n| 0x45 | fstore_2     |           | 将栈顶float类型值保存到局部变量2中。                         |\n| 0x46 | fstore_3     |           | 将栈顶float类型值保存到局部变量3中。                         |\n| 0x39 | (wide)dstore | indexbyte | 将栈顶double类型值保存到局部变量indexbyte中。                |\n| 0x47 | dstore_0     |           | 将栈顶double类型值保存到局部变量0中。                        |\n| 0x48 | dstore_1     |           | 将栈顶double类型值保存到局部变量1中。                        |\n| 0x49 | dstore_2     |           | 将栈顶double类型值保存到局部变量2中。                        |\n| 0x4a | dstore_3     |           | 将栈顶double类型值保存到局部变量3中。                        |\n| 0x53 | aastore      |           | 将栈顶引用类型值保存到指定引用类型数组的指定项。             |\n| 0x4f | iastore      |           | 将栈顶int类型值保存到指定int类型数组的指定项。               |\n| 0x50 | lastore      |           | 将栈顶long类型值保存到指定long类型数组的指定项。             |\n| 0x51 | fastore      |           | 将栈顶float类型值保存到指定float类型数组的指定项。           |\n| 0x52 | dastore      |           | 将栈顶double类型值保存到指定double类型数组的指定项。         |\n| 0x54 | bastroe      |           | 将栈顶boolean类型值或byte类型值保存到指定boolean<br/>类型数组或byte类型数组的指定项。 |\n| 0x55 | castore      |           | 将栈顶char类型值保存到指定char类型数组的指定项。             |\n| 0x56 | sastore      |           | 将栈顶short类型值保存到指定short类型数组的指定项。           |\n\n### **wide****指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                       |\n| ---------- | -------------------- | ---------- | ---------------------------------------------- |\n| 0xc4       | wide                 |            | 使用附加字节扩展局部变量索引（iinc指令特殊）。 |\n\n### **通用（无类型）栈操作指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                                     |\n| ---------- | -------------------- | ---------- | ------------------------------------------------------------ |\n| 0x00       | nop                  |            | 空操作。                                                     |\n| 0x57       | pop                  |            | 从栈顶弹出一个字长的数据。                                   |\n| 0x58       | pop2                 |            | 从栈顶弹出两个字长的数据。                                   |\n| 0x59       | dup                  |            | 复制栈顶一个字长的数据，将复制后的数据压栈。                 |\n| 0x5a       | dup_x1               |            | 复制栈顶一个字长的数据，弹出栈顶两个字长数据，<br/>先将复制后的数据压栈，再将弹出的两个字长数据压栈。 |\n| 0x5b       | dup_x2               |            | 复制栈顶一个字长的数据，弹出栈顶三个字长的数据，<br/>将复制后的数据压栈，再将弹出的三个字长的数据压栈。 |\n| 0x5c       | dup2                 |            | 复制栈顶两个字长的数据，将复制后的两个字长的数据压栈。       |\n| 0x5d       | dup2_x1              |            | 复制栈顶两个字长的数据，弹出栈顶三个字长的数据，<br/>将复制后的两个字长的数据压栈，再将弹出的三个字长的数据压栈。 |\n| 0x5e       | dup2_x2              |            | 复制栈顶两个字长的数据，弹出栈顶四个字长的数据，<br/>将复制后的两个字长的数据压栈，再将弹出的四个字长的数据压栈。 |\n| 0x5f       | swap                 |            | 交换栈顶两个字长的数据的位置。[Java](http://lib.csdn.net/base/javaee)指令中没有提供以<br/>两个字长为单位的交换指令。 |\n\n### **类型转换指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                                     |\n| ---------- | -------------------- | ---------- | ------------------------------------------------------------ |\n| 0x86       | i2f                  |            | 将栈顶int类型值转换为float类型值。                           |\n| 0x85       | i2l                  |            | 将栈顶int类型值转换为long类型值。                            |\n| 0x87       | i2d                  |            | 将栈顶int类型值转换为double类型值。                          |\n| 0x8b       | f2i                  |            | 将栈顶float类型值转换为int类型值。                           |\n| 0x8c       | f2l                  |            | 将栈顶float类型值转换为long类型值。                          |\n| 0x8d       | f2d                  |            | 将栈顶float类型值转换为double类型值。                        |\n| 0x88       | l2i                  |            | 将栈顶long类型值转换为int类型值。                            |\n| 0x89       | l2f                  |            | 将栈顶long类型值转换为float类型值。                          |\n| 0x8a       | l2d                  |            | 将栈顶long类型值转换double类型值。                           |\n| 0x8e       | d2i                  |            | 将栈顶double类型值转换为int类型值。                          |\n| 0x90       | d2f                  |            | 将栈顶double类型值转换为float类型值。                        |\n| 0x8f       | d2l                  |            | 将栈顶double类型值转换为long类型值。                         |\n| 0x91       | i2b                  |            | 将栈顶int类型值截断成byte类型，后带符号扩展成int类型值入栈。 |\n| 0x92       | i2c                  |            | 将栈顶int类型值截断成char类型值，后带符号扩展成int类型值入栈。 |\n| 0x93       | i2s                  |            | 将栈顶int类型值截断成short类型值，后带符号扩展成int类型值入栈。 |\n\n### **整数运算**\n\n| **指令码** | **操作码（助记符）** | **操作数**         | **描述（栈指操作数栈）**                                  |\n| ---------- | -------------------- | ------------------ | --------------------------------------------------------- |\n| 0x60       | iadd                 |                    | 将栈顶两int类型数相加，结果入栈。                         |\n| 0x64       | isub                 |                    | 将栈顶两int类型数相减，结果入栈。                         |\n| 0x68       | imul                 |                    | 将栈顶两int类型数相乘，结果入栈。                         |\n| 0x6c       | idiv                 |                    | 将栈顶两int类型数相除，结果入栈。                         |\n| 0x70       | irem                 |                    | 将栈顶两int类型数取模，结果入栈。                         |\n| 0x74       | ineg                 |                    | 将栈顶int类型值取负，结果入栈。                           |\n| 0x61       | ladd                 |                    | 将栈顶两long类型数相加，结果入栈。                        |\n| 0x65       | lsub                 |                    | 将栈顶两long类型数相减，结果入栈。                        |\n| 0x69       | lmul                 |                    | 将栈顶两long类型数相乘，结果入栈。                        |\n| 0x6d       | ldiv                 |                    | 将栈顶两long类型数相除，结果入栈。                        |\n| 0x71       | lrem                 |                    | 将栈顶两long类型数取模，结果入栈。                        |\n| 0x75       | lneg                 |                    | 将栈顶long类型值取负，结果入栈。                          |\n| 0x84       | (wide)iinc           | indexbyteconstbyte | 将整数值constbyte加到indexbyte指定的int类型的局部变量中。 |\n\n**浮点运算**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**             |\n| ---------- | -------------------- | ---------- | ------------------------------------ |\n| 0x62       | fadd                 |            | 将栈顶两float类型数相加，结果入栈。  |\n| 0x66       | fsub                 |            | 将栈顶两float类型数相减，结果入栈。  |\n| 0x6a       | fmul                 |            | 将栈顶两float类型数相乘，结果入栈。  |\n| 0x6e       | fdiv                 |            | 将栈顶两float类型数相除，结果入栈。  |\n| 0x72       | frem                 |            | 将栈顶两float类型数取模，结果入栈。  |\n| 0x76       | fneg                 |            | 将栈顶float类型值取反，结果入栈。    |\n| 0x63       | dadd                 |            | 将栈顶两double类型数相加，结果入栈。 |\n| 0x67       | dsub                 |            | 将栈顶两double类型数相减，结果入栈。 |\n| 0x6b       | dmul                 |            | 将栈顶两double类型数相乘，结果入栈。 |\n| 0x6f       | ddiv                 |            | 将栈顶两double类型数相除，结果入栈。 |\n| 0x73       | drem                 |            | 将栈顶两double类型数取模，结果入栈。 |\n| 0x77       | dneg                 |            | 将栈顶double类型值取负，结果入栈。   |\n\n### **逻辑运算——移位运算**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | ---------- | ------------------------ |\n| 0x78       | ishl                 |            | 左移int类型值。          |\n| 0x79       | lshl                 |            | 左移long类型值。         |\n| 0x7a       | ishr                 |            | 算术右移int类型值。      |\n| 0x7b       | lshr                 |            | 算术右移long类型值。     |\n| 0x7c       | iushr                |            | 逻辑右移int类型值。      |\n| 0x7d       | lushr                |            | 逻辑右移long类型值。     |\n\n### **逻辑运算——按位布尔运算**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**   |\n| ---------- | -------------------- | ---------- | -------------------------- |\n| 0x73       | iand                 |            | 对int类型按位与运算。      |\n| 0x7f       | land                 |            | 对long类型的按位与运算。   |\n| 0x80       | ior                  |            | 对int类型的按位或运算。    |\n| 0x81       | lor                  |            | 对long类型的按位或运算。   |\n| 0x82       | ixor                 |            | 对int类型的按位异或运算。  |\n| 0x83       | lxor                 |            | 对long类型的按位异或运算。 |\n\n### **控制流指令——条件跳转指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**             | **描述（栈指操作数栈）**              |\n| ---------- | -------------------- | ---------------------- | ------------------------------------- |\n| 0x99       | ifeq                 | branchbyte1branchbyte2 | 若栈顶int类型值为0则跳转。            |\n| 0x9a       | ifne                 | branchbyte1branchbyte2 | 若栈顶int类型值不为0则跳转。          |\n| 0x9b       | iflt                 | branchbyte1branchbyte2 | 若栈顶int类型值小于0则跳转。          |\n| 0x9e       | ifle                 | branchbyte1branchbyte2 | 若栈顶int类型值小于等于0则跳转。      |\n| 0x9d       | ifgt                 | branchbyte1branchbyte2 | 若栈顶int类型值大于0则跳转。          |\n| 0x9c       | ifge                 | branchbyte1branchbyte2 | 若栈顶int类型值大于等于0则跳转。      |\n| 0x9f       | if_icmpeq            | branchbyte1branchbyte2 | 若栈顶两int类型值相等则跳转。         |\n| 0xa0       | if_icmpne            | branchbyte1branchbyte2 | 若栈顶两int类型值不相等则跳转。       |\n| 0xa1       | if_icmplt            | branchbyte1branchbyte2 | 若栈顶两int类型值前小于后则跳转。     |\n| 0xa4       | if_icmple            | branchbyte1branchbyte2 | 若栈顶两int类型值前小于等于后则跳转。 |\n| 0xa3       | if_icmpgt            | branchbyte1branchbyte2 | 若栈顶两int类型值前大于后则跳转。     |\n| 0xa2       | if_icmpge            | branchbyte1branchbyte2 | 若栈顶两int类型值前大于等于后则跳转。 |\n| 0xc6       | ifnull               | branchbyte1branchbyte2 | 若栈顶引用值为null则跳转。            |\n| 0xc7       | ifnonnull            | branchbyte1branchbyte2 | 若栈顶引用值不为null则跳转。          |\n| 0xa5       | if_acmpeq            | branchbyte1branchbyte2 | 若栈顶两引用类型值相等则跳转。        |\n| 0xa6       | if_acmpne            | branchbyte1branchbyte2 | 若栈顶两引用类型值不相等则跳转。      |\n\n### **控制流指令——比较指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                                     |\n| ---------- | -------------------- | ---------- | ------------------------------------------------------------ |\n| 0x94       | lcmp                 |            | 比较栈顶两long类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈。 |\n| 0x95       | fcmpl                |            | 比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n| 0x96       | fcmpg                |            | 比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n| 0x97       | dcmpl                |            | 比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n| 0x98       | dcmpg                |            | 比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n\n### **控制流指令——无条件跳转指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                                   | **描述（栈指操作数栈）**         |\n| ---------- | -------------------- | -------------------------------------------- | -------------------------------- |\n| 0xa7       | goto                 | branchbyte1branchbyte2                       | 无条件跳转到指定位置。           |\n| 0xc8       | goto_w               | branchbyte1branchbyte2branchbyte3branchbyte4 | 无条件跳转到指定位置（宽索引）。 |\n\n### **控制流指令——表跳转指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                                                   | **描述（栈指操作数栈）**     |\n| ---------- | -------------------- | ------------------------------------------------------------ | ---------------------------- |\n| 0xaa       | tableswitch          | <0-3bytepad><br/>defaultbyte1<br/>defaultbyte2<br/>defaultbyte3<br/>defaultbyte4<br/>lowbyte1<br/>lowbyte2<br/>lowbyte3<br/>lowbyte4<br/>highbyte1<br/>highbyte2<br/>highbyte3<br/>highbyte4<br/>jump offsets... | 通过索引访问跳转表，并跳转。 |\n| 0xab       | lookupswitch         | <0-3bytepad><br/>defaultbyte1<br/>defaultbyte2<br/>defaultbyte3<br/>defaultbyte4<br/>npairs1<br/>npairs2<br/>npairs3<br/>npairs4<br/>match offsets | 通过键值访问跳转表，并跳转。 |\n\n### **控制流指令——异常和****finally**\n\n| **指令码** | **操作码（助记符）** | **操作数**                                   | **描述（栈指操作数栈）**   |\n| ---------- | -------------------- | -------------------------------------------- | -------------------------- |\n| 0xbf       | athrow               |                                              | 抛出异常。                 |\n| 0xa8       | jsr                  | branchbyte1branchbyte2                       | 跳转到子例程序。           |\n| 0xc9       | jsr_w                | branchbyte1branchbyte2branchbyte3branchbyte4 | 跳转到子例程序（宽索引）。 |\n| 0xa9       | (wide)ret            | indexbyte                                    | 返回子例程序               |\n\n### **对象操作指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**           | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | -------------------- | ------------------------ |\n| 0xbb       | new                  | indexbyte1indexbyte2 | 创建新的对象实例。       |\n| 0xc0       | checkcast            | indexbyte1indexbyte  | 类型强转。               |\n| 0xc1       | instanceof           | indexbyte1indexbyte2 | 判断类型。               |\n| 0xb4       | getfield             | indexbyte1indexbyte2 | 获取对象字段的值。       |\n| 0xb5       | putfield             | indexbyte1indexbyte2 | 给对象字段赋值。         |\n| 0xb2       | getstatic            | indexbyte1indexbyte2 | 获取静态字段的值。       |\n| 0xb3       | putstatic            | indexbyte1indexbyte2 | 给静态字段赋值。         |\n\n### **数组操作指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                    | **描述（栈指操作数栈）**  |\n| ---------- | -------------------- | ----------------------------- | ------------------------- |\n| 0xbc       | newarray             | atype                         | 创建type类型的数组。      |\n| 0xbd       | anewarray            | indexbyte1indexbyte2          | 创建引用类型的数组。      |\n| 0xbe       | arraylength          |                               | 获取一维数组的长度。      |\n| 0xc5       | multianewarray       | indexbyte1indexbyte2dimension | 创建dimension维度的数组。 |\n\n### **方法调用指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                 | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | -------------------------- | ------------------------ |\n| 0xb7       | invokespecial        | indexbyte1indexbyte2       | 编译时方法绑定调用方法。 |\n| 0xb6       | invokevirtual        | indexbyte1indexbyte2       | 运行时方法绑定调用方法。 |\n| 0xb8       | invokestatic         | indexbyte1indexbyte2       | 调用静态方法。           |\n| 0xb9       | invokeinterface      | indexbyte1indexbyte2count0 | 调用接口方法。           |\n\n### **方法返回指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | ---------- | ------------------------ |\n| 0xac       | ireturn              |            | 返回int类型值。          |\n| 0xad       | lreturn              |            | 返回long类型值。         |\n| 0xae       | freturn              |            | 返回float类型值。        |\n| 0xaf       | dreturn              |            | 返回double类型值。       |\n| 0xb0       | areturn              |            | 返回引用类型值。         |\n| 0xb1       | return               |            | void函数返回。           |\n\n### **线程同步指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | ---------- | ------------------------ |\n| 0xc2       | monitorenter         |            | 进入并获得对象监视器。   |\n| 0xc3       | monitorexit          |            | 释放并退出对象监视器。   |\n\n","source":"_posts/Java字节码指令收集大全.md","raw":"---\ntitle: Java字节码指令收集大全\ndate: 2020-05-28 20:10:32\ncategories: [Java字节码]\ntags: [Java字节码]\n---\n\n## Java字节码指令收集大全\n\n\n\n### 常量入栈指令\n\n| **指令码** | **操作码（助记符）** | **操作数**             | **描述（栈指操作数栈）** |\n| :--------- | :--- | :--------- | :--- |\n| 0x01          | aconst_null     |            | null值入栈 |\n| 0x02          | iconst_m1     |            | -1（int）值入栈     |\n| 0x03          | iconst_0     |            | 0（int）值入栈     |\n| 0x04          | iconst_1     |            |1（int）值入栈     |\n| 0x05          | iconst_2     |            |2（int）值入栈     |\n| 0x06          | iconst_3     |            |3（int）值入栈     |\n| 0x07          | iconst_4     |            |4（int）值入栈     |\n| 0x08          | iconst_5     |            |5（int）值入栈     |\n| 0x09          | lconst_0     |            |0（long）值入栈     |\n| 0x0a          | lconst_1     |            |1（long）值入栈     |\n| 0x0b          | fconst_0     |            |0（float）值入栈     |\n| 0x0c          | fconst_1     |            |1（float）值入栈     |\n| 0x0d          | fconst_2     |            |2（float）值入栈     |\n| 0x0e          | dconst_0     |            |0（double）值入栈     |\n| 0x0f          | dconst_1     |            |1（double）值入栈     |\n| 0x10          | bipush |  valuebyte  | valuebyte值带符号扩展成int值入栈 |\n| 0x11          | sipush |  valuebyte1  valuebyte2|(valuebyte1 << 8)\\|valuebyte2 值带符号扩展成int值入栈。    |\n| 0x12          | ldc|  indexbyte1     | 常量池中的常量值<br/>（int, float, string reference, object reference）入栈。 |\n| 0x13          | ldc_w     |  indexbyte1 indexbyte2  | 常量池中常量<br/>（int, float, string reference, object reference）入栈。 |\n| 0x14          | ldc2_2     |  indexbyte1 indexbyte2      |  常量池中常量（long, double）入栈。    |\n\n### 局部变量值转载到栈中指令\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---- | ---- | ---- | ---- |\n|0x19     |(wide)aload     | indexbyte |从局部变量indexbyte中装载引用类型值入栈     |\n|0x2a     |aload_0     |      |从局部变量0中装载引用类型值入栈     |\n|0x2b     |aload_1     |      |从局部变量1中装载引用类型值入栈     |\n|0x2c     |aload_2     |      |从局部变量2中装载引用类型值入栈     |\n|0a2d     |aload_3     |      |从局部变量3中装载引用类型值入栈     |\n|0x15     |(wide)iload     | indexbyte |从局部变量indexbyte中装载int类型值入栈     |\n|0x1a     |iload_0    |      |从局部变量0中装载int类型值入栈     |\n|0x1b     |iload_1     |      |从局部变量1中装载int类型值入栈     |\n|0x1c     |iload_2     |      |从局部变量2中装载int类型值入栈     |\n|0x1d     |iload_3     |      |从局部变量3中装载int类型值入栈     |\n|0x16     |(wide)lload     | indexbyte |从局部变量indexbyte中装载long类型值入栈     |\n|0x1e     |lload_0     |      |从局部变量0中装载long类型值入栈     |\n|0x1f     |lload_1     |      |从局部变量1中装载long类型值入栈     |\n|0x20     |lload_2     |      |从局部变量2中装载long类型值入栈     |\n|0x21     |lload_3     |      |从局部变量3中装载long类型值入栈     |\n|0x17     |f(wide)load     | indexbyte |从局部变量indexbyte中装载float类型值入栈     |\n|0x22     |fload_0     |      |从局部变量0中装载float类型值入栈     |\n|0x23     |fload_1     |      |从局部变量1中装载float类型值入栈     |\n|0x24     |fload_2     |      |从局部变量2中装载float类型值入栈     |\n|0x25     |fload_3     |      |从局部变量3中装载float类型值入栈     |\n|0x18     |（wide）dload     | indexbyte |从局部变量indexbyte中装载引用类型值入栈     |\n|0x26     |dload_0    |      |从局部变量0中装载double类型值入栈     |\n|0x27     |dload_1    |      |从局部变量1中装载double类型值入栈     |\n|0x28     |dload_2    |      |从局部变量3中装载double类型值入栈      |\n|0x29     |dload_3    |      |从局部变量3中装载double类型值入栈      |\n|0x32     |aaload     |      |从引用类型数组中装载指定项的值入栈      |\n|0x2e     |iaload     |      |从int类型数组中装载指定项的值入栈      |\n|0x2f     |laload     |      |从long类型数组中装载指定项的值入栈      |\n|0x30     |faload     |      |从float类型数组中装载指定项的值入栈      |\n|0x31     |daload     |      |从double类型数组中装载指定项的值入栈      |\n|0x33     |baload     |      |从boolean或者byte类型数组中装载指定项的值入栈（<br/>先转换为int类型值，后压栈）。      |\n|0x34     |caload     |      |从char类型数组中装载指定项的值入栈 <br/>（先转换为int类型值，后压栈）。     |\n|0x35     |saload     |      |从short类型数组中装载指定项的值入栈 <br/>（先转换为int类型值，后压栈）。     |\n\n### **将栈顶值保存到局部变量中指令**\n\n| 0x3a | (wide)astore | indexbyte | 将栈顶引用类型值保存到局部变量indexbyte中。                  |\n| ---- | ------------ | --------- | ------------------------------------------------------------ |\n| 0x4b | astroe_0     |           | 将栈顶引用类型值保存到局部变量0中。                          |\n| 0x4c | astore_1     |           | 将栈顶引用类型值保存到局部变量1中。                          |\n| 0x4d | astore_2     |           | 将栈顶引用类型值保存到局部变量2中。                          |\n| 0x4e | astore_3     |           | 将栈顶引用类型值保存到局部变量3中。                          |\n| 0x36 | (wide)istore | indexbyte | 将栈顶int类型值保存到局部变量indexbyte中。                   |\n| 0x3b | istore_0     |           | 将栈顶int类型值保存到局部变量0中。                           |\n| 0x3c | istore_1     |           | 将栈顶int类型值保存到局部变量1中。                           |\n| 0x3d | istore_2     |           | 将栈顶int类型值保存到局部变量2中。                           |\n| 0x3e | istore_3     |           | 将栈顶int类型值保存到局部变量3中。                           |\n| 0x37 | (wide)lstore | indexbyte | 将栈顶long类型值保存到局部变量indexbyte中。                  |\n| 0x3f | lstore_0     |           | 将栈顶long类型值保存到局部变量0中。                          |\n| 0x40 | lstore_1     |           | 将栈顶long类型值保存到局部变量1中。                          |\n| 0x41 | lstore_2     |           | 将栈顶long类型值保存到局部变量2中。                          |\n| 0x42 | lstroe_3     |           | 将栈顶long类型值保存到局部变量3中。                          |\n| 0x38 | (wide)fstore | indexbyte | 将栈顶float类型值保存到局部变量indexbyte中。                 |\n| 0x43 | fstore_0     |           | 将栈顶float类型值保存到局部变量0中。                         |\n| 0x44 | fstore_1     |           | 将栈顶float类型值保存到局部变量1中。                         |\n| 0x45 | fstore_2     |           | 将栈顶float类型值保存到局部变量2中。                         |\n| 0x46 | fstore_3     |           | 将栈顶float类型值保存到局部变量3中。                         |\n| 0x39 | (wide)dstore | indexbyte | 将栈顶double类型值保存到局部变量indexbyte中。                |\n| 0x47 | dstore_0     |           | 将栈顶double类型值保存到局部变量0中。                        |\n| 0x48 | dstore_1     |           | 将栈顶double类型值保存到局部变量1中。                        |\n| 0x49 | dstore_2     |           | 将栈顶double类型值保存到局部变量2中。                        |\n| 0x4a | dstore_3     |           | 将栈顶double类型值保存到局部变量3中。                        |\n| 0x53 | aastore      |           | 将栈顶引用类型值保存到指定引用类型数组的指定项。             |\n| 0x4f | iastore      |           | 将栈顶int类型值保存到指定int类型数组的指定项。               |\n| 0x50 | lastore      |           | 将栈顶long类型值保存到指定long类型数组的指定项。             |\n| 0x51 | fastore      |           | 将栈顶float类型值保存到指定float类型数组的指定项。           |\n| 0x52 | dastore      |           | 将栈顶double类型值保存到指定double类型数组的指定项。         |\n| 0x54 | bastroe      |           | 将栈顶boolean类型值或byte类型值保存到指定boolean<br/>类型数组或byte类型数组的指定项。 |\n| 0x55 | castore      |           | 将栈顶char类型值保存到指定char类型数组的指定项。             |\n| 0x56 | sastore      |           | 将栈顶short类型值保存到指定short类型数组的指定项。           |\n\n### **wide****指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                       |\n| ---------- | -------------------- | ---------- | ---------------------------------------------- |\n| 0xc4       | wide                 |            | 使用附加字节扩展局部变量索引（iinc指令特殊）。 |\n\n### **通用（无类型）栈操作指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                                     |\n| ---------- | -------------------- | ---------- | ------------------------------------------------------------ |\n| 0x00       | nop                  |            | 空操作。                                                     |\n| 0x57       | pop                  |            | 从栈顶弹出一个字长的数据。                                   |\n| 0x58       | pop2                 |            | 从栈顶弹出两个字长的数据。                                   |\n| 0x59       | dup                  |            | 复制栈顶一个字长的数据，将复制后的数据压栈。                 |\n| 0x5a       | dup_x1               |            | 复制栈顶一个字长的数据，弹出栈顶两个字长数据，<br/>先将复制后的数据压栈，再将弹出的两个字长数据压栈。 |\n| 0x5b       | dup_x2               |            | 复制栈顶一个字长的数据，弹出栈顶三个字长的数据，<br/>将复制后的数据压栈，再将弹出的三个字长的数据压栈。 |\n| 0x5c       | dup2                 |            | 复制栈顶两个字长的数据，将复制后的两个字长的数据压栈。       |\n| 0x5d       | dup2_x1              |            | 复制栈顶两个字长的数据，弹出栈顶三个字长的数据，<br/>将复制后的两个字长的数据压栈，再将弹出的三个字长的数据压栈。 |\n| 0x5e       | dup2_x2              |            | 复制栈顶两个字长的数据，弹出栈顶四个字长的数据，<br/>将复制后的两个字长的数据压栈，再将弹出的四个字长的数据压栈。 |\n| 0x5f       | swap                 |            | 交换栈顶两个字长的数据的位置。[Java](http://lib.csdn.net/base/javaee)指令中没有提供以<br/>两个字长为单位的交换指令。 |\n\n### **类型转换指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                                     |\n| ---------- | -------------------- | ---------- | ------------------------------------------------------------ |\n| 0x86       | i2f                  |            | 将栈顶int类型值转换为float类型值。                           |\n| 0x85       | i2l                  |            | 将栈顶int类型值转换为long类型值。                            |\n| 0x87       | i2d                  |            | 将栈顶int类型值转换为double类型值。                          |\n| 0x8b       | f2i                  |            | 将栈顶float类型值转换为int类型值。                           |\n| 0x8c       | f2l                  |            | 将栈顶float类型值转换为long类型值。                          |\n| 0x8d       | f2d                  |            | 将栈顶float类型值转换为double类型值。                        |\n| 0x88       | l2i                  |            | 将栈顶long类型值转换为int类型值。                            |\n| 0x89       | l2f                  |            | 将栈顶long类型值转换为float类型值。                          |\n| 0x8a       | l2d                  |            | 将栈顶long类型值转换double类型值。                           |\n| 0x8e       | d2i                  |            | 将栈顶double类型值转换为int类型值。                          |\n| 0x90       | d2f                  |            | 将栈顶double类型值转换为float类型值。                        |\n| 0x8f       | d2l                  |            | 将栈顶double类型值转换为long类型值。                         |\n| 0x91       | i2b                  |            | 将栈顶int类型值截断成byte类型，后带符号扩展成int类型值入栈。 |\n| 0x92       | i2c                  |            | 将栈顶int类型值截断成char类型值，后带符号扩展成int类型值入栈。 |\n| 0x93       | i2s                  |            | 将栈顶int类型值截断成short类型值，后带符号扩展成int类型值入栈。 |\n\n### **整数运算**\n\n| **指令码** | **操作码（助记符）** | **操作数**         | **描述（栈指操作数栈）**                                  |\n| ---------- | -------------------- | ------------------ | --------------------------------------------------------- |\n| 0x60       | iadd                 |                    | 将栈顶两int类型数相加，结果入栈。                         |\n| 0x64       | isub                 |                    | 将栈顶两int类型数相减，结果入栈。                         |\n| 0x68       | imul                 |                    | 将栈顶两int类型数相乘，结果入栈。                         |\n| 0x6c       | idiv                 |                    | 将栈顶两int类型数相除，结果入栈。                         |\n| 0x70       | irem                 |                    | 将栈顶两int类型数取模，结果入栈。                         |\n| 0x74       | ineg                 |                    | 将栈顶int类型值取负，结果入栈。                           |\n| 0x61       | ladd                 |                    | 将栈顶两long类型数相加，结果入栈。                        |\n| 0x65       | lsub                 |                    | 将栈顶两long类型数相减，结果入栈。                        |\n| 0x69       | lmul                 |                    | 将栈顶两long类型数相乘，结果入栈。                        |\n| 0x6d       | ldiv                 |                    | 将栈顶两long类型数相除，结果入栈。                        |\n| 0x71       | lrem                 |                    | 将栈顶两long类型数取模，结果入栈。                        |\n| 0x75       | lneg                 |                    | 将栈顶long类型值取负，结果入栈。                          |\n| 0x84       | (wide)iinc           | indexbyteconstbyte | 将整数值constbyte加到indexbyte指定的int类型的局部变量中。 |\n\n**浮点运算**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**             |\n| ---------- | -------------------- | ---------- | ------------------------------------ |\n| 0x62       | fadd                 |            | 将栈顶两float类型数相加，结果入栈。  |\n| 0x66       | fsub                 |            | 将栈顶两float类型数相减，结果入栈。  |\n| 0x6a       | fmul                 |            | 将栈顶两float类型数相乘，结果入栈。  |\n| 0x6e       | fdiv                 |            | 将栈顶两float类型数相除，结果入栈。  |\n| 0x72       | frem                 |            | 将栈顶两float类型数取模，结果入栈。  |\n| 0x76       | fneg                 |            | 将栈顶float类型值取反，结果入栈。    |\n| 0x63       | dadd                 |            | 将栈顶两double类型数相加，结果入栈。 |\n| 0x67       | dsub                 |            | 将栈顶两double类型数相减，结果入栈。 |\n| 0x6b       | dmul                 |            | 将栈顶两double类型数相乘，结果入栈。 |\n| 0x6f       | ddiv                 |            | 将栈顶两double类型数相除，结果入栈。 |\n| 0x73       | drem                 |            | 将栈顶两double类型数取模，结果入栈。 |\n| 0x77       | dneg                 |            | 将栈顶double类型值取负，结果入栈。   |\n\n### **逻辑运算——移位运算**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | ---------- | ------------------------ |\n| 0x78       | ishl                 |            | 左移int类型值。          |\n| 0x79       | lshl                 |            | 左移long类型值。         |\n| 0x7a       | ishr                 |            | 算术右移int类型值。      |\n| 0x7b       | lshr                 |            | 算术右移long类型值。     |\n| 0x7c       | iushr                |            | 逻辑右移int类型值。      |\n| 0x7d       | lushr                |            | 逻辑右移long类型值。     |\n\n### **逻辑运算——按位布尔运算**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**   |\n| ---------- | -------------------- | ---------- | -------------------------- |\n| 0x73       | iand                 |            | 对int类型按位与运算。      |\n| 0x7f       | land                 |            | 对long类型的按位与运算。   |\n| 0x80       | ior                  |            | 对int类型的按位或运算。    |\n| 0x81       | lor                  |            | 对long类型的按位或运算。   |\n| 0x82       | ixor                 |            | 对int类型的按位异或运算。  |\n| 0x83       | lxor                 |            | 对long类型的按位异或运算。 |\n\n### **控制流指令——条件跳转指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**             | **描述（栈指操作数栈）**              |\n| ---------- | -------------------- | ---------------------- | ------------------------------------- |\n| 0x99       | ifeq                 | branchbyte1branchbyte2 | 若栈顶int类型值为0则跳转。            |\n| 0x9a       | ifne                 | branchbyte1branchbyte2 | 若栈顶int类型值不为0则跳转。          |\n| 0x9b       | iflt                 | branchbyte1branchbyte2 | 若栈顶int类型值小于0则跳转。          |\n| 0x9e       | ifle                 | branchbyte1branchbyte2 | 若栈顶int类型值小于等于0则跳转。      |\n| 0x9d       | ifgt                 | branchbyte1branchbyte2 | 若栈顶int类型值大于0则跳转。          |\n| 0x9c       | ifge                 | branchbyte1branchbyte2 | 若栈顶int类型值大于等于0则跳转。      |\n| 0x9f       | if_icmpeq            | branchbyte1branchbyte2 | 若栈顶两int类型值相等则跳转。         |\n| 0xa0       | if_icmpne            | branchbyte1branchbyte2 | 若栈顶两int类型值不相等则跳转。       |\n| 0xa1       | if_icmplt            | branchbyte1branchbyte2 | 若栈顶两int类型值前小于后则跳转。     |\n| 0xa4       | if_icmple            | branchbyte1branchbyte2 | 若栈顶两int类型值前小于等于后则跳转。 |\n| 0xa3       | if_icmpgt            | branchbyte1branchbyte2 | 若栈顶两int类型值前大于后则跳转。     |\n| 0xa2       | if_icmpge            | branchbyte1branchbyte2 | 若栈顶两int类型值前大于等于后则跳转。 |\n| 0xc6       | ifnull               | branchbyte1branchbyte2 | 若栈顶引用值为null则跳转。            |\n| 0xc7       | ifnonnull            | branchbyte1branchbyte2 | 若栈顶引用值不为null则跳转。          |\n| 0xa5       | if_acmpeq            | branchbyte1branchbyte2 | 若栈顶两引用类型值相等则跳转。        |\n| 0xa6       | if_acmpne            | branchbyte1branchbyte2 | 若栈顶两引用类型值不相等则跳转。      |\n\n### **控制流指令——比较指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）**                                     |\n| ---------- | -------------------- | ---------- | ------------------------------------------------------------ |\n| 0x94       | lcmp                 |            | 比较栈顶两long类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈。 |\n| 0x95       | fcmpl                |            | 比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n| 0x96       | fcmpg                |            | 比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n| 0x97       | dcmpl                |            | 比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n| 0x98       | dcmpg                |            | 比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br/>后者大，-1入栈；有NaN存在，-1入栈。 |\n\n### **控制流指令——无条件跳转指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                                   | **描述（栈指操作数栈）**         |\n| ---------- | -------------------- | -------------------------------------------- | -------------------------------- |\n| 0xa7       | goto                 | branchbyte1branchbyte2                       | 无条件跳转到指定位置。           |\n| 0xc8       | goto_w               | branchbyte1branchbyte2branchbyte3branchbyte4 | 无条件跳转到指定位置（宽索引）。 |\n\n### **控制流指令——表跳转指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                                                   | **描述（栈指操作数栈）**     |\n| ---------- | -------------------- | ------------------------------------------------------------ | ---------------------------- |\n| 0xaa       | tableswitch          | <0-3bytepad><br/>defaultbyte1<br/>defaultbyte2<br/>defaultbyte3<br/>defaultbyte4<br/>lowbyte1<br/>lowbyte2<br/>lowbyte3<br/>lowbyte4<br/>highbyte1<br/>highbyte2<br/>highbyte3<br/>highbyte4<br/>jump offsets... | 通过索引访问跳转表，并跳转。 |\n| 0xab       | lookupswitch         | <0-3bytepad><br/>defaultbyte1<br/>defaultbyte2<br/>defaultbyte3<br/>defaultbyte4<br/>npairs1<br/>npairs2<br/>npairs3<br/>npairs4<br/>match offsets | 通过键值访问跳转表，并跳转。 |\n\n### **控制流指令——异常和****finally**\n\n| **指令码** | **操作码（助记符）** | **操作数**                                   | **描述（栈指操作数栈）**   |\n| ---------- | -------------------- | -------------------------------------------- | -------------------------- |\n| 0xbf       | athrow               |                                              | 抛出异常。                 |\n| 0xa8       | jsr                  | branchbyte1branchbyte2                       | 跳转到子例程序。           |\n| 0xc9       | jsr_w                | branchbyte1branchbyte2branchbyte3branchbyte4 | 跳转到子例程序（宽索引）。 |\n| 0xa9       | (wide)ret            | indexbyte                                    | 返回子例程序               |\n\n### **对象操作指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**           | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | -------------------- | ------------------------ |\n| 0xbb       | new                  | indexbyte1indexbyte2 | 创建新的对象实例。       |\n| 0xc0       | checkcast            | indexbyte1indexbyte  | 类型强转。               |\n| 0xc1       | instanceof           | indexbyte1indexbyte2 | 判断类型。               |\n| 0xb4       | getfield             | indexbyte1indexbyte2 | 获取对象字段的值。       |\n| 0xb5       | putfield             | indexbyte1indexbyte2 | 给对象字段赋值。         |\n| 0xb2       | getstatic            | indexbyte1indexbyte2 | 获取静态字段的值。       |\n| 0xb3       | putstatic            | indexbyte1indexbyte2 | 给静态字段赋值。         |\n\n### **数组操作指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                    | **描述（栈指操作数栈）**  |\n| ---------- | -------------------- | ----------------------------- | ------------------------- |\n| 0xbc       | newarray             | atype                         | 创建type类型的数组。      |\n| 0xbd       | anewarray            | indexbyte1indexbyte2          | 创建引用类型的数组。      |\n| 0xbe       | arraylength          |                               | 获取一维数组的长度。      |\n| 0xc5       | multianewarray       | indexbyte1indexbyte2dimension | 创建dimension维度的数组。 |\n\n### **方法调用指令**\n\n| **指令码** | **操作码（助记符）** | **操作数**                 | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | -------------------------- | ------------------------ |\n| 0xb7       | invokespecial        | indexbyte1indexbyte2       | 编译时方法绑定调用方法。 |\n| 0xb6       | invokevirtual        | indexbyte1indexbyte2       | 运行时方法绑定调用方法。 |\n| 0xb8       | invokestatic         | indexbyte1indexbyte2       | 调用静态方法。           |\n| 0xb9       | invokeinterface      | indexbyte1indexbyte2count0 | 调用接口方法。           |\n\n### **方法返回指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | ---------- | ------------------------ |\n| 0xac       | ireturn              |            | 返回int类型值。          |\n| 0xad       | lreturn              |            | 返回long类型值。         |\n| 0xae       | freturn              |            | 返回float类型值。        |\n| 0xaf       | dreturn              |            | 返回double类型值。       |\n| 0xb0       | areturn              |            | 返回引用类型值。         |\n| 0xb1       | return               |            | void函数返回。           |\n\n### **线程同步指令**\n\n| **指令码** | **操作码（助记符）** | **操作数** | **描述（栈指操作数栈）** |\n| ---------- | -------------------- | ---------- | ------------------------ |\n| 0xc2       | monitorenter         |            | 进入并获得对象监视器。   |\n| 0xc3       | monitorexit          |            | 释放并退出对象监视器。   |\n\n","slug":"Java字节码指令收集大全","published":1,"updated":"2020-09-28T10:46:49.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yt900ffesqryl87f33t","content":"<h2 id=\"Java字节码指令收集大全\"><a href=\"#Java字节码指令收集大全\" class=\"headerlink\" title=\"Java字节码指令收集大全\"></a>Java字节码指令收集大全</h2><h3 id=\"常量入栈指令\"><a href=\"#常量入栈指令\" class=\"headerlink\" title=\"常量入栈指令\"></a>常量入栈指令</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>指令码</strong></th>\n<th style=\"text-align:left\"><strong>操作码（助记符）</strong></th>\n<th style=\"text-align:left\"><strong>操作数</strong></th>\n<th style=\"text-align:left\"><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0x01</td>\n<td style=\"text-align:left\">aconst_null</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">null值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x02</td>\n<td style=\"text-align:left\">iconst_m1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">-1（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x03</td>\n<td style=\"text-align:left\">iconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x04</td>\n<td style=\"text-align:left\">iconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x05</td>\n<td style=\"text-align:left\">iconst_2</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x06</td>\n<td style=\"text-align:left\">iconst_3</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">3（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x07</td>\n<td style=\"text-align:left\">iconst_4</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">4（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x08</td>\n<td style=\"text-align:left\">iconst_5</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">5（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x09</td>\n<td style=\"text-align:left\">lconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（long）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0a</td>\n<td style=\"text-align:left\">lconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（long）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0b</td>\n<td style=\"text-align:left\">fconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（float）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0c</td>\n<td style=\"text-align:left\">fconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（float）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0d</td>\n<td style=\"text-align:left\">fconst_2</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2（float）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0e</td>\n<td style=\"text-align:left\">dconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（double）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0f</td>\n<td style=\"text-align:left\">dconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（double）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x10</td>\n<td style=\"text-align:left\">bipush</td>\n<td style=\"text-align:left\">valuebyte</td>\n<td style=\"text-align:left\">valuebyte值带符号扩展成int值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x11</td>\n<td style=\"text-align:left\">sipush</td>\n<td style=\"text-align:left\">valuebyte1  valuebyte2</td>\n<td style=\"text-align:left\">(valuebyte1 &lt;&lt; 8)\\</td>\n<td>valuebyte2 值带符号扩展成int值入栈。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x12</td>\n<td style=\"text-align:left\">ldc</td>\n<td style=\"text-align:left\">indexbyte1</td>\n<td style=\"text-align:left\">常量池中的常量值<br>（int, float, string reference, object reference）入栈。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x13</td>\n<td style=\"text-align:left\">ldc_w</td>\n<td style=\"text-align:left\">indexbyte1 indexbyte2</td>\n<td style=\"text-align:left\">常量池中常量<br>（int, float, string reference, object reference）入栈。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x14</td>\n<td style=\"text-align:left\">ldc2_2</td>\n<td style=\"text-align:left\">indexbyte1 indexbyte2</td>\n<td style=\"text-align:left\">常量池中常量（long, double）入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"局部变量值转载到栈中指令\"><a href=\"#局部变量值转载到栈中指令\" class=\"headerlink\" title=\"局部变量值转载到栈中指令\"></a>局部变量值转载到栈中指令</h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x19</td>\n<td>(wide)aload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x2a</td>\n<td>aload_0</td>\n<td></td>\n<td>从局部变量0中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x2b</td>\n<td>aload_1</td>\n<td></td>\n<td>从局部变量1中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x2c</td>\n<td>aload_2</td>\n<td></td>\n<td>从局部变量2中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0a2d</td>\n<td>aload_3</td>\n<td></td>\n<td>从局部变量3中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x15</td>\n<td>(wide)iload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1a</td>\n<td>iload_0</td>\n<td></td>\n<td>从局部变量0中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1b</td>\n<td>iload_1</td>\n<td></td>\n<td>从局部变量1中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1c</td>\n<td>iload_2</td>\n<td></td>\n<td>从局部变量2中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1d</td>\n<td>iload_3</td>\n<td></td>\n<td>从局部变量3中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x16</td>\n<td>(wide)lload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x1e</td>\n<td>lload_0</td>\n<td></td>\n<td>从局部变量0中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x1f</td>\n<td>lload_1</td>\n<td></td>\n<td>从局部变量1中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x20</td>\n<td>lload_2</td>\n<td></td>\n<td>从局部变量2中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x21</td>\n<td>lload_3</td>\n<td></td>\n<td>从局部变量3中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x17</td>\n<td>f(wide)load</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x22</td>\n<td>fload_0</td>\n<td></td>\n<td>从局部变量0中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x23</td>\n<td>fload_1</td>\n<td></td>\n<td>从局部变量1中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x24</td>\n<td>fload_2</td>\n<td></td>\n<td>从局部变量2中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x25</td>\n<td>fload_3</td>\n<td></td>\n<td>从局部变量3中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x18</td>\n<td>（wide）dload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x26</td>\n<td>dload_0</td>\n<td></td>\n<td>从局部变量0中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x27</td>\n<td>dload_1</td>\n<td></td>\n<td>从局部变量1中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x28</td>\n<td>dload_2</td>\n<td></td>\n<td>从局部变量3中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x29</td>\n<td>dload_3</td>\n<td></td>\n<td>从局部变量3中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>aaload</td>\n<td></td>\n<td>从引用类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x2e</td>\n<td>iaload</td>\n<td></td>\n<td>从int类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x2f</td>\n<td>laload</td>\n<td></td>\n<td>从long类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x30</td>\n<td>faload</td>\n<td></td>\n<td>从float类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x31</td>\n<td>daload</td>\n<td></td>\n<td>从double类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x33</td>\n<td>baload</td>\n<td></td>\n<td>从boolean或者byte类型数组中装载指定项的值入栈（<br>先转换为int类型值，后压栈）。</td>\n</tr>\n<tr>\n<td>0x34</td>\n<td>caload</td>\n<td></td>\n<td>从char类型数组中装载指定项的值入栈 <br>（先转换为int类型值，后压栈）。</td>\n</tr>\n<tr>\n<td>0x35</td>\n<td>saload</td>\n<td></td>\n<td>从short类型数组中装载指定项的值入栈 <br>（先转换为int类型值，后压栈）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"将栈顶值保存到局部变量中指令\"><a href=\"#将栈顶值保存到局部变量中指令\" class=\"headerlink\" title=\"将栈顶值保存到局部变量中指令\"></a><strong>将栈顶值保存到局部变量中指令</strong></h3><table>\n<thead>\n<tr>\n<th>0x3a</th>\n<th>(wide)astore</th>\n<th>indexbyte</th>\n<th>将栈顶引用类型值保存到局部变量indexbyte中。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x4b</td>\n<td>astroe_0</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x4c</td>\n<td>astore_1</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x4d</td>\n<td>astore_2</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x4e</td>\n<td>astore_3</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x36</td>\n<td>(wide)istore</td>\n<td>indexbyte</td>\n<td>将栈顶int类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x3b</td>\n<td>istore_0</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x3c</td>\n<td>istore_1</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x3d</td>\n<td>istore_2</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x3e</td>\n<td>istore_3</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x37</td>\n<td>(wide)lstore</td>\n<td>indexbyte</td>\n<td>将栈顶long类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x3f</td>\n<td>lstore_0</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x40</td>\n<td>lstore_1</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x41</td>\n<td>lstore_2</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x42</td>\n<td>lstroe_3</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x38</td>\n<td>(wide)fstore</td>\n<td>indexbyte</td>\n<td>将栈顶float类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x43</td>\n<td>fstore_0</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x44</td>\n<td>fstore_1</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x45</td>\n<td>fstore_2</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x46</td>\n<td>fstore_3</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x39</td>\n<td>(wide)dstore</td>\n<td>indexbyte</td>\n<td>将栈顶double类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x47</td>\n<td>dstore_0</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x48</td>\n<td>dstore_1</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x49</td>\n<td>dstore_2</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x4a</td>\n<td>dstore_3</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x53</td>\n<td>aastore</td>\n<td></td>\n<td>将栈顶引用类型值保存到指定引用类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x4f</td>\n<td>iastore</td>\n<td></td>\n<td>将栈顶int类型值保存到指定int类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x50</td>\n<td>lastore</td>\n<td></td>\n<td>将栈顶long类型值保存到指定long类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x51</td>\n<td>fastore</td>\n<td></td>\n<td>将栈顶float类型值保存到指定float类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x52</td>\n<td>dastore</td>\n<td></td>\n<td>将栈顶double类型值保存到指定double类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x54</td>\n<td>bastroe</td>\n<td></td>\n<td>将栈顶boolean类型值或byte类型值保存到指定boolean<br>类型数组或byte类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x55</td>\n<td>castore</td>\n<td></td>\n<td>将栈顶char类型值保存到指定char类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x56</td>\n<td>sastore</td>\n<td></td>\n<td>将栈顶short类型值保存到指定short类型数组的指定项。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"wide-指令\"><a href=\"#wide-指令\" class=\"headerlink\" title=\"wide**指令**\"></a><strong>wide**</strong>指令**</h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xc4</td>\n<td>wide</td>\n<td></td>\n<td>使用附加字节扩展局部变量索引（iinc指令特殊）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通用（无类型）栈操作指令\"><a href=\"#通用（无类型）栈操作指令\" class=\"headerlink\" title=\"通用（无类型）栈操作指令\"></a><strong>通用（无类型）栈操作指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td>nop</td>\n<td></td>\n<td>空操作。</td>\n</tr>\n<tr>\n<td>0x57</td>\n<td>pop</td>\n<td></td>\n<td>从栈顶弹出一个字长的数据。</td>\n</tr>\n<tr>\n<td>0x58</td>\n<td>pop2</td>\n<td></td>\n<td>从栈顶弹出两个字长的数据。</td>\n</tr>\n<tr>\n<td>0x59</td>\n<td>dup</td>\n<td></td>\n<td>复制栈顶一个字长的数据，将复制后的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5a</td>\n<td>dup_x1</td>\n<td></td>\n<td>复制栈顶一个字长的数据，弹出栈顶两个字长数据，<br>先将复制后的数据压栈，再将弹出的两个字长数据压栈。</td>\n</tr>\n<tr>\n<td>0x5b</td>\n<td>dup_x2</td>\n<td></td>\n<td>复制栈顶一个字长的数据，弹出栈顶三个字长的数据，<br>将复制后的数据压栈，再将弹出的三个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5c</td>\n<td>dup2</td>\n<td></td>\n<td>复制栈顶两个字长的数据，将复制后的两个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5d</td>\n<td>dup2_x1</td>\n<td></td>\n<td>复制栈顶两个字长的数据，弹出栈顶三个字长的数据，<br>将复制后的两个字长的数据压栈，再将弹出的三个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5e</td>\n<td>dup2_x2</td>\n<td></td>\n<td>复制栈顶两个字长的数据，弹出栈顶四个字长的数据，<br>将复制后的两个字长的数据压栈，再将弹出的四个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5f</td>\n<td>swap</td>\n<td></td>\n<td>交换栈顶两个字长的数据的位置。<a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"external\">Java</a>指令中没有提供以<br>两个字长为单位的交换指令。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"类型转换指令\"><a href=\"#类型转换指令\" class=\"headerlink\" title=\"类型转换指令\"></a><strong>类型转换指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x86</td>\n<td>i2f</td>\n<td></td>\n<td>将栈顶int类型值转换为float类型值。</td>\n</tr>\n<tr>\n<td>0x85</td>\n<td>i2l</td>\n<td></td>\n<td>将栈顶int类型值转换为long类型值。</td>\n</tr>\n<tr>\n<td>0x87</td>\n<td>i2d</td>\n<td></td>\n<td>将栈顶int类型值转换为double类型值。</td>\n</tr>\n<tr>\n<td>0x8b</td>\n<td>f2i</td>\n<td></td>\n<td>将栈顶float类型值转换为int类型值。</td>\n</tr>\n<tr>\n<td>0x8c</td>\n<td>f2l</td>\n<td></td>\n<td>将栈顶float类型值转换为long类型值。</td>\n</tr>\n<tr>\n<td>0x8d</td>\n<td>f2d</td>\n<td></td>\n<td>将栈顶float类型值转换为double类型值。</td>\n</tr>\n<tr>\n<td>0x88</td>\n<td>l2i</td>\n<td></td>\n<td>将栈顶long类型值转换为int类型值。</td>\n</tr>\n<tr>\n<td>0x89</td>\n<td>l2f</td>\n<td></td>\n<td>将栈顶long类型值转换为float类型值。</td>\n</tr>\n<tr>\n<td>0x8a</td>\n<td>l2d</td>\n<td></td>\n<td>将栈顶long类型值转换double类型值。</td>\n</tr>\n<tr>\n<td>0x8e</td>\n<td>d2i</td>\n<td></td>\n<td>将栈顶double类型值转换为int类型值。</td>\n</tr>\n<tr>\n<td>0x90</td>\n<td>d2f</td>\n<td></td>\n<td>将栈顶double类型值转换为float类型值。</td>\n</tr>\n<tr>\n<td>0x8f</td>\n<td>d2l</td>\n<td></td>\n<td>将栈顶double类型值转换为long类型值。</td>\n</tr>\n<tr>\n<td>0x91</td>\n<td>i2b</td>\n<td></td>\n<td>将栈顶int类型值截断成byte类型，后带符号扩展成int类型值入栈。</td>\n</tr>\n<tr>\n<td>0x92</td>\n<td>i2c</td>\n<td></td>\n<td>将栈顶int类型值截断成char类型值，后带符号扩展成int类型值入栈。</td>\n</tr>\n<tr>\n<td>0x93</td>\n<td>i2s</td>\n<td></td>\n<td>将栈顶int类型值截断成short类型值，后带符号扩展成int类型值入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"整数运算\"><a href=\"#整数运算\" class=\"headerlink\" title=\"整数运算\"></a><strong>整数运算</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x60</td>\n<td>iadd</td>\n<td></td>\n<td>将栈顶两int类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x64</td>\n<td>isub</td>\n<td></td>\n<td>将栈顶两int类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x68</td>\n<td>imul</td>\n<td></td>\n<td>将栈顶两int类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6c</td>\n<td>idiv</td>\n<td></td>\n<td>将栈顶两int类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x70</td>\n<td>irem</td>\n<td></td>\n<td>将栈顶两int类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x74</td>\n<td>ineg</td>\n<td></td>\n<td>将栈顶int类型值取负，结果入栈。</td>\n</tr>\n<tr>\n<td>0x61</td>\n<td>ladd</td>\n<td></td>\n<td>将栈顶两long类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x65</td>\n<td>lsub</td>\n<td></td>\n<td>将栈顶两long类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x69</td>\n<td>lmul</td>\n<td></td>\n<td>将栈顶两long类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6d</td>\n<td>ldiv</td>\n<td></td>\n<td>将栈顶两long类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x71</td>\n<td>lrem</td>\n<td></td>\n<td>将栈顶两long类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x75</td>\n<td>lneg</td>\n<td></td>\n<td>将栈顶long类型值取负，结果入栈。</td>\n</tr>\n<tr>\n<td>0x84</td>\n<td>(wide)iinc</td>\n<td>indexbyteconstbyte</td>\n<td>将整数值constbyte加到indexbyte指定的int类型的局部变量中。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>浮点运算</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x62</td>\n<td>fadd</td>\n<td></td>\n<td>将栈顶两float类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x66</td>\n<td>fsub</td>\n<td></td>\n<td>将栈顶两float类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6a</td>\n<td>fmul</td>\n<td></td>\n<td>将栈顶两float类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6e</td>\n<td>fdiv</td>\n<td></td>\n<td>将栈顶两float类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x72</td>\n<td>frem</td>\n<td></td>\n<td>将栈顶两float类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x76</td>\n<td>fneg</td>\n<td></td>\n<td>将栈顶float类型值取反，结果入栈。</td>\n</tr>\n<tr>\n<td>0x63</td>\n<td>dadd</td>\n<td></td>\n<td>将栈顶两double类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x67</td>\n<td>dsub</td>\n<td></td>\n<td>将栈顶两double类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6b</td>\n<td>dmul</td>\n<td></td>\n<td>将栈顶两double类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6f</td>\n<td>ddiv</td>\n<td></td>\n<td>将栈顶两double类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x73</td>\n<td>drem</td>\n<td></td>\n<td>将栈顶两double类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x77</td>\n<td>dneg</td>\n<td></td>\n<td>将栈顶double类型值取负，结果入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算——移位运算\"><a href=\"#逻辑运算——移位运算\" class=\"headerlink\" title=\"逻辑运算——移位运算\"></a><strong>逻辑运算——移位运算</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x78</td>\n<td>ishl</td>\n<td></td>\n<td>左移int类型值。</td>\n</tr>\n<tr>\n<td>0x79</td>\n<td>lshl</td>\n<td></td>\n<td>左移long类型值。</td>\n</tr>\n<tr>\n<td>0x7a</td>\n<td>ishr</td>\n<td></td>\n<td>算术右移int类型值。</td>\n</tr>\n<tr>\n<td>0x7b</td>\n<td>lshr</td>\n<td></td>\n<td>算术右移long类型值。</td>\n</tr>\n<tr>\n<td>0x7c</td>\n<td>iushr</td>\n<td></td>\n<td>逻辑右移int类型值。</td>\n</tr>\n<tr>\n<td>0x7d</td>\n<td>lushr</td>\n<td></td>\n<td>逻辑右移long类型值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算——按位布尔运算\"><a href=\"#逻辑运算——按位布尔运算\" class=\"headerlink\" title=\"逻辑运算——按位布尔运算\"></a><strong>逻辑运算——按位布尔运算</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x73</td>\n<td>iand</td>\n<td></td>\n<td>对int类型按位与运算。</td>\n</tr>\n<tr>\n<td>0x7f</td>\n<td>land</td>\n<td></td>\n<td>对long类型的按位与运算。</td>\n</tr>\n<tr>\n<td>0x80</td>\n<td>ior</td>\n<td></td>\n<td>对int类型的按位或运算。</td>\n</tr>\n<tr>\n<td>0x81</td>\n<td>lor</td>\n<td></td>\n<td>对long类型的按位或运算。</td>\n</tr>\n<tr>\n<td>0x82</td>\n<td>ixor</td>\n<td></td>\n<td>对int类型的按位异或运算。</td>\n</tr>\n<tr>\n<td>0x83</td>\n<td>lxor</td>\n<td></td>\n<td>对long类型的按位异或运算。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——条件跳转指令\"><a href=\"#控制流指令——条件跳转指令\" class=\"headerlink\" title=\"控制流指令——条件跳转指令\"></a><strong>控制流指令——条件跳转指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x99</td>\n<td>ifeq</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值为0则跳转。</td>\n</tr>\n<tr>\n<td>0x9a</td>\n<td>ifne</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值不为0则跳转。</td>\n</tr>\n<tr>\n<td>0x9b</td>\n<td>iflt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值小于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9e</td>\n<td>ifle</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值小于等于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9d</td>\n<td>ifgt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值大于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9c</td>\n<td>ifge</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值大于等于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9f</td>\n<td>if_icmpeq</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值相等则跳转。</td>\n</tr>\n<tr>\n<td>0xa0</td>\n<td>if_icmpne</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值不相等则跳转。</td>\n</tr>\n<tr>\n<td>0xa1</td>\n<td>if_icmplt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前小于后则跳转。</td>\n</tr>\n<tr>\n<td>0xa4</td>\n<td>if_icmple</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前小于等于后则跳转。</td>\n</tr>\n<tr>\n<td>0xa3</td>\n<td>if_icmpgt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前大于后则跳转。</td>\n</tr>\n<tr>\n<td>0xa2</td>\n<td>if_icmpge</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前大于等于后则跳转。</td>\n</tr>\n<tr>\n<td>0xc6</td>\n<td>ifnull</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶引用值为null则跳转。</td>\n</tr>\n<tr>\n<td>0xc7</td>\n<td>ifnonnull</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶引用值不为null则跳转。</td>\n</tr>\n<tr>\n<td>0xa5</td>\n<td>if_acmpeq</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两引用类型值相等则跳转。</td>\n</tr>\n<tr>\n<td>0xa6</td>\n<td>if_acmpne</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两引用类型值不相等则跳转。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——比较指令\"><a href=\"#控制流指令——比较指令\" class=\"headerlink\" title=\"控制流指令——比较指令\"></a><strong>控制流指令——比较指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x94</td>\n<td>lcmp</td>\n<td></td>\n<td>比较栈顶两long类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈。</td>\n</tr>\n<tr>\n<td>0x95</td>\n<td>fcmpl</td>\n<td></td>\n<td>比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n<tr>\n<td>0x96</td>\n<td>fcmpg</td>\n<td></td>\n<td>比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n<tr>\n<td>0x97</td>\n<td>dcmpl</td>\n<td></td>\n<td>比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n<tr>\n<td>0x98</td>\n<td>dcmpg</td>\n<td></td>\n<td>比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——无条件跳转指令\"><a href=\"#控制流指令——无条件跳转指令\" class=\"headerlink\" title=\"控制流指令——无条件跳转指令\"></a><strong>控制流指令——无条件跳转指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xa7</td>\n<td>goto</td>\n<td>branchbyte1branchbyte2</td>\n<td>无条件跳转到指定位置。</td>\n</tr>\n<tr>\n<td>0xc8</td>\n<td>goto_w</td>\n<td>branchbyte1branchbyte2branchbyte3branchbyte4</td>\n<td>无条件跳转到指定位置（宽索引）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——表跳转指令\"><a href=\"#控制流指令——表跳转指令\" class=\"headerlink\" title=\"控制流指令——表跳转指令\"></a><strong>控制流指令——表跳转指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xaa</td>\n<td>tableswitch</td>\n<td><0-3bytepad><br>defaultbyte1<br>defaultbyte2<br>defaultbyte3<br>defaultbyte4<br>lowbyte1<br>lowbyte2<br>lowbyte3<br>lowbyte4<br>highbyte1<br>highbyte2<br>highbyte3<br>highbyte4<br>jump offsets…</0-3bytepad></td>\n<td>通过索引访问跳转表，并跳转。</td>\n</tr>\n<tr>\n<td>0xab</td>\n<td>lookupswitch</td>\n<td><0-3bytepad><br>defaultbyte1<br>defaultbyte2<br>defaultbyte3<br>defaultbyte4<br>npairs1<br>npairs2<br>npairs3<br>npairs4<br>match offsets</0-3bytepad></td>\n<td>通过键值访问跳转表，并跳转。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——异常和-finally\"><a href=\"#控制流指令——异常和-finally\" class=\"headerlink\" title=\"控制流指令——异常和**finally**\"></a><strong>控制流指令——异常和**</strong>finally**</h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xbf</td>\n<td>athrow</td>\n<td></td>\n<td>抛出异常。</td>\n</tr>\n<tr>\n<td>0xa8</td>\n<td>jsr</td>\n<td>branchbyte1branchbyte2</td>\n<td>跳转到子例程序。</td>\n</tr>\n<tr>\n<td>0xc9</td>\n<td>jsr_w</td>\n<td>branchbyte1branchbyte2branchbyte3branchbyte4</td>\n<td>跳转到子例程序（宽索引）。</td>\n</tr>\n<tr>\n<td>0xa9</td>\n<td>(wide)ret</td>\n<td>indexbyte</td>\n<td>返回子例程序</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"对象操作指令\"><a href=\"#对象操作指令\" class=\"headerlink\" title=\"对象操作指令\"></a><strong>对象操作指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xbb</td>\n<td>new</td>\n<td>indexbyte1indexbyte2</td>\n<td>创建新的对象实例。</td>\n</tr>\n<tr>\n<td>0xc0</td>\n<td>checkcast</td>\n<td>indexbyte1indexbyte</td>\n<td>类型强转。</td>\n</tr>\n<tr>\n<td>0xc1</td>\n<td>instanceof</td>\n<td>indexbyte1indexbyte2</td>\n<td>判断类型。</td>\n</tr>\n<tr>\n<td>0xb4</td>\n<td>getfield</td>\n<td>indexbyte1indexbyte2</td>\n<td>获取对象字段的值。</td>\n</tr>\n<tr>\n<td>0xb5</td>\n<td>putfield</td>\n<td>indexbyte1indexbyte2</td>\n<td>给对象字段赋值。</td>\n</tr>\n<tr>\n<td>0xb2</td>\n<td>getstatic</td>\n<td>indexbyte1indexbyte2</td>\n<td>获取静态字段的值。</td>\n</tr>\n<tr>\n<td>0xb3</td>\n<td>putstatic</td>\n<td>indexbyte1indexbyte2</td>\n<td>给静态字段赋值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组操作指令\"><a href=\"#数组操作指令\" class=\"headerlink\" title=\"数组操作指令\"></a><strong>数组操作指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xbc</td>\n<td>newarray</td>\n<td>atype</td>\n<td>创建type类型的数组。</td>\n</tr>\n<tr>\n<td>0xbd</td>\n<td>anewarray</td>\n<td>indexbyte1indexbyte2</td>\n<td>创建引用类型的数组。</td>\n</tr>\n<tr>\n<td>0xbe</td>\n<td>arraylength</td>\n<td></td>\n<td>获取一维数组的长度。</td>\n</tr>\n<tr>\n<td>0xc5</td>\n<td>multianewarray</td>\n<td>indexbyte1indexbyte2dimension</td>\n<td>创建dimension维度的数组。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方法调用指令\"><a href=\"#方法调用指令\" class=\"headerlink\" title=\"方法调用指令\"></a><strong>方法调用指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xb7</td>\n<td>invokespecial</td>\n<td>indexbyte1indexbyte2</td>\n<td>编译时方法绑定调用方法。</td>\n</tr>\n<tr>\n<td>0xb6</td>\n<td>invokevirtual</td>\n<td>indexbyte1indexbyte2</td>\n<td>运行时方法绑定调用方法。</td>\n</tr>\n<tr>\n<td>0xb8</td>\n<td>invokestatic</td>\n<td>indexbyte1indexbyte2</td>\n<td>调用静态方法。</td>\n</tr>\n<tr>\n<td>0xb9</td>\n<td>invokeinterface</td>\n<td>indexbyte1indexbyte2count0</td>\n<td>调用接口方法。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方法返回指令\"><a href=\"#方法返回指令\" class=\"headerlink\" title=\"方法返回指令\"></a><strong>方法返回指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xac</td>\n<td>ireturn</td>\n<td></td>\n<td>返回int类型值。</td>\n</tr>\n<tr>\n<td>0xad</td>\n<td>lreturn</td>\n<td></td>\n<td>返回long类型值。</td>\n</tr>\n<tr>\n<td>0xae</td>\n<td>freturn</td>\n<td></td>\n<td>返回float类型值。</td>\n</tr>\n<tr>\n<td>0xaf</td>\n<td>dreturn</td>\n<td></td>\n<td>返回double类型值。</td>\n</tr>\n<tr>\n<td>0xb0</td>\n<td>areturn</td>\n<td></td>\n<td>返回引用类型值。</td>\n</tr>\n<tr>\n<td>0xb1</td>\n<td>return</td>\n<td></td>\n<td>void函数返回。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"线程同步指令\"><a href=\"#线程同步指令\" class=\"headerlink\" title=\"线程同步指令\"></a><strong>线程同步指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xc2</td>\n<td>monitorenter</td>\n<td></td>\n<td>进入并获得对象监视器。</td>\n</tr>\n<tr>\n<td>0xc3</td>\n<td>monitorexit</td>\n<td></td>\n<td>释放并退出对象监视器。</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"Java字节码指令收集大全\"><a href=\"#Java字节码指令收集大全\" class=\"headerlink\" title=\"Java字节码指令收集大全\"></a>Java字节码指令收集大全</h2><h3 id=\"常量入栈指令\"><a href=\"#常量入栈指令\" class=\"headerlink\" title=\"常量入栈指令\"></a>常量入栈指令</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>指令码</strong></th>\n<th style=\"text-align:left\"><strong>操作码（助记符）</strong></th>\n<th style=\"text-align:left\"><strong>操作数</strong></th>\n<th style=\"text-align:left\"><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">0x01</td>\n<td style=\"text-align:left\">aconst_null</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">null值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x02</td>\n<td style=\"text-align:left\">iconst_m1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">-1（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x03</td>\n<td style=\"text-align:left\">iconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x04</td>\n<td style=\"text-align:left\">iconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x05</td>\n<td style=\"text-align:left\">iconst_2</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x06</td>\n<td style=\"text-align:left\">iconst_3</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">3（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x07</td>\n<td style=\"text-align:left\">iconst_4</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">4（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x08</td>\n<td style=\"text-align:left\">iconst_5</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">5（int）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x09</td>\n<td style=\"text-align:left\">lconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（long）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0a</td>\n<td style=\"text-align:left\">lconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（long）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0b</td>\n<td style=\"text-align:left\">fconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（float）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0c</td>\n<td style=\"text-align:left\">fconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（float）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0d</td>\n<td style=\"text-align:left\">fconst_2</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">2（float）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0e</td>\n<td style=\"text-align:left\">dconst_0</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">0（double）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x0f</td>\n<td style=\"text-align:left\">dconst_1</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">1（double）值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x10</td>\n<td style=\"text-align:left\">bipush</td>\n<td style=\"text-align:left\">valuebyte</td>\n<td style=\"text-align:left\">valuebyte值带符号扩展成int值入栈</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x11</td>\n<td style=\"text-align:left\">sipush</td>\n<td style=\"text-align:left\">valuebyte1  valuebyte2</td>\n<td style=\"text-align:left\">(valuebyte1 &lt;&lt; 8)\\</td>\n<td>valuebyte2 值带符号扩展成int值入栈。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x12</td>\n<td style=\"text-align:left\">ldc</td>\n<td style=\"text-align:left\">indexbyte1</td>\n<td style=\"text-align:left\">常量池中的常量值<br>（int, float, string reference, object reference）入栈。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x13</td>\n<td style=\"text-align:left\">ldc_w</td>\n<td style=\"text-align:left\">indexbyte1 indexbyte2</td>\n<td style=\"text-align:left\">常量池中常量<br>（int, float, string reference, object reference）入栈。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">0x14</td>\n<td style=\"text-align:left\">ldc2_2</td>\n<td style=\"text-align:left\">indexbyte1 indexbyte2</td>\n<td style=\"text-align:left\">常量池中常量（long, double）入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"局部变量值转载到栈中指令\"><a href=\"#局部变量值转载到栈中指令\" class=\"headerlink\" title=\"局部变量值转载到栈中指令\"></a>局部变量值转载到栈中指令</h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x19</td>\n<td>(wide)aload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x2a</td>\n<td>aload_0</td>\n<td></td>\n<td>从局部变量0中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x2b</td>\n<td>aload_1</td>\n<td></td>\n<td>从局部变量1中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x2c</td>\n<td>aload_2</td>\n<td></td>\n<td>从局部变量2中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0a2d</td>\n<td>aload_3</td>\n<td></td>\n<td>从局部变量3中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x15</td>\n<td>(wide)iload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1a</td>\n<td>iload_0</td>\n<td></td>\n<td>从局部变量0中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1b</td>\n<td>iload_1</td>\n<td></td>\n<td>从局部变量1中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1c</td>\n<td>iload_2</td>\n<td></td>\n<td>从局部变量2中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x1d</td>\n<td>iload_3</td>\n<td></td>\n<td>从局部变量3中装载int类型值入栈</td>\n</tr>\n<tr>\n<td>0x16</td>\n<td>(wide)lload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x1e</td>\n<td>lload_0</td>\n<td></td>\n<td>从局部变量0中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x1f</td>\n<td>lload_1</td>\n<td></td>\n<td>从局部变量1中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x20</td>\n<td>lload_2</td>\n<td></td>\n<td>从局部变量2中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x21</td>\n<td>lload_3</td>\n<td></td>\n<td>从局部变量3中装载long类型值入栈</td>\n</tr>\n<tr>\n<td>0x17</td>\n<td>f(wide)load</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x22</td>\n<td>fload_0</td>\n<td></td>\n<td>从局部变量0中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x23</td>\n<td>fload_1</td>\n<td></td>\n<td>从局部变量1中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x24</td>\n<td>fload_2</td>\n<td></td>\n<td>从局部变量2中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x25</td>\n<td>fload_3</td>\n<td></td>\n<td>从局部变量3中装载float类型值入栈</td>\n</tr>\n<tr>\n<td>0x18</td>\n<td>（wide）dload</td>\n<td>indexbyte</td>\n<td>从局部变量indexbyte中装载引用类型值入栈</td>\n</tr>\n<tr>\n<td>0x26</td>\n<td>dload_0</td>\n<td></td>\n<td>从局部变量0中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x27</td>\n<td>dload_1</td>\n<td></td>\n<td>从局部变量1中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x28</td>\n<td>dload_2</td>\n<td></td>\n<td>从局部变量3中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x29</td>\n<td>dload_3</td>\n<td></td>\n<td>从局部变量3中装载double类型值入栈</td>\n</tr>\n<tr>\n<td>0x32</td>\n<td>aaload</td>\n<td></td>\n<td>从引用类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x2e</td>\n<td>iaload</td>\n<td></td>\n<td>从int类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x2f</td>\n<td>laload</td>\n<td></td>\n<td>从long类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x30</td>\n<td>faload</td>\n<td></td>\n<td>从float类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x31</td>\n<td>daload</td>\n<td></td>\n<td>从double类型数组中装载指定项的值入栈</td>\n</tr>\n<tr>\n<td>0x33</td>\n<td>baload</td>\n<td></td>\n<td>从boolean或者byte类型数组中装载指定项的值入栈（<br>先转换为int类型值，后压栈）。</td>\n</tr>\n<tr>\n<td>0x34</td>\n<td>caload</td>\n<td></td>\n<td>从char类型数组中装载指定项的值入栈 <br>（先转换为int类型值，后压栈）。</td>\n</tr>\n<tr>\n<td>0x35</td>\n<td>saload</td>\n<td></td>\n<td>从short类型数组中装载指定项的值入栈 <br>（先转换为int类型值，后压栈）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"将栈顶值保存到局部变量中指令\"><a href=\"#将栈顶值保存到局部变量中指令\" class=\"headerlink\" title=\"将栈顶值保存到局部变量中指令\"></a><strong>将栈顶值保存到局部变量中指令</strong></h3><table>\n<thead>\n<tr>\n<th>0x3a</th>\n<th>(wide)astore</th>\n<th>indexbyte</th>\n<th>将栈顶引用类型值保存到局部变量indexbyte中。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x4b</td>\n<td>astroe_0</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x4c</td>\n<td>astore_1</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x4d</td>\n<td>astore_2</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x4e</td>\n<td>astore_3</td>\n<td></td>\n<td>将栈顶引用类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x36</td>\n<td>(wide)istore</td>\n<td>indexbyte</td>\n<td>将栈顶int类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x3b</td>\n<td>istore_0</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x3c</td>\n<td>istore_1</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x3d</td>\n<td>istore_2</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x3e</td>\n<td>istore_3</td>\n<td></td>\n<td>将栈顶int类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x37</td>\n<td>(wide)lstore</td>\n<td>indexbyte</td>\n<td>将栈顶long类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x3f</td>\n<td>lstore_0</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x40</td>\n<td>lstore_1</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x41</td>\n<td>lstore_2</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x42</td>\n<td>lstroe_3</td>\n<td></td>\n<td>将栈顶long类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x38</td>\n<td>(wide)fstore</td>\n<td>indexbyte</td>\n<td>将栈顶float类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x43</td>\n<td>fstore_0</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x44</td>\n<td>fstore_1</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x45</td>\n<td>fstore_2</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x46</td>\n<td>fstore_3</td>\n<td></td>\n<td>将栈顶float类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x39</td>\n<td>(wide)dstore</td>\n<td>indexbyte</td>\n<td>将栈顶double类型值保存到局部变量indexbyte中。</td>\n</tr>\n<tr>\n<td>0x47</td>\n<td>dstore_0</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量0中。</td>\n</tr>\n<tr>\n<td>0x48</td>\n<td>dstore_1</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量1中。</td>\n</tr>\n<tr>\n<td>0x49</td>\n<td>dstore_2</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量2中。</td>\n</tr>\n<tr>\n<td>0x4a</td>\n<td>dstore_3</td>\n<td></td>\n<td>将栈顶double类型值保存到局部变量3中。</td>\n</tr>\n<tr>\n<td>0x53</td>\n<td>aastore</td>\n<td></td>\n<td>将栈顶引用类型值保存到指定引用类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x4f</td>\n<td>iastore</td>\n<td></td>\n<td>将栈顶int类型值保存到指定int类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x50</td>\n<td>lastore</td>\n<td></td>\n<td>将栈顶long类型值保存到指定long类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x51</td>\n<td>fastore</td>\n<td></td>\n<td>将栈顶float类型值保存到指定float类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x52</td>\n<td>dastore</td>\n<td></td>\n<td>将栈顶double类型值保存到指定double类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x54</td>\n<td>bastroe</td>\n<td></td>\n<td>将栈顶boolean类型值或byte类型值保存到指定boolean<br>类型数组或byte类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x55</td>\n<td>castore</td>\n<td></td>\n<td>将栈顶char类型值保存到指定char类型数组的指定项。</td>\n</tr>\n<tr>\n<td>0x56</td>\n<td>sastore</td>\n<td></td>\n<td>将栈顶short类型值保存到指定short类型数组的指定项。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"wide-指令\"><a href=\"#wide-指令\" class=\"headerlink\" title=\"wide**指令**\"></a><strong>wide**</strong>指令**</h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xc4</td>\n<td>wide</td>\n<td></td>\n<td>使用附加字节扩展局部变量索引（iinc指令特殊）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"通用（无类型）栈操作指令\"><a href=\"#通用（无类型）栈操作指令\" class=\"headerlink\" title=\"通用（无类型）栈操作指令\"></a><strong>通用（无类型）栈操作指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00</td>\n<td>nop</td>\n<td></td>\n<td>空操作。</td>\n</tr>\n<tr>\n<td>0x57</td>\n<td>pop</td>\n<td></td>\n<td>从栈顶弹出一个字长的数据。</td>\n</tr>\n<tr>\n<td>0x58</td>\n<td>pop2</td>\n<td></td>\n<td>从栈顶弹出两个字长的数据。</td>\n</tr>\n<tr>\n<td>0x59</td>\n<td>dup</td>\n<td></td>\n<td>复制栈顶一个字长的数据，将复制后的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5a</td>\n<td>dup_x1</td>\n<td></td>\n<td>复制栈顶一个字长的数据，弹出栈顶两个字长数据，<br>先将复制后的数据压栈，再将弹出的两个字长数据压栈。</td>\n</tr>\n<tr>\n<td>0x5b</td>\n<td>dup_x2</td>\n<td></td>\n<td>复制栈顶一个字长的数据，弹出栈顶三个字长的数据，<br>将复制后的数据压栈，再将弹出的三个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5c</td>\n<td>dup2</td>\n<td></td>\n<td>复制栈顶两个字长的数据，将复制后的两个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5d</td>\n<td>dup2_x1</td>\n<td></td>\n<td>复制栈顶两个字长的数据，弹出栈顶三个字长的数据，<br>将复制后的两个字长的数据压栈，再将弹出的三个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5e</td>\n<td>dup2_x2</td>\n<td></td>\n<td>复制栈顶两个字长的数据，弹出栈顶四个字长的数据，<br>将复制后的两个字长的数据压栈，再将弹出的四个字长的数据压栈。</td>\n</tr>\n<tr>\n<td>0x5f</td>\n<td>swap</td>\n<td></td>\n<td>交换栈顶两个字长的数据的位置。<a href=\"http://lib.csdn.net/base/javaee\">Java</a>指令中没有提供以<br>两个字长为单位的交换指令。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"类型转换指令\"><a href=\"#类型转换指令\" class=\"headerlink\" title=\"类型转换指令\"></a><strong>类型转换指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x86</td>\n<td>i2f</td>\n<td></td>\n<td>将栈顶int类型值转换为float类型值。</td>\n</tr>\n<tr>\n<td>0x85</td>\n<td>i2l</td>\n<td></td>\n<td>将栈顶int类型值转换为long类型值。</td>\n</tr>\n<tr>\n<td>0x87</td>\n<td>i2d</td>\n<td></td>\n<td>将栈顶int类型值转换为double类型值。</td>\n</tr>\n<tr>\n<td>0x8b</td>\n<td>f2i</td>\n<td></td>\n<td>将栈顶float类型值转换为int类型值。</td>\n</tr>\n<tr>\n<td>0x8c</td>\n<td>f2l</td>\n<td></td>\n<td>将栈顶float类型值转换为long类型值。</td>\n</tr>\n<tr>\n<td>0x8d</td>\n<td>f2d</td>\n<td></td>\n<td>将栈顶float类型值转换为double类型值。</td>\n</tr>\n<tr>\n<td>0x88</td>\n<td>l2i</td>\n<td></td>\n<td>将栈顶long类型值转换为int类型值。</td>\n</tr>\n<tr>\n<td>0x89</td>\n<td>l2f</td>\n<td></td>\n<td>将栈顶long类型值转换为float类型值。</td>\n</tr>\n<tr>\n<td>0x8a</td>\n<td>l2d</td>\n<td></td>\n<td>将栈顶long类型值转换double类型值。</td>\n</tr>\n<tr>\n<td>0x8e</td>\n<td>d2i</td>\n<td></td>\n<td>将栈顶double类型值转换为int类型值。</td>\n</tr>\n<tr>\n<td>0x90</td>\n<td>d2f</td>\n<td></td>\n<td>将栈顶double类型值转换为float类型值。</td>\n</tr>\n<tr>\n<td>0x8f</td>\n<td>d2l</td>\n<td></td>\n<td>将栈顶double类型值转换为long类型值。</td>\n</tr>\n<tr>\n<td>0x91</td>\n<td>i2b</td>\n<td></td>\n<td>将栈顶int类型值截断成byte类型，后带符号扩展成int类型值入栈。</td>\n</tr>\n<tr>\n<td>0x92</td>\n<td>i2c</td>\n<td></td>\n<td>将栈顶int类型值截断成char类型值，后带符号扩展成int类型值入栈。</td>\n</tr>\n<tr>\n<td>0x93</td>\n<td>i2s</td>\n<td></td>\n<td>将栈顶int类型值截断成short类型值，后带符号扩展成int类型值入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"整数运算\"><a href=\"#整数运算\" class=\"headerlink\" title=\"整数运算\"></a><strong>整数运算</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x60</td>\n<td>iadd</td>\n<td></td>\n<td>将栈顶两int类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x64</td>\n<td>isub</td>\n<td></td>\n<td>将栈顶两int类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x68</td>\n<td>imul</td>\n<td></td>\n<td>将栈顶两int类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6c</td>\n<td>idiv</td>\n<td></td>\n<td>将栈顶两int类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x70</td>\n<td>irem</td>\n<td></td>\n<td>将栈顶两int类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x74</td>\n<td>ineg</td>\n<td></td>\n<td>将栈顶int类型值取负，结果入栈。</td>\n</tr>\n<tr>\n<td>0x61</td>\n<td>ladd</td>\n<td></td>\n<td>将栈顶两long类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x65</td>\n<td>lsub</td>\n<td></td>\n<td>将栈顶两long类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x69</td>\n<td>lmul</td>\n<td></td>\n<td>将栈顶两long类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6d</td>\n<td>ldiv</td>\n<td></td>\n<td>将栈顶两long类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x71</td>\n<td>lrem</td>\n<td></td>\n<td>将栈顶两long类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x75</td>\n<td>lneg</td>\n<td></td>\n<td>将栈顶long类型值取负，结果入栈。</td>\n</tr>\n<tr>\n<td>0x84</td>\n<td>(wide)iinc</td>\n<td>indexbyteconstbyte</td>\n<td>将整数值constbyte加到indexbyte指定的int类型的局部变量中。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>浮点运算</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x62</td>\n<td>fadd</td>\n<td></td>\n<td>将栈顶两float类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x66</td>\n<td>fsub</td>\n<td></td>\n<td>将栈顶两float类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6a</td>\n<td>fmul</td>\n<td></td>\n<td>将栈顶两float类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6e</td>\n<td>fdiv</td>\n<td></td>\n<td>将栈顶两float类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x72</td>\n<td>frem</td>\n<td></td>\n<td>将栈顶两float类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x76</td>\n<td>fneg</td>\n<td></td>\n<td>将栈顶float类型值取反，结果入栈。</td>\n</tr>\n<tr>\n<td>0x63</td>\n<td>dadd</td>\n<td></td>\n<td>将栈顶两double类型数相加，结果入栈。</td>\n</tr>\n<tr>\n<td>0x67</td>\n<td>dsub</td>\n<td></td>\n<td>将栈顶两double类型数相减，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6b</td>\n<td>dmul</td>\n<td></td>\n<td>将栈顶两double类型数相乘，结果入栈。</td>\n</tr>\n<tr>\n<td>0x6f</td>\n<td>ddiv</td>\n<td></td>\n<td>将栈顶两double类型数相除，结果入栈。</td>\n</tr>\n<tr>\n<td>0x73</td>\n<td>drem</td>\n<td></td>\n<td>将栈顶两double类型数取模，结果入栈。</td>\n</tr>\n<tr>\n<td>0x77</td>\n<td>dneg</td>\n<td></td>\n<td>将栈顶double类型值取负，结果入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算——移位运算\"><a href=\"#逻辑运算——移位运算\" class=\"headerlink\" title=\"逻辑运算——移位运算\"></a><strong>逻辑运算——移位运算</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x78</td>\n<td>ishl</td>\n<td></td>\n<td>左移int类型值。</td>\n</tr>\n<tr>\n<td>0x79</td>\n<td>lshl</td>\n<td></td>\n<td>左移long类型值。</td>\n</tr>\n<tr>\n<td>0x7a</td>\n<td>ishr</td>\n<td></td>\n<td>算术右移int类型值。</td>\n</tr>\n<tr>\n<td>0x7b</td>\n<td>lshr</td>\n<td></td>\n<td>算术右移long类型值。</td>\n</tr>\n<tr>\n<td>0x7c</td>\n<td>iushr</td>\n<td></td>\n<td>逻辑右移int类型值。</td>\n</tr>\n<tr>\n<td>0x7d</td>\n<td>lushr</td>\n<td></td>\n<td>逻辑右移long类型值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算——按位布尔运算\"><a href=\"#逻辑运算——按位布尔运算\" class=\"headerlink\" title=\"逻辑运算——按位布尔运算\"></a><strong>逻辑运算——按位布尔运算</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x73</td>\n<td>iand</td>\n<td></td>\n<td>对int类型按位与运算。</td>\n</tr>\n<tr>\n<td>0x7f</td>\n<td>land</td>\n<td></td>\n<td>对long类型的按位与运算。</td>\n</tr>\n<tr>\n<td>0x80</td>\n<td>ior</td>\n<td></td>\n<td>对int类型的按位或运算。</td>\n</tr>\n<tr>\n<td>0x81</td>\n<td>lor</td>\n<td></td>\n<td>对long类型的按位或运算。</td>\n</tr>\n<tr>\n<td>0x82</td>\n<td>ixor</td>\n<td></td>\n<td>对int类型的按位异或运算。</td>\n</tr>\n<tr>\n<td>0x83</td>\n<td>lxor</td>\n<td></td>\n<td>对long类型的按位异或运算。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——条件跳转指令\"><a href=\"#控制流指令——条件跳转指令\" class=\"headerlink\" title=\"控制流指令——条件跳转指令\"></a><strong>控制流指令——条件跳转指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x99</td>\n<td>ifeq</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值为0则跳转。</td>\n</tr>\n<tr>\n<td>0x9a</td>\n<td>ifne</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值不为0则跳转。</td>\n</tr>\n<tr>\n<td>0x9b</td>\n<td>iflt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值小于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9e</td>\n<td>ifle</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值小于等于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9d</td>\n<td>ifgt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值大于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9c</td>\n<td>ifge</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶int类型值大于等于0则跳转。</td>\n</tr>\n<tr>\n<td>0x9f</td>\n<td>if_icmpeq</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值相等则跳转。</td>\n</tr>\n<tr>\n<td>0xa0</td>\n<td>if_icmpne</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值不相等则跳转。</td>\n</tr>\n<tr>\n<td>0xa1</td>\n<td>if_icmplt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前小于后则跳转。</td>\n</tr>\n<tr>\n<td>0xa4</td>\n<td>if_icmple</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前小于等于后则跳转。</td>\n</tr>\n<tr>\n<td>0xa3</td>\n<td>if_icmpgt</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前大于后则跳转。</td>\n</tr>\n<tr>\n<td>0xa2</td>\n<td>if_icmpge</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两int类型值前大于等于后则跳转。</td>\n</tr>\n<tr>\n<td>0xc6</td>\n<td>ifnull</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶引用值为null则跳转。</td>\n</tr>\n<tr>\n<td>0xc7</td>\n<td>ifnonnull</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶引用值不为null则跳转。</td>\n</tr>\n<tr>\n<td>0xa5</td>\n<td>if_acmpeq</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两引用类型值相等则跳转。</td>\n</tr>\n<tr>\n<td>0xa6</td>\n<td>if_acmpne</td>\n<td>branchbyte1branchbyte2</td>\n<td>若栈顶两引用类型值不相等则跳转。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——比较指令\"><a href=\"#控制流指令——比较指令\" class=\"headerlink\" title=\"控制流指令——比较指令\"></a><strong>控制流指令——比较指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x94</td>\n<td>lcmp</td>\n<td></td>\n<td>比较栈顶两long类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈。</td>\n</tr>\n<tr>\n<td>0x95</td>\n<td>fcmpl</td>\n<td></td>\n<td>比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n<tr>\n<td>0x96</td>\n<td>fcmpg</td>\n<td></td>\n<td>比较栈顶两float类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n<tr>\n<td>0x97</td>\n<td>dcmpl</td>\n<td></td>\n<td>比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n<tr>\n<td>0x98</td>\n<td>dcmpg</td>\n<td></td>\n<td>比较栈顶两double类型值，前者大，1入栈；相等，0入栈；<br>后者大，-1入栈；有NaN存在，-1入栈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——无条件跳转指令\"><a href=\"#控制流指令——无条件跳转指令\" class=\"headerlink\" title=\"控制流指令——无条件跳转指令\"></a><strong>控制流指令——无条件跳转指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xa7</td>\n<td>goto</td>\n<td>branchbyte1branchbyte2</td>\n<td>无条件跳转到指定位置。</td>\n</tr>\n<tr>\n<td>0xc8</td>\n<td>goto_w</td>\n<td>branchbyte1branchbyte2branchbyte3branchbyte4</td>\n<td>无条件跳转到指定位置（宽索引）。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——表跳转指令\"><a href=\"#控制流指令——表跳转指令\" class=\"headerlink\" title=\"控制流指令——表跳转指令\"></a><strong>控制流指令——表跳转指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xaa</td>\n<td>tableswitch</td>\n<td><0-3bytepad><br>defaultbyte1<br>defaultbyte2<br>defaultbyte3<br>defaultbyte4<br>lowbyte1<br>lowbyte2<br>lowbyte3<br>lowbyte4<br>highbyte1<br>highbyte2<br>highbyte3<br>highbyte4<br>jump offsets…</0-3bytepad></td>\n<td>通过索引访问跳转表，并跳转。</td>\n</tr>\n<tr>\n<td>0xab</td>\n<td>lookupswitch</td>\n<td><0-3bytepad><br>defaultbyte1<br>defaultbyte2<br>defaultbyte3<br>defaultbyte4<br>npairs1<br>npairs2<br>npairs3<br>npairs4<br>match offsets</0-3bytepad></td>\n<td>通过键值访问跳转表，并跳转。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"控制流指令——异常和-finally\"><a href=\"#控制流指令——异常和-finally\" class=\"headerlink\" title=\"控制流指令——异常和**finally**\"></a><strong>控制流指令——异常和**</strong>finally**</h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xbf</td>\n<td>athrow</td>\n<td></td>\n<td>抛出异常。</td>\n</tr>\n<tr>\n<td>0xa8</td>\n<td>jsr</td>\n<td>branchbyte1branchbyte2</td>\n<td>跳转到子例程序。</td>\n</tr>\n<tr>\n<td>0xc9</td>\n<td>jsr_w</td>\n<td>branchbyte1branchbyte2branchbyte3branchbyte4</td>\n<td>跳转到子例程序（宽索引）。</td>\n</tr>\n<tr>\n<td>0xa9</td>\n<td>(wide)ret</td>\n<td>indexbyte</td>\n<td>返回子例程序</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"对象操作指令\"><a href=\"#对象操作指令\" class=\"headerlink\" title=\"对象操作指令\"></a><strong>对象操作指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xbb</td>\n<td>new</td>\n<td>indexbyte1indexbyte2</td>\n<td>创建新的对象实例。</td>\n</tr>\n<tr>\n<td>0xc0</td>\n<td>checkcast</td>\n<td>indexbyte1indexbyte</td>\n<td>类型强转。</td>\n</tr>\n<tr>\n<td>0xc1</td>\n<td>instanceof</td>\n<td>indexbyte1indexbyte2</td>\n<td>判断类型。</td>\n</tr>\n<tr>\n<td>0xb4</td>\n<td>getfield</td>\n<td>indexbyte1indexbyte2</td>\n<td>获取对象字段的值。</td>\n</tr>\n<tr>\n<td>0xb5</td>\n<td>putfield</td>\n<td>indexbyte1indexbyte2</td>\n<td>给对象字段赋值。</td>\n</tr>\n<tr>\n<td>0xb2</td>\n<td>getstatic</td>\n<td>indexbyte1indexbyte2</td>\n<td>获取静态字段的值。</td>\n</tr>\n<tr>\n<td>0xb3</td>\n<td>putstatic</td>\n<td>indexbyte1indexbyte2</td>\n<td>给静态字段赋值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"数组操作指令\"><a href=\"#数组操作指令\" class=\"headerlink\" title=\"数组操作指令\"></a><strong>数组操作指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xbc</td>\n<td>newarray</td>\n<td>atype</td>\n<td>创建type类型的数组。</td>\n</tr>\n<tr>\n<td>0xbd</td>\n<td>anewarray</td>\n<td>indexbyte1indexbyte2</td>\n<td>创建引用类型的数组。</td>\n</tr>\n<tr>\n<td>0xbe</td>\n<td>arraylength</td>\n<td></td>\n<td>获取一维数组的长度。</td>\n</tr>\n<tr>\n<td>0xc5</td>\n<td>multianewarray</td>\n<td>indexbyte1indexbyte2dimension</td>\n<td>创建dimension维度的数组。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方法调用指令\"><a href=\"#方法调用指令\" class=\"headerlink\" title=\"方法调用指令\"></a><strong>方法调用指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xb7</td>\n<td>invokespecial</td>\n<td>indexbyte1indexbyte2</td>\n<td>编译时方法绑定调用方法。</td>\n</tr>\n<tr>\n<td>0xb6</td>\n<td>invokevirtual</td>\n<td>indexbyte1indexbyte2</td>\n<td>运行时方法绑定调用方法。</td>\n</tr>\n<tr>\n<td>0xb8</td>\n<td>invokestatic</td>\n<td>indexbyte1indexbyte2</td>\n<td>调用静态方法。</td>\n</tr>\n<tr>\n<td>0xb9</td>\n<td>invokeinterface</td>\n<td>indexbyte1indexbyte2count0</td>\n<td>调用接口方法。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"方法返回指令\"><a href=\"#方法返回指令\" class=\"headerlink\" title=\"方法返回指令\"></a><strong>方法返回指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xac</td>\n<td>ireturn</td>\n<td></td>\n<td>返回int类型值。</td>\n</tr>\n<tr>\n<td>0xad</td>\n<td>lreturn</td>\n<td></td>\n<td>返回long类型值。</td>\n</tr>\n<tr>\n<td>0xae</td>\n<td>freturn</td>\n<td></td>\n<td>返回float类型值。</td>\n</tr>\n<tr>\n<td>0xaf</td>\n<td>dreturn</td>\n<td></td>\n<td>返回double类型值。</td>\n</tr>\n<tr>\n<td>0xb0</td>\n<td>areturn</td>\n<td></td>\n<td>返回引用类型值。</td>\n</tr>\n<tr>\n<td>0xb1</td>\n<td>return</td>\n<td></td>\n<td>void函数返回。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"线程同步指令\"><a href=\"#线程同步指令\" class=\"headerlink\" title=\"线程同步指令\"></a><strong>线程同步指令</strong></h3><table>\n<thead>\n<tr>\n<th><strong>指令码</strong></th>\n<th><strong>操作码（助记符）</strong></th>\n<th><strong>操作数</strong></th>\n<th><strong>描述（栈指操作数栈）</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0xc2</td>\n<td>monitorenter</td>\n<td></td>\n<td>进入并获得对象监视器。</td>\n</tr>\n<tr>\n<td>0xc3</td>\n<td>monitorexit</td>\n<td></td>\n<td>释放并退出对象监视器。</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"linux下的文件结构，每个文件夹用途","date":"2016-12-21T03:17:36.000Z","description":"linux下的文件结构，每个文件夹用途","_content":"linux下的文件结构，每个文件夹用途\n/bin 二进制可执行命令 \n/dev 设备特殊文件 \n/etc 系统管理和配置文件 \n/etc/rc.d 启动的配置文件和脚本 \n/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 \n/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件 \n/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序 \n/tmp 公用的临时文件存储点 \n/root 系统管理员的主目录（呵呵，特权阶级） \n/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。 \n/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里 \n/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 \n/var 某些大文件的溢出区，比方说各种服务的日志文件 \n/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含： \n/usr/x11r6 存放x window的目录 \n/usr/bin 众多的应用程序 \n/usr/sbin 超级用户的一些管理程序 \n/usr/doc linux文档 \n/usr/include linux下开发和编译应用程序所需要的头文件 \n/usr/lib 常用的动态链接库和软件包的配置文件 \n/usr/man 帮助文档 \n/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里 \n/usr/local/bin 本地增加的命令 \n/usr/local/lib 本地增加的库根文件系统 \n\n通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要 \n经常改动，而且包括严格的文件和一个小的不经常改变的文件系统不容易损坏。 \n除了可能的一个叫/ v m l i n u z标准的系统引导映像之外，根目录一般不含任何文件。所有 \n其他文件在根文件系统的子目录中。 \n1. /bin目录 \n/ b i n目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些 \n命令都是二进制文件的可执行程序( b i n是b i n a r y - -二进制的简称)，多是系统中重要的系统文件。 \n2. /sbin目录 \n/ s b i n目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使 \n用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使用。 \n3. /etc目录 \n/ e t c目录存放着各种系统配置文件，其中包括了用户信息文件/ e t c / p a s s w d，系统初始化文 \n件/ e t c / r c等。l i n u x正是*这些文件才得以正常地运行。 \n4. /root目录 \n/root 目录是超级用户的目录。 \n5. /lib目录 \n/ l i b目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文 \n件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副 \n本，故可以使得可执行文件变得更小，节省空间。 \n6. /lib/modules 目录 \n/lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引 \n导系统所需的模块(例如网络和文件系统驱动)。 \n7. /dev目录 \n/ d e v目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用 \n户可以通过访问/ d e v / m o u s e来访问鼠标的输入，就像访问其他文件一样。 \n8. /tmp目录 \n/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用 \n/ v a r / t m p来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。 \n9. /boot目录 \n/ b o o t目录存放引导加载器(bootstrap loader)使用的文件，如l i l o，核心映像也经常放在这里， \n而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的 \n文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在i d e硬盘的前1 0 2 4柱面内。 \n10. /mnt目录 \n/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到 \n/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱， \n而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 \n11. /proc, /usr,/var,/home目录 \n其他文件系统的安装点。 \n下面详细介绍； \n## /etc文件系统 \n/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个 \n程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 \n1. /etc/rc或/etc/rc.d或/etc/rc?.d \n启动、或改变运行级时运行的脚本或脚本的目录。 \n2. /etc/passwd \n用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其 \n他信息。 \n3. /etc/fdprm \n软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m \n的帮助页。 \n4. /etc/fstab \n指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 \n5. /etc/group \n类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 \n6. /etc/inittab \ninit 的配置文件。 \n7. /etc/issue \n包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内 \n容由系统管理员确定。 \n8. /etc/magic \n“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 \n9. /etc/motd \nm o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。 \n常用于通告信息，如计划关机时间的警告等。 \n10. /etc/mtab \n当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一 \n个当前安装的文件系统的列表时使用(例如df 命令)。 \n11. /etc/shadow \n在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d \n文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困 \n难，以此增加系统的安全性。 \n12. /etc/login.defs \nl o g i n命令的配置文件。 \n13. /etc/printcap \n类似/etc/termcap ，但针对打印机。语法不同。 \n14. /etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc \n登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 \n15. /etc/securetty \n确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不 \n可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 \n16. /etc/shells \n列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一 \n台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允 \n许该用户登录。 \n17. /etc/termcap \n终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义 \n序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。 \n这样，多数的程序可以在多数终端上运行。\n \n## /dev文件系统 \n/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。 \n设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/ d e v / m a k e d e v.local 是 \n系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准 \nmakedev 的一部分)。下面简要介绍/ d e v下一些常用文件。 \n1. /dev/console \n系统控制台，也就是直接和系统连接的监视器。 \n2. /dev/hd \ni d e硬盘驱动程序接口。如： / d e v / h d a指的是第一个硬盘， h a d 1则是指/ d e v / h d a的第一个 \n分区。如系统中有其他的硬盘，则依次为/ d e v / h d b、/ d e v / h d c、. . . . . .；如有多个分区则依次为 \nh d a 1、h d a 2 . . . . . . \n3. /dev/sd \ns c s i磁盘驱动程序接口。如有系统有s c s i硬盘，就不会访问/ d e v / h a d，而会访问/ d e v / s d a。 \n4. /dev/fd \n软驱设备驱动程序。如： / d e v / f d 0指系统的第一个软盘，也就是通常所说的a：盘， \n/ d e v / f d 1指第二个软盘，. . . . . .而/ d e v / f d 1 h 1 4 4 0则表示访问驱动器1中的4 . 5高密盘。 \n5. /dev/st \ns c s i磁带驱动器驱动程序。 \n6. /dev/tty \n提供虚拟控制台支持。如： / d e v / t t y 1指的是系统的第一个虚拟控制台， / d e v / t t y 2则是系统 \n的第二个虚拟控制台。 \n7. /dev/pty \n提供远程登陆伪终端支持。在进行te l n e t登录时就要用到/ d e v / p t y设备。 \n8. /dev/ttys \n计算机串行接口，对于d o s来说就是“ c o m 1”口。 \n9. /dev/cua \n计算机串行接口，与调制解调器一起使用的设备。 \n10. /dev/null \n“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来 \n时，只要将输出信息输入到/ d e v / n u l l中即可。 \n## /usr文件系统 \n/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的 \n所有文件一般来自l i n u x发行版( d i s t r i b u t i o n )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是 \n可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置 \n文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 \n1. /usr/x11r6 \n包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装， \nx的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形 \n工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 \n2. /usr/x386 \n类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 \n3. /usr/bin \n集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 \n4. /usr/sbin \n包括了根文件系统不必要的系统管理命令，例如多数服务程序。 \n5. /usr/man、/ u s r / i n f o、/ u s r / d o c \n这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节” \n都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文 \n件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调 \n用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 \n6. /usr/include \n包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、 \n子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名 \n字。 \n7. /usr/lib \n包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库 \n(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也 \n有许多程序把配置文件存入其中。 \n8. /usr/local \n本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大 \n的软件包，如t e x、e m a c s等。 \n## /var文件系统 \n/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化 \n或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那 \n些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。 \n下面列出一些重要的目录(一些不太重要的目录省略了)。 \n1. /var/catman \n包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ u s r / m a n / m a n中；有些m a n页 \n可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化， \n格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。 \n(/var/catman 经常被清除，就像清除临时目录一样。) \n2. /var/lib \n存放系统正常运行时要改变的文件。 \n3. /var/local \n存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要， \n即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 \n4. /var/lock \n锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在 \n使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文 \n件。 \n5. /var/log \n各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注 \n销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不 \n确定地增长，应该定期清除。 \n6. /var/run \n保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登 \n录的用户的信息。 \n7. /var/spool \n放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每 \n个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 \n8. /var/tmp \n比/tmp 允许更大的或需要存在较长时间的临时文件。 \n注意系统管理员可能不允许/var/tmp 有很旧的文件。 \n## /proc文件系统 \n/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一 \n个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提 \n供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详 \n细的说明)。 \n1. /proc/x \n关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自 \n己进程号的目录。 \n2. /proc/cpuinfo \n存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 \n3. /proc/devices \n当前运行的核心配置的设备驱动的列表。 \n4. /proc/dma \n显示当前使用的d m a通道。 \n5. /proc/filesystems \n核心配置的文件系统信息。 \n6. /proc/interrupts \n显示被占用的中断信息和占用者的信息，以及被占用的数量。 \n7. /proc/ioports \n当前使用的i / o端口。 \n8. /proc/kcore \n系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅 \n仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何 \n东西占用任何磁盘空间。) \n9. /proc/kmsg \n核心输出的消息。也会被送到s y s l o g。 \n10. /proc/ksyms \n核心符号表。 \n11. /proc/loadavg \n系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 \n12. /proc/meminfo \n各种存储器使用信息，包括物理内存和交换分区( s w a p )。 \n13. /proc/modules \n存放当前加载了哪些核心模块信息。 \n14. /proc/net \n网络协议状态信息。 \n15. /proc/self \n存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同 \n的连接。这主要便于程序得到它自己的进程目录。 \n16. /proc/stat \n系统的不同状态，例如，系统启动后页面发生错误的次数。 \n17. /proc/uptime \n系统启动的时间长度。 \n18. /proc/version \n核心版本。","source":"_posts/linux1.md","raw":"---\ntitle: linux下的文件结构，每个文件夹用途\ncategories: [Linux]\ntags: [Linux]\ndate: 2016-12-21 11:17:36\ndescription: linux下的文件结构，每个文件夹用途\n---\nlinux下的文件结构，每个文件夹用途\n/bin 二进制可执行命令 \n/dev 设备特殊文件 \n/etc 系统管理和配置文件 \n/etc/rc.d 启动的配置文件和脚本 \n/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示 \n/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件 \n/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序 \n/tmp 公用的临时文件存储点 \n/root 系统管理员的主目录（呵呵，特权阶级） \n/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。 \n/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里 \n/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。 \n/var 某些大文件的溢出区，比方说各种服务的日志文件 \n/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含： \n/usr/x11r6 存放x window的目录 \n/usr/bin 众多的应用程序 \n/usr/sbin 超级用户的一些管理程序 \n/usr/doc linux文档 \n/usr/include linux下开发和编译应用程序所需要的头文件 \n/usr/lib 常用的动态链接库和软件包的配置文件 \n/usr/man 帮助文档 \n/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里 \n/usr/local/bin 本地增加的命令 \n/usr/local/lib 本地增加的库根文件系统 \n\n通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要 \n经常改动，而且包括严格的文件和一个小的不经常改变的文件系统不容易损坏。 \n除了可能的一个叫/ v m l i n u z标准的系统引导映像之外，根目录一般不含任何文件。所有 \n其他文件在根文件系统的子目录中。 \n1. /bin目录 \n/ b i n目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些 \n命令都是二进制文件的可执行程序( b i n是b i n a r y - -二进制的简称)，多是系统中重要的系统文件。 \n2. /sbin目录 \n/ s b i n目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使 \n用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使用。 \n3. /etc目录 \n/ e t c目录存放着各种系统配置文件，其中包括了用户信息文件/ e t c / p a s s w d，系统初始化文 \n件/ e t c / r c等。l i n u x正是*这些文件才得以正常地运行。 \n4. /root目录 \n/root 目录是超级用户的目录。 \n5. /lib目录 \n/ l i b目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文 \n件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副 \n本，故可以使得可执行文件变得更小，节省空间。 \n6. /lib/modules 目录 \n/lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引 \n导系统所需的模块(例如网络和文件系统驱动)。 \n7. /dev目录 \n/ d e v目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用 \n户可以通过访问/ d e v / m o u s e来访问鼠标的输入，就像访问其他文件一样。 \n8. /tmp目录 \n/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用 \n/ v a r / t m p来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。 \n9. /boot目录 \n/ b o o t目录存放引导加载器(bootstrap loader)使用的文件，如l i l o，核心映像也经常放在这里， \n而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的 \n文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在i d e硬盘的前1 0 2 4柱面内。 \n10. /mnt目录 \n/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到 \n/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱， \n而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 \n11. /proc, /usr,/var,/home目录 \n其他文件系统的安装点。 \n下面详细介绍； \n## /etc文件系统 \n/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个 \n程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 \n1. /etc/rc或/etc/rc.d或/etc/rc?.d \n启动、或改变运行级时运行的脚本或脚本的目录。 \n2. /etc/passwd \n用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其 \n他信息。 \n3. /etc/fdprm \n软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m \n的帮助页。 \n4. /etc/fstab \n指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 \n5. /etc/group \n类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 \n6. /etc/inittab \ninit 的配置文件。 \n7. /etc/issue \n包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内 \n容由系统管理员确定。 \n8. /etc/magic \n“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 \n9. /etc/motd \nm o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。 \n常用于通告信息，如计划关机时间的警告等。 \n10. /etc/mtab \n当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一 \n个当前安装的文件系统的列表时使用(例如df 命令)。 \n11. /etc/shadow \n在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d \n文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困 \n难，以此增加系统的安全性。 \n12. /etc/login.defs \nl o g i n命令的配置文件。 \n13. /etc/printcap \n类似/etc/termcap ，但针对打印机。语法不同。 \n14. /etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc \n登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 \n15. /etc/securetty \n确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不 \n可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 \n16. /etc/shells \n列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一 \n台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允 \n许该用户登录。 \n17. /etc/termcap \n终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义 \n序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。 \n这样，多数的程序可以在多数终端上运行。\n \n## /dev文件系统 \n/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。 \n设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/ d e v / m a k e d e v.local 是 \n系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准 \nmakedev 的一部分)。下面简要介绍/ d e v下一些常用文件。 \n1. /dev/console \n系统控制台，也就是直接和系统连接的监视器。 \n2. /dev/hd \ni d e硬盘驱动程序接口。如： / d e v / h d a指的是第一个硬盘， h a d 1则是指/ d e v / h d a的第一个 \n分区。如系统中有其他的硬盘，则依次为/ d e v / h d b、/ d e v / h d c、. . . . . .；如有多个分区则依次为 \nh d a 1、h d a 2 . . . . . . \n3. /dev/sd \ns c s i磁盘驱动程序接口。如有系统有s c s i硬盘，就不会访问/ d e v / h a d，而会访问/ d e v / s d a。 \n4. /dev/fd \n软驱设备驱动程序。如： / d e v / f d 0指系统的第一个软盘，也就是通常所说的a：盘， \n/ d e v / f d 1指第二个软盘，. . . . . .而/ d e v / f d 1 h 1 4 4 0则表示访问驱动器1中的4 . 5高密盘。 \n5. /dev/st \ns c s i磁带驱动器驱动程序。 \n6. /dev/tty \n提供虚拟控制台支持。如： / d e v / t t y 1指的是系统的第一个虚拟控制台， / d e v / t t y 2则是系统 \n的第二个虚拟控制台。 \n7. /dev/pty \n提供远程登陆伪终端支持。在进行te l n e t登录时就要用到/ d e v / p t y设备。 \n8. /dev/ttys \n计算机串行接口，对于d o s来说就是“ c o m 1”口。 \n9. /dev/cua \n计算机串行接口，与调制解调器一起使用的设备。 \n10. /dev/null \n“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来 \n时，只要将输出信息输入到/ d e v / n u l l中即可。 \n## /usr文件系统 \n/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的 \n所有文件一般来自l i n u x发行版( d i s t r i b u t i o n )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是 \n可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置 \n文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 \n1. /usr/x11r6 \n包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装， \nx的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形 \n工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 \n2. /usr/x386 \n类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 \n3. /usr/bin \n集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 \n4. /usr/sbin \n包括了根文件系统不必要的系统管理命令，例如多数服务程序。 \n5. /usr/man、/ u s r / i n f o、/ u s r / d o c \n这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节” \n都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文 \n件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调 \n用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 \n6. /usr/include \n包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、 \n子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名 \n字。 \n7. /usr/lib \n包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库 \n(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也 \n有许多程序把配置文件存入其中。 \n8. /usr/local \n本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大 \n的软件包，如t e x、e m a c s等。 \n## /var文件系统 \n/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化 \n或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那 \n些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。 \n下面列出一些重要的目录(一些不太重要的目录省略了)。 \n1. /var/catman \n包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ u s r / m a n / m a n中；有些m a n页 \n可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化， \n格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。 \n(/var/catman 经常被清除，就像清除临时目录一样。) \n2. /var/lib \n存放系统正常运行时要改变的文件。 \n3. /var/local \n存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要， \n即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 \n4. /var/lock \n锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在 \n使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文 \n件。 \n5. /var/log \n各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注 \n销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不 \n确定地增长，应该定期清除。 \n6. /var/run \n保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登 \n录的用户的信息。 \n7. /var/spool \n放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每 \n个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 \n8. /var/tmp \n比/tmp 允许更大的或需要存在较长时间的临时文件。 \n注意系统管理员可能不允许/var/tmp 有很旧的文件。 \n## /proc文件系统 \n/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一 \n个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提 \n供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详 \n细的说明)。 \n1. /proc/x \n关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自 \n己进程号的目录。 \n2. /proc/cpuinfo \n存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 \n3. /proc/devices \n当前运行的核心配置的设备驱动的列表。 \n4. /proc/dma \n显示当前使用的d m a通道。 \n5. /proc/filesystems \n核心配置的文件系统信息。 \n6. /proc/interrupts \n显示被占用的中断信息和占用者的信息，以及被占用的数量。 \n7. /proc/ioports \n当前使用的i / o端口。 \n8. /proc/kcore \n系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅 \n仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何 \n东西占用任何磁盘空间。) \n9. /proc/kmsg \n核心输出的消息。也会被送到s y s l o g。 \n10. /proc/ksyms \n核心符号表。 \n11. /proc/loadavg \n系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 \n12. /proc/meminfo \n各种存储器使用信息，包括物理内存和交换分区( s w a p )。 \n13. /proc/modules \n存放当前加载了哪些核心模块信息。 \n14. /proc/net \n网络协议状态信息。 \n15. /proc/self \n存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同 \n的连接。这主要便于程序得到它自己的进程目录。 \n16. /proc/stat \n系统的不同状态，例如，系统启动后页面发生错误的次数。 \n17. /proc/uptime \n系统启动的时间长度。 \n18. /proc/version \n核心版本。","slug":"linux1","published":1,"updated":"2016-12-22T01:40:14.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckfmf4yta00fgesqrbdlg4uki","content":"<p>linux下的文件结构，每个文件夹用途<br>/bin 二进制可执行命令<br>/dev 设备特殊文件<br>/etc 系统管理和配置文件<br>/etc/rc.d 启动的配置文件和脚本<br>/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示<br>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件<br>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br>/tmp 公用的临时文件存储点<br>/root 系统管理员的主目录（呵呵，特权阶级）<br>/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。<br>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里<br>/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>/var 某些大文件的溢出区，比方说各种服务的日志文件<br>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>/usr/x11r6 存放x window的目录<br>/usr/bin 众多的应用程序<br>/usr/sbin 超级用户的一些管理程序<br>/usr/doc linux文档<br>/usr/include linux下开发和编译应用程序所需要的头文件<br>/usr/lib 常用的动态链接库和软件包的配置文件<br>/usr/man 帮助文档<br>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里<br>/usr/local/bin 本地增加的命令<br>/usr/local/lib 本地增加的库根文件系统 </p>\n<p>通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要<br>经常改动，而且包括严格的文件和一个小的不经常改变的文件系统不容易损坏。<br>除了可能的一个叫/ v m l i n u z标准的系统引导映像之外，根目录一般不含任何文件。所有<br>其他文件在根文件系统的子目录中。 </p>\n<ol>\n<li>/bin目录<br>/ b i n目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些<br>命令都是二进制文件的可执行程序( b i n是b i n a r y - -二进制的简称)，多是系统中重要的系统文件。 </li>\n<li>/sbin目录<br>/ s b i n目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使<br>用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使用。 </li>\n<li>/etc目录<br>/ e t c目录存放着各种系统配置文件，其中包括了用户信息文件/ e t c / p a s s w d，系统初始化文<br>件/ e t c / r c等。l i n u x正是*这些文件才得以正常地运行。 </li>\n<li>/root目录<br>/root 目录是超级用户的目录。 </li>\n<li>/lib目录<br>/ l i b目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文<br>件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副<br>本，故可以使得可执行文件变得更小，节省空间。 </li>\n<li>/lib/modules 目录<br>/lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引<br>导系统所需的模块(例如网络和文件系统驱动)。 </li>\n<li>/dev目录<br>/ d e v目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用<br>户可以通过访问/ d e v / m o u s e来访问鼠标的输入，就像访问其他文件一样。 </li>\n<li>/tmp目录<br>/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用<br>/ v a r / t m p来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。 </li>\n<li>/boot目录<br>/ b o o t目录存放引导加载器(bootstrap loader)使用的文件，如l i l o，核心映像也经常放在这里，<br>而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的<br>文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在i d e硬盘的前1 0 2 4柱面内。 </li>\n<li>/mnt目录<br>/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到<br>/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱，<br>而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 </li>\n<li>/proc, /usr,/var,/home目录<br>其他文件系统的安装点。<br>下面详细介绍； <h2 id=\"etc文件系统\"><a href=\"#etc文件系统\" class=\"headerlink\" title=\"/etc文件系统\"></a>/etc文件系统</h2>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个<br>程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 </li>\n<li>/etc/rc或/etc/rc.d或/etc/rc?.d<br>启动、或改变运行级时运行的脚本或脚本的目录。 </li>\n<li>/etc/passwd<br>用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其<br>他信息。 </li>\n<li>/etc/fdprm<br>软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m<br>的帮助页。 </li>\n<li>/etc/fstab<br>指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 </li>\n<li>/etc/group<br>类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 </li>\n<li>/etc/inittab<br>init 的配置文件。 </li>\n<li>/etc/issue<br>包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内<br>容由系统管理员确定。 </li>\n<li>/etc/magic<br>“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 </li>\n<li>/etc/motd<br>m o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。<br>常用于通告信息，如计划关机时间的警告等。 </li>\n<li>/etc/mtab<br>当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一<br>个当前安装的文件系统的列表时使用(例如df 命令)。 </li>\n<li>/etc/shadow<br>在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d<br>文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困<br>难，以此增加系统的安全性。 </li>\n<li>/etc/login.defs<br>l o g i n命令的配置文件。 </li>\n<li>/etc/printcap<br>类似/etc/termcap ，但针对打印机。语法不同。 </li>\n<li>/etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc<br>登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 </li>\n<li>/etc/securetty<br>确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不<br>可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 </li>\n<li>/etc/shells<br>列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一<br>台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允<br>许该用户登录。 </li>\n<li>/etc/termcap<br>终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义<br>序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。<br>这样，多数的程序可以在多数终端上运行。</li>\n</ol>\n<h2 id=\"dev文件系统\"><a href=\"#dev文件系统\" class=\"headerlink\" title=\"/dev文件系统\"></a>/dev文件系统</h2><p>/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。<br>设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/ d e v / m a k e d e v.local 是<br>系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准<br>makedev 的一部分)。下面简要介绍/ d e v下一些常用文件。 </p>\n<ol>\n<li>/dev/console<br>系统控制台，也就是直接和系统连接的监视器。 </li>\n<li>/dev/hd<br>i d e硬盘驱动程序接口。如： / d e v / h d a指的是第一个硬盘， h a d 1则是指/ d e v / h d a的第一个<br>分区。如系统中有其他的硬盘，则依次为/ d e v / h d b、/ d e v / h d c、. . . . . .；如有多个分区则依次为<br>h d a 1、h d a 2 . . . . . . </li>\n<li>/dev/sd<br>s c s i磁盘驱动程序接口。如有系统有s c s i硬盘，就不会访问/ d e v / h a d，而会访问/ d e v / s d a。 </li>\n<li>/dev/fd<br>软驱设备驱动程序。如： / d e v / f d 0指系统的第一个软盘，也就是通常所说的a：盘，<br>/ d e v / f d 1指第二个软盘，. . . . . .而/ d e v / f d 1 h 1 4 4 0则表示访问驱动器1中的4 . 5高密盘。 </li>\n<li>/dev/st<br>s c s i磁带驱动器驱动程序。 </li>\n<li>/dev/tty<br>提供虚拟控制台支持。如： / d e v / t t y 1指的是系统的第一个虚拟控制台， / d e v / t t y 2则是系统<br>的第二个虚拟控制台。 </li>\n<li>/dev/pty<br>提供远程登陆伪终端支持。在进行te l n e t登录时就要用到/ d e v / p t y设备。 </li>\n<li>/dev/ttys<br>计算机串行接口，对于d o s来说就是“ c o m 1”口。 </li>\n<li>/dev/cua<br>计算机串行接口，与调制解调器一起使用的设备。 </li>\n<li>/dev/null<br>“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来<br>时，只要将输出信息输入到/ d e v / n u l l中即可。 <h2 id=\"usr文件系统\"><a href=\"#usr文件系统\" class=\"headerlink\" title=\"/usr文件系统\"></a>/usr文件系统</h2>/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的<br>所有文件一般来自l i n u x发行版( d i s t r i b u t i o n )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是<br>可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置<br>文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 </li>\n<li>/usr/x11r6<br>包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，<br>x的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形<br>工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 </li>\n<li>/usr/x386<br>类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 </li>\n<li>/usr/bin<br>集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 </li>\n<li>/usr/sbin<br>包括了根文件系统不必要的系统管理命令，例如多数服务程序。 </li>\n<li>/usr/man、/ u s r / i n f o、/ u s r / d o c<br>这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”<br>都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文<br>件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调<br>用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 </li>\n<li>/usr/include<br>包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、<br>子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名<br>字。 </li>\n<li>/usr/lib<br>包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库<br>(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也<br>有许多程序把配置文件存入其中。 </li>\n<li>/usr/local<br>本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大<br>的软件包，如t e x、e m a c s等。 <h2 id=\"var文件系统\"><a href=\"#var文件系统\" class=\"headerlink\" title=\"/var文件系统\"></a>/var文件系统</h2>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。<br>下面列出一些重要的目录(一些不太重要的目录省略了)。 </li>\n<li>/var/catman<br>包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ u s r / m a n / m a n中；有些m a n页<br>可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，<br>格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。<br>(/var/catman 经常被清除，就像清除临时目录一样。) </li>\n<li>/var/lib<br>存放系统正常运行时要改变的文件。 </li>\n<li>/var/local<br>存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，<br>即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 </li>\n<li>/var/lock<br>锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在<br>使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文<br>件。 </li>\n<li>/var/log<br>各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>确定地增长，应该定期清除。 </li>\n<li>/var/run<br>保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登<br>录的用户的信息。 </li>\n<li>/var/spool<br>放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每<br>个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 </li>\n<li>/var/tmp<br>比/tmp 允许更大的或需要存在较长时间的临时文件。<br>注意系统管理员可能不允许/var/tmp 有很旧的文件。 <h2 id=\"proc文件系统\"><a href=\"#proc文件系统\" class=\"headerlink\" title=\"/proc文件系统\"></a>/proc文件系统</h2>/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>细的说明)。 </li>\n<li>/proc/x<br>关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>己进程号的目录。 </li>\n<li>/proc/cpuinfo<br>存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 </li>\n<li>/proc/devices<br>当前运行的核心配置的设备驱动的列表。 </li>\n<li>/proc/dma<br>显示当前使用的d m a通道。 </li>\n<li>/proc/filesystems<br>核心配置的文件系统信息。 </li>\n<li>/proc/interrupts<br>显示被占用的中断信息和占用者的信息，以及被占用的数量。 </li>\n<li>/proc/ioports<br>当前使用的i / o端口。 </li>\n<li>/proc/kcore<br>系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>东西占用任何磁盘空间。) </li>\n<li>/proc/kmsg<br>核心输出的消息。也会被送到s y s l o g。 </li>\n<li>/proc/ksyms<br>核心符号表。 </li>\n<li>/proc/loadavg<br>系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 </li>\n<li>/proc/meminfo<br>各种存储器使用信息，包括物理内存和交换分区( s w a p )。 </li>\n<li>/proc/modules<br>存放当前加载了哪些核心模块信息。 </li>\n<li>/proc/net<br>网络协议状态信息。 </li>\n<li>/proc/self<br>存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>的连接。这主要便于程序得到它自己的进程目录。 </li>\n<li>/proc/stat<br>系统的不同状态，例如，系统启动后页面发生错误的次数。 </li>\n<li>/proc/uptime<br>系统启动的时间长度。 </li>\n<li>/proc/version<br>核心版本。</li>\n</ol>\n","excerpt":"","more":"<p>linux下的文件结构，每个文件夹用途<br>/bin 二进制可执行命令<br>/dev 设备特殊文件<br>/etc 系统管理和配置文件<br>/etc/rc.d 启动的配置文件和脚本<br>/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示<br>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件<br>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序<br>/tmp 公用的临时文件存储点<br>/root 系统管理员的主目录（呵呵，特权阶级）<br>/mnt 系统提供这个目录是让用户临时挂载其他的文件系统。<br>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里<br>/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。<br>/var 某些大文件的溢出区，比方说各种服务的日志文件<br>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>/usr/x11r6 存放x window的目录<br>/usr/bin 众多的应用程序<br>/usr/sbin 超级用户的一些管理程序<br>/usr/doc linux文档<br>/usr/include linux下开发和编译应用程序所需要的头文件<br>/usr/lib 常用的动态链接库和软件包的配置文件<br>/usr/man 帮助文档<br>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里<br>/usr/local/bin 本地增加的命令<br>/usr/local/lib 本地增加的库根文件系统 </p>\n<p>通常情况下，根文件系统所占空间一般应该比较小，因为其中的绝大部分文件都不需要<br>经常改动，而且包括严格的文件和一个小的不经常改变的文件系统不容易损坏。<br>除了可能的一个叫/ v m l i n u z标准的系统引导映像之外，根目录一般不含任何文件。所有<br>其他文件在根文件系统的子目录中。 </p>\n<ol>\n<li>/bin目录<br>/ b i n目录包含了引导启动所需的命令或普通用户可能用的命令(可能在引导启动后)。这些<br>命令都是二进制文件的可执行程序( b i n是b i n a r y - -二进制的简称)，多是系统中重要的系统文件。 </li>\n<li>/sbin目录<br>/ s b i n目录类似/bin ，也用于存储二进制文件。因为其中的大部分文件多是系统管理员使<br>用的基本的系统程序，所以虽然普通用户必要且允许时可以使用，但一般不给普通用户使用。 </li>\n<li>/etc目录<br>/ e t c目录存放着各种系统配置文件，其中包括了用户信息文件/ e t c / p a s s w d，系统初始化文<br>件/ e t c / r c等。l i n u x正是*这些文件才得以正常地运行。 </li>\n<li>/root目录<br>/root 目录是超级用户的目录。 </li>\n<li>/lib目录<br>/ l i b目录是根文件系统上的程序所需的共享库，存放了根文件系统程序运行所需的共享文<br>件。这些文件包含了可被许多程序共享的代码，以避免每个程序都包含有相同的子程序的副<br>本，故可以使得可执行文件变得更小，节省空间。 </li>\n<li>/lib/modules 目录<br>/lib/modules 目录包含系统核心可加载各种模块，尤其是那些在恢复损坏的系统时重新引<br>导系统所需的模块(例如网络和文件系统驱动)。 </li>\n<li>/dev目录<br>/ d e v目录存放了设备文件，即设备驱动程序，用户通过这些文件访问外部设备。比如，用<br>户可以通过访问/ d e v / m o u s e来访问鼠标的输入，就像访问其他文件一样。 </li>\n<li>/tmp目录<br>/tmp 目录存放程序在运行时产生的信息和数据。但在引导启动后，运行的程序最好使用<br>/ v a r / t m p来代替/tmp ，因为前者可能拥有一个更大的磁盘空间。 </li>\n<li>/boot目录<br>/ b o o t目录存放引导加载器(bootstrap loader)使用的文件，如l i l o，核心映像也经常放在这里，<br>而不是放在根目录中。但是如果有许多核心映像，这个目录就可能变得很大，这时使用单独的<br>文件系统会更好一些。还有一点要注意的是，要确保核心映像必须在i d e硬盘的前1 0 2 4柱面内。 </li>\n<li>/mnt目录<br>/ m n t目录是系统管理员临时安装( m o u n t )文件系统的安装点。程序并不自动支持安装到<br>/mnt 。/mnt 下面可以分为许多子目录，例如/mnt/dosa 可能是使用m s d o s文件系统的软驱，<br>而/mnt/exta 可能是使用e x t 2文件系统的软驱，/mnt/cdrom 光驱等等。 </li>\n<li>/proc, /usr,/var,/home目录<br>其他文件系统的安装点。<br>下面详细介绍； <h2 id=\"etc文件系统\"><a href=\"#etc文件系统\" class=\"headerlink\" title=\"/etc文件系统\"></a>/etc文件系统</h2>/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个<br>程序，并阅读该程序的m a n页。许多网络配置文件也在/etc 中。 </li>\n<li>/etc/rc或/etc/rc.d或/etc/rc?.d<br>启动、或改变运行级时运行的脚本或脚本的目录。 </li>\n<li>/etc/passwd<br>用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其<br>他信息。 </li>\n<li>/etc/fdprm<br>软盘参数表，用以说明不同的软盘格式。可用setfdprm 进行设置。更多的信息见s e t f d p r m<br>的帮助页。 </li>\n<li>/etc/fstab<br>指定启动时需要自动安装的文件系统列表。也包括用swapon -a启用的s w a p区的信息。 </li>\n<li>/etc/group<br>类似/etc/passwd ，但说明的不是用户信息而是组的信息。包括组的各种数据。 </li>\n<li>/etc/inittab<br>init 的配置文件。 </li>\n<li>/etc/issue<br>包括用户在登录提示符前的输出信息。通常包括系统的一段短说明或欢迎信息。具体内<br>容由系统管理员确定。 </li>\n<li>/etc/magic<br>“f i l e”的配置文件。包含不同文件格式的说明，“f i l e”基于它猜测文件类型。 </li>\n<li>/etc/motd<br>m o t d是message of the day的缩写，用户成功登录后自动输出。内容由系统管理员确定。<br>常用于通告信息，如计划关机时间的警告等。 </li>\n<li>/etc/mtab<br>当前安装的文件系统列表。由脚本( s c r i t p )初始化，并由mount 命令自动更新。当需要一<br>个当前安装的文件系统的列表时使用(例如df 命令)。 </li>\n<li>/etc/shadow<br>在安装了影子( s h a d o w )口令软件的系统上的影子口令文件。影子口令文件将/ e t c / p a s s w d<br>文件中的加密口令移动到/ e t c / s h a d o w中，而后者只对超级用户( r o o t )可读。这使破译口令更困<br>难，以此增加系统的安全性。 </li>\n<li>/etc/login.defs<br>l o g i n命令的配置文件。 </li>\n<li>/etc/printcap<br>类似/etc/termcap ，但针对打印机。语法不同。 </li>\n<li>/etc/profile 、/ e t c / c s h . l o g i n、/etc/csh.cshrc<br>登录或启动时b o u r n e或c shells执行的文件。这允许系统管理员为所有用户建立全局缺省环境。 </li>\n<li>/etc/securetty<br>确认安全终端，即哪个终端允许超级用户( r o o t )登录。一般只列出虚拟控制台，这样就不<br>可能(至少很困难)通过调制解调器( m o d e m )或网络闯入系统并得到超级用户特权。 </li>\n<li>/etc/shells<br>列出可以使用的s h e l l。chsh 命令允许用户在本文件指定范围内改变登录的s h e l l。提供一<br>台机器f t p服务的服务进程ftpd 检查用户s h e l l是否列在/etc/shells 文件中，如果不是，将不允<br>许该用户登录。 </li>\n<li>/etc/termcap<br>终端性能数据库。说明不同的终端用什么“转义序列”控制。写程序时不直接输出转义<br>序列(这样只能工作于特定品牌的终端)，而是从/etc/termcap 中查找要做的工作的正确序列。<br>这样，多数的程序可以在多数终端上运行。</li>\n</ol>\n<h2 id=\"dev文件系统\"><a href=\"#dev文件系统\" class=\"headerlink\" title=\"/dev文件系统\"></a>/dev文件系统</h2><p>/dev 目录包括所有设备的设备文件。设备文件用特定的约定命名，这在设备列表中说明。<br>设备文件在安装时由系统产生，以后可以用/dev/makedev 描述。/ d e v / m a k e d e v.local 是<br>系统管理员为本地设备文件(或连接)写的描述文稿(即如一些非标准设备驱动不是标准<br>makedev 的一部分)。下面简要介绍/ d e v下一些常用文件。 </p>\n<ol>\n<li>/dev/console<br>系统控制台，也就是直接和系统连接的监视器。 </li>\n<li>/dev/hd<br>i d e硬盘驱动程序接口。如： / d e v / h d a指的是第一个硬盘， h a d 1则是指/ d e v / h d a的第一个<br>分区。如系统中有其他的硬盘，则依次为/ d e v / h d b、/ d e v / h d c、. . . . . .；如有多个分区则依次为<br>h d a 1、h d a 2 . . . . . . </li>\n<li>/dev/sd<br>s c s i磁盘驱动程序接口。如有系统有s c s i硬盘，就不会访问/ d e v / h a d，而会访问/ d e v / s d a。 </li>\n<li>/dev/fd<br>软驱设备驱动程序。如： / d e v / f d 0指系统的第一个软盘，也就是通常所说的a：盘，<br>/ d e v / f d 1指第二个软盘，. . . . . .而/ d e v / f d 1 h 1 4 4 0则表示访问驱动器1中的4 . 5高密盘。 </li>\n<li>/dev/st<br>s c s i磁带驱动器驱动程序。 </li>\n<li>/dev/tty<br>提供虚拟控制台支持。如： / d e v / t t y 1指的是系统的第一个虚拟控制台， / d e v / t t y 2则是系统<br>的第二个虚拟控制台。 </li>\n<li>/dev/pty<br>提供远程登陆伪终端支持。在进行te l n e t登录时就要用到/ d e v / p t y设备。 </li>\n<li>/dev/ttys<br>计算机串行接口，对于d o s来说就是“ c o m 1”口。 </li>\n<li>/dev/cua<br>计算机串行接口，与调制解调器一起使用的设备。 </li>\n<li>/dev/null<br>“黑洞”，所有写入该设备的信息都将消失。例如：当想要将屏幕上的输出信息隐藏起来<br>时，只要将输出信息输入到/ d e v / n u l l中即可。 <h2 id=\"usr文件系统\"><a href=\"#usr文件系统\" class=\"headerlink\" title=\"/usr文件系统\"></a>/usr文件系统</h2>/usr 是个很重要的目录，通常这一文件系统很大，因为所有程序安装在这里。/usr 里的<br>所有文件一般来自l i n u x发行版( d i s t r i b u t i o n )；本地安装的程序和其他东西在/usr/local 下，因为这样可以在升级新版系统或新发行版时无须重新安装全部程序。/usr 目录下的许多内容是<br>可选的，但这些功能会使用户使用系统更加有效。/ u s r可容纳许多大型的软件包和它们的配置<br>文件。下面列出一些重要的目录(一些不太重要的目录被省略了)。 </li>\n<li>/usr/x11r6<br>包含x wi n d o w系统的所有可执行程序、配置文件和支持文件。为简化x的开发和安装，<br>x的文件没有集成到系统中。x wi n d o w系统是一个功能强大的图形环境，提供了大量的图形<br>工具程序。用户如果对microsoft wi n d o w s或m a c h i n t o s h比较熟悉的话，就不会对x wi n d o w系统感到束手无策了。 </li>\n<li>/usr/x386<br>类似/ u s r / x 11r6 ，但是是专门给x 11 release 5的。 </li>\n<li>/usr/bin<br>集中了几乎所有用户命令，是系统的软件库。另有些命令在/bin 或/usr/local/bin 中。 </li>\n<li>/usr/sbin<br>包括了根文件系统不必要的系统管理命令，例如多数服务程序。 </li>\n<li>/usr/man、/ u s r / i n f o、/ u s r / d o c<br>这些目录包含所有手册页、g n u信息文档和各种其他文档文件。每个联机手册的“节”<br>都有两个子目录。例如： / u s r / m a n / m a n 1中包含联机手册第一节的源码(没有格式化的原始文<br>件)，/ u s r / m a n / c a t 1包含第一节已格式化的内容。l联机手册分为以下九节：内部命令、系统调<br>用、库函数、设备、文件格式、游戏、宏软件包、系统管理和核心程序。 </li>\n<li>/usr/include<br>包含了c语言的头文件，这些文件多以. h结尾，用来描述c语言程序中用到的数据结构、<br>子过程和常量。为了保持一致性，这实际上应该放在/usr/lib 下，但习惯上一直沿用了这个名<br>字。 </li>\n<li>/usr/lib<br>包含了程序或子系统的不变的数据文件，包括一些s i t e - w i d e配置文件。名字l i b来源于库<br>(library); 编程的原始库也存在/usr/lib 里。当编译程序时，程序便会和其中的库进行连接。也<br>有许多程序把配置文件存入其中。 </li>\n<li>/usr/local<br>本地安装的软件和其他文件放在这里。这与/ u s r很相似。用户可能会在这发现一些比较大<br>的软件包，如t e x、e m a c s等。 <h2 id=\"var文件系统\"><a href=\"#var文件系统\" class=\"headerlink\" title=\"/var文件系统\"></a>/var文件系统</h2>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。<br>下面列出一些重要的目录(一些不太重要的目录省略了)。 </li>\n<li>/var/catman<br>包括了格式化过的帮助( m a n )页。帮助页的源文件一般存在/ u s r / m a n / m a n中；有些m a n页<br>可能有预格式化的版本，存在/ u s r / m a n / c a t中。而其他的m a n页在第一次看时都需要格式化，<br>格式化完的版本存在/var/man 中，这样其他人再看相同的页时就无须等待格式化了。<br>(/var/catman 经常被清除，就像清除临时目录一样。) </li>\n<li>/var/lib<br>存放系统正常运行时要改变的文件。 </li>\n<li>/var/local<br>存放/usr/local 中安装的程序的可变数据(即系统管理员安装的程序)。注意，如果必要，<br>即使本地安装的程序也会使用其他/var 目录，例如/var/lock 。 </li>\n<li>/var/lock<br>锁定文件。许多程序遵循在/var/lock 中产生一个锁定文件的约定，以用来支持他们正在<br>使用某个特定的设备或文件。其他程序注意到这个锁定文件时，就不会再使用这个设备或文<br>件。 </li>\n<li>/var/log<br>各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>确定地增长，应该定期清除。 </li>\n<li>/var/run<br>保存在下一次系统引导前有效的关于系统的信息文件。例如， /var/run/utmp 包含当前登<br>录的用户的信息。 </li>\n<li>/var/spool<br>放置“假脱机( s p o o l )”程序的目录，如m a i l、n e w s、打印队列和其他队列工作的目录。每<br>个不同的s p o o l在/var/spool 下有自己的子目录，例如，用户的邮箱就存放在/var/spool/mail 中。 </li>\n<li>/var/tmp<br>比/tmp 允许更大的或需要存在较长时间的临时文件。<br>注意系统管理员可能不允许/var/tmp 有很旧的文件。 <h2 id=\"proc文件系统\"><a href=\"#proc文件系统\" class=\"headerlink\" title=\"/proc文件系统\"></a>/proc文件系统</h2>/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>细的说明)。 </li>\n<li>/proc/x<br>关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>己进程号的目录。 </li>\n<li>/proc/cpuinfo<br>存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。 </li>\n<li>/proc/devices<br>当前运行的核心配置的设备驱动的列表。 </li>\n<li>/proc/dma<br>显示当前使用的d m a通道。 </li>\n<li>/proc/filesystems<br>核心配置的文件系统信息。 </li>\n<li>/proc/interrupts<br>显示被占用的中断信息和占用者的信息，以及被占用的数量。 </li>\n<li>/proc/ioports<br>当前使用的i / o端口。 </li>\n<li>/proc/kcore<br>系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>东西占用任何磁盘空间。) </li>\n<li>/proc/kmsg<br>核心输出的消息。也会被送到s y s l o g。 </li>\n<li>/proc/ksyms<br>核心符号表。 </li>\n<li>/proc/loadavg<br>系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。 </li>\n<li>/proc/meminfo<br>各种存储器使用信息，包括物理内存和交换分区( s w a p )。 </li>\n<li>/proc/modules<br>存放当前加载了哪些核心模块信息。 </li>\n<li>/proc/net<br>网络协议状态信息。 </li>\n<li>/proc/self<br>存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>的连接。这主要便于程序得到它自己的进程目录。 </li>\n<li>/proc/stat<br>系统的不同状态，例如，系统启动后页面发生错误的次数。 </li>\n<li>/proc/uptime<br>系统启动的时间长度。 </li>\n<li>/proc/version<br>核心版本。</li>\n</ol>\n"},{"title":"MYSQL数据库设计规范","date":"2020-01-17T03:11:07.000Z","description":null,"_content":"\n## MYSQL数据库设计规范\n\n### 1、数据库命名规范\n\n采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;\n命名简洁明确(长度不能超过30个字符);\n例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;\n除非是备份数据库可以加0-9的自然数：user_db_20151210;\n\n### 2、数据库表名命名规范\n\n采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;\n命名简洁明确,多个单词用下划线'_'分隔;\n例如：user_login, user_profile, user_detail, user_role, user_role_relation,\nuser_role_right, user_role_right_relation\n表前缀'user_'可以有效的把相同关系的表显示在一起;\n\n### 3、数据库表字段名命名规范\n\n采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;\n命名简洁明确,多个单词用下划线'_'分隔;\n例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;\n每个表中必须有自增主键,add_time(默认系统时间)\n表与表之间的相关联字段名称要求尽可能的相同;\n\n### 4、数据库表字段类型规范\n\n用尽量少的存储空间来存数一个字段的数据;\n例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);\nIP地址最好使用int类型;\n固定长度的类型最好使用char,例如：邮编;\n能使用tinyint就不要使用smallint,int;\n最好给每个字段一个默认值,最好不能为null;\n\n### 5、数据库表索引规范\n\n命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;\n为每个表创建一个主键索引;\n为每个表创建合理的索引;\n建立复合索引请慎重;\n\n### 6、简单熟悉数据库范式\n\n第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);\n例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;\n\n第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;\n备注：必须先满足第一范式;\n\n第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;\n备注：必须先满足第二范式;\n数据库的三范式：\n①字段不可分。\n②有主键，非主键字段依赖主键。\n③非主键字段不能互相依赖。\n\n\n备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;\n例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;\n\n \n\n## MYSQL数据库设计原则\n\n### 1、核心原则\n\n不在数据库做运算;\ncpu计算务必移至业务层;\n控制列数量(字段少而精,字段数建议在20以内);\n平衡范式与冗余(效率优先；往往牺牲范式)\n拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);\n\n### 2、字段类原则\n\n用好数值类型(用合适的字段类型节约空间);\n字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);\n避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);\n少用text类型(尽量使用varchar代替text字段);\n\n### 3、索引类原则\n\n合理使用索引(改善查询,减慢更新,索引一定不是越多越好);\n字符字段必须建前缀索引;\n不在索引做列运算;\ninnodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);\n不用外键(由程序保证约束);\n\n### 4、sql类原则\n\nsql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);\n简单的事务;\n避免使用trig/func(触发器、函数不用客户端程序取而代之);\n不用select *(消耗cpu,io,内存,带宽,这种程序不具有扩展性);\nOR改写为IN(or的效率是n级别);\nOR改写为UNION(mysql的索引合并很弱智);\nselect id from t where phone = ’159′ or name = ‘john’;\n=>\nselect id from t where phone=’159′\nunion\nselect id from t where name=’jonh’\n避免负向%;\n慎用count(*);\nlimit高效分页(limit越大，效率越低);\n使用union all替代union(union有去重开销);\n少用连接join;\n使用group by;\n请使用同类型比较;\n打散批量更新;\n\n### 5、性能分析工具\n\nshow profile;\nmysqlsla;\nmysqldumpslow;\nexplain;\nshow slow log;\nshow processlist;","source":"_posts/MYSQL数据库设计规范.md","raw":"---\ntitle: MYSQL数据库设计规范\ncategories: [MYSQL]\ntags: [MYSQL,数据库]\ndate: 2020-01-17 11:11:07\ndescription:\n---\n\n## MYSQL数据库设计规范\n\n### 1、数据库命名规范\n\n采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;\n命名简洁明确(长度不能超过30个字符);\n例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;\n除非是备份数据库可以加0-9的自然数：user_db_20151210;\n\n### 2、数据库表名命名规范\n\n采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;\n命名简洁明确,多个单词用下划线'_'分隔;\n例如：user_login, user_profile, user_detail, user_role, user_role_relation,\nuser_role_right, user_role_right_relation\n表前缀'user_'可以有效的把相同关系的表显示在一起;\n\n### 3、数据库表字段名命名规范\n\n采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线'_'组成;\n命名简洁明确,多个单词用下划线'_'分隔;\n例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;\n每个表中必须有自增主键,add_time(默认系统时间)\n表与表之间的相关联字段名称要求尽可能的相同;\n\n### 4、数据库表字段类型规范\n\n用尽量少的存储空间来存数一个字段的数据;\n例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);\nIP地址最好使用int类型;\n固定长度的类型最好使用char,例如：邮编;\n能使用tinyint就不要使用smallint,int;\n最好给每个字段一个默认值,最好不能为null;\n\n### 5、数据库表索引规范\n\n命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;\n为每个表创建一个主键索引;\n为每个表创建合理的索引;\n建立复合索引请慎重;\n\n### 6、简单熟悉数据库范式\n\n第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);\n例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;\n\n第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;\n备注：必须先满足第一范式;\n\n第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;\n备注：必须先满足第二范式;\n数据库的三范式：\n①字段不可分。\n②有主键，非主键字段依赖主键。\n③非主键字段不能互相依赖。\n\n\n备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;\n例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;\n\n \n\n## MYSQL数据库设计原则\n\n### 1、核心原则\n\n不在数据库做运算;\ncpu计算务必移至业务层;\n控制列数量(字段少而精,字段数建议在20以内);\n平衡范式与冗余(效率优先；往往牺牲范式)\n拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);\n\n### 2、字段类原则\n\n用好数值类型(用合适的字段类型节约空间);\n字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);\n避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);\n少用text类型(尽量使用varchar代替text字段);\n\n### 3、索引类原则\n\n合理使用索引(改善查询,减慢更新,索引一定不是越多越好);\n字符字段必须建前缀索引;\n不在索引做列运算;\ninnodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);\n不用外键(由程序保证约束);\n\n### 4、sql类原则\n\nsql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);\n简单的事务;\n避免使用trig/func(触发器、函数不用客户端程序取而代之);\n不用select *(消耗cpu,io,内存,带宽,这种程序不具有扩展性);\nOR改写为IN(or的效率是n级别);\nOR改写为UNION(mysql的索引合并很弱智);\nselect id from t where phone = ’159′ or name = ‘john’;\n=>\nselect id from t where phone=’159′\nunion\nselect id from t where name=’jonh’\n避免负向%;\n慎用count(*);\nlimit高效分页(limit越大，效率越低);\n使用union all替代union(union有去重开销);\n少用连接join;\n使用group by;\n请使用同类型比较;\n打散批量更新;\n\n### 5、性能分析工具\n\nshow profile;\nmysqlsla;\nmysqldumpslow;\nexplain;\nshow slow log;\nshow processlist;","slug":"MYSQL数据库设计规范","published":1,"updated":"2020-09-28T11:10:07.024Z","_id":"ckfmfere30000t8qr57uss3em","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"MYSQL数据库设计规范\"><a href=\"#MYSQL数据库设计规范\" class=\"headerlink\" title=\"MYSQL数据库设计规范\"></a>MYSQL数据库设计规范</h2><h3 id=\"1、数据库命名规范\"><a href=\"#1、数据库命名规范\" class=\"headerlink\" title=\"1、数据库命名规范\"></a>1、数据库命名规范</h3><p>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’_’组成;<br>命名简洁明确(长度不能超过30个字符);<br>例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;<br>除非是备份数据库可以加0-9的自然数：user_db_20151210;</p>\n<h3 id=\"2、数据库表名命名规范\"><a href=\"#2、数据库表名命名规范\" class=\"headerlink\" title=\"2、数据库表名命名规范\"></a>2、数据库表名命名规范</h3><p>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’<em>‘组成;<br>命名简洁明确,多个单词用下划线’</em>‘分隔;<br>例如：user_login, user_profile, user_detail, user_role, user_role_relation,<br>user_role_right, user_role_right<em>relation<br>表前缀’user</em>‘可以有效的把相同关系的表显示在一起;</p>\n<h3 id=\"3、数据库表字段名命名规范\"><a href=\"#3、数据库表字段名命名规范\" class=\"headerlink\" title=\"3、数据库表字段名命名规范\"></a>3、数据库表字段名命名规范</h3><p>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’<em>‘组成;<br>命名简洁明确,多个单词用下划线’</em>‘分隔;<br>例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;<br>每个表中必须有自增主键,add_time(默认系统时间)<br>表与表之间的相关联字段名称要求尽可能的相同;</p>\n<h3 id=\"4、数据库表字段类型规范\"><a href=\"#4、数据库表字段类型规范\" class=\"headerlink\" title=\"4、数据库表字段类型规范\"></a>4、数据库表字段类型规范</h3><p>用尽量少的存储空间来存数一个字段的数据;<br>例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);<br>IP地址最好使用int类型;<br>固定长度的类型最好使用char,例如：邮编;<br>能使用tinyint就不要使用smallint,int;<br>最好给每个字段一个默认值,最好不能为null;</p>\n<h3 id=\"5、数据库表索引规范\"><a href=\"#5、数据库表索引规范\" class=\"headerlink\" title=\"5、数据库表索引规范\"></a>5、数据库表索引规范</h3><p>命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;<br>为每个表创建一个主键索引;<br>为每个表创建合理的索引;<br>建立复合索引请慎重;</p>\n<h3 id=\"6、简单熟悉数据库范式\"><a href=\"#6、简单熟悉数据库范式\" class=\"headerlink\" title=\"6、简单熟悉数据库范式\"></a>6、简单熟悉数据库范式</h3><p>第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);<br>例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;</p>\n<p>第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;<br>备注：必须先满足第一范式;</p>\n<p>第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;<br>备注：必须先满足第二范式;<br>数据库的三范式：<br>①字段不可分。<br>②有主键，非主键字段依赖主键。<br>③非主键字段不能互相依赖。</p>\n<p>备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;<br>例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;</p>\n<h2 id=\"MYSQL数据库设计原则\"><a href=\"#MYSQL数据库设计原则\" class=\"headerlink\" title=\"MYSQL数据库设计原则\"></a>MYSQL数据库设计原则</h2><h3 id=\"1、核心原则\"><a href=\"#1、核心原则\" class=\"headerlink\" title=\"1、核心原则\"></a>1、核心原则</h3><p>不在数据库做运算;<br>cpu计算务必移至业务层;<br>控制列数量(字段少而精,字段数建议在20以内);<br>平衡范式与冗余(效率优先；往往牺牲范式)<br>拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);</p>\n<h3 id=\"2、字段类原则\"><a href=\"#2、字段类原则\" class=\"headerlink\" title=\"2、字段类原则\"></a>2、字段类原则</h3><p>用好数值类型(用合适的字段类型节约空间);<br>字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);<br>避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);<br>少用text类型(尽量使用varchar代替text字段);</p>\n<h3 id=\"3、索引类原则\"><a href=\"#3、索引类原则\" class=\"headerlink\" title=\"3、索引类原则\"></a>3、索引类原则</h3><p>合理使用索引(改善查询,减慢更新,索引一定不是越多越好);<br>字符字段必须建前缀索引;<br>不在索引做列运算;<br>innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);<br>不用外键(由程序保证约束);</p>\n<h3 id=\"4、sql类原则\"><a href=\"#4、sql类原则\" class=\"headerlink\" title=\"4、sql类原则\"></a>4、sql类原则</h3><p>sql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);<br>简单的事务;<br>避免使用trig/func(触发器、函数不用客户端程序取而代之);<br>不用select <em>(消耗cpu,io,内存,带宽,这种程序不具有扩展性);<br>OR改写为IN(or的效率是n级别);<br>OR改写为UNION(mysql的索引合并很弱智);<br>select id from t where phone = ’159′ or name = ‘john’;<br>=&gt;<br>select id from t where phone=’159′<br>union<br>select id from t where name=’jonh’<br>避免负向%;<br>慎用count(</em>);<br>limit高效分页(limit越大，效率越低);<br>使用union all替代union(union有去重开销);<br>少用连接join;<br>使用group by;<br>请使用同类型比较;<br>打散批量更新;</p>\n<h3 id=\"5、性能分析工具\"><a href=\"#5、性能分析工具\" class=\"headerlink\" title=\"5、性能分析工具\"></a>5、性能分析工具</h3><p>show profile;<br>mysqlsla;<br>mysqldumpslow;<br>explain;<br>show slow log;<br>show processlist;</p>\n","excerpt":"","more":"<h2 id=\"MYSQL数据库设计规范\"><a href=\"#MYSQL数据库设计规范\" class=\"headerlink\" title=\"MYSQL数据库设计规范\"></a>MYSQL数据库设计规范</h2><h3 id=\"1、数据库命名规范\"><a href=\"#1、数据库命名规范\" class=\"headerlink\" title=\"1、数据库命名规范\"></a>1、数据库命名规范</h3><p>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’_’组成;<br>命名简洁明确(长度不能超过30个字符);<br>例如：user, stat, log, 也可以wifi_user, wifi_stat, wifi_log给数据库加个前缀;<br>除非是备份数据库可以加0-9的自然数：user_db_20151210;</p>\n<h3 id=\"2、数据库表名命名规范\"><a href=\"#2、数据库表名命名规范\" class=\"headerlink\" title=\"2、数据库表名命名规范\"></a>2、数据库表名命名规范</h3><p>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’<em>‘组成;<br>命名简洁明确,多个单词用下划线’</em>‘分隔;<br>例如：user_login, user_profile, user_detail, user_role, user_role_relation,<br>user_role_right, user_role_right<em>relation<br>表前缀’user</em>‘可以有效的把相同关系的表显示在一起;</p>\n<h3 id=\"3、数据库表字段名命名规范\"><a href=\"#3、数据库表字段名命名规范\" class=\"headerlink\" title=\"3、数据库表字段名命名规范\"></a>3、数据库表字段名命名规范</h3><p>采用26个英文字母(区分大小写)和0-9的自然数(经常不需要)加上下划线’<em>‘组成;<br>命名简洁明确,多个单词用下划线’</em>‘分隔;<br>例如：user_login表字段 user_id, user_name, pass_word, eamil, tickit, status, mobile, add_time;<br>每个表中必须有自增主键,add_time(默认系统时间)<br>表与表之间的相关联字段名称要求尽可能的相同;</p>\n<h3 id=\"4、数据库表字段类型规范\"><a href=\"#4、数据库表字段类型规范\" class=\"headerlink\" title=\"4、数据库表字段类型规范\"></a>4、数据库表字段类型规范</h3><p>用尽量少的存储空间来存数一个字段的数据;<br>例如：能使用int就不要使用varchar、char,能用varchar(16)就不要使用varchar(256);<br>IP地址最好使用int类型;<br>固定长度的类型最好使用char,例如：邮编;<br>能使用tinyint就不要使用smallint,int;<br>最好给每个字段一个默认值,最好不能为null;</p>\n<h3 id=\"5、数据库表索引规范\"><a href=\"#5、数据库表索引规范\" class=\"headerlink\" title=\"5、数据库表索引规范\"></a>5、数据库表索引规范</h3><p>命名简洁明确,例如：user_login表user_name字段的索引应为user_name_index唯一索引;<br>为每个表创建一个主键索引;<br>为每个表创建合理的索引;<br>建立复合索引请慎重;</p>\n<h3 id=\"6、简单熟悉数据库范式\"><a href=\"#6、简单熟悉数据库范式\" class=\"headerlink\" title=\"6、简单熟悉数据库范式\"></a>6、简单熟悉数据库范式</h3><p>第一范式(1NF)：字段值具有原子性,不能再分(所有关系型数据库系统都满足第一范式);<br>例如：姓名字段,其中姓和名是一个整体,如果区分姓和名那么必须设立两个独立字段;</p>\n<p>第二范式(2NF)：一个表必须有主键,即每行数据都能被唯一的区分;<br>备注：必须先满足第一范式;</p>\n<p>第三范式(3NF)：一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;<br>备注：必须先满足第二范式;<br>数据库的三范式：<br>①字段不可分。<br>②有主键，非主键字段依赖主键。<br>③非主键字段不能互相依赖。</p>\n<p>备注：往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询;<br>例如：相册表中会添加图片的点击数字段,在相册图片表中也会添加图片的点击数字段;</p>\n<h2 id=\"MYSQL数据库设计原则\"><a href=\"#MYSQL数据库设计原则\" class=\"headerlink\" title=\"MYSQL数据库设计原则\"></a>MYSQL数据库设计原则</h2><h3 id=\"1、核心原则\"><a href=\"#1、核心原则\" class=\"headerlink\" title=\"1、核心原则\"></a>1、核心原则</h3><p>不在数据库做运算;<br>cpu计算务必移至业务层;<br>控制列数量(字段少而精,字段数建议在20以内);<br>平衡范式与冗余(效率优先；往往牺牲范式)<br>拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);</p>\n<h3 id=\"2、字段类原则\"><a href=\"#2、字段类原则\" class=\"headerlink\" title=\"2、字段类原则\"></a>2、字段类原则</h3><p>用好数值类型(用合适的字段类型节约空间);<br>字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);<br>避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);<br>少用text类型(尽量使用varchar代替text字段);</p>\n<h3 id=\"3、索引类原则\"><a href=\"#3、索引类原则\" class=\"headerlink\" title=\"3、索引类原则\"></a>3、索引类原则</h3><p>合理使用索引(改善查询,减慢更新,索引一定不是越多越好);<br>字符字段必须建前缀索引;<br>不在索引做列运算;<br>innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);<br>不用外键(由程序保证约束);</p>\n<h3 id=\"4、sql类原则\"><a href=\"#4、sql类原则\" class=\"headerlink\" title=\"4、sql类原则\"></a>4、sql类原则</h3><p>sql语句尽可能简单(一条sql只能在一个cpu运算,大语句拆小语句,减少锁时间,一条大sql可以堵死整个库);<br>简单的事务;<br>避免使用trig/func(触发器、函数不用客户端程序取而代之);<br>不用select <em>(消耗cpu,io,内存,带宽,这种程序不具有扩展性);<br>OR改写为IN(or的效率是n级别);<br>OR改写为UNION(mysql的索引合并很弱智);<br>select id from t where phone = ’159′ or name = ‘john’;<br>=&gt;<br>select id from t where phone=’159′<br>union<br>select id from t where name=’jonh’<br>避免负向%;<br>慎用count(</em>);<br>limit高效分页(limit越大，效率越低);<br>使用union all替代union(union有去重开销);<br>少用连接join;<br>使用group by;<br>请使用同类型比较;<br>打散批量更新;</p>\n<h3 id=\"5、性能分析工具\"><a href=\"#5、性能分析工具\" class=\"headerlink\" title=\"5、性能分析工具\"></a>5、性能分析工具</h3><p>show profile;<br>mysqlsla;<br>mysqldumpslow;<br>explain;<br>show slow log;<br>show processlist;</p>\n"},{"title":"Appollo配置中心原理","date":"2019-08-17T03:11:07.000Z","description":null,"_content":"\n## Appollo配置中心原理\n\n\n\n总体设计图：\n\n![image-20200825134410863](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825134410863.png)\n\nApollo的总体设计，自下而上看：\n\n- Config Service 提供配置的读取、推送等功能，服务对象是Apollo客户端\n- Admin Service 提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）\n- Config Service 和 Admin Service 都是多实例、无状态部署，所以需要将自己注册到 Eureka 中并保持心跳\n- 在Eureka之上架了一层 Meta Server 用于封装 Eureka 的服务发现接口\n- Client 通过域名访问 Meta Server 获取 Config Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Client 侧会做 load balance、错误重试\n- Portal 通过域名访问 Meta Server 获取 Admin Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Portal 侧会做 load balance、错误重试\n- 为了简化部署，实际上会把 Config Service、Eureka 和 Meta Server 三个逻辑角色部署在同一个JVM进程中\n\n\n\n\n\n#### 四个核心模块及其主要功能\n\n1. **ConfigService**\n\n2. - 提供配置获取接口\n   - 提供配置推送接口\n   - 服务于Apollo客户端\n\n3. **AdminService**\n\n4. - 提供配置管理接口\n   - 提供配置修改发布接口\n   - 服务于管理界面Portal\n\n5. **Client**\n\n6. - 为应用获取配置，支持实时更新\n   - 通过MetaServer获取ConfigService的服务列表\n   - 使用客户端软负载SLB方式调用ConfigService\n\n7. **Portal**\n\n8. - 配置管理界面\n   - 通过MetaServer获取AdminService的服务列表\n   - 使用客户端软负载SLB方式调用AdminService\n\n#### 三个辅助服务发现模块\n\n1. **Eureka**\n\n2. - 用于服务发现和注册\n   - Config/AdminService注册实例并定期报心跳\n   - 和ConfigService住在一起部署\n\n3. **MetaServer**\n\n4. - Portal通过域名访问MetaServer获取AdminService的地址列表\n   - Client通过域名访问MetaServer获取ConfigService的地址列表\n   - 相当于一个Eureka Proxy\n   - 逻辑角色，和ConfigService住在一起部署\n\n5. **NginxLB**\n\n6. - 和域名系统配合，协助Portal访问MetaServer获取AdminService地址列表\n   - 和域名系统配合，协助Client访问MetaServer获取ConfigService地址列表\n   - 和域名系统配合，协助用户访问Portal进行配置管理\n\n\n\n## Apollo客户端设计\n\n![image-20200825140157084](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825140157084.png)\n\n上图简要描述了Apollo客户端的实现原理：\n\n1. 客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。（通过Http Long Polling实现）\n2. 客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。\n\n- 这是一个fallback机制，为了防止推送机制失效导致配置不更新\n- 客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified\n- 定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: apollo.refreshInterval来覆盖，单位为分钟。\n\n1. 客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中\n2. 客户端会把从服务端获取到的配置在本地文件系统缓存一份\n\n- 在遇到服务不可用，或网络不通的时候，依然能从本地恢复配置\n\n1. 应用程序从Apollo客户端获取最新的配置、订阅配置更新通知\n\n\n\n## 配置更新推送实现\n\n### 配置发送后的实时推送设计\n\n![image-20200825141138936](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825141138936.png)\n\n上图简要描述了配置发布的大致过程：\n\n1. 用户在Portal操作配置发布\n2. Portal调用Admin Service的接口操作发布\n3. Admin Service发布配置后，发送ReleaseMessage给各个Config Service\n4. Config Service收到ReleaseMessage后，通知对应的客户端\n\n之前提到了Apollo客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。长连接实际上是通过Http Long Polling实现的，具体而言：\n\n- 客户端发起一个Http请求到服务端\n- 服务端会保持住这个连接60秒\n- 如果在60秒内有客户端关心的配置变化，被保持住的客户端请求会立即返回，并告知客户端有配置变化的namespace信息，客户端会据此拉取对应namespace的最新配置\n- 如果在60秒内没有客户端关心的配置变化，那么会返回Http状态码304给客户端\n- 客户端在收到服务端请求后会立即重新发起连接，回到第一步\n\n考虑到会有数万客户端向服务端发起长连，在服务端使用了async servlet(Spring DeferredResult)来服务Http Long Polling请求。\n\n","source":"_posts/Appollo配置中心原理.md","raw":"---\ntitle: Appollo配置中心原理\ncategories: [Appollo]\ntags: [Appollo]\ndate: 2019-08-17 11:11:07\ndescription:\n---\n\n## Appollo配置中心原理\n\n\n\n总体设计图：\n\n![image-20200825134410863](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825134410863.png)\n\nApollo的总体设计，自下而上看：\n\n- Config Service 提供配置的读取、推送等功能，服务对象是Apollo客户端\n- Admin Service 提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）\n- Config Service 和 Admin Service 都是多实例、无状态部署，所以需要将自己注册到 Eureka 中并保持心跳\n- 在Eureka之上架了一层 Meta Server 用于封装 Eureka 的服务发现接口\n- Client 通过域名访问 Meta Server 获取 Config Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Client 侧会做 load balance、错误重试\n- Portal 通过域名访问 Meta Server 获取 Admin Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Portal 侧会做 load balance、错误重试\n- 为了简化部署，实际上会把 Config Service、Eureka 和 Meta Server 三个逻辑角色部署在同一个JVM进程中\n\n\n\n\n\n#### 四个核心模块及其主要功能\n\n1. **ConfigService**\n\n2. - 提供配置获取接口\n   - 提供配置推送接口\n   - 服务于Apollo客户端\n\n3. **AdminService**\n\n4. - 提供配置管理接口\n   - 提供配置修改发布接口\n   - 服务于管理界面Portal\n\n5. **Client**\n\n6. - 为应用获取配置，支持实时更新\n   - 通过MetaServer获取ConfigService的服务列表\n   - 使用客户端软负载SLB方式调用ConfigService\n\n7. **Portal**\n\n8. - 配置管理界面\n   - 通过MetaServer获取AdminService的服务列表\n   - 使用客户端软负载SLB方式调用AdminService\n\n#### 三个辅助服务发现模块\n\n1. **Eureka**\n\n2. - 用于服务发现和注册\n   - Config/AdminService注册实例并定期报心跳\n   - 和ConfigService住在一起部署\n\n3. **MetaServer**\n\n4. - Portal通过域名访问MetaServer获取AdminService的地址列表\n   - Client通过域名访问MetaServer获取ConfigService的地址列表\n   - 相当于一个Eureka Proxy\n   - 逻辑角色，和ConfigService住在一起部署\n\n5. **NginxLB**\n\n6. - 和域名系统配合，协助Portal访问MetaServer获取AdminService地址列表\n   - 和域名系统配合，协助Client访问MetaServer获取ConfigService地址列表\n   - 和域名系统配合，协助用户访问Portal进行配置管理\n\n\n\n## Apollo客户端设计\n\n![image-20200825140157084](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825140157084.png)\n\n上图简要描述了Apollo客户端的实现原理：\n\n1. 客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。（通过Http Long Polling实现）\n2. 客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。\n\n- 这是一个fallback机制，为了防止推送机制失效导致配置不更新\n- 客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified\n- 定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: apollo.refreshInterval来覆盖，单位为分钟。\n\n1. 客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中\n2. 客户端会把从服务端获取到的配置在本地文件系统缓存一份\n\n- 在遇到服务不可用，或网络不通的时候，依然能从本地恢复配置\n\n1. 应用程序从Apollo客户端获取最新的配置、订阅配置更新通知\n\n\n\n## 配置更新推送实现\n\n### 配置发送后的实时推送设计\n\n![image-20200825141138936](https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825141138936.png)\n\n上图简要描述了配置发布的大致过程：\n\n1. 用户在Portal操作配置发布\n2. Portal调用Admin Service的接口操作发布\n3. Admin Service发布配置后，发送ReleaseMessage给各个Config Service\n4. Config Service收到ReleaseMessage后，通知对应的客户端\n\n之前提到了Apollo客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。长连接实际上是通过Http Long Polling实现的，具体而言：\n\n- 客户端发起一个Http请求到服务端\n- 服务端会保持住这个连接60秒\n- 如果在60秒内有客户端关心的配置变化，被保持住的客户端请求会立即返回，并告知客户端有配置变化的namespace信息，客户端会据此拉取对应namespace的最新配置\n- 如果在60秒内没有客户端关心的配置变化，那么会返回Http状态码304给客户端\n- 客户端在收到服务端请求后会立即重新发起连接，回到第一步\n\n考虑到会有数万客户端向服务端发起长连，在服务端使用了async servlet(Spring DeferredResult)来服务Http Long Polling请求。\n\n","slug":"Appollo配置中心原理","published":1,"updated":"2020-09-28T11:08:19.618Z","_id":"ckfmfh7eg0001t8qr6fgz14kx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Appollo配置中心原理\"><a href=\"#Appollo配置中心原理\" class=\"headerlink\" title=\"Appollo配置中心原理\"></a>Appollo配置中心原理</h2><p>总体设计图：</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825134410863.png\" alt=\"image-20200825134410863\"></p>\n<p>Apollo的总体设计，自下而上看：</p>\n<ul>\n<li>Config Service 提供配置的读取、推送等功能，服务对象是Apollo客户端</li>\n<li>Admin Service 提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）</li>\n<li>Config Service 和 Admin Service 都是多实例、无状态部署，所以需要将自己注册到 Eureka 中并保持心跳</li>\n<li>在Eureka之上架了一层 Meta Server 用于封装 Eureka 的服务发现接口</li>\n<li>Client 通过域名访问 Meta Server 获取 Config Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Client 侧会做 load balance、错误重试</li>\n<li>Portal 通过域名访问 Meta Server 获取 Admin Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Portal 侧会做 load balance、错误重试</li>\n<li>为了简化部署，实际上会把 Config Service、Eureka 和 Meta Server 三个逻辑角色部署在同一个JVM进程中</li>\n</ul>\n<h4 id=\"四个核心模块及其主要功能\"><a href=\"#四个核心模块及其主要功能\" class=\"headerlink\" title=\"四个核心模块及其主要功能\"></a>四个核心模块及其主要功能</h4><ol>\n<li><p><strong>ConfigService</strong></p>\n</li>\n<li><ul>\n<li>提供配置获取接口</li>\n<li>提供配置推送接口</li>\n<li>服务于Apollo客户端</li>\n</ul>\n</li>\n<li><p><strong>AdminService</strong></p>\n</li>\n<li><ul>\n<li>提供配置管理接口</li>\n<li>提供配置修改发布接口</li>\n<li>服务于管理界面Portal</li>\n</ul>\n</li>\n<li><p><strong>Client</strong></p>\n</li>\n<li><ul>\n<li>为应用获取配置，支持实时更新</li>\n<li>通过MetaServer获取ConfigService的服务列表</li>\n<li>使用客户端软负载SLB方式调用ConfigService</li>\n</ul>\n</li>\n<li><p><strong>Portal</strong></p>\n</li>\n<li><ul>\n<li>配置管理界面</li>\n<li>通过MetaServer获取AdminService的服务列表</li>\n<li>使用客户端软负载SLB方式调用AdminService</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三个辅助服务发现模块\"><a href=\"#三个辅助服务发现模块\" class=\"headerlink\" title=\"三个辅助服务发现模块\"></a>三个辅助服务发现模块</h4><ol>\n<li><p><strong>Eureka</strong></p>\n</li>\n<li><ul>\n<li>用于服务发现和注册</li>\n<li>Config/AdminService注册实例并定期报心跳</li>\n<li>和ConfigService住在一起部署</li>\n</ul>\n</li>\n<li><p><strong>MetaServer</strong></p>\n</li>\n<li><ul>\n<li>Portal通过域名访问MetaServer获取AdminService的地址列表</li>\n<li>Client通过域名访问MetaServer获取ConfigService的地址列表</li>\n<li>相当于一个Eureka Proxy</li>\n<li>逻辑角色，和ConfigService住在一起部署</li>\n</ul>\n</li>\n<li><p><strong>NginxLB</strong></p>\n</li>\n<li><ul>\n<li>和域名系统配合，协助Portal访问MetaServer获取AdminService地址列表</li>\n<li>和域名系统配合，协助Client访问MetaServer获取ConfigService地址列表</li>\n<li>和域名系统配合，协助用户访问Portal进行配置管理</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Apollo客户端设计\"><a href=\"#Apollo客户端设计\" class=\"headerlink\" title=\"Apollo客户端设计\"></a>Apollo客户端设计</h2><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825140157084.png\" alt=\"image-20200825140157084\"></p>\n<p>上图简要描述了Apollo客户端的实现原理：</p>\n<ol>\n<li>客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。（通过Http Long Polling实现）</li>\n<li>客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。</li>\n</ol>\n<ul>\n<li>这是一个fallback机制，为了防止推送机制失效导致配置不更新</li>\n<li>客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified</li>\n<li>定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: apollo.refreshInterval来覆盖，单位为分钟。</li>\n</ul>\n<ol>\n<li>客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中</li>\n<li>客户端会把从服务端获取到的配置在本地文件系统缓存一份</li>\n</ol>\n<ul>\n<li>在遇到服务不可用，或网络不通的时候，依然能从本地恢复配置</li>\n</ul>\n<ol>\n<li>应用程序从Apollo客户端获取最新的配置、订阅配置更新通知</li>\n</ol>\n<h2 id=\"配置更新推送实现\"><a href=\"#配置更新推送实现\" class=\"headerlink\" title=\"配置更新推送实现\"></a>配置更新推送实现</h2><h3 id=\"配置发送后的实时推送设计\"><a href=\"#配置发送后的实时推送设计\" class=\"headerlink\" title=\"配置发送后的实时推送设计\"></a>配置发送后的实时推送设计</h3><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825141138936.png\" alt=\"image-20200825141138936\"></p>\n<p>上图简要描述了配置发布的大致过程：</p>\n<ol>\n<li>用户在Portal操作配置发布</li>\n<li>Portal调用Admin Service的接口操作发布</li>\n<li>Admin Service发布配置后，发送ReleaseMessage给各个Config Service</li>\n<li>Config Service收到ReleaseMessage后，通知对应的客户端</li>\n</ol>\n<p>之前提到了Apollo客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。长连接实际上是通过Http Long Polling实现的，具体而言：</p>\n<ul>\n<li>客户端发起一个Http请求到服务端</li>\n<li>服务端会保持住这个连接60秒</li>\n<li>如果在60秒内有客户端关心的配置变化，被保持住的客户端请求会立即返回，并告知客户端有配置变化的namespace信息，客户端会据此拉取对应namespace的最新配置</li>\n<li>如果在60秒内没有客户端关心的配置变化，那么会返回Http状态码304给客户端</li>\n<li>客户端在收到服务端请求后会立即重新发起连接，回到第一步</li>\n</ul>\n<p>考虑到会有数万客户端向服务端发起长连，在服务端使用了async servlet(Spring DeferredResult)来服务Http Long Polling请求。</p>\n","excerpt":"","more":"<h2 id=\"Appollo配置中心原理\"><a href=\"#Appollo配置中心原理\" class=\"headerlink\" title=\"Appollo配置中心原理\"></a>Appollo配置中心原理</h2><p>总体设计图：</p>\n<p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825134410863.png\" alt=\"image-20200825134410863\"></p>\n<p>Apollo的总体设计，自下而上看：</p>\n<ul>\n<li>Config Service 提供配置的读取、推送等功能，服务对象是Apollo客户端</li>\n<li>Admin Service 提供配置的修改、发布等功能，服务对象是Apollo Portal（管理界面）</li>\n<li>Config Service 和 Admin Service 都是多实例、无状态部署，所以需要将自己注册到 Eureka 中并保持心跳</li>\n<li>在Eureka之上架了一层 Meta Server 用于封装 Eureka 的服务发现接口</li>\n<li>Client 通过域名访问 Meta Server 获取 Config Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Client 侧会做 load balance、错误重试</li>\n<li>Portal 通过域名访问 Meta Server 获取 Admin Service 服务列表（IP+Port），而后直接通过 IP+Port 访问服务，同时在 Portal 侧会做 load balance、错误重试</li>\n<li>为了简化部署，实际上会把 Config Service、Eureka 和 Meta Server 三个逻辑角色部署在同一个JVM进程中</li>\n</ul>\n<h4 id=\"四个核心模块及其主要功能\"><a href=\"#四个核心模块及其主要功能\" class=\"headerlink\" title=\"四个核心模块及其主要功能\"></a>四个核心模块及其主要功能</h4><ol>\n<li><p><strong>ConfigService</strong></p>\n</li>\n<li><ul>\n<li>提供配置获取接口</li>\n<li>提供配置推送接口</li>\n<li>服务于Apollo客户端</li>\n</ul>\n</li>\n<li><p><strong>AdminService</strong></p>\n</li>\n<li><ul>\n<li>提供配置管理接口</li>\n<li>提供配置修改发布接口</li>\n<li>服务于管理界面Portal</li>\n</ul>\n</li>\n<li><p><strong>Client</strong></p>\n</li>\n<li><ul>\n<li>为应用获取配置，支持实时更新</li>\n<li>通过MetaServer获取ConfigService的服务列表</li>\n<li>使用客户端软负载SLB方式调用ConfigService</li>\n</ul>\n</li>\n<li><p><strong>Portal</strong></p>\n</li>\n<li><ul>\n<li>配置管理界面</li>\n<li>通过MetaServer获取AdminService的服务列表</li>\n<li>使用客户端软负载SLB方式调用AdminService</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"三个辅助服务发现模块\"><a href=\"#三个辅助服务发现模块\" class=\"headerlink\" title=\"三个辅助服务发现模块\"></a>三个辅助服务发现模块</h4><ol>\n<li><p><strong>Eureka</strong></p>\n</li>\n<li><ul>\n<li>用于服务发现和注册</li>\n<li>Config/AdminService注册实例并定期报心跳</li>\n<li>和ConfigService住在一起部署</li>\n</ul>\n</li>\n<li><p><strong>MetaServer</strong></p>\n</li>\n<li><ul>\n<li>Portal通过域名访问MetaServer获取AdminService的地址列表</li>\n<li>Client通过域名访问MetaServer获取ConfigService的地址列表</li>\n<li>相当于一个Eureka Proxy</li>\n<li>逻辑角色，和ConfigService住在一起部署</li>\n</ul>\n</li>\n<li><p><strong>NginxLB</strong></p>\n</li>\n<li><ul>\n<li>和域名系统配合，协助Portal访问MetaServer获取AdminService地址列表</li>\n<li>和域名系统配合，协助Client访问MetaServer获取ConfigService地址列表</li>\n<li>和域名系统配合，协助用户访问Portal进行配置管理</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Apollo客户端设计\"><a href=\"#Apollo客户端设计\" class=\"headerlink\" title=\"Apollo客户端设计\"></a>Apollo客户端设计</h2><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825140157084.png\" alt=\"image-20200825140157084\"></p>\n<p>上图简要描述了Apollo客户端的实现原理：</p>\n<ol>\n<li>客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。（通过Http Long Polling实现）</li>\n<li>客户端还会定时从Apollo配置中心服务端拉取应用的最新配置。</li>\n</ol>\n<ul>\n<li>这是一个fallback机制，为了防止推送机制失效导致配置不更新</li>\n<li>客户端定时拉取会上报本地版本，所以一般情况下，对于定时拉取的操作，服务端都会返回304 - Not Modified</li>\n<li>定时频率默认为每5分钟拉取一次，客户端也可以通过在运行时指定System Property: apollo.refreshInterval来覆盖，单位为分钟。</li>\n</ul>\n<ol>\n<li>客户端从Apollo配置中心服务端获取到应用的最新配置后，会保存在内存中</li>\n<li>客户端会把从服务端获取到的配置在本地文件系统缓存一份</li>\n</ol>\n<ul>\n<li>在遇到服务不可用，或网络不通的时候，依然能从本地恢复配置</li>\n</ul>\n<ol>\n<li>应用程序从Apollo客户端获取最新的配置、订阅配置更新通知</li>\n</ol>\n<h2 id=\"配置更新推送实现\"><a href=\"#配置更新推送实现\" class=\"headerlink\" title=\"配置更新推送实现\"></a>配置更新推送实现</h2><h3 id=\"配置发送后的实时推送设计\"><a href=\"#配置发送后的实时推送设计\" class=\"headerlink\" title=\"配置发送后的实时推送设计\"></a>配置发送后的实时推送设计</h3><p><img src=\"https://gitee.com/idea4j/imagerep/raw/master/images/image-20200825141138936.png\" alt=\"image-20200825141138936\"></p>\n<p>上图简要描述了配置发布的大致过程：</p>\n<ol>\n<li>用户在Portal操作配置发布</li>\n<li>Portal调用Admin Service的接口操作发布</li>\n<li>Admin Service发布配置后，发送ReleaseMessage给各个Config Service</li>\n<li>Config Service收到ReleaseMessage后，通知对应的客户端</li>\n</ol>\n<p>之前提到了Apollo客户端和服务端保持了一个长连接，从而能第一时间获得配置更新的推送。长连接实际上是通过Http Long Polling实现的，具体而言：</p>\n<ul>\n<li>客户端发起一个Http请求到服务端</li>\n<li>服务端会保持住这个连接60秒</li>\n<li>如果在60秒内有客户端关心的配置变化，被保持住的客户端请求会立即返回，并告知客户端有配置变化的namespace信息，客户端会据此拉取对应namespace的最新配置</li>\n<li>如果在60秒内没有客户端关心的配置变化，那么会返回Http状态码304给客户端</li>\n<li>客户端在收到服务端请求后会立即重新发起连接，回到第一步</li>\n</ul>\n<p>考虑到会有数万客户端向服务端发起长连，在服务端使用了async servlet(Spring DeferredResult)来服务Http Long Polling请求。</p>\n"},{"title":"Bean的生命周期","date":"2020-01-17T03:11:07.000Z","description":null,"_content":"\nBean的生命周期\n\n1.调用Bean的构造方法创建Bean；\n\n2.通过反射调用setter方法进行属性的依赖注入；\n\n3.如果bean实现了BeanNameAware，则为bean设置名称；\n\n4.如果bean实现了BeanFactoryAware，会把 BeanFactory 设置给 Bean；\n\n5.如果bean实现了ApplicationContextAware，，会给 Bean 设置 ApplictionContext；\n\n6.如果实现了BeanPostProcessor接口，则执行前置处理方法；\n\n7.实现了InitializingBean接口的话，执行afterPropertiesSet方法\n\n8.执行自定义的init方法；\n\n9.执行BeanPostProcessor接口的后置处理方法；\n\n","source":"_posts/Bean的生命周期.md","raw":"---\ntitle: Bean的生命周期\ncategories: [spring]\ntags: [spring]\ndate: 2020-01-17 11:11:07\ndescription:\n---\n\nBean的生命周期\n\n1.调用Bean的构造方法创建Bean；\n\n2.通过反射调用setter方法进行属性的依赖注入；\n\n3.如果bean实现了BeanNameAware，则为bean设置名称；\n\n4.如果bean实现了BeanFactoryAware，会把 BeanFactory 设置给 Bean；\n\n5.如果bean实现了ApplicationContextAware，，会给 Bean 设置 ApplictionContext；\n\n6.如果实现了BeanPostProcessor接口，则执行前置处理方法；\n\n7.实现了InitializingBean接口的话，执行afterPropertiesSet方法\n\n8.执行自定义的init方法；\n\n9.执行BeanPostProcessor接口的后置处理方法；\n\n","slug":"Bean的生命周期","published":1,"updated":"2020-09-28T11:08:55.939Z","_id":"ckfmfhuf60006t8qrjicj8g92","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Bean的生命周期</p>\n<p>1.调用Bean的构造方法创建Bean；</p>\n<p>2.通过反射调用setter方法进行属性的依赖注入；</p>\n<p>3.如果bean实现了BeanNameAware，则为bean设置名称；</p>\n<p>4.如果bean实现了BeanFactoryAware，会把 BeanFactory 设置给 Bean；</p>\n<p>5.如果bean实现了ApplicationContextAware，，会给 Bean 设置 ApplictionContext；</p>\n<p>6.如果实现了BeanPostProcessor接口，则执行前置处理方法；</p>\n<p>7.实现了InitializingBean接口的话，执行afterPropertiesSet方法</p>\n<p>8.执行自定义的init方法；</p>\n<p>9.执行BeanPostProcessor接口的后置处理方法；</p>\n","excerpt":"","more":"<p>Bean的生命周期</p>\n<p>1.调用Bean的构造方法创建Bean；</p>\n<p>2.通过反射调用setter方法进行属性的依赖注入；</p>\n<p>3.如果bean实现了BeanNameAware，则为bean设置名称；</p>\n<p>4.如果bean实现了BeanFactoryAware，会把 BeanFactory 设置给 Bean；</p>\n<p>5.如果bean实现了ApplicationContextAware，，会给 Bean 设置 ApplictionContext；</p>\n<p>6.如果实现了BeanPostProcessor接口，则执行前置处理方法；</p>\n<p>7.实现了InitializingBean接口的话，执行afterPropertiesSet方法</p>\n<p>8.执行自定义的init方法；</p>\n<p>9.执行BeanPostProcessor接口的后置处理方法；</p>\n"}],"PostAsset":[{"_id":"source/_posts/builderpattern/builder.jpg","slug":"builder.jpg","post":"ckfmf4ykc0039esqro0v176lf","modified":0,"renderable":0},{"_id":"source/_posts/node1/node1.gif","slug":"node1.gif","post":"ckfmf4yn7006yesqrcmeot0rk","modified":0,"renderable":0},{"_id":"source/_posts/node4/node4.jpg","slug":"node4.jpg","post":"ckfmf4ynp007qesqratv2bwva","modified":0,"renderable":0},{"_id":"source/_posts/node8/node8.jpg","slug":"node8.jpg","post":"ckfmf4yny0082esqriw18ju1i","modified":0,"renderable":0},{"_id":"source/_posts/mvnenvironmentseparate/code.jpg","slug":"code.jpg","post":"ckfmf4ymq006cesqr7kcmu5kt","modified":0,"renderable":0},{"_id":"source/_posts/mvnenvironmentseparate/maven2.jpg","slug":"maven2.jpg","post":"ckfmf4ymq006cesqr7kcmu5kt","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckfmf4yhh0002esqrp4zhmree","category_id":"ckfmf4yhp0006esqr5ngpflg2","_id":"ckfmf4yhx000eesqryis08nn5"},{"post_id":"ckfmf4yhm0004esqrbxqq1n6d","category_id":"ckfmf4yhu000besqrotrumpjt","_id":"ckfmf4yi2000lesqreh80rfhx"},{"post_id":"ckfmf4yhq0007esqrza9fu02f","category_id":"ckfmf4yhz000hesqra43vkfhl","_id":"ckfmf4yi8000resqrq074g1ak"},{"post_id":"ckfmf4yhr0008esqry50pqgnw","category_id":"ckfmf4yhz000hesqra43vkfhl","_id":"ckfmf4yib000wesqrs523bjkk"},{"post_id":"ckfmf4yhw000desqrqhvcj5rf","category_id":"ckfmf4yi9000tesqrc0qw7sm4","_id":"ckfmf4yif0013esqr5sngefax"},{"post_id":"ckfmf4yhy000fesqr0u44c6k1","category_id":"ckfmf4yic000yesqr08p0idw8","_id":"ckfmf4yij0019esqri143xz8r"},{"post_id":"ckfmf4yi0000jesqrusenqvbo","category_id":"ckfmf4yih0016esqrfsmlqb19","_id":"ckfmf4yin001gesqrlfa24rmw"},{"post_id":"ckfmf4yi1000kesqrgul9b834","category_id":"ckfmf4yil001cesqrz0i4auks","_id":"ckfmf4yir001mesqr4529rz2s"},{"post_id":"ckfmf4yi5000oesqr52n8fhv1","category_id":"ckfmf4yio001iesqrlbfo6sns","_id":"ckfmf4yiu001qesqr4gie0pyy"},{"post_id":"ckfmf4yit001pesqr7fadjpv1","category_id":"ckfmf4yio001iesqrlbfo6sns","_id":"ckfmf4yiw001uesqrggo8cg8v"},{"post_id":"ckfmf4yi7000qesqr7vl99173","category_id":"ckfmf4yis001oesqrk9j4ccci","_id":"ckfmf4yix001wesqr6artkkk1"},{"post_id":"ckfmf4yi9000uesqr7a3yqrjm","category_id":"ckfmf4yiv001sesqrbgc3zo51","_id":"ckfmf4yiz0020esqrqns2sbzt"},{"post_id":"ckfmf4yia000vesqr98n59evz","category_id":"ckfmf4yiy001yesqrscjdk9pn","_id":"ckfmf4yj10024esqrkaa9ojkh"},{"post_id":"ckfmf4yic000zesqruf0ogy01","category_id":"ckfmf4yiy001yesqrscjdk9pn","_id":"ckfmf4yj30028esqrr3xgbv4p"},{"post_id":"ckfmf4yie0011esqrzgigu2ib","category_id":"ckfmf4yj10025esqrnqvqcvw9","_id":"ckfmf4yj5002cesqrianinxh8"},{"post_id":"ckfmf4yig0015esqrleowj95b","category_id":"ckfmf4yj30029esqryxriz72k","_id":"ckfmf4yj7002gesqr3gwvvqtj"},{"post_id":"ckfmf4yim001eesqrmrbspwpd","category_id":"ckfmf4yj6002eesqrxr1c6jgq","_id":"ckfmf4yj8002jesqro0rb6wyp"},{"post_id":"ckfmf4yin001fesqr6n1y2p3z","category_id":"ckfmf4yj8002iesqrj0fagy48","_id":"ckfmf4yjb002oesqrnz26fn4k"},{"post_id":"ckfmf4yir001lesqrp17855au","category_id":"ckfmf4yj9002lesqr1nv2sahj","_id":"ckfmf4yjc002qesqrk2miml0a"},{"post_id":"ckfmf4yk70033esqrhzuh53gs","category_id":"ckfmf4ykb0038esqr07zizunw","_id":"ckfmf4ykj003iesqru5otsr8x"},{"post_id":"ckfmf4ykf003desqrl47mwmjm","category_id":"ckfmf4yhz000hesqra43vkfhl","_id":"ckfmf4ykl003mesqrm6d8f3e7"},{"post_id":"ckfmf4ykh003gesqrixxev105","category_id":"ckfmf4yhz000hesqra43vkfhl","_id":"ckfmf4yko003qesqrpfcb4q8q"},{"post_id":"ckfmf4yk90035esqrdz6ixgmk","category_id":"ckfmf4ykg003eesqrt7g576um","_id":"ckfmf4yks003uesqrvsuocg5r"},{"post_id":"ckfmf4ykm003nesqrnfuw3djq","category_id":"ckfmf4yhz000hesqra43vkfhl","_id":"ckfmf4ykv003yesqrfqr11ufd"},{"post_id":"ckfmf4yke003cesqrbr0lx97a","category_id":"ckfmf4ykk003kesqrhf3u17nf","_id":"ckfmf4yky0042esqr1n8ahcr7"},{"post_id":"ckfmf4ykt003vesqrv02qhqcs","category_id":"ckfmf4yks003tesqr6ntj7bd9","_id":"ckfmf4yl00045esqri1xmtwyf"},{"post_id":"ckfmf4ykj003jesqryjbrq99m","category_id":"ckfmf4yks003tesqr6ntj7bd9","_id":"ckfmf4yl40049esqrctcr1ppp"},{"post_id":"ckfmf4ykp003resqri0dpneqp","category_id":"ckfmf4ykx0041esqrl4mevtu7","_id":"ckfmf4yl9004gesqr9aanbnrk"},{"post_id":"ckfmf4ykv003zesqrkvuhyaps","category_id":"ckfmf4ykx0041esqrl4mevtu7","_id":"ckfmf4yle004lesqr9h2lne5i"},{"post_id":"ckfmf4yky0043esqrlzrlgt24","category_id":"ckfmf4ylc004iesqr0y4t6u24","_id":"ckfmf4ylm004uesqr39ih7d6c"},{"post_id":"ckfmf4ylh004pesqrhp1s2vsz","category_id":"ckfmf4yih0016esqrfsmlqb19","_id":"ckfmf4ylr004zesqrtu6z1ffq"},{"post_id":"ckfmf4yl10046esqru8lxhcqj","category_id":"ckfmf4ylh004oesqr02agu6y3","_id":"ckfmf4ylt0053esqrx3amp5oz"},{"post_id":"ckfmf4yl5004aesqr546e65i5","category_id":"ckfmf4ylh004oesqr02agu6y3","_id":"ckfmf4ylx0059esqr0eeq35kx"},{"post_id":"ckfmf4yl7004desqrrrnyqaor","category_id":"ckfmf4ylt0052esqrlkex9rzt","_id":"ckfmf4ym2005gesqr8qhosxuo"},{"post_id":"ckfmf4yly005besqrvnm7dc43","category_id":"ckfmf4yio001iesqrlbfo6sns","_id":"ckfmf4ym5005kesqr1uiru22j"},{"post_id":"ckfmf4ym0005desqr18p5t873","category_id":"ckfmf4yio001iesqrlbfo6sns","_id":"ckfmf4ym7005oesqrlq1cyb7h"},{"post_id":"ckfmf4yla004hesqro3co2bwx","category_id":"ckfmf4yly005aesqr42b65s8e","_id":"ckfmf4yma005sesqrkyn6bocz"},{"post_id":"ckfmf4ylc004jesqrcl2i9ibi","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4ymd005wesqrx88my2gi"},{"post_id":"ckfmf4yle004mesqrgkoeqclm","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4ymi0062esqr5hncmtyx"},{"post_id":"ckfmf4ylk004sesqr8kcwer4f","category_id":"ckfmf4yme005yesqrdweenchn","_id":"ckfmf4ymn0068esqr3chb2d37"},{"post_id":"ckfmf4ylo004wesqrsi0emlq1","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4ymr006eesqr6o0nbpje"},{"post_id":"ckfmf4yml0066esqrxk7nplpr","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4ymu006iesqryed32bpp"},{"post_id":"ckfmf4ylr0050esqr3rx31tr3","category_id":"ckfmf4ymn0069esqr4g2fst72","_id":"ckfmf4ymy006mesqr4p5594p8"},{"post_id":"ckfmf4ylu0054esqri4anrguk","category_id":"ckfmf4yms006fesqri6j8l0c3","_id":"ckfmf4yn2006sesqrc18km7s9"},{"post_id":"ckfmf4ymy006nesqrrsszgqmi","category_id":"ckfmf4yis001oesqrk9j4ccci","_id":"ckfmf4yn5006wesqrqbalic6e"},{"post_id":"ckfmf4ylw0057esqrevc12viq","category_id":"ckfmf4ymz006oesqrkbxmstrd","_id":"ckfmf4yn80070esqro5wob6i1"},{"post_id":"ckfmf4yn3006tesqro9lv14tn","category_id":"ckfmf4yis001oesqrk9j4ccci","_id":"ckfmf4yna0074esqrnqp8w6sj"},{"post_id":"ckfmf4yn5006xesqringnaza1","category_id":"ckfmf4ykx0041esqrl4mevtu7","_id":"ckfmf4ynd0077esqrzj17mc4q"},{"post_id":"ckfmf4ym3005hesqrwn5nntaj","category_id":"ckfmf4yn4006uesqrx1kmd3ku","_id":"ckfmf4yng007cesqreonnybue"},{"post_id":"ckfmf4ym5005lesqrfvh20xxa","category_id":"ckfmf4yn90072esqr07c4o1ei","_id":"ckfmf4yni007fesqr1m88os1v"},{"post_id":"ckfmf4ym8005pesqrmaxli9e4","category_id":"ckfmf4yne0079esqrbmxw60bt","_id":"ckfmf4ynm007lesqrfdmrg7kj"},{"post_id":"ckfmf4yma005tesqrhwkdoqeq","category_id":"ckfmf4ynj007hesqricpq5x7c","_id":"ckfmf4ynr007sesqr513bhvwp"},{"post_id":"ckfmf4ymc005vesqrtkcs67w8","category_id":"ckfmf4ynn007nesqracvcaljb","_id":"ckfmf4ynv007yesqrf2elklzp"},{"post_id":"ckfmf4yme005zesqrfdik4rmz","category_id":"ckfmf4yns007tesqrh8lkcb3y","_id":"ckfmf4yo00084esqrtb0owue0"},{"post_id":"ckfmf4ymh0061esqr4r9sz0us","category_id":"ckfmf4ynw007zesqr5b3xnbd2","_id":"ckfmf4yo5008aesqrqn636be2"},{"post_id":"ckfmf4ymk0065esqrti9e3bfw","category_id":"ckfmf4yms006fesqri6j8l0c3","_id":"ckfmf4yo9008gesqrxyxcd27i"},{"post_id":"ckfmf4ymo006aesqrhpc3swae","category_id":"ckfmf4ynj007hesqricpq5x7c","_id":"ckfmf4yod008mesqrzmbrqj00"},{"post_id":"ckfmf4yoa008hesqr02we3x44","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4yog008qesqr9f52d65u"},{"post_id":"ckfmf4ymq006cesqr7kcmu5kt","category_id":"ckfmf4ynj007hesqricpq5x7c","_id":"ckfmf4yoh008tesqrjuqijesw"},{"post_id":"ckfmf4yoe008nesqr0kd91xsu","category_id":"ckfmf4yhu000besqrotrumpjt","_id":"ckfmf4yok008xesqrcpk2ud3e"},{"post_id":"ckfmf4yog008resqrlxmycvqr","category_id":"ckfmf4yis001oesqrk9j4ccci","_id":"ckfmf4yom0090esqremew7ler"},{"post_id":"ckfmf4ymt006gesqr1nub6pie","category_id":"ckfmf4yof008oesqrbb8mk2rt","_id":"ckfmf4yop0095esqrfaoe90df"},{"post_id":"ckfmf4yoi008uesqr812skzpg","category_id":"ckfmf4yis001oesqrk9j4ccci","_id":"ckfmf4yor0098esqrdmzb8bnj"},{"post_id":"ckfmf4ymv006jesqrs1hnm1zc","category_id":"ckfmf4yof008oesqrbb8mk2rt","_id":"ckfmf4yow009desqrp9w17bal"},{"post_id":"ckfmf4yop0096esqr5mdvz9j3","category_id":"ckfmf4ykg003eesqrt7g576um","_id":"ckfmf4yox009gesqrj1fgonw6"},{"post_id":"ckfmf4yn1006qesqrqp0stfnm","category_id":"ckfmf4yoo0093esqrcvadruvk","_id":"ckfmf4yp0009lesqrju0mnbyp"},{"post_id":"ckfmf4yow009eesqr3yiy9lyn","category_id":"ckfmf4yms006fesqri6j8l0c3","_id":"ckfmf4yp2009oesqrx1c2ix5e"},{"post_id":"ckfmf4yn7006yesqrcmeot0rk","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yp5009tesqrktmcny4r"},{"post_id":"ckfmf4yp1009mesqr32iqg5od","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4yp7009wesqr6svxbt4i"},{"post_id":"ckfmf4yn90073esqrwza4t2is","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4ypc00a1esqrkxezik04"},{"post_id":"ckfmf4yp3009pesqrptlgvx3n","category_id":"ckfmf4ym4005iesqr2jejfd2j","_id":"ckfmf4ype00a4esqrc34tsux9"},{"post_id":"ckfmf4ync0076esqrma72ntmw","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yph00a9esqrfrwzlyc9"},{"post_id":"ckfmf4ynf007aesqrdzxq4j5q","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4ypl00afesqrzlavy5mo"},{"post_id":"ckfmf4ynh007desqr1k93cdc5","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4ypp00amesqrh40fvm4x"},{"post_id":"ckfmf4yni007gesqrawgl0f5a","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4ypt00asesqrgqvxmdd0"},{"post_id":"ckfmf4ynk007jesqrsaoiselh","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4ypw00awesqrum6qmvw7"},{"post_id":"ckfmf4ynm007mesqrj6ie6hbo","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yq100b3esqrzlxp5euf"},{"post_id":"ckfmf4yno007pesqr2yo3ges6","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yq600baesqr11ps8j5e"},{"post_id":"ckfmf4ynp007qesqratv2bwva","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yqa00bgesqrzxyx6d8e"},{"post_id":"ckfmf4ynt007vesqrrb4rhuzk","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yqf00bmesqrr4iedl18"},{"post_id":"ckfmf4ynu007wesqrklj4mgv5","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yqi00bqesqrga11xgcd"},{"post_id":"ckfmf4ynx0080esqrrxzw3xxj","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yqk00buesqr61vh9y74"},{"post_id":"ckfmf4yny0082esqriw18ju1i","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yqn00byesqr6qfxw16j"},{"post_id":"ckfmf4yo10085esqryaih8t1a","category_id":"ckfmf4yov009cesqrvd7lwn1o","_id":"ckfmf4yqp00c2esqr1uhufswf"},{"post_id":"ckfmf4yo30088esqr5zjpuytk","category_id":"ckfmf4yqo00c0esqrzralimil","_id":"ckfmf4yqr00c6esqrybi80edt"},{"post_id":"ckfmf4yo5008besqrec7yykpi","category_id":"ckfmf4yqq00c4esqrl80u888p","_id":"ckfmf4yqt00caesqrdz6wyu0x"},{"post_id":"ckfmf4yo7008eesqrmvsaerov","category_id":"ckfmf4yqs00c8esqr5mj27eq4","_id":"ckfmf4yqx00cfesqrjnhnz3i2"},{"post_id":"ckfmf4yoc008kesqr80xr4an1","category_id":"ckfmf4yqv00ccesqrw1xcxm60","_id":"ckfmf4yqz00cjesqrtfpgcicf"},{"post_id":"ckfmf4yok008yesqruc6qkkyk","category_id":"ckfmf4yqy00chesqr0l0wx59w","_id":"ckfmf4yr100coesqr15cz0ng5"},{"post_id":"ckfmf4yom0091esqr16iq43jv","category_id":"ckfmf4yr000clesqruwkinhwo","_id":"ckfmf4yr400csesqr3k2xw6mi"},{"post_id":"ckfmf4yor0099esqrpj03i7km","category_id":"ckfmf4yr300cqesqrtoxnshdc","_id":"ckfmf4yr500cwesqrlb1t8jqh"},{"post_id":"ckfmf4yoy009hesqrd7ljoec6","category_id":"ckfmf4yr400cuesqreglxk8sv","_id":"ckfmf4yr800d0esqrv5aieafo"},{"post_id":"ckfmf4yp6009uesqropxptmw6","category_id":"ckfmf4yr600cyesqrylzlmgpc","_id":"ckfmf4yr900d3esqr1adx4m54"},{"post_id":"ckfmf4yp8009xesqrxay1dje2","category_id":"ckfmf4yr800d2esqrn0rnj2gz","_id":"ckfmf4yrb00d8esqryexl1tqf"},{"post_id":"ckfmf4ypc00a2esqrbm101l8m","category_id":"ckfmf4yra00d5esqrfipo3ig4","_id":"ckfmf4yre00ddesqr5lzfz2da"},{"post_id":"ckfmf4ype00a5esqrq9hgbygq","category_id":"ckfmf4yrc00daesqrkm8vekt8","_id":"ckfmf4yrg00dhesqrd6nelh7i"},{"post_id":"ckfmf4yph00aaesqr45ujez8k","category_id":"ckfmf4yqq00c4esqrl80u888p","_id":"ckfmf4yri00dlesqr0aujwbxc"},{"post_id":"ckfmf4ypj00acesqrdi18fhtw","category_id":"ckfmf4yrh00djesqrsmtxjft5","_id":"ckfmf4yrj00dpesqrithln8ix"},{"post_id":"ckfmf4ypm00ahesqrmnmxeirl","category_id":"ckfmf4yri00dnesqrcf3b4ofn","_id":"ckfmf4yrm00dtesqrf54vsmy9"},{"post_id":"ckfmf4ypn00ajesqrdsx2hlmr","category_id":"ckfmf4yrk00dresqr8usnv6r0","_id":"ckfmf4yro00dyesqrkrixskko"},{"post_id":"ckfmf4ypq00aoesqr6jrdhf5a","category_id":"ckfmf4yrn00dvesqr431b4xge","_id":"ckfmf4yrq00e2esqr4ci7kmoq"},{"post_id":"ckfmf4yps00aqesqrbaz5cyrv","category_id":"ckfmf4yrp00e0esqrh83by9yl","_id":"ckfmf4yrs00e6esqrue2v0dg1"},{"post_id":"ckfmf4ypu00auesqruuwixpsu","category_id":"ckfmf4yrr00e4esqrfny2acw8","_id":"ckfmf4yru00eaesqryw4swayh"},{"post_id":"ckfmf4ypy00azesqrp4p7m882","category_id":"ckfmf4yrt00e8esqrhh9k2916","_id":"ckfmf4yrw00eeesqrn4aqvtzn"},{"post_id":"ckfmf4yq000b1esqrba9hoqnc","category_id":"ckfmf4yrv00ecesqrkxu9io2x","_id":"ckfmf4yrz00eiesqrreezn3yo"},{"post_id":"ckfmf4yq300b6esqrhgd5ogxa","category_id":"ckfmf4yrx00egesqrd1hiqzkl","_id":"ckfmf4ys100emesqr4b1v8tly"},{"post_id":"ckfmf4yq500b8esqrqp32x5mx","category_id":"ckfmf4yrx00egesqrd1hiqzkl","_id":"ckfmf4ys400eqesqr1ibqh6ku"},{"post_id":"ckfmf4yq700bdesqrtnbcdzmj","category_id":"ckfmf4ys200eoesqrnw92ffyv","_id":"ckfmf4ys700euesqr5qfc47x4"},{"post_id":"ckfmf4yq900bfesqrl8wtfaa3","category_id":"ckfmf4ys500esesqrpqqbmtij","_id":"ckfmf4ys900eyesqrg59zfspp"},{"post_id":"ckfmf4yqb00bjesqr6fo3s963","category_id":"ckfmf4ys800ewesqrgy1ppe2i","_id":"ckfmf4ysb00f2esqr9d5ss5yr"},{"post_id":"ckfmf4yqe00blesqrr64jqxvt","category_id":"ckfmf4ysa00f0esqryadw3n05","_id":"ckfmf4ysc00f5esqrh63pceez"},{"post_id":"ckfmf4ysl00f9esqr6mwnihme","category_id":"ckfmf4yks003tesqr6ntj7bd9","_id":"ckfmf4ysq00fdesqrz1mby32q"},{"post_id":"ckfmf4ysn00faesqrhcmn4qxm","category_id":"ckfmf4yra00d5esqrfipo3ig4","_id":"ckfmf4ysq00feesqrzf5pctzp"},{"post_id":"ckfmf4yta00fgesqrbdlg4uki","category_id":"ckfmf4yne0079esqrbmxw60bt","_id":"ckfmf4ytd00fkesqrei3eynej"},{"post_id":"ckfmf4yt900ffesqryl87f33t","category_id":"ckfmf4ytc00fiesqrtk4y0c7g","_id":"ckfmf4ytf00fmesqr2h8o6x59"},{"post_id":"ckfmf4ypv00avesqr6cqq8csr","category_id":"ckfmf4yi9000tesqrc0qw7sm4","_id":"ckfmf74350001vgqra9s7iavd"},{"post_id":"ckfmf4yip001jesqrfkuqc4v7","category_id":"ckfmf82hw0003vgqrlyaith0f","_id":"ckfmf82hy0005vgqrn2rz5xxl"},{"post_id":"ckfmf4yij001aesqrrqqlkkr9","category_id":"ckfmf82hw0003vgqrlyaith0f","_id":"ckfmf8ugb0007vgqrf10qwose"},{"post_id":"ckfmf4yii0018esqrx914jkea","category_id":"ckfmf9hey0009vgqr01ziulid","_id":"ckfmf9hf0000bvgqr88zlcypf"},{"post_id":"ckfmf4yht000aesqrwusd8so5","category_id":"ckfmf4yks003tesqr6ntj7bd9","_id":"ckfmfajf8000dvgqrs27571kp"},{"post_id":"ckfmfh7eg0001t8qr6fgz14kx","category_id":"ckfmfhueq0003t8qrm07p7aqx","_id":"ckfmfhues0005t8qr3fg6wy08"},{"post_id":"ckfmfhuf60006t8qrjicj8g92","category_id":"ckfmf4yhu000besqrotrumpjt","_id":"ckfmfimfp0008t8qr3ly5dmgg"},{"post_id":"ckfmfere30000t8qr57uss3em","category_id":"ckfmfk5aa0001m8qrtfk5vxr4","_id":"ckfmfk5ad0003m8qrtkxc0n1h"}],"PostTag":[{"post_id":"ckfmf4yhh0002esqrp4zhmree","tag_id":"ckfmf4yho0005esqr7twskyx7","_id":"ckfmf4yhv000cesqrfqseiml9"},{"post_id":"ckfmf4yhm0004esqrbxqq1n6d","tag_id":"ckfmf4yhs0009esqrxx5l0ht9","_id":"ckfmf4yi0000iesqrie2qym7j"},{"post_id":"ckfmf4yhq0007esqrza9fu02f","tag_id":"ckfmf4yhz000gesqrmq9femqa","_id":"ckfmf4yi6000pesqrrzh95691"},{"post_id":"ckfmf4yhr0008esqry50pqgnw","tag_id":"ckfmf4yhz000gesqrmq9femqa","_id":"ckfmf4yid0010esqrby8iwn5e"},{"post_id":"ckfmf4yhr0008esqry50pqgnw","tag_id":"ckfmf4yi8000sesqra75m2cc3","_id":"ckfmf4yif0012esqruddv0p8o"},{"post_id":"ckfmf4yhw000desqrqhvcj5rf","tag_id":"ckfmf4yib000xesqr5g5ww8j5","_id":"ckfmf4yih0017esqr9rcuuty0"},{"post_id":"ckfmf4yhy000fesqr0u44c6k1","tag_id":"ckfmf4yig0014esqr5ddxhh8k","_id":"ckfmf4yil001desqr0uyuxbyb"},{"post_id":"ckfmf4yi0000jesqrusenqvbo","tag_id":"ckfmf4yik001besqrhg8rxny8","_id":"ckfmf4yiq001kesqrzb0lzovj"},{"post_id":"ckfmf4yi1000kesqrgul9b834","tag_id":"ckfmf4yio001hesqrtamhh82y","_id":"ckfmf4yiv001tesqrxnynahwv"},{"post_id":"ckfmf4yi1000kesqrgul9b834","tag_id":"ckfmf4yis001nesqrh130npid","_id":"ckfmf4yiw001vesqryiclvn14"},{"post_id":"ckfmf4yi5000oesqr52n8fhv1","tag_id":"ckfmf4yiu001resqrio101ido","_id":"ckfmf4yiy001zesqrbgtq4uj7"},{"post_id":"ckfmf4yi7000qesqr7vl99173","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yj00023esqr80z7nxxo"},{"post_id":"ckfmf4yi9000uesqr7a3yqrjm","tag_id":"ckfmf4yiz0021esqr9b2mae0b","_id":"ckfmf4yj20027esqr4mgosj22"},{"post_id":"ckfmf4yia000vesqr98n59evz","tag_id":"ckfmf4yj20026esqrvi1rhk8w","_id":"ckfmf4yj4002besqrdgwpp72m"},{"post_id":"ckfmf4yic000zesqruf0ogy01","tag_id":"ckfmf4yj20026esqrvi1rhk8w","_id":"ckfmf4yj6002fesqr5cnbjv3h"},{"post_id":"ckfmf4yie0011esqrzgigu2ib","tag_id":"ckfmf4yj5002desqrk6k26ts8","_id":"ckfmf4yja002mesqrbabjc0sk"},{"post_id":"ckfmf4yie0011esqrzgigu2ib","tag_id":"ckfmf4yj7002hesqry1lgy0p6","_id":"ckfmf4yja002nesqre9ivovso"},{"post_id":"ckfmf4yig0015esqrleowj95b","tag_id":"ckfmf4yj9002kesqr0uhpth7i","_id":"ckfmf4yjd002sesqrg6037n5x"},{"post_id":"ckfmf4yig0015esqrleowj95b","tag_id":"ckfmf4yjb002pesqr36e9boqe","_id":"ckfmf4yjd002tesqr2ai9kvoe"},{"post_id":"ckfmf4yim001eesqrmrbspwpd","tag_id":"ckfmf4yjc002resqrlno64wys","_id":"ckfmf4yje002vesqrcwpgaoey"},{"post_id":"ckfmf4yin001fesqr6n1y2p3z","tag_id":"ckfmf4yjd002uesqrehns5ds4","_id":"ckfmf4yjf002xesqre2ufhawr"},{"post_id":"ckfmf4yir001lesqrp17855au","tag_id":"ckfmf4yje002wesqrd4xzo7ct","_id":"ckfmf4yjg002zesqr8t1bipxr"},{"post_id":"ckfmf4yit001pesqr7fadjpv1","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4yjh0031esqr6ndow0zc"},{"post_id":"ckfmf4yit001pesqr7fadjpv1","tag_id":"ckfmf4yiu001resqrio101ido","_id":"ckfmf4yjh0032esqrsrhtre32"},{"post_id":"ckfmf4yk70033esqrhzuh53gs","tag_id":"ckfmf4yis001nesqrh130npid","_id":"ckfmf4ykb0037esqrly56uszb"},{"post_id":"ckfmf4yk70033esqrhzuh53gs","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4ykd003besqri22135wc"},{"post_id":"ckfmf4ykf003desqrl47mwmjm","tag_id":"ckfmf4yhz000gesqrmq9femqa","_id":"ckfmf4yki003hesqr09xtuhgl"},{"post_id":"ckfmf4yk90035esqrdz6ixgmk","tag_id":"ckfmf4ykd003aesqrjz0jajxs","_id":"ckfmf4ykl003lesqr1o7zu385"},{"post_id":"ckfmf4yk90035esqrdz6ixgmk","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yko003pesqromz79kct"},{"post_id":"ckfmf4ykh003gesqrixxev105","tag_id":"ckfmf4yhz000gesqrmq9femqa","_id":"ckfmf4ykr003sesqrniufzky2"},{"post_id":"ckfmf4yke003cesqrbr0lx97a","tag_id":"ckfmf4ykg003fesqrzf10p1wj","_id":"ckfmf4yku003wesqr1wdonyvn"},{"post_id":"ckfmf4ykm003nesqrnfuw3djq","tag_id":"ckfmf4yhz000gesqrmq9femqa","_id":"ckfmf4ykx0040esqrnd88ji64"},{"post_id":"ckfmf4ykt003vesqrv02qhqcs","tag_id":"ckfmf4ykn003oesqr6jfb4mju","_id":"ckfmf4yl00044esqrewskon9b"},{"post_id":"ckfmf4ykj003jesqryjbrq99m","tag_id":"ckfmf4ykn003oesqr6jfb4mju","_id":"ckfmf4yl30048esqr0596y3z1"},{"post_id":"ckfmf4ykp003resqri0dpneqp","tag_id":"ckfmf4yku003xesqrf86yor7w","_id":"ckfmf4yl7004cesqr2qj730l0"},{"post_id":"ckfmf4ykv003zesqrkvuhyaps","tag_id":"ckfmf4yku003xesqrf86yor7w","_id":"ckfmf4yl9004fesqravkfm1zn"},{"post_id":"ckfmf4yky0043esqrlzrlgt24","tag_id":"ckfmf4yl8004eesqrdutbv747","_id":"ckfmf4ylg004nesqrsg5if7vs"},{"post_id":"ckfmf4ylc004jesqrcl2i9ibi","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4yli004qesqr55xi7cew"},{"post_id":"ckfmf4yle004mesqrgkoeqclm","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4ylm004tesqrjrqhtdlf"},{"post_id":"ckfmf4yl10046esqru8lxhcqj","tag_id":"ckfmf4yld004kesqrndggm7le","_id":"ckfmf4ylp004xesqrf9mb6jir"},{"post_id":"ckfmf4ylh004pesqrhp1s2vsz","tag_id":"ckfmf4yik001besqrhg8rxny8","_id":"ckfmf4yls0051esqr2tg54drw"},{"post_id":"ckfmf4yl5004aesqr546e65i5","tag_id":"ckfmf4yld004kesqrndggm7le","_id":"ckfmf4ylv0055esqrj7bpf85o"},{"post_id":"ckfmf4ylo004wesqrsi0emlq1","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4ylx0058esqr1ayl9rl0"},{"post_id":"ckfmf4yl7004desqrrrnyqaor","tag_id":"ckfmf4ylq004yesqr8p51kuq0","_id":"ckfmf4ylz005cesqruwfpsgb8"},{"post_id":"ckfmf4yly005besqrvnm7dc43","tag_id":"ckfmf4yiu001resqrio101ido","_id":"ckfmf4ym2005fesqrqxduwpos"},{"post_id":"ckfmf4yla004hesqro3co2bwx","tag_id":"ckfmf4ylv0056esqr8egxg5xy","_id":"ckfmf4ym4005jesqrzkggg1v3"},{"post_id":"ckfmf4ym0005desqr18p5t873","tag_id":"ckfmf4yiu001resqrio101ido","_id":"ckfmf4ym7005nesqrm4odsjzs"},{"post_id":"ckfmf4ylk004sesqr8kcwer4f","tag_id":"ckfmf4ym1005eesqr53hcsoqu","_id":"ckfmf4ym9005resqrrv74k7y0"},{"post_id":"ckfmf4ylr0050esqr3rx31tr3","tag_id":"ckfmf4ym6005mesqre5m5mqxm","_id":"ckfmf4ymd005xesqr7lbexi4u"},{"post_id":"ckfmf4ylu0054esqri4anrguk","tag_id":"ckfmf4ymb005uesqrl5y3xkbq","_id":"ckfmf4ymj0063esqr51nyviwr"},{"post_id":"ckfmf4yml0066esqrxk7nplpr","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4ymp006besqr3jn3jzrr"},{"post_id":"ckfmf4ylw0057esqrevc12viq","tag_id":"ckfmf4ymg0060esqrutgdtquy","_id":"ckfmf4ymu006hesqrsvyqko5l"},{"post_id":"ckfmf4ylw0057esqrevc12viq","tag_id":"ckfmf4ymm0067esqrh6d69sol","_id":"ckfmf4ymw006kesqr4ph5clwh"},{"post_id":"ckfmf4ym3005hesqrwn5nntaj","tag_id":"ckfmf4ymq006desqrh9u2claf","_id":"ckfmf4yn0006pesqr3oh3h35n"},{"post_id":"ckfmf4ym5005lesqrfvh20xxa","tag_id":"ckfmf4ymx006lesqr6qjagagl","_id":"ckfmf4yn5006vesqr9twd5ucm"},{"post_id":"ckfmf4yn5006xesqringnaza1","tag_id":"ckfmf4yku003xesqrf86yor7w","_id":"ckfmf4yn80071esqryhzgdtog"},{"post_id":"ckfmf4ym8005pesqrmaxli9e4","tag_id":"ckfmf4yn2006resqrsrm24nir","_id":"ckfmf4ynb0075esqrv7g5kivt"},{"post_id":"ckfmf4yma005tesqrhwkdoqeq","tag_id":"ckfmf4yn7006zesqr39bu0ylo","_id":"ckfmf4yng007besqr174hn84f"},{"post_id":"ckfmf4ymc005vesqrtkcs67w8","tag_id":"ckfmf4ynd0078esqrdzy8vbr9","_id":"ckfmf4ynk007iesqrr88f7e8c"},{"post_id":"ckfmf4yme005zesqrfdik4rmz","tag_id":"ckfmf4ynh007eesqr24dvnjrq","_id":"ckfmf4yno007oesqr58byxezv"},{"post_id":"ckfmf4ymh0061esqr4r9sz0us","tag_id":"ckfmf4ynl007kesqr1xr1hyhq","_id":"ckfmf4yns007uesqrxg66gwq1"},{"post_id":"ckfmf4ymk0065esqrti9e3bfw","tag_id":"ckfmf4ynr007resqra6da49am","_id":"ckfmf4yny0081esqrbcqpl6fj"},{"post_id":"ckfmf4ymo006aesqrhpc3swae","tag_id":"ckfmf4yn7006zesqr39bu0ylo","_id":"ckfmf4yo20086esqr1saoi4pw"},{"post_id":"ckfmf4ymq006cesqr7kcmu5kt","tag_id":"ckfmf4yn7006zesqr39bu0ylo","_id":"ckfmf4yo6008cesqr76wbrnx5"},{"post_id":"ckfmf4ymt006gesqr1nub6pie","tag_id":"ckfmf4yo40089esqru6nws1ep","_id":"ckfmf4yob008jesqryrspmlq2"},{"post_id":"ckfmf4ymv006jesqrs1hnm1zc","tag_id":"ckfmf4yo40089esqru6nws1ep","_id":"ckfmf4yof008pesqrcyv9873o"},{"post_id":"ckfmf4yog008resqrlxmycvqr","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yoj008wesqrw661m1np"},{"post_id":"ckfmf4ymy006nesqrrsszgqmi","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yol008zesqr1z4dgowb"},{"post_id":"ckfmf4ymy006nesqrrsszgqmi","tag_id":"ckfmf4yod008lesqr5uy0jjhu","_id":"ckfmf4yoo0094esqrk7ua0icq"},{"post_id":"ckfmf4yoi008uesqr812skzpg","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yoq0097esqrmy0llwfw"},{"post_id":"ckfmf4yn1006qesqrqp0stfnm","tag_id":"ckfmf4yoh008sesqrysyuga9x","_id":"ckfmf4yov009besqrxc18i32z"},{"post_id":"ckfmf4yop0096esqr5mdvz9j3","tag_id":"ckfmf4ykd003aesqrjz0jajxs","_id":"ckfmf4yox009fesqrjt2u7fg5"},{"post_id":"ckfmf4yn3006tesqro9lv14tn","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yoz009iesqr8287kle6"},{"post_id":"ckfmf4yn3006tesqro9lv14tn","tag_id":"ckfmf4yon0092esqrjd6xvzbi","_id":"ckfmf4yp2009nesqrqua59ldj"},{"post_id":"ckfmf4yow009eesqr3yiy9lyn","tag_id":"ckfmf4ymb005uesqrl5y3xkbq","_id":"ckfmf4yp4009qesqrftvmntu0"},{"post_id":"ckfmf4yn7006yesqrcmeot0rk","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yp7009vesqroe9x5m8r"},{"post_id":"ckfmf4yp1009mesqr32iqg5od","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4ypa009yesqrar2we3ms"},{"post_id":"ckfmf4yn90073esqrwza4t2is","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4ypd00a3esqrjjvf3jzz"},{"post_id":"ckfmf4yp3009pesqrptlgvx3n","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4ypf00a6esqryzxzvnf7"},{"post_id":"ckfmf4ync0076esqrma72ntmw","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4ypi00abesqriyopbuys"},{"post_id":"ckfmf4ypc00a2esqrbm101l8m","tag_id":"ckfmf4yi8000sesqra75m2cc3","_id":"ckfmf4ypj00adesqrchrllrii"},{"post_id":"ckfmf4ynf007aesqrdzxq4j5q","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4ypn00aiesqrgg5yat1m"},{"post_id":"ckfmf4ynh007desqr1k93cdc5","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4ypo00akesqrzhtnnnjf"},{"post_id":"ckfmf4yni007gesqrawgl0f5a","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4ypr00apesqrs962e92k"},{"post_id":"ckfmf4ynk007jesqrsaoiselh","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4ypz00b0esqr378vs6jn"},{"post_id":"ckfmf4ynk007jesqrsaoiselh","tag_id":"ckfmf4yps00aresqrc77i27l6","_id":"ckfmf4yq100b2esqrx5i8w9og"},{"post_id":"ckfmf4ypy00azesqrp4p7m882","tag_id":"ckfmf4yj7002hesqry1lgy0p6","_id":"ckfmf4yq400b7esqrh6athva6"},{"post_id":"ckfmf4ynm007mesqrj6ie6hbo","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yq600b9esqraz1z1zxs"},{"post_id":"ckfmf4yno007pesqr2yo3ges6","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yq800beesqrs393dino"},{"post_id":"ckfmf4ynp007qesqratv2bwva","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yqd00bkesqrhofw12zw"},{"post_id":"ckfmf4ynt007vesqrrb4rhuzk","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yqh00bpesqr07b63pjt"},{"post_id":"ckfmf4ynu007wesqrklj4mgv5","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yqk00btesqrb0sw1gd6"},{"post_id":"ckfmf4ynx0080esqrrxzw3xxj","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yqm00bxesqrep3mpjen"},{"post_id":"ckfmf4yny0082esqriw18ju1i","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yqo00c1esqr2e139eq6"},{"post_id":"ckfmf4yo10085esqryaih8t1a","tag_id":"ckfmf4you009aesqrxwdx1loc","_id":"ckfmf4yqq00c5esqr47othmsl"},{"post_id":"ckfmf4yo30088esqr5zjpuytk","tag_id":"ckfmf4yqp00c3esqrhvjfk2ww","_id":"ckfmf4yqs00c9esqrvm372d7a"},{"post_id":"ckfmf4yo5008besqrec7yykpi","tag_id":"ckfmf4yqr00c7esqrxxdtjjkz","_id":"ckfmf4yqw00cdesqr5h3ozoxz"},{"post_id":"ckfmf4yo5008besqrec7yykpi","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yqx00ceesqrhui1vgi8"},{"post_id":"ckfmf4yo7008eesqrmvsaerov","tag_id":"ckfmf4yqu00cbesqrvtjberwd","_id":"ckfmf4yqz00ciesqr7ekrs2ki"},{"post_id":"ckfmf4yoa008hesqr02we3x44","tag_id":"ckfmf4yjf002yesqrn5jqgra0","_id":"ckfmf4yr100cmesqrax1r3bhv"},{"post_id":"ckfmf4yoa008hesqr02we3x44","tag_id":"ckfmf4yqy00cgesqrb51unyd3","_id":"ckfmf4yr100cnesqrhfn0he9j"},{"post_id":"ckfmf4yoc008kesqr80xr4an1","tag_id":"ckfmf4yr000ckesqr32t0jdvz","_id":"ckfmf4yr300cresqrsfiwgsbu"},{"post_id":"ckfmf4yoe008nesqr0kd91xsu","tag_id":"ckfmf4yr200cpesqr5hws4ey5","_id":"ckfmf4yr500cvesqrrlwgiokk"},{"post_id":"ckfmf4yok008yesqruc6qkkyk","tag_id":"ckfmf4yr400ctesqrhb07ewij","_id":"ckfmf4yr700czesqrgvmec3u1"},{"post_id":"ckfmf4yom0091esqr16iq43jv","tag_id":"ckfmf4yr600cxesqrh7uwcwjz","_id":"ckfmf4yra00d6esqr47zwjc78"},{"post_id":"ckfmf4yom0091esqr16iq43jv","tag_id":"ckfmf4yr800d1esqr7xrwg5yl","_id":"ckfmf4yrb00d7esqrpdp28cle"},{"post_id":"ckfmf4yom0091esqr16iq43jv","tag_id":"ckfmf4yis001nesqrh130npid","_id":"ckfmf4yrd00dbesqrti7hi1ta"},{"post_id":"ckfmf4yor0099esqrpj03i7km","tag_id":"ckfmf4yr900d4esqrr3hws2uo","_id":"ckfmf4yrd00dcesqr8hp8leem"},{"post_id":"ckfmf4yoy009hesqrd7ljoec6","tag_id":"ckfmf4yrc00d9esqrw9ri43t6","_id":"ckfmf4yrf00dgesqrr9we31l5"},{"post_id":"ckfmf4yp6009uesqropxptmw6","tag_id":"ckfmf4yre00deesqroxu7xdy2","_id":"ckfmf4yrh00dkesqrnqmjku3q"},{"post_id":"ckfmf4yp8009xesqrxay1dje2","tag_id":"ckfmf4yrg00diesqr65qbmi3o","_id":"ckfmf4yrj00doesqrt5vzsmoa"},{"post_id":"ckfmf4ype00a5esqrq9hgbygq","tag_id":"ckfmf4yri00dmesqrjwu48pae","_id":"ckfmf4yrl00dsesqry6bd0o8h"},{"post_id":"ckfmf4yph00aaesqr45ujez8k","tag_id":"ckfmf4yqr00c7esqrxxdtjjkz","_id":"ckfmf4yrn00dwesqrq3ztln8t"},{"post_id":"ckfmf4yph00aaesqr45ujez8k","tag_id":"ckfmf4yix001xesqrzw2qu4ij","_id":"ckfmf4yrn00dxesqru13ljx0m"},{"post_id":"ckfmf4ypj00acesqrdi18fhtw","tag_id":"ckfmf4yrm00duesqr2p8otc5i","_id":"ckfmf4yrp00e1esqrnt971hro"},{"post_id":"ckfmf4ypm00ahesqrmnmxeirl","tag_id":"ckfmf4yro00dzesqrmmopsawa","_id":"ckfmf4yrs00e5esqrdj8vpq69"},{"post_id":"ckfmf4ypn00ajesqrdsx2hlmr","tag_id":"ckfmf4yrq00e3esqrjf71h9ws","_id":"ckfmf4yru00e9esqrbpoizp4e"},{"post_id":"ckfmf4ypq00aoesqr6jrdhf5a","tag_id":"ckfmf4yrt00e7esqr1yauvvm4","_id":"ckfmf4yrw00edesqr6t6ykbn8"},{"post_id":"ckfmf4yps00aqesqrbaz5cyrv","tag_id":"ckfmf4yrv00ebesqri74k2q0c","_id":"ckfmf4yry00ehesqr8s47xxth"},{"post_id":"ckfmf4ypu00auesqruuwixpsu","tag_id":"ckfmf4yrx00efesqrdp86lc54","_id":"ckfmf4ys100elesqrx3qgt27a"},{"post_id":"ckfmf4yq000b1esqrba9hoqnc","tag_id":"ckfmf4ys000ejesqr1vx9vccn","_id":"ckfmf4ys300epesqrkd6qoiyq"},{"post_id":"ckfmf4yq300b6esqrhgd5ogxa","tag_id":"ckfmf4ys200enesqrrwkx55b7","_id":"ckfmf4ys600etesqrfb8j0nko"},{"post_id":"ckfmf4yq500b8esqrqp32x5mx","tag_id":"ckfmf4ys200enesqrrwkx55b7","_id":"ckfmf4ys800exesqr0ozcksyj"},{"post_id":"ckfmf4yq700bdesqrtnbcdzmj","tag_id":"ckfmf4ys700evesqr85ii3277","_id":"ckfmf4ysa00f1esqryyo4v1af"},{"post_id":"ckfmf4yq900bfesqrl8wtfaa3","tag_id":"ckfmf4ys900ezesqr1ospz4rn","_id":"ckfmf4ysc00f4esqrib2kwx3k"},{"post_id":"ckfmf4yqb00bjesqr6fo3s963","tag_id":"ckfmf4ysb00f3esqrurhyfgnm","_id":"ckfmf4ysd00f7esqruhpv4lsj"},{"post_id":"ckfmf4yqe00blesqrr64jqxvt","tag_id":"ckfmf4ysc00f6esqr1e1u76et","_id":"ckfmf4ysd00f8esqr8zyvxwzz"},{"post_id":"ckfmf4ysl00f9esqr6mwnihme","tag_id":"ckfmf4ykn003oesqr6jfb4mju","_id":"ckfmf4yso00fbesqrqp7jr9y1"},{"post_id":"ckfmf4ysn00faesqrhcmn4qxm","tag_id":"ckfmf4yi8000sesqra75m2cc3","_id":"ckfmf4ysp00fcesqrnvkg8cfm"},{"post_id":"ckfmf4yta00fgesqrbdlg4uki","tag_id":"ckfmf4yn2006resqrsrm24nir","_id":"ckfmf4ytd00fjesqrg1h4xedy"},{"post_id":"ckfmf4yt900ffesqryl87f33t","tag_id":"ckfmf4ytb00fhesqrjq0lb7wq","_id":"ckfmf4yte00flesqrm7rnlbq8"},{"post_id":"ckfmf4ypv00avesqr6cqq8csr","tag_id":"ckfmf4yib000xesqr5g5ww8j5","_id":"ckfmf74340000vgqro2molplx"},{"post_id":"ckfmf4yip001jesqrfkuqc4v7","tag_id":"ckfmf82hv0002vgqrlmepp0cn","_id":"ckfmf82hy0004vgqr2edfhks7"},{"post_id":"ckfmf4yij001aesqrrqqlkkr9","tag_id":"ckfmf82hv0002vgqrlmepp0cn","_id":"ckfmf8uga0006vgqrfy1mfy20"},{"post_id":"ckfmf4yii0018esqrx914jkea","tag_id":"ckfmf9hex0008vgqraben0oo6","_id":"ckfmf9hez000avgqr5ob01fqe"},{"post_id":"ckfmf4yht000aesqrwusd8so5","tag_id":"ckfmf4ykn003oesqr6jfb4mju","_id":"ckfmfajf7000cvgqrd45fgcnp"},{"post_id":"ckfmfh7eg0001t8qr6fgz14kx","tag_id":"ckfmfhueq0002t8qrp4ibvzv8","_id":"ckfmfhues0004t8qrpr3dgkip"},{"post_id":"ckfmfhuf60006t8qrjicj8g92","tag_id":"ckfmf4yhs0009esqrxx5l0ht9","_id":"ckfmfimfo0007t8qrki8v35oy"},{"post_id":"ckfmfere30000t8qr57uss3em","tag_id":"ckfmfk5a90000m8qr0lc4vs1l","_id":"ckfmfk5ae0004m8qrh7zw56ig"},{"post_id":"ckfmfere30000t8qr57uss3em","tag_id":"ckfmfk5ac0002m8qrkueash90","_id":"ckfmfk5af0005m8qrt4pvczfc"}],"Tag":[{"name":"字节码","_id":"ckfmf4yho0005esqr7twskyx7"},{"name":"spring","_id":"ckfmf4yhs0009esqrxx5l0ht9"},{"name":"docker","_id":"ckfmf4yhz000gesqrmq9femqa"},{"name":"zookeeper","_id":"ckfmf4yi8000sesqra75m2cc3"},{"name":"数据结构","_id":"ckfmf4yib000xesqr5g5ww8j5"},{"name":"GC","_id":"ckfmf4yig0014esqr5ddxhh8k"},{"name":"性能调优","_id":"ckfmf4yik001besqrhg8rxny8"},{"name":"Mybatis","_id":"ckfmf4yio001hesqrtamhh82y"},{"name":"设计模式","_id":"ckfmf4yis001nesqrh130npid"},{"name":"jvm","_id":"ckfmf4yiu001resqrio101ido"},{"name":"mysql","_id":"ckfmf4yix001xesqrzw2qu4ij"},{"name":"Markdown","_id":"ckfmf4yiz0021esqr9b2mae0b"},{"name":"Netty","_id":"ckfmf4yj20026esqrvi1rhk8w"},{"name":"RabbitMQ","_id":"ckfmf4yj5002desqrk6k26ts8"},{"name":"消息队列","_id":"ckfmf4yj7002hesqry1lgy0p6"},{"name":"Pinpoint","_id":"ckfmf4yj9002kesqr0uhpth7i"},{"name":"链路追踪","_id":"ckfmf4yjb002pesqr36e9boqe"},{"name":"网关","_id":"ckfmf4yjc002resqrlno64wys"},{"name":"angularjs2","_id":"ckfmf4yjd002uesqrehns5ds4"},{"name":"面试题","_id":"ckfmf4yje002wesqrd4xzo7ct"},{"name":"java","_id":"ckfmf4yjf002yesqrn5jqgra0"},{"name":"Stored Procedure","_id":"ckfmf4ykd003aesqrjz0jajxs"},{"name":"编译原理","_id":"ckfmf4ykg003fesqrzf10p1wj"},{"name":"dubbo","_id":"ckfmf4ykn003oesqr6jfb4mju"},{"name":"随笔","_id":"ckfmf4yku003xesqrf86yor7w"},{"name":"微信小程序","_id":"ckfmf4yl8004eesqrdutbv747"},{"name":"Hexo","_id":"ckfmf4yld004kesqrndggm7le"},{"name":"hexo","_id":"ckfmf4ylq004yesqr8p51kuq0"},{"name":"汇编语言","_id":"ckfmf4ylv0056esqr8egxg5xy"},{"name":"java泛型","_id":"ckfmf4ym1005eesqr53hcsoqu"},{"name":"CI","_id":"ckfmf4ym6005mesqre5m5mqxm"},{"name":"其他","_id":"ckfmf4ymb005uesqrl5y3xkbq"},{"name":"jQuery","_id":"ckfmf4ymg0060esqrutgdtquy"},{"name":"iframe","_id":"ckfmf4ymm0067esqrh6d69sol"},{"name":"里约","_id":"ckfmf4ymq006desqrh9u2claf"},{"name":"Lua","_id":"ckfmf4ymx006lesqr6qjagagl"},{"name":"Linux","_id":"ckfmf4yn2006resqrsrm24nir"},{"name":"maven","_id":"ckfmf4yn7006zesqr39bu0ylo"},{"name":"mac","_id":"ckfmf4ynd0078esqrdzy8vbr9"},{"name":"markdown","_id":"ckfmf4ynh007eesqr24dvnjrq"},{"name":"mongodb","_id":"ckfmf4ynl007kesqr1xr1hyhq"},{"name":"网站","_id":"ckfmf4ynr007resqra6da49am"},{"name":"mybatis","_id":"ckfmf4yo40089esqru6nws1ep"},{"name":"索引","_id":"ckfmf4yod008lesqr5uy0jjhu"},{"name":"NBA","_id":"ckfmf4yoh008sesqrysyuga9x"},{"name":"Transaction","_id":"ckfmf4yon0092esqrjd6xvzbi"},{"name":"node","_id":"ckfmf4you009aesqrxwdx1loc"},{"name":"Express","_id":"ckfmf4yps00aresqrc77i27l6"},{"name":"异常","_id":"ckfmf4yqp00c3esqrhvjfk2ww"},{"name":"maxwell","_id":"ckfmf4yqr00c7esqrxxdtjjkz"},{"name":"神舟飞船","_id":"ckfmf4yqu00cbesqrvtjberwd"},{"name":"servlet","_id":"ckfmf4yqy00cgesqrb51unyd3"},{"name":"社会","_id":"ckfmf4yr000ckesqr32t0jdvz"},{"name":"spring batch","_id":"ckfmf4yr200cpesqr5hws4ey5"},{"name":"sublime text","_id":"ckfmf4yr400ctesqrhb07ewij"},{"name":"starUML","_id":"ckfmf4yr600cxesqrh7uwcwjz"},{"name":"GoF","_id":"ckfmf4yr800d1esqr7xrwg5yl"},{"name":"svn","_id":"ckfmf4yr900d4esqrr3hws2uo"},{"name":"vim","_id":"ckfmf4yrc00d9esqrw9ri43t6"},{"name":"xpath","_id":"ckfmf4yre00deesqroxu7xdy2"},{"name":"游戏","_id":"ckfmf4yrg00diesqr65qbmi3o"},{"name":"jps","_id":"ckfmf4yri00dmesqrjwu48pae"},{"name":"工作","_id":"ckfmf4yrm00duesqr2p8otc5i"},{"name":"RPC","_id":"ckfmf4yro00dzesqrmmopsawa"},{"name":"小程序","_id":"ckfmf4yrq00e3esqrjf71h9ws"},{"name":"如何替换 JDK 的类","_id":"ckfmf4yrt00e7esqr1yauvvm4"},{"name":"知识","_id":"ckfmf4yrv00ebesqri74k2q0c"},{"name":"学习","_id":"ckfmf4yrx00efesqrdp86lc54"},{"name":"深克隆","_id":"ckfmf4ys000ejesqr1vx9vccn"},{"name":"类装载","_id":"ckfmf4ys200enesqrrwkx55b7"},{"name":"系统性能","_id":"ckfmf4ys700evesqr85ii3277"},{"name":"缓存","_id":"ckfmf4ys900ezesqr1ospz4rn"},{"name":"springboot","_id":"ckfmf4ysb00f3esqrurhyfgnm"},{"name":"问题","_id":"ckfmf4ysc00f6esqr1e1u76et"},{"name":"Java字节码","_id":"ckfmf4ytb00fhesqrjq0lb7wq"},{"name":"Spring","_id":"ckfmf82hv0002vgqrlmepp0cn"},{"name":"Redis","_id":"ckfmf9hex0008vgqraben0oo6"},{"name":"Appollo","_id":"ckfmfhueq0002t8qrp4ibvzv8"},{"name":"MYSQL","_id":"ckfmfk5a90000m8qr0lc4vs1l"},{"name":"数据库","_id":"ckfmfk5ac0002m8qrkueash90"}]}}